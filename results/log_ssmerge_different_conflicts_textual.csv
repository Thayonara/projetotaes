file;linedbasedConf
/home/paper219/Desktop/analysis/demonstration/projects/BottomBar/revisions/rev_9f16fe4_dbbaa12/rev_9f16fe4-dbbaa12/bottom-bar/src/main/java/com/roughike/bottombar/BottomBar.java;<<<<<<< MINE
    private Context mContext;
    private boolean mIsTabletMode;

    private RelativeLayout mRootView;
    private FrameLayout mUserContentContainer;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/BottomBar/revisions/rev_9f16fe4_dbbaa12/rev_9f16fe4-dbbaa12/bottom-bar/src/main/java/com/roughike/bottombar/BottomBar.java;<<<<<<< MINE
        mScreenWidth = MiscUtils.getScreenWidth(mContext);
        mTwoDp = MiscUtils.dpToPixel(mContext, 2);
        mTenDp = MiscUtils.dpToPixel(mContext, 10);
        mMaxFixedItemWidth = MiscUtils.dpToPixel(mContext, 168);
=======
        mPrimaryColor = MiscUtils.getColor(getContext(), R.attr.colorPrimary);
        mInActiveColor = ContextCompat.getColor(getContext(), R.color.bb_inActiveBottomBarItemColor);
        mWhiteColor = ContextCompat.getColor(getContext(), R.color.white);

        mTwoDp = MiscUtils.dpToPixel(getContext(), 2);
        mTenDp = MiscUtils.dpToPixel(getContext(), 10);
        mMaxFixedItemWidth = MiscUtils.dpToPixel(getContext(), 168);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/BottomBar/revisions/rev_9f16fe4_dbbaa12/rev_9f16fe4-dbbaa12/bottom-bar/src/main/java/com/roughike/bottombar/BottomBar.java;<<<<<<< MINE

        mRootView = (RelativeLayout) View.inflate(mContext,
                R.layout.bb_bottom_bar_item_container, null);

        mIsTabletMode = mRootView.findViewById(R.id.bb_tablet_right_border) != null;
        mUserContentContainer = (FrameLayout) mRootView.findViewById(R.id.bb_user_content_container);
        mItemContainer = (LinearLayout) mRootView.findViewById(R.id.bb_bottom_bar_item_container);

        addView(mRootView, params);
    }

    protected FrameLayout getUserContainer() {
        return mUserContentContainer;
    }

    /**
     * Bind the BottomBar to your Activity, and inflate your layout here.
     * <p/>
     * Remember to also call {@link #onRestoreInstanceState(Bundle)} inside
     * of your {@link Activity#onSaveInstanceState(Bundle)} to restore the state.
     *
     * @param activity           an Activity to attach to.
     * @param savedInstanceState a Bundle for restoring the state on configuration change.
     * @return a BottomBar at the bottom of the screen.
     */
    public static BottomBar attach(Activity activity, Bundle savedInstanceState) {
        BottomBar bottomBar = new BottomBar(activity);
        bottomBar.onRestoreInstanceState(savedInstanceState);

        ViewGroup contentView = (ViewGroup) activity.findViewById(android.R.id.content);
        View oldLayout = contentView.getChildAt(0);
        contentView.removeView(oldLayout);

        bottomBar.getUserContainer()
                .addView(oldLayout, oldLayout.getLayoutParams());
        contentView.addView(bottomBar, 0);

        return bottomBar;
    }

    /**
     * Bind the BottomBar to the specified View's parent, and inflate
     * your layout there. Useful when the BottomBar overlaps some content
     * that shouldn't be overlapped.
     * <p/>
     * Remember to also call {@link #onRestoreInstanceState(Bundle)} inside
     * of your {@link Activity#onSaveInstanceState(Bundle)} to restore the state.
     *
     * @param view               a View, which parent we're going to attach to.
     * @param savedInstanceState a Bundle for restoring the state on configuration change.
     * @return a BottomBar at the bottom of the screen.
     */
    public static BottomBar attach(View view, Bundle savedInstanceState) {
        BottomBar bottomBar = new BottomBar(view.getContext());
        bottomBar.onRestoreInstanceState(savedInstanceState);

        ViewGroup contentView = (ViewGroup) view.getParent();

        if (contentView != null) {
            View oldLayout = contentView.getChildAt(0);
            contentView.removeView(oldLayout);

            bottomBar.getUserContainer()
                    .addView(oldLayout, oldLayout.getLayoutParams());
            contentView.addView(bottomBar, 0);
        } else {
            bottomBar.getUserContainer()
                    .addView(view, view.getLayoutParams());
        }

        return bottomBar;
=======
        mItemContainer = (LinearLayout) View.inflate(getContext(), R.layout.bb_bottom_bar_item_container, null);
        addView(mItemContainer, params);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/BottomBar/revisions/rev_9f16fe4_dbbaa12/rev_9f16fe4-dbbaa12/bottom-bar/src/main/java/com/roughike/bottombar/BottomBar.java;<<<<<<< MINE
    private void onRestoreInstanceState(Bundle savedInstanceState) {
        if (savedInstanceState != null) {
            mCurrentTabPosition = savedInstanceState.getInt(STATE_CURRENT_SELECTED_TAB, -1);

            if (mCurrentTabPosition == -1) {
                mCurrentTabPosition = 0;
                Log.e("BottomBar", "You must override the Activity's onSave" +
                        "InstanceState(Bundle outState) and call BottomBar.onSaveInstanc" +
                        "eState(outState) there to restore the state properly.");
            }
        }
    }

    private void selectTab(View bottomBarView, boolean animate) {
=======
    private void selectTab(ViewGroup bottomBarView, boolean animate) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/BottomBar/revisions/rev_aa164a0_7f0c347/rev_aa164a0-7f0c347/bottom-bar/src/main/java/com/roughike/bottombar/scrollsweetness/BottomNavigationBehavior.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/BottomBar/revisions/rev_aa164a0_7f0c347/rev_aa164a0-7f0c347/bottom-bar/src/main/java/com/roughike/bottombar/scrollsweetness/BottomNavigationBehavior.java;<<<<<<< MINE
=======
                if (ViewCompat.getTranslationY(child) != 0) return;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/BottomBar/revisions/rev_aa164a0_7f0c347/rev_aa164a0-7f0c347/bottom-bar/src/main/java/com/roughike/bottombar/scrollsweetness/BottomNavigationBehavior.java;<<<<<<< MINE
                int targetPadding = (mSnackbarHeight +  mBottomNavHeight - mDefaultOffset);
=======
                if (ViewCompat.getTranslationY(child) != 0) return;
                int targetPadding = (mSnackbarHeight + mBottomNavHeight - mDefaultOffset);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/BottomBar/revisions/rev_5037560_3a21a54/rev_5037560-3a21a54/bottom-bar/src/main/java/com/roughike/bottombar/MiscUtils.java;<<<<<<< MINE
import android.widget.LinearLayout;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_52d21ee_0cd5aaf/rev_52d21ee-0cd5aaf/modules/swagger-oauth2-auth-server/src/main/scala/com/wordnik/swagger/auth/service/TokenScope.java;<<<<<<< MINE
  public static void setUserId(Long userId) {
    userThreadLocal.set(userId);
=======
  public static void setUsername(String username) {
    userThreadLocal.set(username);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_52d21ee_0cd5aaf/rev_52d21ee-0cd5aaf/modules/swagger-oauth2-auth-server/src/main/scala/com/wordnik/swagger/auth/service/TokenScope.java;<<<<<<< MINE
  public static Long getUsername() {
    return (Long)userThreadLocal.get();
=======
  public static String getUsername() {
    return (String)userThreadLocal.get();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_52d21ee_0cd5aaf/rev_52d21ee-0cd5aaf/modules/swagger-oauth2-auth-server/src/main/scala/com/wordnik/swagger/auth/service/TokenScope.java;<<<<<<< MINE
  public static void unsetUserId() {
=======
  public static void unsetUsername() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7d577f8_a748922/rev_7d577f8-a748922/modules/swagger-oauth2-auth-server/src/main/scala/com/wordnik/swagger/auth/service/TokenScope.java;<<<<<<< MINE
  public static void setUserId(Long userId) {
    userThreadLocal.set(userId);
=======
  public static void setUsername(String username) {
    userThreadLocal.set(username);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7d577f8_a748922/rev_7d577f8-a748922/modules/swagger-oauth2-auth-server/src/main/scala/com/wordnik/swagger/auth/service/TokenScope.java;<<<<<<< MINE
  public static Long getUserId() {
    return (Long)userThreadLocal.get();
=======
  public static String getUsername() {
    return (String)userThreadLocal.get();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7d577f8_a748922/rev_7d577f8-a748922/modules/swagger-oauth2-auth-server/src/main/scala/com/wordnik/swagger/auth/service/TokenScope.java;<<<<<<< MINE
  public static void unsetUserId() {
=======
  public static void unsetUsername() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_5369ed1_0b9b59c/rev_5369ed1-0b9b59c/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/resource/QueryResultBean.java;<<<<<<< MINE
=======
/**
 *  Copyright 2013 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.resource;

import javax.ws.rs.*;

public class QueryResultBean {
  @QueryParam("skip")
  private Integer skip;

  @QueryParam("limit")
  private Integer limit;


  public Integer getSkip() {
    return skip;
  }
  public void setSkip(Integer skip) {
    this.skip = skip;
  }

  public Integer getLimit() {
    return limit;
  }
  public void setLimit(Integer limit) {
    this.limit = limit;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiResponse.java;<<<<<<< MINE
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

=======
import java.lang.annotation.*;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiResponse.java;<<<<<<< MINE
 * An ApiResponse represents a type of response from a server.  This can be used to
 * describe both success codes as well as errors.
 * If your Api has different response classes, you can describe them here by associating
 * a response class with a response code.  Note, Swagger does not allow multiple response
 * types for a single response code.
=======
 * Describes a possible response of an operation.
 * <p/>
 * This can be used to describe possible success and error codes from your REST API call.
 * You may or may not use this to describe the return type of the operation (normally a
 * successful code), but the successful response should be described as well using the
 * {@link ApiOperation}.
 * <p/>
 * If your API has uses a different response class for these responses, you can describe them
 * here by associating a response class with a response code.
 * Note, Swagger does not allow multiple response types for a single response code.
 * <p/>
 * This annotation is not used directly and will not be parsed by Swagger. It should be used
 * within the {@link ApiResponses}.
 *
 * @see ApiOperation
 * @see ApiResponses
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiResponse.java;<<<<<<< MINE
=======
@Inherited
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiResponse.java;<<<<<<< MINE
  /** Response code to describe */
  int code();

  /** Human-readable message to accompany the response */
  String message();

  /** Optional response class to describe the payload of the message */
  Class<?> response() default Void.class;
=======
    /**
     * The HTTP status code of the response.
     * <p/>
     * The value should be one of the formal <a target="_blank" href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">HTTP Status Code Definitions</a>.
     */
    int code();

    /**
     * Human-readable message to accompany the response.
     */
    String message();

    /**
     * Optional response class to describe the payload of the message.
     * <p/>
     * Corresponds to the `responseModel` field of the response message object.
     */
    Class<?> response() default Void.class;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
=======
import java.lang.annotation.*;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
 * Describes an operation or typically a HTTP method against a specific path.  Operations
 * with equivalent paths are grouped in an array in the Api Declaration.  See
 * https://github.com/wordnik/swagger-core/wiki/API-Declaration
=======
 * Describes an operation or typically a HTTP method against a specific path.
 * <p/>
 * Operations with equivalent paths are grouped in an array in the Api Declaration.
 * A combination of a HTTP method and a path creates a unique operation.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
=======
@Inherited
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
  /** Brief description of the operation  */
  String value();

  /** long description of the operation */
  String notes() default "";

  /** default response class from the operation */
  Class<?> response() default Void.class;

  /** if the response class is within a container, specify it here */
  String responseContainer() default "";

  /** currently not implemented in readers, reserved for future use */
  String tags() default "";

  /** the HTTP method, i.e GET, PUT, POST, DELETE, PATCH, OPTIONS */
  String httpMethod() default "";

  /** allow explicit ordering of operations inside the Api Declaration */
  int position() default 0;

  /** the nickname for the operation, to override what is detected by the annotation scanner */
  String nickname() default "";
  
  /** content type produced by this Api */
  String produces() default "";

  /** media type consumed by this Api */
  String consumes() default "";

  /** protocols that this Api requires (i.e. https) */
  String protocols() default "";

  /** authorizations required by this Api */
  //String authorizations() default "";

  /** authorizations required by this Api */
  Authorization[] authorizations() default @Authorization("");

  /**
   * Allows an operation to be marked as hidden
   */
  boolean hidden() default false;
=======
    /**
     * Corresponds to the `summary` field of the operation.
     * <p/>
     * Provides a brief description of this operation. Should be 120 characters or less
     * for proper visibility in Swagger-UI.
     */
    String value();

    /**
     * Corresponds to the 'notes' field of the operation.
     * <p/>
     * A verbose description of the operation.
     */
    String notes() default "";

    /**
     * The response type of the operation.
     * <p/>
     * In JAX-RS applications, the return type of the method would automatically be used, unless it is
     * {@code javax.ws.rs.core.Response}. In that case, the operation return type would default to `void`
     * as the actual response type cannot be known.
     * <p/>
     * Setting this property would override any automatically-derived data type.
     * <p/>
     * If the value used is a class representing a primitive ({@code Integer}, {@code Long}, ...)
     * the corresponding primitive type will be used.
     */
    Class<?> response() default Void.class;

    /**
     * Notes whether the response type is a list of values.
     * <p/>
     * Valid values are "List", "Array" and "Set". "List" and "Array" are regular lists (no
     * difference between them), and "Set" means the list contains unique values only.
     * <p/>
     * Any other value will be ignored.
     */
    String responseContainer() default "";

    /**
     * Currently not implemented in readers, reserved for future use.
     */
    String tags() default "";

    /**
     * Corresponds to the `method` field as the HTTP method used.
     * <p/>
     * If not stated, in JAX-RS applications, the following JAX-RS annotations would be scanned
     * and used: {@code @GET}, {@code @HEAD}, {@code @POST}, {@code @PUT}, {@code @DELETE} and {@code @OPTIONS}.
     * Note that even though not part of the JAX-RS specification, if you create and use the {@code @PATCH} annotation,
     * it will also be parsed and used. If the httpMethod property is set, it will override the JAX-RS annotation.
     * <p/>
     * For Servlets, you must specify the HTTP method manually.
     * <p/>
     * Acceptable values are "GET", "HEAD", "POST", "PUT", "DELETE", "OPTIONS" and "PATCH".
     */
    String httpMethod() default "";

    /**
     * Optional explicit ordering of this API resource in the Resource Listing.
     */
    int position() default 0;

    /**
     * Corresponds to the `nickname` field.
     * <p/>
     * The nickname field is used by third-party tools to uniquely identify this operation. In JAX-RS environemnt, this
     * would default to the method name, but can be overridden.
     * <p/>
     * For Servlets, you must specify this field.
     */
    String nickname() default "";

    /**
     * Corresponds to the `produces` field of the operation.
     * <p/>
     * Takes in comma-separated values of content types.
     * For example, "application/json, application/xml" would suggest this API Resource
     * generates JSON and XML output.
     * <p/>
     * For JAX-RS resources, this would automatically take the value of the {@code @Produces}
     * annotation if such exists. It can also be used to override the {@code @Produces} values
     * for the Swagger documentation.
     */
    String produces() default "";

    /**
     * Corresponds to the `consumes` field of the operation.
     * <p/>
     * Takes in comma-separated values of content types.
     * For example, "application/json, application/xml" would suggest this API Resource
     * accepts JSON and XML input.
     * <p/>
     * For JAX-RS resources, this would automatically take the value of the {@code @Consumes}
     * annotation if such exists. It can also be used to override the {@code @Consumes} values
     * for the Swagger documentation.
     */
    String consumes() default "";

    /**
     * This property is currently not in use.
     */
    String protocols() default "";

    /**
     * Corresponds to the `authorizations` field of the operation.
     * <p/>
     * Takes in a list of the required authorizations for this operation.
     *
     * @see Authorization
     */
    Authorization[] authorizations() default @Authorization("");

    /**
     * Hides the operation from the list of operations.
     */
    boolean hidden() default false;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/** 
 * An ApiModelProperty desecribes a property inside a model class.  The annotations can
 * apply to a method, a property, etc., depending on how the model scanner is configured and
 * used.
=======
import java.lang.annotation.*;

/**
 * Adds and manipulates data of a model property.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
=======
@Inherited
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
  /** Provide a human readable synopsis of this property */
  String value() default "";

  /**
   * If the values that can be set are restricted, they can be set here. In the form of a comma separated list
   * <code>registered, active, closed</code>.
   *
   * @return the allowable values
   */
  String allowableValues() default "";

  /** 
   * specify an optional access value for filtering in a Filter 
   * implementation.  This
   * allows you to hide certain parameters if a user doesn't have access to them
   */
  String access() default "";

  /** long description of the property */
  String notes() default "";

  /**
   * The dataType. See the documentation for the supported datatypes. If the data type is a custom object, set
   * it's name, or nothing. In case of an enum use 'string' and allowableValues for the enum constants.
   */
  String dataType() default "";

  /**
   * Whether or not the property is required, defaults to false.
   * 
   * @return true if required, false otherwise
   */
  boolean required() default false;

  /**
   * allows explicitly ordering the property in the model.  Since reflection has no guarantee on
   * ordering, you should specify property order to keep models consistent across different VM implementations and versions.
   */
  int position() default 0;
  
  /**
   * Allows a model property to be marked as hidden in the swagger model definition
   */
  boolean hidden() default false;
=======
    /**
     * A brief description of this property.
     */
    String value() default "";

    /**
     * Limits the acceptable values for this property.
     * <p/>
     * There are three ways to describe the allowable values:
     * <ol>
     * <li>To set a list of values, provide a comma-separated list surrounded by square brackets.
     * For example: {@code [first, second, third]}.</li>
     * <li>To set a range of values, start the value with "range", and surrounding by square
     * brackets include the minimum and maximum values. For example: {@code range[1, 5]}.</li>
     * <li>To set a minimum/maximum value, use the same format for range but use "infinity"
     * or "-infinity" as the second value. For example, {@code range[1, infinity]} means the
     * minimum allowable value of this parameter is 1.</li>
     * </ol>
     */
    String allowableValues() default "";

    /**
     * Allows for filtering a property from the API documentation.
     *
     * @see com.wordnik.swagger.core.filter.SwaggerSpecFilter
     */
    String access() default "";

    /**
     * Currently not in use.
     */
    String notes() default "";

    /**
     * The data type of the parameter.
     * <p/>
     * This can be the class name or a primitive. The value will override the data type as read from the class
     * property.
     */
    String dataType() default "";

    /**
     * Specifies if the parameter is required or not.
     */
    boolean required() default false;

    /**
     * Allows explicitly ordering the property in the model.
     */
    int position() default 0;

    /**
     * Allows a model property to be hidden in the Swagger model definition.
     */
    boolean hidden() default false;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
=======
import java.lang.annotation.*;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
 * Represents a single parameter in an Api Operation.  A parameter is an input
 * to the operation.  The difference with the ApiImplicitParam is that they are
 * not bound to a variable, and allow for more manually-defined descriptions.
=======
 * Represents a single parameter in an API Operation.
 * <p/>
 * While {@link com.wordnik.swagger.annotations.ApiParam} is bound to a JAX-RS parameter,
 * method or field, this allows you to manually define a parameter in a fine-tuned manner.
 * This is the only way to define parameters when using Servlets or other non-JAX-RS
 * environments.
 * <p/>
 * This annotation must be used as a value of {@link com.wordnik.swagger.annotations.ApiImplicitParams}
 * in order to be parsed.
 *
 * @see com.wordnik.swagger.annotations.ApiImplicitParams
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
=======
@Inherited
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
  /** Name of the parameter */
  String name() default "";

  /** Description of the parameter */
  String value() default "";

  /** Default value  - if e.g. no JAX-RS @DefaultValue is given */
  String defaultValue() default "";

  /** Description of values this endpoint accepts */
  String allowableValues() default "";

  /** specifies if the parameter is required or not */
  boolean required() default false;

  /** 
   * specify an optional access value for filtering in a Filter 
   * implementation.  This
   * allows you to hide certain parameters if a user doesn't have access to them
   */
  String access() default "";

  /** specifies whether or not the parameter can have multiple values provided */
  boolean allowMultiple() default false;

  /** manually set the dataType */
  String dataType() default "";

  /** manually set the param type, i.e. query, path, etc. */
  String paramType() default "";
=======
    /**
     * Name of the parameter.
     * <p/>
     * For proper Swagger functionality, follow these rules when naming your parameters based on {@link #paramType()}:
     * <ol>
     * <li>If {@code paramType} is "path", the name should be the associated section in the path.</li>
     * <li>If {@code paramType} is "body", the name should be "body".</li>
     * <li>For all other cases, the name should be the parameter name as your application expects to accept.</li>
     * </ol>
     *
     * @see #paramType()
     */
    String name() default "";

    /**
     * A brief description of the parameter.
     */
    String value() default "";

    /**
     * Describes the default value for the parameter.
     */
    String defaultValue() default "";

    /**
     * Limits the acceptable values for this parameter.
     * <p/>
     * There are three ways to describe the allowable values:
     * <ol>
     * <li>To set a list of values, provide a comma-separated list surrounded by square brackets.
     * For example: {@code [first, second, third]}.</li>
     * <li>To set a range of values, start the value with "range", and surrounding by square
     * brackets include the minimum and maximum values. For example: {@code range[1, 5]}.</li>
     * <li>To set a minimum/maximum value, use the same format for range but use "infinity"
     * or "-infinity" as the second value. For example, {@code range[1, infinity]} means the
     * minimum allowable value of this parameter is 1.</li>
     * </ol>
     */
    String allowableValues() default "";

    /**
     * Specifies if the parameter is required or not.
     * <p/>
     * Path parameters should always be set as required.
     */
    boolean required() default false;

    /**
     * Allows for filtering a parameter from the API documentation.
     *
     * @see com.wordnik.swagger.core.filter.SwaggerSpecFilter
     */
    String access() default "";

    /**
     * Specifies whether the parameter can accept multiple comma-separated values.
     */
    boolean allowMultiple() default false;

    /**
     * The data type of the parameter.
     * <p/>
     * This can be the class name or a primitive.
     */
    String dataType() default "";

    /**
     * The parameter type of the parameter.
     *
     * Valid values are {@code path}, {@code query}, {@code body}, {@code header} or {@code form}.
     */
    String paramType() default "";
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParams.java;<<<<<<< MINE
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
=======
import java.lang.annotation.*;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParams.java;<<<<<<< MINE
 * A simple array wrapper to contain multiple ApiImplicitParam objects
=======
 * A wrapper to allow a list of multiple {@link com.wordnik.swagger.annotations.ApiImplicitParam} objects.
 *
 * @see com.wordnik.swagger.annotations.ApiImplicitParam
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParams.java;<<<<<<< MINE
=======
@Inherited
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParams.java;<<<<<<< MINE
  ApiImplicitParam[] value();
=======
    /**
     * A list of {@link com.wordnik.swagger.annotations.ApiImplicitParam}s available to the API operation.
     */
    ApiImplicitParam[] value();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java;<<<<<<< MINE
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
=======
import java.lang.annotation.*;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java;<<<<<<< MINE
 * A bean class used in the REST-api.
 * Suppose you have an interface
 * <code>@PUT @ApiOperation(...) void foo(FooBean fooBean)</code>, there is
 * no direct way to see what fields <code>FooBean</code> would have. This
 * annotation is meant to give a description of <code>FooBean</code> and
 * then have the fields of it be annotated with
 * <code>@ApiModelProperty</code>.
 *
 * @author Heiko W. Rupp
=======
 * Provides additional information about Swagger models.
 * <p/>
 * Classes will be introspected automatically as they are used as types in operations,
 * but you may want to manipulate the structure of the models.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java;<<<<<<< MINE
=======
@Inherited
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java;<<<<<<< MINE
  /** Provide a synopsis of this class */
  String value() default "";
  /** Provide a longer description of the class */
  String description() default "";
  /** Provide a superclass for the model to allow describing inheritence */
  Class<?> parent() default Void.class;
  /** for models with a base class, a discriminator can be provided for polymorphic use cases */
  String discriminator() default "";
  Class<?>[] subTypes() default {};
=======
    /**
     * Provide an alternative name for the model.
     * <p/>
     * By default, the class name is used.
     */
    String value() default "";

    /**
     * Provide a longer description of the class.
     */
    String description() default "";

    /**
     * Provide a superclass for the model to allow describing inheritance.
     */
    Class<?> parent() default Void.class;

    /**
     * Supports model inheritance and polymorphism.
     * <p/>
     * This is the name of the field used as a discriminator. Based on this field,
     * it would be possible to assert which sub type needs to be used.
     */
    String discriminator() default "";

    /**
     * An array of the sub types inheriting from this model.
     */
    Class<?>[] subTypes() default {};
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiResponses.java;<<<<<<< MINE
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
=======
import java.lang.annotation.*;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiResponses.java;<<<<<<< MINE
 * A simple array wrapper to contain multiple ApiResponse objects
=======
 * A wrapper to allow a list of multiple {@link com.wordnik.swagger.annotations.ApiResponse} objects.
 * <p/>
 * If you need to describe a single {@link com.wordnik.swagger.annotations.ApiResponse}, you still
 * must use this annotation and wrap the {@code @ApiResponse} in an array.
 *
 * @see com.wordnik.swagger.annotations.ApiResponse
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiResponses.java;<<<<<<< MINE
=======
@Inherited
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiResponses.java;<<<<<<< MINE
  ApiResponse[] value();
=======
    /**
     * A list of {@link com.wordnik.swagger.annotations.ApiResponse}s provided by the API operation.
     */
    ApiResponse[] value();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
=======
import java.lang.annotation.*;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
 * describes a top-level api.  Classes with @Api annotations will
 * be included in the Resource Listing: https://github.com/wordnik/swagger-core/wiki/Resource-Listing
 * for details
=======
 * Marks a class as a Swagger resource.
 * <p/>
 * The resource affects both the root document of Swagger, the Resource
 * Listing, and the API Declaration of that specific resource.
 * <p/>
 * Swagger will only include and introspect only classes that are annotated
 * with {@code @Api} and will ignore other resources (JAX-RS endpoints, Servlets and
 * so on).
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
=======
@Inherited
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
  /** Short description of the Api */
  String value();

  /** General description of this class */
  String description() default "";

  /** The base path that is prepended to all @Path elements. This may be an override for certain scenarios only */
  String basePath() default "";
  
  /** optional explicit ordering of this Api in the Resource Listing */  
  int position() default 0;

  /** content type produced by this Api */
  String produces() default "";

  /** media type consumed by this Api */
  String consumes() default "";

  /** protocols that this Api requires (i.e. https) */
  String protocols() default "";

  /** authorizations required by this Api */
  // String authorizations() default "";
  /** authorizations required by this Api */
  Authorization[] authorizations() default @Authorization("");
=======
    /**
     * The 'path' that is going to be used to host the API Declaration of the
     * resource.
     * <p/>
     * For JAX-RS resources, this would normally have the same value as the {@code @Path}
     * on the resource, but can be any other value as well. It will serve as the path
     * where the documentation is hosted.
     * <p/>
     * For Servlets, this path has to be the path serving the Servlet.
     * <p/>
     * If the value isn't preceded with a slash, one would be added to it.
     */
    String value();

    /**
     * Corresponds to the `description` field of the Resource Listing API operation.
     * <p/>
     * This should be a short description of the resource.
     */
    String description() default "";

    /**
     * Corresponds to the `basePath` field of the API Declaration.
     * <p/>
     * The `basePath` is derived automatically by Swagger. This property allows
     * overriding the default value if needed.
     *
     * @since 1.3.7
     */
    String basePath() default "";

    /**
     * Optional explicit ordering of this API resource in the Resource Listing.
     */
    int position() default 0;

    /**
     * Corresponds to the `produces` field of the API Declaration.
     * <p/>
     * Takes in comma-separated values of content types.
     * For example, "application/json, application/xml" would suggest this API Resource
     * generates JSON and XML output.
     * <p/>
     * For JAX-RS resources, this would automatically take the value of the {@code @Produces}
     * annotation if such exists. It can also be used to override the {@code @Produces} values
     * for the Swagger documentation.
     */
    String produces() default "";

    /**
     * Corresponds to the `consumes` field of the API Declaration.
     * <p/>
     * Takes in comma-separated values of content types.
     * For example, "application/json, application/xml" would suggest this API Resource
     * accepts JSON and XML input.
     * <p/>
     * For JAX-RS resources, this would automatically take the value of the {@code @Consumes}
     * annotation if such exists. It can also be used to override the {@code @Consumes} values
     * for the Swagger documentation.
     */
    String consumes() default "";

    /**
     * This property is currently not in use.
     */
    String protocols() default "";

    /**
     * Corresponds to the `authorizations` field of the API Declaration.
     * <p/>
     * Takes in a list of the required authorizations for this API Resource.
     * This may be overridden by specific operations.
     *
     * @see Authorization
     */
    Authorization[] authorizations() default @Authorization("");

    /**
     * Hides the api.
     *
     * @since 1.3.8
     */
    boolean hidden() default false;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Authorization.java;<<<<<<< MINE
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
=======
import java.lang.annotation.*;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Authorization.java;<<<<<<< MINE
=======
/**
 * Declares an authorization scheme to be used on a resource or an operation.
 * <p/>
 * The authorization scheme used needs to be defined in the Resource Listing's authorization
 * section.
 * <p/>
 * This annotation is not used directly and will not be parsed by Swagger. It should be used
 * within either {@link com.wordnik.swagger.annotations.Api} or {@link com.wordnik.swagger.annotations.ApiOperation}.
 *
 * @see com.wordnik.swagger.annotations.ApiOperation
 * @see com.wordnik.swagger.annotations.Api
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Authorization.java;<<<<<<< MINE
=======
@Inherited
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Authorization.java;<<<<<<< MINE
  String value();
  AuthorizationScope[] scopes() default @AuthorizationScope(scope = "", description = "");
=======
    /**
     * The name of the authorization scheme to be used on this resource/operation.
     * <p/>
     * The name must be defined in the Resource Listing's authorization section,
     */
    String value();

    /**
     * The scopes to be used if the authorization scheme is OAuth2.
     *
     * @see com.wordnik.swagger.annotations.AuthorizationScope
     */
    AuthorizationScope[] scopes() default @AuthorizationScope(scope = "", description = "");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiParam.java;<<<<<<< MINE
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
=======
import java.lang.annotation.*;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiParam.java;<<<<<<< MINE
 * Represents a single parameter in an Api Operation.  A parameter is an input
 * to the operation
=======
 * Adds additional meta-data for operation parameters.
 * <p/>
 * This annotation can be used only in combination of JAX-RS 1.x/2.x annotations.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiParam.java;<<<<<<< MINE
=======
@Inherited
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiParam.java;<<<<<<< MINE
  /** Name of the parameter */
  String name() default "";

  /** Description of the parameter */
  String value() default "";

  /** Default value  - if e.g. no JAX-RS @DefaultValue is given */
  String defaultValue() default "";

  /** Description of values this endpoint accepts */
  String allowableValues() default "";

  /** specifies if the parameter is required or not */
  boolean required() default false;

  /** 
   * specify an optional access value for filtering in a Filter 
   * implementation.  This
   * allows you to hide certain parameters if a user doesn't have access to them
   */
  String access() default "";

  /** specifies whether or not the parameter can have multiple values provided */
  boolean allowMultiple() default false;
=======
    /**
     * The parameter name.
     * <p/>
     * The name of the parameter will be derived from the field/method/parameter name,
     * however you can override it.
     * <p/>
     * Body parameters will always be named "body". Path parameters will always be named
     * as the path section they represent.
     */
    String name() default "";

    /**
     * A brief description of the parameter.
     */
    String value() default "";

    /**
     * Describes the default value for the parameter.
     * <p/>
     * If the parameter is annotated with JAX-RS's {@code @DefaultValue}, that value would
     * be used, but can be overridden by setting this property.
     */
    String defaultValue() default "";

    /**
     * Limits the acceptable values for this parameter.
     * <p/>
     * If the original parameter type is an enum, the values of the enum would be translated to
     * the allowableValues. Those can be overridden by setting this property.
     * <p/>
     * There are three ways to describe the allowable values:
     * <ol>
     * <li>To set a list of values, provide a comma-separated list surrounded by square brackets.
     * For example: {@code [first, second, third]}.</li>
     * <li>To set a range of values, start the value with "range", and surrounding by square
     * brackets include the minimum and maximum values. For example: {@code range[1, 5]}.</li>
     * <li>To set a minimum/maximum value, use the same format for range but use "infinity"
     * or "-infinity" as the second value. For example, {@code range[1, infinity]} means the
     * minimum allowable value of this parameter is 1.</li>
     * </ol>
     */
    String allowableValues() default "";

    /**
     * Specifies if the parameter is required or not.
     * <p/>
     * Path parameters will always be set as required, whether you set this property or not.
     */
    boolean required() default false;

    /**
     * Allows for filtering a parameter from the API documentation.
     *
     * @see com.wordnik.swagger.core.filter.SwaggerSpecFilter
     */
    String access() default "";

    /**
     * Specifies whether the parameter can accept multiple comma-separated values.
     */
    boolean allowMultiple() default false;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/AuthorizationScope.java;<<<<<<< MINE
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
=======
import java.lang.annotation.*;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/AuthorizationScope.java;<<<<<<< MINE
=======
/**
 * Describes an OAuth2 authorization scope.
 * <p/>
 * Used to declare an authorization scope that is used by a resource or an operation for
 * a defined authorization scheme.
 * <p/>
 * This annotation is not used directly and will not be parsed by Swagger. It should be used
 * within the {@link com.wordnik.swagger.annotations.Authorization}.
 *
 * @see com.wordnik.swagger.annotations.Authorization
 * @see com.wordnik.swagger.annotations.ApiOperation
 * @see com.wordnik.swagger.annotations.Api
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/AuthorizationScope.java;<<<<<<< MINE
=======
@Inherited
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/AuthorizationScope.java;<<<<<<< MINE
  String scope();
  String description();
=======
    /**
     * The scope of the OAuth2 Authorization scheme to be used.
     * <p/>
     * The scope should be previously defined in the Resource Listing's authorization section.
     */
    String scope();

    /**
     * A brief description of the scope.
     */
    String description();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/resource/OwnerResource.java;<<<<<<< MINE
@Api(value = "/owner", description = "Operations about the owners", position = 1)
=======
@Api(hidden = true, value = "/owner", description = "Operations about the owners", position = 1)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_d9f3dd3_e85702c/rev_d9f3dd3-e85702c/modules/swagger-models/src/main/java/com/wordnik/swagger/models/parameters/Parameter.java;<<<<<<< MINE
=======
  void setRequired(boolean required);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/DecimalProperty.java;<<<<<<< MINE
=======
import com.wordnik.swagger.models.Xml;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/DecimalProperty.java;<<<<<<< MINE
=======
  public DecimalProperty xml(Xml xml) {
    this.setXml(xml);
    return this;
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/RefProperty.java;<<<<<<< MINE
=======
import com.wordnik.swagger.models.Xml;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/BooleanProperty.java;<<<<<<< MINE
=======
import com.wordnik.swagger.models.Xml;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/BooleanProperty.java;<<<<<<< MINE
=======
  public BooleanProperty xml(Xml xml) {
    this.setXml(xml);
    return this;
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/FloatProperty.java;<<<<<<< MINE
=======
import com.wordnik.swagger.models.Xml;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/FloatProperty.java;<<<<<<< MINE
=======
  public FloatProperty xml(Xml xml) {
    this.setXml(xml);
    return this;
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/FileProperty.java;<<<<<<< MINE
=======
import com.wordnik.swagger.models.Xml;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/FileProperty.java;<<<<<<< MINE
=======
  public FileProperty xml(Xml xml) {
    this.setXml(xml);
    return this;
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/DateProperty.java;<<<<<<< MINE
=======
import com.wordnik.swagger.models.Xml;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/DateProperty.java;<<<<<<< MINE
=======
  public DateProperty xml(Xml xml) {
    this.setXml(xml);
    return this;
  }  
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/UUIDProperty.java;<<<<<<< MINE
=======
import com.wordnik.swagger.models.Xml;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/UUIDProperty.java;<<<<<<< MINE
=======
  public UUIDProperty xml(Xml xml) {
    this.setXml(xml);
    return this;
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/IntegerProperty.java;<<<<<<< MINE
=======
import com.wordnik.swagger.models.Xml;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/IntegerProperty.java;<<<<<<< MINE
=======
  public IntegerProperty xml(Xml xml) {
    this.setXml(xml);
    return this;
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/DateTimeProperty.java;<<<<<<< MINE
=======
import com.wordnik.swagger.models.Xml;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/DateTimeProperty.java;<<<<<<< MINE
=======
  public DateTimeProperty xml(Xml xml) {
    this.setXml(xml);
    return this;
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/ObjectProperty.java;<<<<<<< MINE
=======
import com.wordnik.swagger.models.Xml;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/ObjectProperty.java;<<<<<<< MINE

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/ObjectProperty.java;<<<<<<< MINE
=======
  public ObjectProperty xml(Xml xml) {
    this.setXml(xml);
    return this;
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/ArrayProperty.java;<<<<<<< MINE
=======
import com.wordnik.swagger.models.Xml;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/ArrayProperty.java;<<<<<<< MINE
=======
  public ArrayProperty xml(Xml xml) {
    this.setXml(xml);
    return this;
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/LongProperty.java;<<<<<<< MINE
=======
import com.wordnik.swagger.models.Xml;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/LongProperty.java;<<<<<<< MINE
=======
  public LongProperty xml(Xml xml) {
    this.setXml(xml);
    return this;
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/DoubleProperty.java;<<<<<<< MINE
=======
import com.wordnik.swagger.models.Xml;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/DoubleProperty.java;<<<<<<< MINE
=======
  public DoubleProperty xml(Xml xml) {
    this.setXml(xml);
    return this;
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/StringProperty.java;<<<<<<< MINE
=======
import com.wordnik.swagger.models.Xml;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/StringProperty.java;<<<<<<< MINE
=======
  public StringProperty xml(Xml xml) {
    this.setXml(xml);
    return this;
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/MapProperty.java;<<<<<<< MINE
=======
import com.wordnik.swagger.models.Xml;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/MapProperty.java;<<<<<<< MINE
=======
  public MapProperty xml(Xml xml) {
    this.setXml(xml);
    return this;
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
=======
   * 
   * @return the document location value, or empty string if not set
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
=======
   *
   * @return the array of tags associated with this Api
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
=======
   *
   * @return a longer description about this API
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * overriding the default value if needed.
=======
   * overriding the default value if needed.  for swagger 2.0 specifications, this
   * value is no longer supported
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
=======
   *
   * @return the basePath for this operation
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
=======
  @Deprecated
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
=======
   * As of swagger-spec 2.0, this value is no longer used
   *
   *
   * @return the position of this API in the resource listing
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
=======
  @Deprecated
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
=======
   *
   * @return the supported media types supported by the server, or an empty string if not set
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
=======
   * 
   * @return the consumes value, or empty string if not set
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
=======
   * 
   * @return the protocols supported by the server
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
=======
   *
   * @return an array of authorizations required by the server, or a single, empty authorization value if not set
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
=======
   *
   * @return true if the api should be hidden from the swagger documentation
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_c5aa988_8c15d2a/rev_c5aa988-8c15d2a/modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/ParameterProcessor.java;<<<<<<< MINE
            System.out.println(param.required());
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-jaxrs/src/main/scala/com/wordnik/swagger/jaxrs/json/JacksonJsonProvider.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.jaxrs.json;

import javax.ws.rs.Produces;

import javax.ws.rs.core.MediaType;
import javax.ws.rs.ext.Provider;

import com.wordnik.swagger.core.util.JsonUtil;
import com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider;
import com.fasterxml.jackson.databind.*;



import com.fasterxml.jackson.module.scala.DefaultScalaModule;

import com.fasterxml.jackson.core.JsonGenerator.Feature;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;


@Provider
@Produces(MediaType.APPLICATION_JSON)
public class JacksonJsonProvider extends JacksonJaxbJsonProvider {
  private static ObjectMapper commonMapper = null;

  public JacksonJsonProvider() {
    if(commonMapper == null){
        ObjectMapper mapper = new ObjectMapper();

        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        mapper.setSerializationInclusion(JsonInclude.Include.NON_DEFAULT);
        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        
        commonMapper = mapper;
    }
    super.setMapper(commonMapper);
  }
  
  
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiResponse.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiResponse.java;<<<<<<< MINE
  /** Response code to describe */
  int code();

  /** Human-readable message to accompany the response */
  String message();

  /** Optional response class to describe the payload of the message */
  Class<?> response() default Void.class;

  ResponseHeader[] responseHeaders() default @ResponseHeader(name = "", response = Void.class);
=======
    /**
     * The HTTP status code of the response.
     * <p/>
     * The value should be one of the formal <a target="_blank" href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">HTTP Status Code Definitions</a>.
     */
    int code();

    /**
     * Human-readable message to accompany the response.
     */
    String message();

    /**
     * Optional response class to describe the payload of the message.
     * <p/>
     * Corresponds to the `responseModel` field of the response message object.
     */
    Class<?> response() default Void.class;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
  /** Brief description of the operation  */
  String value();

  /** long description of the operation */
  String notes() default "";

  /**
   * A list of tags for API documentation control. 
   * Tags can be used for logical grouping of operations by resources or any other qualifier.
   * 
   * @since 1.5.2
   */
  String[] tags() default "";

  /** default response class from the operation */
  Class<?> response() default Void.class;

  /** if the response class is within a container, specify it here */
  String responseContainer() default "";

  /** the HTTP method, i.e GET, PUT, POST, DELETE, PATCH, OPTIONS */
  String httpMethod() default "";

  /** allow explicit ordering of operations inside the Api Declaration */
  int position() default 0;

  /** the nickname for the operation, to override what is detected by the annotation scanner */
  String nickname() default "";
  
  /** content type produced by this Api */
  String produces() default "";

  /** media type consumed by this Api */
  String consumes() default "";

  /** protocols that this Api requires (i.e. https) */
  String protocols() default "";

  /** authorizations required by this Api */
  //String authorizations() default "";

  /** authorizations required by this Api */
  Authorization[] authorizations() default @Authorization(value = "", type = "");

  /**
   * Allows an operation to be marked as hidden
   */
  boolean hidden() default false;

  ResponseHeader[] responseHeaders() default @ResponseHeader(name = "", response = Void.class);
=======
    /**
     * Corresponds to the `summary` field of the operation.
     * <p/>
     * Provides a brief description of this operation. Should be 120 characters or less
     * for proper visibility in Swagger-UI.
     */
    String value();

    /**
     * Corresponds to the 'notes' field of the operation.
     * <p/>
     * A verbose description of the operation.
     */
    String notes() default "";

    /**
     * The response type of the operation.
     * <p/>
     * In JAX-RS applications, the return type of the method would automatically be used, unless it is
     * {@code javax.ws.rs.core.Response}. In that case, the operation return type would default to `void`
     * as the actual response type cannot be known.
     * <p/>
     * Setting this property would override any automatically-derived data type.
     * <p/>
     * If the value used is a class representing a primitive ({@code Integer}, {@code Long}, ...)
     * the corresponding primitive type will be used.
     */
    Class<?> response() default Void.class;

    /**
     * Notes whether the response type is a list of values.
     * <p/>
     * Valid values are "List", "Array" and "Set". "List" and "Array" are regular lists (no
     * difference between them), and "Set" means the list contains unique values only.
     * <p/>
     * Any other value will be ignored.
     */
    String responseContainer() default "";

    /**
     * Currently not implemented in readers, reserved for future use.
     */
    String tags() default "";

    /**
     * Corresponds to the `method` field as the HTTP method used.
     * <p/>
     * If not stated, in JAX-RS applications, the following JAX-RS annotations would be scanned
     * and used: {@code @GET}, {@code @HEAD}, {@code @POST}, {@code @PUT}, {@code @DELETE} and {@code @OPTIONS}.
     * Note that even though not part of the JAX-RS specification, if you create and use the {@code @PATCH} annotation,
     * it will also be parsed and used. If the httpMethod property is set, it will override the JAX-RS annotation.
     * <p/>
     * For Servlets, you must specify the HTTP method manually.
     * <p/>
     * Acceptable values are "GET", "HEAD", "POST", "PUT", "DELETE", "OPTIONS" and "PATCH".
     */
    String httpMethod() default "";

    /**
     * Optional explicit ordering of this API resource in the Resource Listing.
     */
    int position() default 0;

    /**
     * Corresponds to the `nickname` field.
     * <p/>
     * The nickname field is used by third-party tools to uniquely identify this operation. In JAX-RS environemnt, this
     * would default to the method name, but can be overridden.
     * <p/>
     * For Servlets, you must specify this field.
     */
    String nickname() default "";

    /**
     * Corresponds to the `produces` field of the operation.
     * <p/>
     * Takes in comma-separated values of content types.
     * For example, "application/json, application/xml" would suggest this API Resource
     * generates JSON and XML output.
     * <p/>
     * For JAX-RS resources, this would automatically take the value of the {@code @Produces}
     * annotation if such exists. It can also be used to override the {@code @Produces} values
     * for the Swagger documentation.
     */
    String produces() default "";

    /**
     * Corresponds to the `consumes` field of the operation.
     * <p/>
     * Takes in comma-separated values of content types.
     * For example, "application/json, application/xml" would suggest this API Resource
     * accepts JSON and XML input.
     * <p/>
     * For JAX-RS resources, this would automatically take the value of the {@code @Consumes}
     * annotation if such exists. It can also be used to override the {@code @Consumes} values
     * for the Swagger documentation.
     */
    String consumes() default "";

    /**
     * This property is currently not in use.
     */
    String protocols() default "";

    /**
     * Corresponds to the `authorizations` field of the operation.
     * <p/>
     * Takes in a list of the required authorizations for this operation.
     *
     * @see Authorization
     */
    Authorization[] authorizations() default @Authorization("");

    /**
     * Hides the operation from the list of operations.
     */
    boolean hidden() default false;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
  /** Provide a human readable synopsis of this property */
  String value() default "";

  /**
   * Allows overriding the name of the property
   *
   * @return the overridden property name
   */
  String name() default "";

  /**
   * If the values that can be set are restricted, they can be set here. In the form of a comma separated list
   * <code>registered, active, closed</code>.
   *
   * @return the allowable values
   */
  String allowableValues() default "";

  /** 
   * specify an optional access value for filtering in a Filter 
   * implementation.  This
   * allows you to hide certain parameters if a user doesn't have access to them
   */
  String access() default "";

  /** long description of the property */
  String notes() default "";

  /**
   * The dataType. See the documentation for the supported datatypes. If the data type is a custom object, set
   * it's name, or nothing. In case of an enum use 'string' and allowableValues for the enum constants.
   */
  String dataType() default "";

  /**
   * Whether or not the property is required, defaults to false.
   * 
   * @return true if required, false otherwise
   */
  boolean required() default false;

  /**
   * allows explicitly ordering the property in the model.  Since reflection has no guarantee on
   * ordering, you should specify property order to keep models consistent across different VM implementations and versions.
   */
  int position() default 0;
  
  /**
   * Allows a model property to be marked as hidden in the swagger model definition
   */
  boolean hidden() default false;

  /**
   * A sample value for the property
   **/
  String example() default "";

  /**
   * Allows a model property to be designated as read only
   **/
  boolean readOnly() default false;
=======
    /**
     * A brief description of this property.
     */
    String value() default "";

    /**
     * Limits the acceptable values for this property.
     * <p/>
     * There are three ways to describe the allowable values:
     * <ol>
     * <li>To set a list of values, provide a comma-separated list surrounded by square brackets.
     * For example: {@code [first, second, third]}.</li>
     * <li>To set a range of values, start the value with "range", and surrounding by square
     * brackets include the minimum and maximum values. For example: {@code range[1, 5]}.</li>
     * <li>To set a minimum/maximum value, use the same format for range but use "infinity"
     * or "-infinity" as the second value. For example, {@code range[1, infinity]} means the
     * minimum allowable value of this parameter is 1.</li>
     * </ol>
     */
    String allowableValues() default "";

    /**
     * Allows for filtering a property from the API documentation.
     *
     * @see com.wordnik.swagger.core.filter.SwaggerSpecFilter
     */
    String access() default "";

    /**
     * Currently not in use.
     */
    String notes() default "";

    /**
     * The data type of the parameter.
     * <p/>
     * This can be the class name or a primitive. The value will override the data type as read from the class
     * property.
     */
    String dataType() default "";

    /**
     * Specifies if the parameter is required or not.
     */
    boolean required() default false;

    /**
     * Allows explicitly ordering the property in the model.
     */
    int position() default 0;

    /**
     * Allows a model property to be hidden in the Swagger model definition.
     */
    boolean hidden() default false;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
=======
import java.lang.annotation.*;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
 * Represents a single parameter in an API Operation.
 * <p>
 * While {@link com.wordnik.swagger.annotations.ApiParam} is bound to a JAX-RS parameter,
 * method or field, this allows you to manually define a parameter in a fine-tuned manner.
 * This is the only way to define parameters when using Servlets or other non-JAX-RS
 * environments.
 * <p>
 * This annotation must be used as a value of {@link com.wordnik.swagger.annotations.ApiImplicitParams}
 * in order to be parsed.
 *
 * @see com.wordnik.swagger.annotations.ApiImplicitParams
=======
 * Represents a single parameter in an API Operation.
 * <p/>
 * While {@link com.wordnik.swagger.annotations.ApiParam} is bound to a JAX-RS parameter,
 * method or field, this allows you to manually define a parameter in a fine-tuned manner.
 * This is the only way to define parameters when using Servlets or other non-JAX-RS
 * environments.
 * <p/>
 * This annotation must be used as a value of {@link com.wordnik.swagger.annotations.ApiImplicitParams}
 * in order to be parsed.
 *
 * @see com.wordnik.swagger.annotations.ApiImplicitParams
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
=======
@Inherited
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
  /**
   * Name of the parameter.
   * <p>
   * For proper Swagger functionality, follow these rules when naming your parameters based on {@link #paramType()}:
   * <ol>
   * <li>If {@code paramType} is "path", the name should be the associated section in the path.</li>
   * <li>If {@code paramType} is "body", the name should be "body".</li>
   * <li>For all other cases, the name should be the parameter name as your application expects to accept.</li>
   * </ol>
   *
   * @see #paramType()
   */
  String name() default "";

  /**
   * A brief description of the parameter.
   */
  String value() default "";

  /**
   * Describes the default value for the parameter.
   */
  String defaultValue() default "";

  /**
   * Limits the acceptable values for this parameter.
   * <p>
   * There are three ways to describe the allowable values:
   * <ol>
   * <li>To set a list of values, provide a comma-separated list surrounded by square brackets.
   * For example: {@code [first, second, third]}.</li>
   * <li>To set a range of values, start the value with "range", and surrounding by square
   * brackets include the minimum and maximum values. For example: {@code range[1, 5]}.</li>
   * <li>To set a minimum/maximum value, use the same format for range but use "infinity"
   * or "-infinity" as the second value. For example, {@code range[1, infinity]} means the
   * minimum allowable value of this parameter is 1.</li>
   * </ol>
   */
  String allowableValues() default "";

  /**
   * Specifies if the parameter is required or not.
   * <p>
   * Path parameters should always be set as required.
   */
  boolean required() default false;

  /**
   * Allows for filtering a parameter from the API documentation.
   */
  String access() default "";

  /**
   * Specifies whether the parameter can accept multiple comma-separated values.
   */
  boolean allowMultiple() default false;

  /**
   * The data type of the parameter.
   * <p>
   * This can be the class name or a primitive.
   */
  String dataType() default "";

  /**
   * The parameter type of the parameter.
   *
   * Valid values are {@code path}, {@code query}, {@code body}, {@code header} or {@code form}.
   */
  String paramType() default "";
=======
    /**
     * Name of the parameter.
     * <p/>
     * For proper Swagger functionality, follow these rules when naming your parameters based on {@link #paramType()}:
     * <ol>
     * <li>If {@code paramType} is "path", the name should be the associated section in the path.</li>
     * <li>If {@code paramType} is "body", the name should be "body".</li>
     * <li>For all other cases, the name should be the parameter name as your application expects to accept.</li>
     * </ol>
     *
     * @see #paramType()
     */
    String name() default "";

    /**
     * A brief description of the parameter.
     */
    String value() default "";

    /**
     * Describes the default value for the parameter.
     */
    String defaultValue() default "";

    /**
     * Limits the acceptable values for this parameter.
     * <p/>
     * There are three ways to describe the allowable values:
     * <ol>
     * <li>To set a list of values, provide a comma-separated list surrounded by square brackets.
     * For example: {@code [first, second, third]}.</li>
     * <li>To set a range of values, start the value with "range", and surrounding by square
     * brackets include the minimum and maximum values. For example: {@code range[1, 5]}.</li>
     * <li>To set a minimum/maximum value, use the same format for range but use "infinity"
     * or "-infinity" as the second value. For example, {@code range[1, infinity]} means the
     * minimum allowable value of this parameter is 1.</li>
     * </ol>
     */
    String allowableValues() default "";

    /**
     * Specifies if the parameter is required or not.
     * <p/>
     * Path parameters should always be set as required.
     */
    boolean required() default false;

    /**
     * Allows for filtering a parameter from the API documentation.
     *
     * @see com.wordnik.swagger.core.filter.SwaggerSpecFilter
     */
    String access() default "";

    /**
     * Specifies whether the parameter can accept multiple comma-separated values.
     */
    boolean allowMultiple() default false;

    /**
     * The data type of the parameter.
     * <p/>
     * This can be the class name or a primitive.
     */
    String dataType() default "";

    /**
     * The parameter type of the parameter.
     *
     * Valid values are {@code path}, {@code query}, {@code body}, {@code header} or {@code form}.
     */
    String paramType() default "";
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParams.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParams.java;<<<<<<< MINE
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
=======
import java.lang.annotation.*;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParams.java;<<<<<<< MINE
 * A simple array wrapper to contain multiple ApiImplicitParam objects
=======
 * A wrapper to allow a list of multiple {@link com.wordnik.swagger.annotations.ApiImplicitParam} objects.
 *
 * @see com.wordnik.swagger.annotations.ApiImplicitParam
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParams.java;<<<<<<< MINE
=======
@Inherited
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParams.java;<<<<<<< MINE
  /**
   * A list of {@link com.wordnik.swagger.annotations.ApiImplicitParam}s available to the API operation.
   */
  ApiImplicitParam[] value();
=======
    /**
     * A list of {@link com.wordnik.swagger.annotations.ApiImplicitParam}s available to the API operation.
     */
    ApiImplicitParam[] value();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java;<<<<<<< MINE
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
=======
import java.lang.annotation.*;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java;<<<<<<< MINE
 * Provides additional information about Swagger models.
 * <p>
 * Classes will be introspected automatically as they are used as types in operations,
 * but you may want to manipulate the structure of the models.
=======
 * Provides additional information about Swagger models.
 * <p/>
 * Classes will be introspected automatically as they are used as types in operations,
 * but you may want to manipulate the structure of the models.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java;<<<<<<< MINE
=======
@Inherited
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java;<<<<<<< MINE
  /**
   * Provide an alternative name for the model.
   * <p>
   * By default, the class name is used.
   */
  String value() default "";

  /**
   * Provide a longer description of the class.
   */
  String description() default "";

  /**
   * Provide a superclass for the model to allow describing inheritance.
   */
  Class<?> parent() default Void.class;

  /**
   * Supports model inheritance and polymorphism.
   * <p>
   * This is the name of the field used as a discriminator. Based on this field,
   * it would be possible to assert which sub type needs to be used.
   */
  String discriminator() default "";

  /**
   * An array of the sub types inheriting from this model.
   */
  Class<?>[] subTypes() default {};
=======
    /**
     * Provide an alternative name for the model.
     * <p/>
     * By default, the class name is used.
     */
    String value() default "";

    /**
     * Provide a longer description of the class.
     */
    String description() default "";

    /**
     * Provide a superclass for the model to allow describing inheritance.
     */
    Class<?> parent() default Void.class;

    /**
     * Supports model inheritance and polymorphism.
     * <p/>
     * This is the name of the field used as a discriminator. Based on this field,
     * it would be possible to assert which sub type needs to be used.
     */
    String discriminator() default "";

    /**
     * An array of the sub types inheriting from this model.
     */
    Class<?>[] subTypes() default {};
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiResponses.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
=======
import java.lang.annotation.*;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
 * Marks a class as a Swagger resource.
 * <p>
 * The resource affects both the root document of Swagger, the Resource
 * Listing, and the API Declaration of that specific resource.
 * <p>
 * Swagger will only include and introspect only classes that are annotated
 * with {@code @Api} and will ignore other resources (JAX-RS endpoints, Servlets and
 * so on).
=======
 * Marks a class as a Swagger resource.
 * <p/>
 * The resource affects both the root document of Swagger, the Resource
 * Listing, and the API Declaration of that specific resource.
 * <p/>
 * Swagger will only include and introspect only classes that are annotated
 * with {@code @Api} and will ignore other resources (JAX-RS endpoints, Servlets and
 * so on).
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
=======
@Inherited
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
  /**
   * The 'path' that is going to be used to host the API Declaration of the
   * resource.
   * <p>
   * For JAX-RS resources, this would normally have the same value as the {@code @Path}
   * on the resource, but can be any other value as well. It will serve as the path
   * where the documentation is hosted.
   * <p>
   * For Servlets, this path has to be the path serving the Servlet.
   * <p>
   * If the value isn't preceded with a slash, one would be added to it.
   * 
   * @return the document location value, or empty string if not set
   */
  String value() default "";

  /**
   * A list of tags for API documentation control. 
   * Tags can be used for logical grouping of operations by resources or any other qualifier.
   * 
   * @since 1.5.2
   *
   * @return a string array of tag values
   */
  String[] tags() default "";

  /**
   * Corresponds to the `description` field of the Resource Listing API operation.
   * <p>
   * This should be a short description of the resource.
   *
   * @return a longer description about this API
   */
  String description() default "";

  /**
   * Corresponds to the `basePath` field of the API Declaration.
   * <p>
   * The `basePath` is derived automatically by Swagger. This property allows
   * overriding the default value if needed.  for swagger 2.0 specifications, this
   * value is no longer supported
   *
   * @since 1.3.7
   *
   * @return the basePath for this operation
   */
  @Deprecated
  String basePath() default "";

  /**
   * Optional explicit ordering of this API resource in the Resource Listing.
   * As of swagger-spec 2.0, this value is no longer used
   *
   *
   * @return the position of this API in the resource listing
   */
  @Deprecated
  int position() default 0;

  /**
   * Corresponds to the `produces` field of the API Declaration.
   * <p>
   * Takes in comma-separated values of content types.
   * For example, "application/json, application/xml" would suggest this API Resource
   * generates JSON and XML output.
   * <p>
   * For JAX-RS resources, this would automatically take the value of the {@code @Produces}
   * annotation if such exists. It can also be used to override the {@code @Produces} values
   * for the Swagger documentation.
   *
   * @return the supported media types supported by the server, or an empty string if not set
   */
  String produces() default "";

  /**
   * Corresponds to the `consumes` field of the API Declaration.
   * <p>
   * Takes in comma-separated values of content types.
   * For example, "application/json, application/xml" would suggest this API Resource
   * accepts JSON and XML input.
   * <p>
   * For JAX-RS resources, this would automatically take the value of the {@code @Consumes}
   * annotation if such exists. It can also be used to override the {@code @Consumes} values
   * for the Swagger documentation.
   * 
   * @return the consumes value, or empty string if not set
   */
  String consumes() default "";

  /**
   * This property is currently not in use.
   * 
   * @return the protocols supported by the server
   */
  String protocols() default "";

  /**
   * Corresponds to the `authorizations` field of the API Declaration.
   * <p>
   * Takes in a list of the required authorizations for this API Resource.
   * This may be overridden by specific operations.
   *
   * @see Authorization
   *
   * @return an array of authorizations required by the server, or a single, empty authorization value if not set
   */
  Authorization[] authorizations() default @Authorization(value = "", type = "");

  /**
   * Hides the api.
   *
   * @since 1.3.8
   *
   * @return true if the api should be hidden from the swagger documentation
   */
  boolean hidden() default false;
=======
    /**
     * The 'path' that is going to be used to host the API Declaration of the
     * resource.
     * <p/>
     * For JAX-RS resources, this would normally have the same value as the {@code @Path}
     * on the resource, but can be any other value as well. It will serve as the path
     * where the documentation is hosted.
     * <p/>
     * For Servlets, this path has to be the path serving the Servlet.
     * <p/>
     * If the value isn't preceded with a slash, one would be added to it.
     */
    String value();

    /**
     * Corresponds to the `description` field of the Resource Listing API operation.
     * <p/>
     * This should be a short description of the resource.
     */
    String description() default "";

    /**
     * Corresponds to the `basePath` field of the API Declaration.
     * <p/>
     * The `basePath` is derived automatically by Swagger. This property allows
     * overriding the default value if needed.
     *
     * @since 1.3.7
     */
    String basePath() default "";

    /**
     * Optional explicit ordering of this API resource in the Resource Listing.
     */
    int position() default 0;

    /**
     * Corresponds to the `produces` field of the API Declaration.
     * <p/>
     * Takes in comma-separated values of content types.
     * For example, "application/json, application/xml" would suggest this API Resource
     * generates JSON and XML output.
     * <p/>
     * For JAX-RS resources, this would automatically take the value of the {@code @Produces}
     * annotation if such exists. It can also be used to override the {@code @Produces} values
     * for the Swagger documentation.
     */
    String produces() default "";

    /**
     * Corresponds to the `consumes` field of the API Declaration.
     * <p/>
     * Takes in comma-separated values of content types.
     * For example, "application/json, application/xml" would suggest this API Resource
     * accepts JSON and XML input.
     * <p/>
     * For JAX-RS resources, this would automatically take the value of the {@code @Consumes}
     * annotation if such exists. It can also be used to override the {@code @Consumes} values
     * for the Swagger documentation.
     */
    String consumes() default "";

    /**
     * This property is currently not in use.
     */
    String protocols() default "";

    /**
     * Corresponds to the `authorizations` field of the API Declaration.
     * <p/>
     * Takes in a list of the required authorizations for this API Resource.
     * This may be overridden by specific operations.
     *
     * @see Authorization
     */
    Authorization[] authorizations() default @Authorization("");

    /**
     * Hides the api.
     *
     * @since 1.3.8
     */
    boolean hidden() default false;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Authorization.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Authorization.java;<<<<<<< MINE
  String value();
  String type();
  AuthorizationScope[] scopes() default @AuthorizationScope(scope = "", description = "");
=======
    /**
     * The name of the authorization scheme to be used on this resource/operation.
     * <p/>
     * The name must be defined in the Resource Listing's authorization section,
     */
    String value();

    /**
     * The scopes to be used if the authorization scheme is OAuth2.
     *
     * @see com.wordnik.swagger.annotations.AuthorizationScope
     */
    AuthorizationScope[] scopes() default @AuthorizationScope(scope = "", description = "");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiParam.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/AuthorizationScope.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2-guice/src/main/java/com/wordnik/swagger/sample/resource/SampleExceptionMapper.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.resource;

import com.wordnik.swagger.sample.exception.ApiException;
import com.wordnik.swagger.sample.exception.BadRequestException;
import com.wordnik.swagger.sample.exception.NotFoundException;
import com.wordnik.swagger.sample.model.ApiResponse;

import javax.ws.rs.ext.*;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

@Provider
public class SampleExceptionMapper implements ExceptionMapper<Exception> {
  public Response toResponse(Exception exception) {
    if (exception instanceof javax.ws.rs.WebApplicationException) {
      javax.ws.rs.WebApplicationException e = (javax.ws.rs.WebApplicationException) exception;
      return Response
          .status(e.getResponse().getStatus())
          .entity(new ApiResponse(e.getResponse().getStatus(),
              exception.getMessage())).build();
    } else if (exception instanceof com.fasterxml.jackson.core.JsonParseException) {
      return Response.status(400)
          .entity(new ApiResponse(400, "bad input")).build();
    } else if (exception instanceof NotFoundException) {
      return Response
          .status(Status.NOT_FOUND)
          .entity(new ApiResponse(ApiResponse.ERROR, exception
              .getMessage())).build();
    } else if (exception instanceof BadRequestException) {
      return Response
          .status(Status.BAD_REQUEST)
          .entity(new ApiResponse(ApiResponse.ERROR, exception
              .getMessage())).build();
    } else if (exception instanceof ApiException) {
      return Response
          .status(Status.BAD_REQUEST)
          .entity(new ApiResponse(ApiResponse.ERROR, exception
              .getMessage())).build();
    } else {
      return Response.status(500)
          .entity(new ApiResponse(500, "something bad happened"))
          .build();
    }
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2-guice/src/main/java/com/wordnik/swagger/sample/resource/JavaRestResourceUtil.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.resource;

import java.text.SimpleDateFormat;

import java.util.Date;

public class JavaRestResourceUtil {
  public int getInt(int minVal, int maxVal, int defaultValue, String inputString) {
    int output = defaultValue;
    try {
      output = Integer.parseInt(inputString);
    }
    catch (Exception e){
      output = defaultValue;
    }

    if (output < minVal) output = minVal;
    if (maxVal == -1) {
      if (output < minVal) output = minVal;
    }
    else if (output > maxVal) output = maxVal;
    return output;
  }

  public long getLong(long minVal, long maxVal, long defaultValue, String inputString) {
    long output = defaultValue;
    try {
      output = Long.parseLong(inputString);
    }
    catch (Exception e){
      output = defaultValue;
    }

    if (output < minVal) output = minVal;
    if (maxVal == -1) { if (output < minVal) output = minVal; }
    else if (output > maxVal) output = maxVal;
    return output;
  }

  public double getDouble(double minVal, double maxVal, double defaultValue, String inputString) {
    double output = defaultValue;
    try {
      output = Double.parseDouble(inputString);
    }
    catch (Exception e){
      output = defaultValue;
    }

    if (output < minVal) output = minVal;
    if (maxVal == -1) { 
      if (output < minVal) output = minVal; 
    }
    else if (output > maxVal) output = maxVal;
    return output;
  }

  public boolean getBoolean(boolean defaultValue, String booleanString) {
    boolean output = defaultValue;
    if (booleanString == null) output = defaultValue;

    //  treat "", "YES" as "true"
    if ("".equals(booleanString)) output = true;
    else if ("YES".equalsIgnoreCase(booleanString)) output = true;
    else if ("NO".equalsIgnoreCase(booleanString)) output = false;
    else {
      try {
        output = Boolean.parseBoolean(booleanString);
      }
      catch (Exception e){
        output = defaultValue;
      }
    }
    return output;
  }
  
  public Date getDate(Date defaultValue, String dateString){
    try {
      return new SimpleDateFormat("yyyy-MM-dd").parse(dateString);
    }
    catch(Exception e) {
      return defaultValue;
    }
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2-guice/src/main/java/com/wordnik/swagger/sample/exception/ApiException.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.exception;

public class ApiException extends Exception{
  private int code;
  public ApiException (int code, String msg) {
    super(msg);
    this.code = code;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2-guice/src/main/java/com/wordnik/swagger/sample/exception/NotFoundException.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.exception;

public class NotFoundException extends ApiException {
  private int code;
  public NotFoundException (int code, String msg) {
    super(code, msg);
    this.code = code;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2-guice/src/main/java/com/wordnik/swagger/sample/exception/BadRequestException.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.exception;

public class BadRequestException extends ApiException{
  private int code;
  public BadRequestException (int code, String msg) {
    super(code, msg);
    this.code = code;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2-guice/src/main/java/com/wordnik/swagger/sample/SwaggerExampleGuiceContextListener.java;<<<<<<< MINE
=======
package com.wordnik.swagger.sample;

import com.google.inject.Guice;
import com.google.inject.Injector;
import com.google.inject.Singleton;
import com.google.inject.servlet.GuiceServletContextListener;
import com.google.inject.servlet.ServletModule;
import com.wordnik.swagger.config.ConfigFactory;
import com.wordnik.swagger.config.FilterFactory;
import com.wordnik.swagger.config.ScannerFactory;
import com.wordnik.swagger.config.SwaggerConfig;
import com.wordnik.swagger.jaxrs.config.DefaultJaxrsScanner;
import com.wordnik.swagger.jaxrs.config.ReflectiveJaxrsScanner;
import com.wordnik.swagger.jaxrs.reader.DefaultJaxrsApiReader;
import com.wordnik.swagger.model.*;
import com.wordnik.swagger.reader.ClassReaders;
import com.wordnik.swagger.sample.util.ApiAuthorizationFilterImpl;
import com.wordnik.swagger.sample.util.ApiOriginFilter;
import com.wordnik.swagger.sample.util.CustomFilter;
import org.glassfish.jersey.servlet.ServletContainer;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SwaggerExampleGuiceContextListener extends GuiceServletContextListener {

    @Override
    protected Injector getInjector() {
        return Guice.createInjector(new ServletModule() {
            @Override
            protected void configureServlets() {
                bind(ServletContainer.class).in(Singleton.class);
                bind(ApiOriginFilter.class).in(Singleton.class);

                Map<String, String> props = new HashMap<String, String>();
                props.put("javax.ws.rs.Application", Application.class.getName());
                props.put("jersey.config.server.wadl.disableWadl", "true");
                serve("/api/*").with(ServletContainer.class, props);

                ReflectiveJaxrsScanner scanner = new ReflectiveJaxrsScanner();
                scanner.setResourcePackage(getClass().getPackage().getName());
                ScannerFactory.setScanner(scanner);
                SwaggerConfig config = ConfigFactory.config();
                config.setApiVersion("1.0.0");

                String basePath = "http://localhost:8002/api";
                if (System.getProperties().contains("swagger.basePath")) {
                    basePath = System.getProperty("swagger.basePath");
                }
                config.setBasePath(basePath);
                ConfigFactory.setConfig(config);

                FilterFactory.setFilter(new ApiAuthorizationFilterImpl());
                ScannerFactory.setScanner(new DefaultJaxrsScanner());
                ClassReaders.setReader(new DefaultJaxrsApiReader());

                bootstrap();

                filter("/*").through(ApiOriginFilter.class);
            }
        });
    }

    private void bootstrap() {
        FilterFactory.setFilter(new CustomFilter());

        ApiInfo info = new ApiInfo(
                "Swagger Sample App",                             /* title */
                "This is a sample server Petstore server.  You can find out more about Swagger " +
                        "at <a href=\"http://swagger.io\">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, " +
                        "you can use the api key \"special-key\" to test the authorization filters",
                "http://helloreverb.com/terms/",                  /* TOS URL */
                "apiteam@wordnik.com",                            /* Contact */
                "Apache 2.0",                                     /* license */
                "http://www.apache.org/licenses/LICENSE-2.0.html" /* license URL */
        );

        List<AuthorizationScope> scopes = new ArrayList<AuthorizationScope>();
        scopes.add(new AuthorizationScope("email", "Access to your email address"));
        scopes.add(new AuthorizationScope("pets", "Access to your pets"));


        List<GrantType> grantTypes = new ArrayList<GrantType>();

        ImplicitGrant implicitGrant = new ImplicitGrant(
                new LoginEndpoint("http://localhost:8002/oauth/dialog"),
                "access_code");

        grantTypes.add(implicitGrant);

        AuthorizationType oauth = new OAuthBuilder().scopes(scopes).grantTypes(grantTypes).build();

        //  ConfigFactory.config().addAuthorization(oauth);
        ConfigFactory.config().setApiInfo(info);
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2-guice/src/main/java/com/wordnik/swagger/sample/model/ApiResponse.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import javax.xml.bind.annotation.XmlTransient;

@javax.xml.bind.annotation.XmlRootElement
public class ApiResponse {
  public static final int ERROR = 1;
  public static final int WARNING = 2;
  public static final int INFO = 3;
  public static final int OK = 4;
  public static final int TOO_BUSY = 5;

  int code;
  String type;
  String message;
  
  public ApiResponse(){}
  
  public ApiResponse(int code, String message){
    this.code = code;
    switch(code){
    case ERROR:
      setType("error");
      break;
    case WARNING:
      setType("warning");
      break;
    case INFO:
      setType("info");
      break;
    case OK:
      setType("ok");
      break;
    case TOO_BUSY:
      setType("too busy");
      break;
    default:
      setType("unknown");
      break;
    }
    this.message = message;
  }

  @XmlTransient
  public int getCode() {
    return code;
  }

  public void setCode(int code) {
    this.code = code;
  }

  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2-guice/src/main/java/com/wordnik/swagger/sample/model/Pet.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import com.wordnik.swagger.annotations.*;

import java.util.List;
import java.util.ArrayList;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Pet")
public class Pet {
  private long id;
  private Category category;
  private String name;
  private List<String> photoUrls = new ArrayList<String>();
  private List<Tag> tags = new ArrayList<Tag>();
  private String status;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  @XmlElement(name = "category")
  public Category getCategory() {
    return category;
  }

  public void setCategory(Category category) {
    this.category = category;
  }

  @XmlElement(name = "name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  @XmlElementWrapper(name = "photoUrls")
  @XmlElement(name = "photoUrl")
  public List<String> getPhotoUrls() {
    return photoUrls;
  }

  public void setPhotoUrls(List<String> photoUrls) {
    this.photoUrls = photoUrls;
  }

  @XmlElementWrapper(name = "tags")
  @XmlElement(name = "tag")
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }

  @XmlElement(name = "status")
  @ApiModelProperty(value = "pet status in the store", allowableValues = "available,pending,sold")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2-guice/src/main/java/com/wordnik/swagger/sample/model/Order.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import com.wordnik.swagger.annotations.*;

import java.util.Date;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Order")
public class Order {
  private long id;
  private long petId;
  private int quantity;
  private Date shipDate;
  private String status;
    private boolean complete;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

    public boolean isComplete() {
        return complete;
    }

    public void setComplete(boolean complete) {
        this.complete = complete;
    }


  @XmlElement(name = "petId")
  public long getPetId() {
    return petId;
  }

  public void setPetId(long petId) {
    this.petId = petId;
  }

  @XmlElement(name = "quantity")
  public int getQuantity() {
    return quantity;
  }

  public void setQuantity(int quantity) {
    this.quantity = quantity;
  }

  @XmlElement(name = "status")
  @ApiModelProperty(value = "Order Status", allowableValues = "placed, approved, delivered")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  @XmlElement(name = "shipDate")
  public Date getShipDate() {
    return shipDate;
  }

  public void setShipDate(Date shipDate) {
    this.shipDate = shipDate;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2-guice/src/main/java/com/wordnik/swagger/sample/model/User.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import com.wordnik.swagger.annotations.*;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "User")
public class User {
  private long id;
  private String username;
  private String firstName;
  private String lastName;
  private String email;
  private String password;
  private String phone;
  private int userStatus;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  @XmlElement(name = "firstName")
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

  @XmlElement(name = "username")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  @XmlElement(name = "lastName")
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  @XmlElement(name = "email")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  @XmlElement(name = "password")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  @XmlElement(name = "phone")
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }

  @XmlElement(name = "userStatus")
  @ApiModelProperty(value = "User Status", allowableValues = "1-registered,2-active,3-closed")
  public int getUserStatus() {
    return userStatus;
  }

  public void setUserStatus(int userStatus) {
    this.userStatus = userStatus;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2-guice/src/main/java/com/wordnik/swagger/sample/model/Tag.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Tag")
public class Tag {
  private long id;
  private String name;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  @XmlElement(name = "name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2-guice/src/main/java/com/wordnik/swagger/sample/model/Category.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Category")
public class Category {
  private long id;
  private String name;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  @XmlElement(name = "name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2-guice/src/main/java/com/wordnik/swagger/sample/util/ApiAuthorizationFilterImpl.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.util;

import com.wordnik.swagger.model.*;
import com.wordnik.swagger.core.filter.SwaggerSpecFilter;

import org.slf4j.*;

import java.util.Map;
import java.util.List;

import javax.servlet.ServletConfig;
import javax.servlet.http.HttpServlet;
/**
 * 
 * The rules are maintained in simple map with key as path and a boolean value
 * indicating given path is secure or not. For method level security the key is
 * combination of http method and path .
 * 
 * If the resource or method is secure then it can only be viewed using a
 * secured api key
 * 
 * Note: Objective of this class is not to provide fully functional
 * implementation of authorization filter. This is only a sample demonstration
 * how API authorization filter works.
 * 
 */

public class ApiAuthorizationFilterImpl implements SwaggerSpecFilter {
  static Logger logger = LoggerFactory.getLogger(ApiAuthorizationFilterImpl.class);

  public boolean isOperationAllowed(Operation operation, ApiDescription api, Map<String, List<String>> params, Map<String, String> cookies, Map<String, List<String>> headers) {
    boolean isAuthorized = checkKey(params, headers);
    if(isAuthorized) {
      return true;
    }
    else {
      if(operation.method() != "GET" || api.path().indexOf("/store") != -1) {
        return false;
      }
      else return true;
    }
  }

  public boolean isParamAllowed(Parameter parameter, Operation operation, ApiDescription api, Map<String, List<String>> params, Map<String, String> cookies, Map<String, List<String>> headers) {
    boolean isAuthorized = checkKey(params, headers);
    if((parameter.paramAccess().isDefined() && parameter.paramAccess().get().equals("internal")) && !isAuthorized) 
      return false;
    else 
      return true;
  }

  public boolean checkKey(Map<String, List<String>> params, Map<String, List<String>> headers) {
    String keyValue = null;
    if(params.containsKey("api_key"))
      keyValue = params.get("api_key").get(0);
    else {
      if(headers.containsKey("api_key"))
        keyValue = headers.get("api_key").get(0);
    }
    if("special-key".equals(keyValue))
      return true;
    else
      return false;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2-guice/src/main/java/com/wordnik/swagger/sample/util/ApiOriginFilter.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.util;

import java.io.IOException;

import javax.servlet.*;
import javax.servlet.http.HttpServletResponse;

public class ApiOriginFilter implements javax.servlet.Filter {
  @Override
  public void doFilter(ServletRequest request, ServletResponse response,
      FilterChain chain) throws IOException, ServletException {
    HttpServletResponse res = (HttpServletResponse) response;
    res.addHeader("Access-Control-Allow-Origin", "*");
    res.addHeader("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");
    res.addHeader("Access-Control-Allow-Headers", "Content-Type");
    chain.doFilter(request, response);
  }

  @Override
  public void destroy() {
  }

  @Override
  public void init(FilterConfig filterConfig) throws ServletException {
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2-guice/src/main/java/com/wordnik/swagger/sample/util/CustomFilter.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.util;

import com.wordnik.swagger.core.filter.SwaggerSpecFilter;
import com.wordnik.swagger.model.*;

public class CustomFilter implements SwaggerSpecFilter {
  @Override
  public boolean isOperationAllowed(
    Operation operation,
    ApiDescription api, 
    java.util.Map<String, java.util.List<String>> params, 
    java.util.Map<String, String> cookies, 
    java.util.Map<String, java.util.List<String>> headers) {
    return true;
  }

  @Override
  public boolean isParamAllowed(
    Parameter parameter, 
    Operation operation, 
    ApiDescription api,
    java.util.Map<String, java.util.List<String>> params, 
    java.util.Map<String, String> cookies,
    java.util.Map<String, java.util.List<String>>  headers) {
    return true;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2-guice/src/main/java/com/wordnik/swagger/sample/data/PetData.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.data;

import com.wordnik.swagger.sample.model.*;

import java.util.List;
import java.util.ArrayList;

public class PetData {
  static List<Pet> pets = new ArrayList<Pet>();
  static List<Category> categories = new ArrayList<Category>();

  static {
    categories.add(createCategory(1, "Dogs"));
    categories.add(createCategory(2, "Cats"));
    categories.add(createCategory(3, "Rabbits"));
    categories.add(createCategory(4, "Lions"));

    pets.add(createPet(1, categories.get(1), "Cat 1", new String[] {
        "url1", "url2" }, new String[] { "tag1", "tag2" }, "available"));
    pets.add(createPet(2, categories.get(1), "Cat 2", new String[] {
        "url1", "url2" }, new String[] { "tag2", "tag3" }, "available"));
    pets.add(createPet(3, categories.get(1), "Cat 3", new String[] {
        "url1", "url2" }, new String[] { "tag3", "tag4" }, "pending"));

    pets.add(createPet(4, categories.get(0), "Dog 1", new String[] {
        "url1", "url2" }, new String[] { "tag1", "tag2" }, "available"));
    pets.add(createPet(5, categories.get(0), "Dog 2", new String[] {
        "url1", "url2" }, new String[] { "tag2", "tag3" }, "sold"));
    pets.add(createPet(6, categories.get(0), "Dog 3", new String[] {
        "url1", "url2" }, new String[] { "tag3", "tag4" }, "pending"));

    pets.add(createPet(7, categories.get(3), "Lion 1", new String[] {
        "url1", "url2" }, new String[] { "tag1", "tag2" }, "available"));
    pets.add(createPet(8, categories.get(3), "Lion 2", new String[] {
        "url1", "url2" }, new String[] { "tag2", "tag3" }, "available"));
    pets.add(createPet(9, categories.get(3), "Lion 3", new String[] {
        "url1", "url2" }, new String[] { "tag3", "tag4" }, "available"));

    pets.add(createPet(10, categories.get(2), "Rabbit 1", new String[] {
        "url1", "url2" }, new String[] { "tag3", "tag4" }, "available"));
  }

  public Pet getPetbyId(long petId) {
    for (Pet pet : pets) {
      if (pet.getId() == petId) {
        return pet;
      }
    }
    return null;
  }

  public List<Pet> findPetByStatus(String status) {
    String[] statues = status.split(",");
    List<Pet> result = new java.util.ArrayList<Pet>();
    for (Pet pet : pets) {
      for (String s : statues) {
        if (s.equals(pet.getStatus())) {
          result.add(pet);
        }
      }
    }
    return result;
  }

  public List<Pet> findPetByTags(String tags) {
    String[] tagList = tags.split(",");
    List<Pet> result = new java.util.ArrayList<Pet>();
    for (Pet pet : pets) {
      if (null != pet.getTags()) {
        for (Tag tag : pet.getTags()) {
          for (String tagListString : tagList) {
            if (tagListString.equals(tag.getName()))
              result.add(pet);
          }
        }
      }
    }
    return result;
  }

  public void addPet(Pet pet) {
    if (pets.size() > 0) {
      for (int i = pets.size() - 1; i >= 0; i--) {
        if (pets.get(i).getId() == pet.getId()) {
          pets.remove(i);
        }
      }
    }
    pets.add(pet);
  }

  static Pet createPet(long id, Category cat, String name, String[] urls,
      String[] tags, String status) {
    Pet pet = new Pet();
    pet.setId(id);
    pet.setCategory(cat);
    pet.setName(name);
    if (null != urls) {
      List<String> urlObjs = new ArrayList<String>();
      for (String urlString : urls) {
        urlObjs.add(urlString);
      }
      pet.setPhotoUrls(urlObjs);
    }
    List<Tag> tagObjs = new java.util.ArrayList<Tag>();
    int i = 0;
    if (null != tags) {
      for (String tagString : tags) {
        i = i + 1;
        Tag tag = new Tag();
        tag.setId(i);
        tag.setName(tagString);
        tagObjs.add(tag);
      }
    }
    pet.setTags(tagObjs);
    pet.setStatus(status);
    return pet;
  }

  static Category createCategory(long id, String name) {
    Category category = new Category();
    category.setId(id);
    category.setName(name);
    return category;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2-guice/src/main/java/com/wordnik/swagger/sample/data/UserData.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.data;

import com.wordnik.swagger.sample.model.*;

import java.util.List;
import java.util.ArrayList;

public class UserData {
  static List<User> users = new ArrayList<User>();

  static {
    users.add(createUser(1, "user1", "first name 1", "last name 1",
        "email1@test.com", "123-456-7890", 1));
    users.add(createUser(2, "user2", "first name 2", "last name 2",
        "email2@test.com", "123-456-7890", 2));
    users.add(createUser(3, "user3", "first name 3", "last name 3",
        "email3@test.com", "123-456-7890", 3));
    users.add(createUser(4, "user4", "first name 4", "last name 4",
        "email4@test.com", "123-456-7890", 1));
    users.add(createUser(5, "user5", "first name 5", "last name 5",
        "email5@test.com", "123-456-7890", 2));
    users.add(createUser(6, "user6", "first name 6", "last name 6",
        "email6@test.com", "123-456-7890", 3));
    users.add(createUser(7, "user7", "first name 7", "last name 7",
        "email7@test.com", "123-456-7890", 1));
    users.add(createUser(8, "user8", "first name 8", "last name 8",
        "email8@test.com", "123-456-7890", 2));
    users.add(createUser(9, "user9", "first name 9", "last name 9",
        "email9@test.com", "123-456-7890", 3));
    users.add(createUser(10, "user10", "first name 10", "last name 10",
        "email10@test.com", "123-456-7890", 1));
    users.add(createUser(11, "user?10", "first name ?10", "last name ?10",
        "email101@test.com", "123-456-7890", 1));

  }

  public User findUserByName(String username) {
    for (User user : users) {
      if (user.getUsername().equals(username)) {
        return user;
      }
    }
    return null;
  }

  public void addUser(User user) {
    if (users.size() > 0) {
      for (int i = users.size() - 1; i >= 0; i--) {
        if (users.get(i).getUsername().equals(user.getUsername())) {
          users.remove(i);
        }
      }
    }
    users.add(user);
  }

  public void removeUser(String username) {
    if (users.size() > 0) {
      for (int i = users.size() - 1; i >= 0; i--) {
        if (users.get(i).getUsername().equals(username)) {
          users.remove(i);
        }
      }
    }
  }

  private static User createUser(long id, String username, String firstName,
      String lastName, String email, String phone, int userStatus) {
    User user = new User();
    user.setId(id);
    user.setUsername(username);
    user.setFirstName(firstName);
    user.setLastName(lastName);
    user.setEmail(email);
    user.setPassword("XXXXXXXXXXX");
    user.setPhone(phone);
    user.setUserStatus(userStatus);
    return user;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2-guice/src/main/java/com/wordnik/swagger/sample/data/StoreData.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.data;

import com.wordnik.swagger.sample.model.*;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;

public class StoreData {
  static List<Order> orders = new ArrayList<Order>();

  static {
    orders.add(createOrder(1, 1, 2, new Date(), "placed"));
    orders.add(createOrder(2, 1, 2, new Date(), "delivered"));
    orders.add(createOrder(3, 2, 2, new Date(), "placed"));
    orders.add(createOrder(4, 2, 2, new Date(), "delivered"));
    orders.add(createOrder(5, 3, 2, new Date(), "placed"));
    orders.add(createOrder(11, 3, 2, new Date(), "placed"));
    orders.add(createOrder(12, 3, 2, new Date(), "placed"));
    orders.add(createOrder(13, 3, 2, new Date(), "placed"));
    orders.add(createOrder(14, 3, 2, new Date(), "placed"));
    orders.add(createOrder(15, 3, 2, new Date(), "placed"));
  }

  public Order findOrderById(long orderId) {
    for (Order order : orders) {
      if (order.getId() == orderId) {
        return order;
      }
    }
    return null;
  }

  public void placeOrder(Order order) {
    if (orders.size() > 0) {
      for (int i = orders.size() - 1; i >= 0; i--) {
        if (orders.get(i).getId() == order.getId()) {
          orders.remove(i);
        }
      }
    }
    orders.add(order);
  }

  public void deleteOrder(long orderId) {
    if (orders.size() > 0) {
      for (int i = orders.size() - 1; i >= 0; i--) {
        if (orders.get(i).getId() == orderId) {
          orders.remove(i);
        }
      }
    }
  }

  private static Order createOrder(long id, long petId, int quantity,
      Date shipDate, String status) {
    Order order = new Order();
    order.setId(id);
    order.setPetId(petId);
    order.setQuantity(quantity);
    order.setShipDate(shipDate);
    order.setStatus(status);
    return order;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/Bootstrap.java;<<<<<<< MINE
  @Override
  public void init(ServletConfig config) throws ServletException {
    Info info = new Info()
      .title("Swagger Sample App")
      .description("This is a sample server Petstore server.  You can find out more about Swagger " + 
        "at <a href=\"http://swagger.io\">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, " + 
        "you can use the api key \"special-key\" to test the authorization filters")
      .termsOfService("http://helloreverb.com/terms/")
      .contact(new Contact()
        .email("apiteam@swagger.io"))
      .license(new License()
        .name("Apache 2.0")
        .url("http://www.apache.org/licenses/LICENSE-2.0.html"));

    ServletContext context = config.getServletContext();
    Swagger swagger = new Swagger().info(info);
    swagger.securityDefinition("api_key", new ApiKeyAuthDefinition("api_key", In.HEADER));
    swagger.securityDefinition("petstore_auth", 
      new OAuth2Definition()
        .implicit("http://petstore.swagger.io/api/oauth/dialog")
        .scope("read:pets", "read your pets")
        .scope("write:pets", "modify pets in your account"));
    swagger.tag(new Tag()
      .name("pet")
      .description("Everything about your Pets")
      .externalDocs(new ExternalDocs("Find out more", "http://swagger.io")));
    swagger.tag(new Tag()
      .name("store")
      .description("Access to Petstore orders"));
    swagger.tag(new Tag()
      .name("user")
      .description("Operations about user")
      .externalDocs(new ExternalDocs("Find out more about our store", "http://swagger.io")));
=======
  static {
    // do any additional initialization here, such as set your base path programmatically as such:
    // ConfigFactory.config().setBasePath("http://www.foo.com/");

    ApiInfo info = new ApiInfo(
      "Swagger Sample App",                             /* title */
      "This is a sample server Petstore server.  You can find out more about Swagger " + 
      "at <a href=\"http://swagger.io\">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, " + 
      "you can use the api key \"special-key\" to test the authorization filters", 
      "http://helloreverb.com/terms/",                  /* TOS URL */
      "apiteam@wordnik.com",                            /* Contact */
      "Apache 2.0",                                     /* license */
      "http://www.apache.org/licenses/LICENSE-2.0.html" /* license URL */
    );

    List<AuthorizationScope> scopes = new ArrayList<AuthorizationScope>();
    scopes.add(new AuthorizationScope("email", "Access to your email address"));
    scopes.add(new AuthorizationScope("pets", "Access to your pets"));

    List<GrantType> grantTypes = new ArrayList<GrantType>();

    ImplicitGrant implicitGrant = new ImplicitGrant(
      new LoginEndpoint("http://petstore.swagger.wordnik.com/oauth/dialog"), 
      "access_code");

    grantTypes.add(implicitGrant);

    AuthorizationType oauth = new OAuthBuilder().scopes(scopes).grantTypes(grantTypes).build();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/resource/SampleExceptionMapper.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.resource;

import com.wordnik.swagger.sample.exception.ApiException;
import com.wordnik.swagger.sample.exception.BadRequestException;
import com.wordnik.swagger.sample.exception.NotFoundException;
import com.wordnik.swagger.sample.model.ApiResponse;

import javax.ws.rs.ext.*;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

@Provider
public class SampleExceptionMapper implements ExceptionMapper<Exception> {
  public Response toResponse(Exception exception) {
    if (exception instanceof javax.ws.rs.WebApplicationException) {
      javax.ws.rs.WebApplicationException e = (javax.ws.rs.WebApplicationException) exception;
      return Response
          .status(e.getResponse().getStatus())
          .entity(new ApiResponse(e.getResponse().getStatus(),
              exception.getMessage())).build();
    } else if (exception instanceof com.fasterxml.jackson.core.JsonParseException) {
      return Response.status(400)
          .entity(new ApiResponse(400, "bad input")).build();
    } else if (exception instanceof NotFoundException) {
      return Response
          .status(Status.NOT_FOUND)
          .entity(new ApiResponse(ApiResponse.ERROR, exception
              .getMessage())).build();
    } else if (exception instanceof BadRequestException) {
      return Response
          .status(Status.BAD_REQUEST)
          .entity(new ApiResponse(ApiResponse.ERROR, exception
              .getMessage())).build();
    } else if (exception instanceof ApiException) {
      return Response
          .status(Status.BAD_REQUEST)
          .entity(new ApiResponse(ApiResponse.ERROR, exception
              .getMessage())).build();
    } else {
      return Response.status(500)
          .entity(new ApiResponse(500, "something bad happened"))
          .build();
    }
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/resource/JavaRestResourceUtil.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/exception/ApiException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/exception/NotFoundException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/exception/BadRequestException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/model/ApiResponse.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/model/Pet.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/model/Order.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/model/User.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/model/Tag.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/model/Category.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/util/ApiAuthorizationFilterImpl.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.util;

import com.wordnik.swagger.model.*;
import com.wordnik.swagger.core.filter.SwaggerSpecFilter;

import org.slf4j.*;

import java.util.Map;
import java.util.List;

import javax.servlet.ServletConfig;
import javax.servlet.http.HttpServlet;
/**
 * 
 * The rules are maintained in simple map with key as path and a boolean value
 * indicating given path is secure or not. For method level security the key is
 * combination of http method and path .
 * 
 * If the resource or method is secure then it can only be viewed using a
 * secured api key
 * 
 * Note: Objective of this class is not to provide fully functional
 * implementation of authorization filter. This is only a sample demonstration
 * how API authorization filter works.
 * 
 */

public class ApiAuthorizationFilterImpl implements SwaggerSpecFilter {
  static Logger logger = LoggerFactory.getLogger(ApiAuthorizationFilterImpl.class);

  public boolean isOperationAllowed(Operation operation, ApiDescription api, Map<String, List<String>> params, Map<String, String> cookies, Map<String, List<String>> headers) {
    boolean isAuthorized = checkKey(params, headers);
    if(isAuthorized) {
      return true;
    }
    else {
      if(!"GET".equals(operation.method()) || api.path().indexOf("/store") != -1) {
        return false;
      }
      else return true;
    }
  }

  public boolean isParamAllowed(Parameter parameter, Operation operation, ApiDescription api, Map<String, List<String>> params, Map<String, String> cookies, Map<String, List<String>> headers) {
    boolean isAuthorized = checkKey(params, headers);
    if((parameter.paramAccess().isDefined() && parameter.paramAccess().get().equals("internal")) && !isAuthorized) 
      return false;
    else 
      return true;
  }

  public boolean checkKey(Map<String, List<String>> params, Map<String, List<String>> headers) {
    String keyValue = null;
    if(params.containsKey("api_key"))
      keyValue = params.get("api_key").get(0);
    else {
      if(headers.containsKey("api_key"))
        keyValue = headers.get("api_key").get(0);
    }
    if("special-key".equals(keyValue))
      return true;
    else
      return false;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/util/ApiOriginFilter.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/data/PetData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/data/UserData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/data/StoreData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/resource/SampleExceptionMapper.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/resource/OwnerResource.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/resource/OwnerResource.java;<<<<<<< MINE
@Api(hidden = true, value = "/owner", description = "Operations about the owners", position = 1)
=======
@Path("/owner")
@Api(hidden = true, value = "/owner", description = "Operations about the owners", position = 1)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/resource/JavaRestResourceUtil.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/exception/ApiException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/exception/NotFoundException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/exception/BadRequestException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/model/Owner.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/model/ApiResponse.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/model/Pet.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/model/Tag.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/model/Category.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/util/ApiAuthorizationFilterImpl.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.util;

import com.wordnik.swagger.model.*;
import com.wordnik.swagger.core.filter.SwaggerSpecFilter;

import org.slf4j.*;

import java.util.Map;
import java.util.List;

import javax.servlet.ServletConfig;
import javax.servlet.http.HttpServlet;
/**
 * 
 * The rules are maintained in simple map with key as path and a boolean value
 * indicating given path is secure or not. For method level security the key is
 * combination of http method and path .
 * 
 * If the resource or method is secure then it can only be viewed using a
 * secured api key
 * 
 * Note: Objective of this class is not to provide fully functional
 * implementation of authorization filter. This is only a sample demonstration
 * how API authorization filter works.
 * 
 */

public class ApiAuthorizationFilterImpl implements SwaggerSpecFilter {
  static Logger logger = LoggerFactory.getLogger(ApiAuthorizationFilterImpl.class);

  public boolean isOperationAllowed(Operation operation, ApiDescription api, Map<String, List<String>> params, Map<String, String> cookies, Map<String, List<String>> headers) {
    boolean isAuthorized = checkKey(params, headers);
    if(!"GET".equals(operation.method()) || api.path().indexOf("/store") != -1)
      return false;
    else 
      return true;
  }

  public boolean isParamAllowed(Parameter parameter, Operation operation, ApiDescription api, Map<String, List<String>> params, Map<String, String> cookies, Map<String, List<String>> headers) {
    boolean isAuthorized = checkKey(params, headers);
    if((parameter.paramAccess().isDefined() && parameter.paramAccess().get().equals("internal")) && !isAuthorized) 
      return false;
    else 
      return true;
  }

  public boolean checkKey(Map<String, List<String>> params, Map<String, List<String>> headers) {
    String keyValue = null;
    if(params.containsKey("api_key"))
      keyValue = params.get("api_key").get(0);
    else {
      if(headers.containsKey("api_key"))
        keyValue = headers.get("api_key").get(0);
    }
    if("special-key".equals(keyValue))
      return true;
    else
      return false;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/util/ApiOriginFilter.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/data/PetData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-play2/app/api/PetData.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package api;

import models.*;

import java.util.List;
import java.util.ArrayList;

public class PetData {
	static List<Pet> pets = new ArrayList<Pet>();
	static List<Category> categories = new ArrayList<Category>();

	static {
		categories.add(createCategory(1, "Dogs"));
		categories.add(createCategory(2, "Cats"));
		categories.add(createCategory(3, "Rabbits"));
		categories.add(createCategory(4, "Lions"));

		pets.add(createPet(1, categories.get(1), "Cat 1", new String[] {
				"url1", "url2" }, new String[] { "tag1", "tag2" }, "available"));
		pets.add(createPet(2, categories.get(1), "Cat 2", new String[] {
				"url1", "url2" }, new String[] { "tag2", "tag3" }, "available"));
		pets.add(createPet(3, categories.get(1), "Cat 3", new String[] {
				"url1", "url2" }, new String[] { "tag3", "tag4" }, "pending"));

		pets.add(createPet(4, categories.get(0), "Dog 1", new String[] {
				"url1", "url2" }, new String[] { "tag1", "tag2" }, "available"));
		pets.add(createPet(5, categories.get(0), "Dog 2", new String[] {
				"url1", "url2" }, new String[] { "tag2", "tag3" }, "sold"));
		pets.add(createPet(6, categories.get(0), "Dog 3", new String[] {
				"url1", "url2" }, new String[] { "tag3", "tag4" }, "pending"));

		pets.add(createPet(7, categories.get(3), "Lion 1", new String[] {
				"url1", "url2" }, new String[] { "tag1", "tag2" }, "available"));
		pets.add(createPet(8, categories.get(3), "Lion 2", new String[] {
				"url1", "url2" }, new String[] { "tag2", "tag3" }, "available"));
		pets.add(createPet(9, categories.get(3), "Lion 3", new String[] {
				"url1", "url2" }, new String[] { "tag3", "tag4" }, "available"));

		pets.add(createPet(10, categories.get(2), "Rabbit 1", new String[] {
				"url1", "url2" }, new String[] { "tag3", "tag4" }, "available"));
	}

	public Pet getPetbyId(long petId) {
		for (Pet pet : pets) {
			if (pet.getId() == petId) {
				return pet;
			}
		}
		return null;
	}

	public List<Pet> findPetByStatus(String status) {
		String[] statues = status.split(",");
		List<Pet> result = new java.util.ArrayList<Pet>();
		for (Pet pet : pets) {
			for (String s : statues) {
				if (s.equals(pet.getStatus())) {
					result.add(pet);
				}
			}
		}
		return result;
	}

	public List<Pet> findPetByTags(String tags) {
		String[] tagList = tags.split(",");
		List<Pet> result = new java.util.ArrayList<Pet>();
		for (Pet pet : pets) {
			if (null != pet.getTags()) {
				for (Tag tag : pet.getTags()) {
					for (String tagListString : tagList) {
						if (tagListString.equals(tag.getName()))
							result.add(pet);
					}
				}
			}
		}
		return result;
	}

	public void addPet(Pet pet) {
		if (pets.size() > 0) {
			for (int i = pets.size() - 1; i >= 0; i--) {
				if (pets.get(i).getId() == pet.getId()) {
					pets.remove(i);
				}
			}
		}
		pets.add(pet);
	}

	static Pet createPet(long id, Category cat, String name, String[] urls,
			String[] tags, String status) {
		Pet pet = new Pet();
		pet.setId(id);
		pet.setCategory(cat);
		pet.setName(name);
		if (null != urls) {
			List<String> urlObjs = new ArrayList<String>();
			for (String urlString : urls) {
				urlObjs.add(urlString);
			}
			pet.setPhotoUrls(urlObjs);
		}
		List<Tag> tagObjs = new java.util.ArrayList<Tag>();
		int i = 0;
		if (null != tags) {
			for (String tagString : tags) {
				i = i + 1;
				Tag tag = new Tag();
				tag.setId(i);
				tag.setName(tagString);
				tagObjs.add(tag);
			}
		}
		pet.setTags(tagObjs);
		pet.setStatus(status);
		return pet;
	}

	static Category createCategory(long id, String name) {
		Category category = new Category();
		category.setId(id);
		category.setName(name);
		return category;
	}
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-play2/app/api/UserData.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package api;

import models.*;

import java.util.List;
import java.util.ArrayList;

public class UserData {
	static List<User> users = new ArrayList<User>();

	static {
		users.add(createUser(1, "user1", "first name 1", "last name 1",
				"email1@test.com", "123-456-7890", 1));
		users.add(createUser(2, "user2", "first name 2", "last name 2",
				"email2@test.com", "123-456-7890", 2));
		users.add(createUser(3, "user3", "first name 3", "last name 3",
				"email3@test.com", "123-456-7890", 3));
		users.add(createUser(4, "user4", "first name 4", "last name 4",
				"email4@test.com", "123-456-7890", 1));
		users.add(createUser(5, "user5", "first name 5", "last name 5",
				"email5@test.com", "123-456-7890", 2));
		users.add(createUser(6, "user6", "first name 6", "last name 6",
				"email6@test.com", "123-456-7890", 3));
		users.add(createUser(7, "user7", "first name 7", "last name 7",
				"email7@test.com", "123-456-7890", 1));
		users.add(createUser(8, "user8", "first name 8", "last name 8",
				"email8@test.com", "123-456-7890", 2));
		users.add(createUser(9, "user9", "first name 9", "last name 9",
				"email9@test.com", "123-456-7890", 3));
		users.add(createUser(10, "user10", "first name 10", "last name 10",
				"email10@test.com", "123-456-7890", 1));
		users.add(createUser(11, "user?10", "first name ?10", "last name ?10",
				"email101@test.com", "123-456-7890", 1));

	}

	public User findUserByName(String username) {
		for (User user : users) {
			if (user.getUsername().equals(username)) {
				return user;
			}
		}
		return null;
	}

	public void addUser(User user) {
		if (users.size() > 0) {
			for (int i = users.size() - 1; i >= 0; i--) {
				if (users.get(i).getUsername().equals(user.getUsername())) {
					users.remove(i);
				}
			}
		}
		users.add(user);
	}

	public void removeUser(String username) {
		if (users.size() > 0) {
			for (int i = users.size() - 1; i >= 0; i--) {
				if (users.get(i).getUsername().equals(username)) {
					users.remove(i);
				}
			}
		}
	}

	private static User createUser(long id, String username, String firstName,
			String lastName, String email, String phone, int userStatus) {
		User user = new User();
		user.setId(id);
		user.setUsername(username);
		user.setFirstName(firstName);
		user.setLastName(lastName);
		user.setEmail(email);
		user.setPassword("XXXXXXXXXXX");
		user.setPhone(phone);
		user.setUserStatus(userStatus);
		return user;
	}
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-play2/app/api/StoreData.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package api;

import models.*;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;

public class StoreData {
	static List<Order> orders = new ArrayList<Order>();

	static {
		orders.add(createOrder(1, 1, 2, new Date(), "placed"));
		orders.add(createOrder(2, 1, 2, new Date(), "delivered"));
		orders.add(createOrder(3, 2, 2, new Date(), "placed"));
		orders.add(createOrder(4, 2, 2, new Date(), "delivered"));
		orders.add(createOrder(5, 3, 2, new Date(), "placed"));
		orders.add(createOrder(11, 3, 2, new Date(), "placed"));
		orders.add(createOrder(12, 3, 2, new Date(), "placed"));
		orders.add(createOrder(13, 3, 2, new Date(), "placed"));
		orders.add(createOrder(14, 3, 2, new Date(), "placed"));
		orders.add(createOrder(15, 3, 2, new Date(), "placed"));
	}

	public Order findOrderById(long orderId) {
		for (Order order : orders) {
			if (order.getId() == orderId) {
				return order;
			}
		}
		return null;
	}

	public void placeOrder(Order order) {
		if (orders.size() > 0) {
			for (int i = orders.size() - 1; i >= 0; i--) {
				if (orders.get(i).getId() == order.getId()) {
					orders.remove(i);
				}
			}
		}
		orders.add(order);
	}

	public void deleteOrder(long orderId) {
		if (orders.size() > 0) {
			for (int i = orders.size() - 1; i >= 0; i--) {
				if (orders.get(i).getId() == orderId) {
					orders.remove(i);
				}
			}
		}
	}

	private static Order createOrder(long id, long petId, int quantity,
			Date shipDate, String status) {
		Order order = new Order();
		order.setId(id);
		order.setPetId(petId);
		order.setQuantity(quantity);
		order.setShipDate(shipDate);
		order.setStatus(status);
		return order;
	}
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-play2/app/exception/ApiException.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package exception;

public class ApiException extends Exception{
	private int code;
	public ApiException (int code, String msg) {
		super(msg);
		this.code = code;
	}
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-play2/app/exception/NotFoundException.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package exception;

public class NotFoundException extends ApiException {
	private int code;
	public NotFoundException (int code, String msg) {
		super(code, msg);
		this.code = code;
	}
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-play2/app/exception/BadRequestException.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package exception;

public class BadRequestException extends ApiException{
	private int code;
	public BadRequestException (int code, String msg) {
		super(code, msg);
		this.code = code;
	}
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-play2/app/controllers/JavaRestResourceUtil.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package controllers;

import java.text.SimpleDateFormat;

import java.util.Date;

public class JavaRestResourceUtil {
  public int getInt(int minVal, int maxVal, int defaultValue, String inputString) {
    int output = defaultValue;
    try {
    	output = Integer.parseInt(inputString);
    }
    catch (Exception e){
      output = defaultValue;
    }

    if (output < minVal) output = minVal;
    if (maxVal == -1) {
    	if (output < minVal) output = minVal;
    }
    else if (output > maxVal) output = maxVal;
    return output;
  }

  public long getLong(long minVal, long maxVal, long defaultValue, String inputString) {
    long output = defaultValue;
    try {
    	output = Long.parseLong(inputString);
    }
    catch (Exception e){
      output = defaultValue;
    }

    if (output < minVal) output = minVal;
    if (maxVal == -1) { if (output < minVal) output = minVal; }
    else if (output > maxVal) output = maxVal;
    return output;
  }

  public double getDouble(double minVal, double maxVal, double defaultValue, String inputString) {
    double output = defaultValue;
    try {
    	output = Double.parseDouble(inputString);
    }
    catch (Exception e){
      output = defaultValue;
    }

    if (output < minVal) output = minVal;
    if (maxVal == -1) { 
    	if (output < minVal) output = minVal; 
    }
    else if (output > maxVal) output = maxVal;
    return output;
  }

  public boolean getBoolean(boolean defaultValue, String booleanString) {
    boolean output = defaultValue;
    if (booleanString == null) output = defaultValue;

    //	treat "", "YES" as "true"
    if ("".equals(booleanString)) output = true;
    else if ("YES".equalsIgnoreCase(booleanString)) output = true;
    else if ("NO".equalsIgnoreCase(booleanString)) output = false;
    else {
      try {
    	  output = Boolean.parseBoolean(booleanString);
      }
      catch (Exception e){
        output = defaultValue;
      }
    }
    return output;
  }
  
  public Date getDate(Date defaultValue, String dateString){
    try {
    	return new SimpleDateFormat("yyyy-MM-dd").parse(dateString);
    }
    catch(Exception e) {
      return defaultValue;
    }
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-play2/app/controllers/BaseApiController.java;<<<<<<< MINE
=======
package controllers;


import play.mvc.*;
//import play.data.*;
import play.*;

import com.wordnik.swagger.core.util.JsonUtil;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.util.*;
import java.io.StringWriter;

import models.*;

public class BaseApiController extends Controller {
    static JavaRestResourceUtil ru = new JavaRestResourceUtil();

    protected static ObjectMapper mapper = JsonUtil.mapper();

    public static Result JsonResponse(Object obj) {
        return JsonResponse(obj, 200);
    }

    public static Result JsonResponse(Object obj, int code) {
        StringWriter w = new StringWriter();
        try {
            mapper.writeValue(w, obj);
        } catch (Exception e) {
            // TODO: handle proper return code
            e.printStackTrace();
        }

        response().setContentType("application/json");
        response().setHeader("Access-Control-Allow-Origin", "*");
        response().setHeader("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");
        response().setHeader("Access-Control-Allow-Headers", "Content-Type, api_key, Authorization");

        return status(code, w.toString());
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-play2/app/models/ApiResponse.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package models;

import javax.xml.bind.annotation.XmlTransient;

@javax.xml.bind.annotation.XmlRootElement
public class ApiResponse {
	public static final int ERROR = 1;
	public static final int WARNING = 2;
	public static final int INFO = 3;
	public static final int OK = 4;
	public static final int TOO_BUSY = 5;

	int code;
	String type;
	String message;
	
	public ApiResponse(){}
	
	public ApiResponse(int code, String message){
		this.code = code;
		switch(code){
		case ERROR:
			setType("error");
			break;
		case WARNING:
			setType("warning");
			break;
		case INFO:
			setType("info");
			break;
		case OK:
			setType("ok");
			break;
		case TOO_BUSY:
			setType("too busy");
			break;
		default:
			setType("unknown");
			break;
		}
		this.message = message;
	}

	@XmlTransient
	public int getCode() {
		return code;
	}

	public void setCode(int code) {
		this.code = code;
	}

	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-play2/app/models/Pet.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package models;

import com.wordnik.swagger.annotations.*;

import java.util.List;
import java.util.ArrayList;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Pet")
public class Pet {
	private long id;
	private Category category;
	private String name;
	private List<String> photoUrls = new ArrayList<String>();
	private List<Tag> tags = new ArrayList<Tag>();
	private String status;

	@XmlElement(name = "id")
	public long getId() {
		return id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@XmlElement(name = "category")
	public Category getCategory() {
		return category;
	}

	public void setCategory(Category category) {
		this.category = category;
	}

	@XmlElement(name = "name")
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@XmlElementWrapper(name = "photoUrls")
	@XmlElement(name = "photoUrl")
	public List<String> getPhotoUrls() {
		return photoUrls;
	}

	public void setPhotoUrls(List<String> photoUrls) {
		this.photoUrls = photoUrls;
	}

	@XmlElementWrapper(name = "tags")
	@XmlElement(name = "tag")
	public List<Tag> getTags() {
		return tags;
	}

	public void setTags(List<Tag> tags) {
		this.tags = tags;
	}

	@XmlElement(name = "status")
  @ApiModelProperty(value = "pet status in the store", allowableValues = "available,pending,sold")
  public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-play2/app/models/Order.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package models;

import com.wordnik.swagger.annotations.*;

import java.util.Date;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Order")
public class Order {
	private long id;
	private long petId;
	private int quantity;
	private Date shipDate;
	private String status;
    private boolean complete;

	@XmlElement(name = "id")
	public long getId() {
		return id;
	}

	public void setId(long id) {
		this.id = id;
	}

    public boolean isComplete() {
        return complete;
    }

    public void setComplete(boolean complete) {
        this.complete = complete;
    }


	@XmlElement(name = "petId")
	public long getPetId() {
		return petId;
	}

	public void setPetId(long petId) {
		this.petId = petId;
	}

	@XmlElement(name = "quantity")
	public int getQuantity() {
		return quantity;
	}

	public void setQuantity(int quantity) {
		this.quantity = quantity;
	}

	@XmlElement(name = "status")
  @ApiModelProperty(value = "Order Status", allowableValues = "placed,approved,delivered")
	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	@XmlElement(name = "shipDate")
	public Date getShipDate() {
		return shipDate;
	}

	public void setShipDate(Date shipDate) {
		this.shipDate = shipDate;
	}
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-play2/app/models/User.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package models;

import com.wordnik.swagger.annotations.*;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "User")
public class User {
	private long id;
	private String username;
	private String firstName;
	private String lastName;
	private String email;
	private String password;
	private String phone;
	private int userStatus;

	@XmlElement(name = "id")
	public long getId() {
		return id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@XmlElement(name = "firstName")
	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@XmlElement(name = "username")
	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@XmlElement(name = "lastName")
	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@XmlElement(name = "email")
	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@XmlElement(name = "password")
	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@XmlElement(name = "phone")
	public String getPhone() {
		return phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	@XmlElement(name = "userStatus")
  @ApiModelProperty(value = "User Status", allowableValues = "1-registered,2-active,3-closed")
	public int getUserStatus() {
		return userStatus;
	}

	public void setUserStatus(int userStatus) {
		this.userStatus = userStatus;
	}
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-play2/app/models/Tag.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package models;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Tag")
public class Tag {
	private long id;
	private String name;

	@XmlElement(name = "id")
	public long getId() {
		return id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@XmlElement(name = "name")
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-play2/app/models/Category.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package models;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Category")
public class Category {
	private long id;
	private String name;

	@XmlElement(name = "id")
	public long getId() {
		return id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@XmlElement(name = "name")
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/resource/SampleExceptionMapper.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/resource/JavaRestResourceUtil.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/exception/ApiException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/exception/NotFoundException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/exception/BadRequestException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/model/ApiResponse.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/model/Pet.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/model/Order.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/model/User.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/model/Tag.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/model/Category.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/util/ApiAuthorizationFilterImpl.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.util;

import com.wordnik.swagger.model.*;
import com.wordnik.swagger.core.filter.SwaggerSpecFilter;

import org.slf4j.*;

import java.util.Map;
import java.util.List;

import javax.servlet.ServletConfig;
import javax.servlet.http.HttpServlet;
/**
 * 
 * The rules are maintained in simple map with key as path and a boolean value
 * indicating given path is secure or not. For method level security the key is
 * combination of http method and path .
 * 
 * If the resource or method is secure then it can only be viewed using a
 * secured api key
 * 
 * Note: Objective of this class is not to provide fully functional
 * implementation of authorization filter. This is only a sample demonstration
 * how API authorization filter works.
 * 
 */

public class ApiAuthorizationFilterImpl implements SwaggerSpecFilter {
  static Logger logger = LoggerFactory.getLogger(ApiAuthorizationFilterImpl.class);

  public boolean isOperationAllowed(Operation operation, ApiDescription api, Map<String, List<String>> params, Map<String, String> cookies, Map<String, List<String>> headers) {
    boolean isAuthorized = checkKey(params, headers);
    if(isAuthorized) {
      return true;
    }
    else {
      if(!"GET".equals(operation.method()) || api.path().indexOf("/store") != -1) {
        return false;
      }
      else return true;
    }
  }

  public boolean isParamAllowed(Parameter parameter, Operation operation, ApiDescription api, Map<String, List<String>> params, Map<String, String> cookies, Map<String, List<String>> headers) {
    boolean isAuthorized = checkKey(params, headers);
    if((parameter.paramAccess().isDefined() && parameter.paramAccess().get().equals("internal")) && !isAuthorized) 
      return false;
    else 
      return true;
  }

  public boolean checkKey(Map<String, List<String>> params, Map<String, List<String>> headers) {
    String keyValue = null;
    if(params.containsKey("api_key"))
      keyValue = params.get("api_key").get(0);
    else {
      if(headers.containsKey("api_key"))
        keyValue = headers.get("api_key").get(0);
    }
    if("special-key".equals(keyValue))
      return true;
    else
      return false;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/util/ApiOriginFilter.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/data/PetData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/data/UserData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/data/StoreData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-dropwizard/src/main/java/com/wordnik/swagger/sample/resource/JavaRestResourceUtil.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-dropwizard/src/main/java/com/wordnik/swagger/sample/exception/ApiException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-dropwizard/src/main/java/com/wordnik/swagger/sample/exception/NotFoundException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-dropwizard/src/main/java/com/wordnik/swagger/sample/exception/BadRequestException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-dropwizard/src/main/java/com/wordnik/swagger/sample/model/Pet.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-dropwizard/src/main/java/com/wordnik/swagger/sample/model/Order.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-dropwizard/src/main/java/com/wordnik/swagger/sample/model/User.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-dropwizard/src/main/java/com/wordnik/swagger/sample/model/Tag.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-dropwizard/src/main/java/com/wordnik/swagger/sample/model/Category.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-dropwizard/src/main/java/com/wordnik/swagger/sample/data/PetData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-dropwizard/src/main/java/com/wordnik/swagger/sample/data/UserData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-dropwizard/src/main/java/com/wordnik/swagger/sample/data/StoreData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/Bootstrap.java;<<<<<<< MINE
  @Override
  public void init(ServletConfig config) throws ServletException {
    Info info = new Info()
      .title("Swagger Sample App")
      .description("This is a sample server Petstore server.  You can find out more about Swagger " + 
        "at <a href=\"http://swagger.io\">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, " + 
        "you can use the api key \"special-key\" to test the authorization filters")
      .termsOfService("http://helloreverb.com/terms/")
      .contact(new Contact()
        .email("apiteam@swagger.io"))
      .license(new License()
        .name("Apache 2.0")
        .url("http://www.apache.org/licenses/LICENSE-2.0.html"));

    ServletContext context = config.getServletContext();
    Swagger swagger = new Swagger().info(info);
    swagger.securityDefinition("api_key", new ApiKeyAuthDefinition("api_key", In.HEADER));
    swagger.securityDefinition("petstore_auth", 
      new OAuth2Definition()
        .implicit("http://petstore.swagger.io/api/oauth/dialog")
        .scope("read:pets", "read your pets")
        .scope("write:pets", "modify pets in your account"));
    context.setAttribute("swagger", swagger);
=======
  static {
    // do any additional initialization here, such as set your base path programmatically as such:
    // ConfigFactory.config().setBasePath("http://www.foo.com/");

    // add a custom filter
    FilterFactory.setFilter(new CustomFilter());

    ApiInfo info = new ApiInfo(
      "Swagger Sample App",                             /* title */
      "This is a sample server Petstore server.  You can find out more about Swagger " + 
      "at <a href=\"http://swagger.io\">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, " + 
      "you can use the api key \"special-key\" to test the authorization filters", 
      "http://helloreverb.com/terms/",                  /* TOS URL */
      "apiteam@wordnik.com",                            /* Contact */
      "Apache 2.0",                                     /* license */
      "http://www.apache.org/licenses/LICENSE-2.0.html" /* license URL */
    );

    List<AuthorizationScope> scopes = new ArrayList<AuthorizationScope>();
    scopes.add(new AuthorizationScope("email", "Access to your email address"));
    scopes.add(new AuthorizationScope("pets", "Access to your pets"));

    List<GrantType> grantTypes = new ArrayList<GrantType>();

    ImplicitGrant implicitGrant = new ImplicitGrant(
      new LoginEndpoint("http://localhost:8002/oauth/dialog"), 
      "access_code");

    grantTypes.add(implicitGrant);

    AuthorizationType oauth = new OAuthBuilder().scopes(scopes).grantTypes(grantTypes).build();

    ConfigFactory.config().addAuthorization(oauth);
    ConfigFactory.config().setApiInfo(info);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/resource/SampleExceptionMapper.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/resource/QueryResultBean.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/resource/JavaRestResourceUtil.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/exception/ApiException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/exception/NotFoundException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/exception/BadRequestException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/model/ApiResponse.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/model/Pet.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/model/Order.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/model/User.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/model/Tag.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/model/Category.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/util/ApiAuthorizationFilterImpl.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/util/ApiOriginFilter.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/util/CustomFilter.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.util;

import com.wordnik.swagger.core.filter.SwaggerSpecFilter;
import com.wordnik.swagger.model.*;

public class CustomFilter implements SwaggerSpecFilter {
  @Override
  public boolean isOperationAllowed(
    Operation operation,
    ApiDescription api, 
    java.util.Map<String, java.util.List<String>> params, 
    java.util.Map<String, String> cookies, 
    java.util.Map<String, java.util.List<String>> headers) {
    return true;
  }

  @Override
  public boolean isParamAllowed(
    Parameter parameter, 
    Operation operation, 
    ApiDescription api,
    java.util.Map<String, java.util.List<String>> params, 
    java.util.Map<String, String> cookies,
    java.util.Map<String, java.util.List<String>>  headers) {
    return true;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/data/PetData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/data/UserData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/data/StoreData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/resource/JavaRestResourceUtil.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/exception/ApiException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/exception/NotFoundException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/exception/BadRequestException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/model/ApiResponse.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/model/Pet.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/model/Order.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/model/User.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/model/Tag.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/model/Category.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/util/ApiAuthorizationFilterImpl.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.util;

import com.wordnik.swagger.model.*;
import com.wordnik.swagger.core.filter.SwaggerSpecFilter;

import org.slf4j.*;

import java.util.Map;
import java.util.List;

import javax.servlet.ServletConfig;
import javax.servlet.http.HttpServlet;
/**
 * 
 * The rules are maintained in simple map with key as path and a boolean value
 * indicating given path is secure or not. For method level security the key is
 * combination of http method and path .
 * 
 * If the resource or method is secure then it can only be viewed using a
 * secured api key
 * 
 * Note: Objective of this class is not to provide fully functional
 * implementation of authorization filter. This is only a sample demonstration
 * how API authorization filter works.
 * 
 */

public class ApiAuthorizationFilterImpl implements SwaggerSpecFilter {
  static Logger logger = LoggerFactory.getLogger(ApiAuthorizationFilterImpl.class);

  public boolean isOperationAllowed(Operation operation, ApiDescription api, Map<String, List<String>> params, Map<String, String> cookies, Map<String, List<String>> headers) {
    boolean isAuthorized = checkKey(params, headers);
    if(isAuthorized) {
      return true;
    }
    else {
      if(!"GET".equals(operation.method()) || api.path().indexOf("/store") != -1) {
        return false;
      }
      else return true;
    }
  }

  public boolean isParamAllowed(Parameter parameter, Operation operation, ApiDescription api, Map<String, List<String>> params, Map<String, String> cookies, Map<String, List<String>> headers) {
    boolean isAuthorized = checkKey(params, headers);
    if((parameter.paramAccess().isDefined() && parameter.paramAccess().get().equals("internal")) && !isAuthorized) 
      return false;
    else 
      return true;
  }

  public boolean checkKey(Map<String, List<String>> params, Map<String, List<String>> headers) {
    String keyValue = null;
    if(params.containsKey("api_key"))
      keyValue = params.get("api_key").get(0);
    else {
      if(headers.containsKey("api_key"))
        keyValue = headers.get("api_key").get(0);
    }
    if("special-key".equals(keyValue))
      return true;
    else
      return false;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/util/ApiOriginFilter.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/util/JacksonJsonProvider.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.util;

import javax.ws.rs.Produces;

import javax.ws.rs.core.MediaType;
import javax.ws.rs.ext.Provider;

import com.wordnik.swagger.core.util.JsonUtil;
import com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider;
import com.fasterxml.jackson.databind.*;



import com.fasterxml.jackson.module.scala.DefaultScalaModule;

import com.fasterxml.jackson.core.JsonGenerator.Feature;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;


@Provider
@Produces(MediaType.APPLICATION_JSON)
public class JacksonJsonProvider extends JacksonJaxbJsonProvider {
	private static ObjectMapper commonMapper = null;

	public JacksonJsonProvider() {
		if(commonMapper == null){
		    ObjectMapper mapper = new ObjectMapper();

		    mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
		    mapper.setSerializationInclusion(JsonInclude.Include.NON_DEFAULT);
		    mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
		    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
		    
		    commonMapper = mapper;
		}
		super.setMapper(commonMapper);
	}
	
	
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/data/PetData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/data/UserData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/data/StoreData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-no-annotations/src/main/java/com/wordnik/swagger/sample/Bootstrap.java;<<<<<<< MINE
=======
package com.wordnik.swagger.sample;

import com.wordnik.swagger.model.*;
import com.wordnik.swagger.config.*;
import com.wordnik.swagger.sample.util.*;
import com.wordnik.swagger.config.FilterFactory;

import javax.servlet.http.HttpServlet;

import java.util.List;
import java.util.ArrayList;

public class Bootstrap extends HttpServlet {
  static {
    // do any additional initialization here, such as set your base path programmatically as such:
    // ConfigFactory.config().setBasePath("http://www.foo.com/");

    ApiInfo info = new ApiInfo(
      "Swagger Sample App",                             /* title */
      "This is a sample server Petstore server.  You can find out more about Swagger " + 
      "at <a href=\"http://swagger.io\">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, " + 
      "you can use the api key \"special-key\" to test the authorization filters", 
      "http://helloreverb.com/terms/",                  /* TOS URL */
      "apiteam@wordnik.com",                            /* Contact */
      "Apache 2.0",                                     /* license */
      "http://www.apache.org/licenses/LICENSE-2.0.html" /* license URL */
    );

    List<AuthorizationScope> scopes = new ArrayList<AuthorizationScope>();
    scopes.add(new AuthorizationScope("email", "Access to your email address"));
    scopes.add(new AuthorizationScope("pets", "Access to your pets"));

    List<GrantType> grantTypes = new ArrayList<GrantType>();

    ImplicitGrant implicitGrant = new ImplicitGrant(
      new LoginEndpoint("http://localhost:8002/oauth/dialog"), 
      "access_code");

    grantTypes.add(implicitGrant);

    AuthorizationType oauth = new OAuthBuilder().scopes(scopes).grantTypes(grantTypes).build();

    ConfigFactory.config().addAuthorization(oauth);
    ConfigFactory.config().setApiInfo(info);
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-no-annotations/src/main/java/com/wordnik/swagger/sample/resource/SampleExceptionMapper.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.resource;

import com.wordnik.swagger.sample.exception.ApiException;
import com.wordnik.swagger.sample.exception.BadRequestException;
import com.wordnik.swagger.sample.exception.NotFoundException;
import com.wordnik.swagger.sample.model.ApiResponse;

import javax.ws.rs.ext.*;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

@Provider
public class SampleExceptionMapper implements ExceptionMapper<Exception> {
  public Response toResponse(Exception exception) {
    if (exception instanceof javax.ws.rs.WebApplicationException) {
      javax.ws.rs.WebApplicationException e = (javax.ws.rs.WebApplicationException) exception;
      return Response
          .status(e.getResponse().getStatus())
          .entity(new ApiResponse(e.getResponse().getStatus(),
              exception.getMessage())).build();
    } else if (exception instanceof com.fasterxml.jackson.core.JsonParseException) {
      return Response.status(400)
          .entity(new ApiResponse(400, "bad input")).build();
    } else if (exception instanceof NotFoundException) {
      return Response
          .status(Status.NOT_FOUND)
          .entity(new ApiResponse(ApiResponse.ERROR, exception
              .getMessage())).build();
    } else if (exception instanceof BadRequestException) {
      return Response
          .status(Status.BAD_REQUEST)
          .entity(new ApiResponse(ApiResponse.ERROR, exception
              .getMessage())).build();
    } else if (exception instanceof ApiException) {
      return Response
          .status(Status.BAD_REQUEST)
          .entity(new ApiResponse(ApiResponse.ERROR, exception
              .getMessage())).build();
    } else {
      return Response.status(500)
          .entity(new ApiResponse(500, "something bad happened"))
          .build();
    }
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-no-annotations/src/main/java/com/wordnik/swagger/sample/resource/UserResource.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.resource;

import com.wordnik.swagger.sample.data.UserData;
import com.wordnik.swagger.sample.model.User;
import com.wordnik.swagger.sample.exception.ApiException;
import com.wordnik.swagger.sample.exception.NotFoundException;

import javax.ws.rs.core.Response;
import javax.ws.rs.*;

@Path("/user")
@Produces({"application/json", "application/xml"})
public class UserResource {
  static UserData userData = new UserData();

  @POST
  public Response createUser(User user) {
    userData.addUser(user);
    return Response.ok().entity("").build();
  }

  @POST
  @Path("/createWithArray")
  public Response createUsersWithArrayInput(User[] users) {
      for (User user : users) {
          userData.addUser(user);
      }
      return Response.ok().entity("").build();
  }

  @POST
  @Path("/createWithList")
  public Response createUsersWithListInput(java.util.List<User> users) {
      for (User user : users) {
          userData.addUser(user);
      }
      return Response.ok().entity("").build();
  }

  @PUT
  @Path("/{username}")
  public Response updateUser(@PathParam("username") String username, User user) {
    userData.addUser(user);
    return Response.ok().entity("").build();
  }

  @DELETE
  @Path("/{username}")
  public Response deleteUser(String username) {
    userData.removeUser(username);
    return Response.ok().entity("").build();
  }

  @GET
  @Path("/{username}")
  public Response getUserByName(@PathParam("username") String username)
    throws ApiException {
    User user = userData.findUserByName(username);
    if (null != user) {
      return Response.ok().entity(user).build();
    } else {
      throw new NotFoundException(404, "User not found");
    }
  }

  @GET
  @Path("/login")
  public Response loginUser(@QueryParam("username") String username, @QueryParam("password") String password) {
    return Response.ok()
        .entity("logged in user session:" + System.currentTimeMillis())
        .build();
  }

  @GET
  @Path("/logout")
  public Response logoutUser() {
    return Response.ok().entity("").build();
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-no-annotations/src/main/java/com/wordnik/swagger/sample/resource/PetStoreResource.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.resource;

import com.wordnik.swagger.sample.data.StoreData;
import com.wordnik.swagger.sample.model.Order;
import com.wordnik.swagger.sample.exception.NotFoundException;

import javax.ws.rs.core.Response;
import javax.ws.rs.*;

@Path("/store")
@Produces({"application/json", "application/xml"})
public class PetStoreResource {
  static StoreData storeData = new StoreData();
  static JavaRestResourceUtil ru = new JavaRestResourceUtil();

  @GET
  @Path("/order/{orderId}")
  public Response getOrderById(@PathParam("orderId") String orderId)
      throws NotFoundException {
    Order order = storeData.findOrderById(ru.getLong(0, 10000, 0, orderId));
    if (null != order) {
      return Response.ok().entity(order).build();
    } else {
      throw new NotFoundException(404, "Order not found");
    }
  }

  @POST
  @Path("/order")
  public Response placeOrder(Order order) {
    storeData.placeOrder(order);
    return Response.ok().entity("").build();
  }

  @DELETE
  @Path("/order/{orderId}")
  public Response deleteOrder(@PathParam("orderId") String orderId) {
    storeData.deleteOrder(ru.getLong(0, 10000, 0, orderId));
    return Response.ok().entity("").build();
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-no-annotations/src/main/java/com/wordnik/swagger/sample/resource/PetResource.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.resource;

import com.wordnik.swagger.sample.data.PetData;
import com.wordnik.swagger.sample.model.Pet;
import com.wordnik.swagger.sample.exception.NotFoundException;

import javax.ws.rs.core.Response;
import javax.ws.rs.*;

@Path("/pet")
@Produces({"application/json", "application/xml"})
public class PetResource {
  static PetData petData = new PetData();
  static JavaRestResourceUtil ru = new JavaRestResourceUtil();

  @GET
  @Path("/{petId}")
  public Response getPetById(@PathParam("petId") String petId)
      throws NotFoundException {
    Pet pet = petData.getPetbyId(ru.getLong(0, 100000, 0, petId));
    if (null != pet) {
      return Response.ok().entity(pet).build();
    } else {
      throw new NotFoundException(404, "Pet not found");
    }
  }

  @POST
  public Response addPet(Pet pet) {
    petData.addPet(pet);
    return Response.ok().entity("SUCCESS").build();
  }

  @PUT
  public Response updatePet(Pet pet) {
    petData.addPet(pet);
    return Response.ok().entity("SUCCESS").build();
  }

  @GET
  @Path("/findByStatus")
  public Response findPetsByStatus(@QueryParam("status") String status) {
    return Response.ok(petData.findPetByStatus(status)).build();
  }

  @GET
  @Path("/findByTags")
  @Deprecated
  public Response findPetsByTags(@QueryParam("tags") String tags) {
    return Response.ok(petData.findPetByTags(tags)).build();
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-no-annotations/src/main/java/com/wordnik/swagger/sample/resource/JavaRestResourceUtil.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.resource;

import java.text.SimpleDateFormat;

import java.util.Date;

public class JavaRestResourceUtil {
  public int getInt(int minVal, int maxVal, int defaultValue, String inputString) {
    int output = defaultValue;
    try {
      output = Integer.parseInt(inputString);
    }
    catch (Exception e){
      output = defaultValue;
    }

    if (output < minVal) output = minVal;
    if (maxVal == -1) {
      if (output < minVal) output = minVal;
    }
    else if (output > maxVal) output = maxVal;
    return output;
  }

  public long getLong(long minVal, long maxVal, long defaultValue, String inputString) {
    long output = defaultValue;
    try {
      output = Long.parseLong(inputString);
    }
    catch (Exception e){
      output = defaultValue;
    }

    if (output < minVal) output = minVal;
    if (maxVal == -1) { if (output < minVal) output = minVal; }
    else if (output > maxVal) output = maxVal;
    return output;
  }

  public double getDouble(double minVal, double maxVal, double defaultValue, String inputString) {
    double output = defaultValue;
    try {
      output = Double.parseDouble(inputString);
    }
    catch (Exception e){
      output = defaultValue;
    }

    if (output < minVal) output = minVal;
    if (maxVal == -1) { 
      if (output < minVal) output = minVal; 
    }
    else if (output > maxVal) output = maxVal;
    return output;
  }

  public boolean getBoolean(boolean defaultValue, String booleanString) {
    boolean output = defaultValue;
    if (booleanString == null) output = defaultValue;

    //  treat "", "YES" as "true"
    if ("".equals(booleanString)) output = true;
    else if ("YES".equalsIgnoreCase(booleanString)) output = true;
    else if ("NO".equalsIgnoreCase(booleanString)) output = false;
    else {
      try {
        output = Boolean.parseBoolean(booleanString);
      }
      catch (Exception e){
        output = defaultValue;
      }
    }
    return output;
  }
  
  public Date getDate(Date defaultValue, String dateString){
    try {
      return new SimpleDateFormat("yyyy-MM-dd").parse(dateString);
    }
    catch(Exception e) {
      return defaultValue;
    }
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-no-annotations/src/main/java/com/wordnik/swagger/sample/exception/ApiException.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.exception;

public class ApiException extends Exception{
  private int code;
  public ApiException (int code, String msg) {
    super(msg);
    this.code = code;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-no-annotations/src/main/java/com/wordnik/swagger/sample/exception/NotFoundException.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.exception;

public class NotFoundException extends ApiException {
  private int code;
  public NotFoundException (int code, String msg) {
    super(code, msg);
    this.code = code;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-no-annotations/src/main/java/com/wordnik/swagger/sample/exception/BadRequestException.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.exception;

public class BadRequestException extends ApiException{
  private int code;
  public BadRequestException (int code, String msg) {
    super(code, msg);
    this.code = code;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-no-annotations/src/main/java/com/wordnik/swagger/sample/model/ApiResponse.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import javax.xml.bind.annotation.XmlTransient;

@javax.xml.bind.annotation.XmlRootElement
public class ApiResponse {
  public static final int ERROR = 1;
  public static final int WARNING = 2;
  public static final int INFO = 3;
  public static final int OK = 4;
  public static final int TOO_BUSY = 5;

  int code;
  String type;
  String message;
  
  public ApiResponse(){}
  
  public ApiResponse(int code, String message){
    this.code = code;
    switch(code){
    case ERROR:
      setType("error");
      break;
    case WARNING:
      setType("warning");
      break;
    case INFO:
      setType("info");
      break;
    case OK:
      setType("ok");
      break;
    case TOO_BUSY:
      setType("too busy");
      break;
    default:
      setType("unknown");
      break;
    }
    this.message = message;
  }

  @XmlTransient
  public int getCode() {
    return code;
  }

  public void setCode(int code) {
    this.code = code;
  }

  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-no-annotations/src/main/java/com/wordnik/swagger/sample/model/Pet.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import com.wordnik.swagger.annotations.*;

import java.util.List;
import java.util.ArrayList;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Pet")
public class Pet {
  private long id;
  private Category category;
  private String name;
  private List<String> photoUrls = new ArrayList<String>();
  private List<Tag> tags = new ArrayList<Tag>();
  private String status;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  @XmlElement(name = "category")
  public Category getCategory() {
    return category;
  }

  public void setCategory(Category category) {
    this.category = category;
  }

  @XmlElement(name = "name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  @XmlElementWrapper(name = "photoUrls")
  @XmlElement(name = "photoUrl")
  public List<String> getPhotoUrls() {
    return photoUrls;
  }

  public void setPhotoUrls(List<String> photoUrls) {
    this.photoUrls = photoUrls;
  }

  @XmlElementWrapper(name = "tags")
  @XmlElement(name = "tag")
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }

  @XmlElement(name = "status")
  @ApiModelProperty(value = "pet status in the store", allowableValues = "available,pending,sold")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-no-annotations/src/main/java/com/wordnik/swagger/sample/model/Order.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import com.wordnik.swagger.annotations.*;

import java.util.Date;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Order")
public class Order {
  private long id;
  private long petId;
  private int quantity;
  private Date shipDate;
  private String status;
    private boolean complete;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

    public boolean isComplete() {
        return complete;
    }

    public void setComplete(boolean complete) {
        this.complete = complete;
    }


  @XmlElement(name = "petId")
  public long getPetId() {
    return petId;
  }

  public void setPetId(long petId) {
    this.petId = petId;
  }

  @XmlElement(name = "quantity")
  public int getQuantity() {
    return quantity;
  }

  public void setQuantity(int quantity) {
    this.quantity = quantity;
  }

  @XmlElement(name = "status")
  @ApiModelProperty(value = "Order Status", allowableValues = "placed, approved, delivered")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  @XmlElement(name = "shipDate")
  public Date getShipDate() {
    return shipDate;
  }

  public void setShipDate(Date shipDate) {
    this.shipDate = shipDate;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-no-annotations/src/main/java/com/wordnik/swagger/sample/model/User.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import com.wordnik.swagger.annotations.*;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "User")
public class User {
  private long id;
  private String username;
  private String firstName;
  private String lastName;
  private String email;
  private String password;
  private String phone;
  private int userStatus;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  @XmlElement(name = "firstName")
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

  @XmlElement(name = "username")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  @XmlElement(name = "lastName")
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  @XmlElement(name = "email")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  @XmlElement(name = "password")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  @XmlElement(name = "phone")
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }

  @XmlElement(name = "userStatus")
  @ApiModelProperty(value = "User Status", allowableValues = "1-registered,2-active,3-closed")
  public int getUserStatus() {
    return userStatus;
  }

  public void setUserStatus(int userStatus) {
    this.userStatus = userStatus;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-no-annotations/src/main/java/com/wordnik/swagger/sample/model/Tag.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Tag")
public class Tag {
  private long id;
  private String name;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  @XmlElement(name = "name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-no-annotations/src/main/java/com/wordnik/swagger/sample/model/Category.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Category")
public class Category {
  private long id;
  private String name;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  @XmlElement(name = "name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-no-annotations/src/main/java/com/wordnik/swagger/sample/util/ApiAuthorizationFilterImpl.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.util;

import com.wordnik.swagger.model.*;
import com.wordnik.swagger.core.filter.SwaggerSpecFilter;

import org.slf4j.*;

import java.util.Map;
import java.util.List;

import javax.servlet.ServletConfig;
import javax.servlet.http.HttpServlet;
/**
 * 
 * The rules are maintained in simple map with key as path and a boolean value
 * indicating given path is secure or not. For method level security the key is
 * combination of http method and path .
 * 
 * If the resource or method is secure then it can only be viewed using a
 * secured api key
 * 
 * Note: Objective of this class is not to provide fully functional
 * implementation of authorization filter. This is only a sample demonstration
 * how API authorization filter works.
 * 
 */

public class ApiAuthorizationFilterImpl implements SwaggerSpecFilter {
  static Logger logger = LoggerFactory.getLogger(ApiAuthorizationFilterImpl.class);

  public boolean isOperationAllowed(Operation operation, ApiDescription api, Map<String, List<String>> params, Map<String, String> cookies, Map<String, List<String>> headers) {
    boolean isAuthorized = checkKey(params, headers);
    if(isAuthorized) {
      return true;
    }
    else {
      if(!"GET".equals(operation.method()) || api.path().indexOf("/store") != -1) {
        return false;
      }
      else return true;
    }
  }

  public boolean isParamAllowed(Parameter parameter, Operation operation, ApiDescription api, Map<String, List<String>> params, Map<String, String> cookies, Map<String, List<String>> headers) {
    boolean isAuthorized = checkKey(params, headers);
    if((parameter.paramAccess().isDefined() && parameter.paramAccess().get().equals("internal")) && !isAuthorized) 
      return false;
    else 
      return true;
  }

  public boolean checkKey(Map<String, List<String>> params, Map<String, List<String>> headers) {
    String keyValue = null;
    if(params.containsKey("api_key"))
      keyValue = params.get("api_key").get(0);
    else {
      if(headers.containsKey("api_key"))
        keyValue = headers.get("api_key").get(0);
    }
    if("special-key".equals(keyValue))
      return true;
    else
      return false;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-no-annotations/src/main/java/com/wordnik/swagger/sample/util/ApiOriginFilter.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.util;

import java.io.IOException;

import javax.servlet.*;
import javax.servlet.http.HttpServletResponse;

public class ApiOriginFilter implements javax.servlet.Filter {
  @Override
  public void doFilter(ServletRequest request, ServletResponse response,
      FilterChain chain) throws IOException, ServletException {
    HttpServletResponse res = (HttpServletResponse) response;
    res.addHeader("Access-Control-Allow-Origin", "*");
    res.addHeader("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");
    res.addHeader("Access-Control-Allow-Headers", "Content-Type");
    chain.doFilter(request, response);
  }

  @Override
  public void destroy() {
  }

  @Override
  public void init(FilterConfig filterConfig) throws ServletException {
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-no-annotations/src/main/java/com/wordnik/swagger/sample/data/PetData.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.data;

import com.wordnik.swagger.sample.model.*;

import java.util.List;
import java.util.ArrayList;

public class PetData {
  static List<Pet> pets = new ArrayList<Pet>();
  static List<Category> categories = new ArrayList<Category>();

  static {
    categories.add(createCategory(1, "Dogs"));
    categories.add(createCategory(2, "Cats"));
    categories.add(createCategory(3, "Rabbits"));
    categories.add(createCategory(4, "Lions"));

    pets.add(createPet(1, categories.get(1), "Cat 1", new String[] {
        "url1", "url2" }, new String[] { "tag1", "tag2" }, "available"));
    pets.add(createPet(2, categories.get(1), "Cat 2", new String[] {
        "url1", "url2" }, new String[] { "tag2", "tag3" }, "available"));
    pets.add(createPet(3, categories.get(1), "Cat 3", new String[] {
        "url1", "url2" }, new String[] { "tag3", "tag4" }, "pending"));

    pets.add(createPet(4, categories.get(0), "Dog 1", new String[] {
        "url1", "url2" }, new String[] { "tag1", "tag2" }, "available"));
    pets.add(createPet(5, categories.get(0), "Dog 2", new String[] {
        "url1", "url2" }, new String[] { "tag2", "tag3" }, "sold"));
    pets.add(createPet(6, categories.get(0), "Dog 3", new String[] {
        "url1", "url2" }, new String[] { "tag3", "tag4" }, "pending"));

    pets.add(createPet(7, categories.get(3), "Lion 1", new String[] {
        "url1", "url2" }, new String[] { "tag1", "tag2" }, "available"));
    pets.add(createPet(8, categories.get(3), "Lion 2", new String[] {
        "url1", "url2" }, new String[] { "tag2", "tag3" }, "available"));
    pets.add(createPet(9, categories.get(3), "Lion 3", new String[] {
        "url1", "url2" }, new String[] { "tag3", "tag4" }, "available"));

    pets.add(createPet(10, categories.get(2), "Rabbit 1", new String[] {
        "url1", "url2" }, new String[] { "tag3", "tag4" }, "available"));
  }

  public Pet getPetbyId(long petId) {
    for (Pet pet : pets) {
      if (pet.getId() == petId) {
        return pet;
      }
    }
    return null;
  }

  public List<Pet> findPetByStatus(String status) {
    String[] statues = status.split(",");
    List<Pet> result = new java.util.ArrayList<Pet>();
    for (Pet pet : pets) {
      for (String s : statues) {
        if (s.equals(pet.getStatus())) {
          result.add(pet);
        }
      }
    }
    return result;
  }

  public List<Pet> findPetByTags(String tags) {
    String[] tagList = tags.split(",");
    List<Pet> result = new java.util.ArrayList<Pet>();
    for (Pet pet : pets) {
      if (null != pet.getTags()) {
        for (Tag tag : pet.getTags()) {
          for (String tagListString : tagList) {
            if (tagListString.equals(tag.getName()))
              result.add(pet);
          }
        }
      }
    }
    return result;
  }

  public void addPet(Pet pet) {
    if (pets.size() > 0) {
      for (int i = pets.size() - 1; i >= 0; i--) {
        if (pets.get(i).getId() == pet.getId()) {
          pets.remove(i);
        }
      }
    }
    pets.add(pet);
  }

  static Pet createPet(long id, Category cat, String name, String[] urls,
      String[] tags, String status) {
    Pet pet = new Pet();
    pet.setId(id);
    pet.setCategory(cat);
    pet.setName(name);
    if (null != urls) {
      List<String> urlObjs = new ArrayList<String>();
      for (String urlString : urls) {
        urlObjs.add(urlString);
      }
      pet.setPhotoUrls(urlObjs);
    }
    List<Tag> tagObjs = new java.util.ArrayList<Tag>();
    int i = 0;
    if (null != tags) {
      for (String tagString : tags) {
        i = i + 1;
        Tag tag = new Tag();
        tag.setId(i);
        tag.setName(tagString);
        tagObjs.add(tag);
      }
    }
    pet.setTags(tagObjs);
    pet.setStatus(status);
    return pet;
  }

  static Category createCategory(long id, String name) {
    Category category = new Category();
    category.setId(id);
    category.setName(name);
    return category;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-no-annotations/src/main/java/com/wordnik/swagger/sample/data/UserData.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.data;

import com.wordnik.swagger.sample.model.*;

import java.util.List;
import java.util.ArrayList;

public class UserData {
  static List<User> users = new ArrayList<User>();

  static {
    users.add(createUser(1, "user1", "first name 1", "last name 1",
        "email1@test.com", "123-456-7890", 1));
    users.add(createUser(2, "user2", "first name 2", "last name 2",
        "email2@test.com", "123-456-7890", 2));
    users.add(createUser(3, "user3", "first name 3", "last name 3",
        "email3@test.com", "123-456-7890", 3));
    users.add(createUser(4, "user4", "first name 4", "last name 4",
        "email4@test.com", "123-456-7890", 1));
    users.add(createUser(5, "user5", "first name 5", "last name 5",
        "email5@test.com", "123-456-7890", 2));
    users.add(createUser(6, "user6", "first name 6", "last name 6",
        "email6@test.com", "123-456-7890", 3));
    users.add(createUser(7, "user7", "first name 7", "last name 7",
        "email7@test.com", "123-456-7890", 1));
    users.add(createUser(8, "user8", "first name 8", "last name 8",
        "email8@test.com", "123-456-7890", 2));
    users.add(createUser(9, "user9", "first name 9", "last name 9",
        "email9@test.com", "123-456-7890", 3));
    users.add(createUser(10, "user10", "first name 10", "last name 10",
        "email10@test.com", "123-456-7890", 1));
    users.add(createUser(11, "user?10", "first name ?10", "last name ?10",
        "email101@test.com", "123-456-7890", 1));

  }

  public User findUserByName(String username) {
    for (User user : users) {
      if (user.getUsername().equals(username)) {
        return user;
      }
    }
    return null;
  }

  public void addUser(User user) {
    if (users.size() > 0) {
      for (int i = users.size() - 1; i >= 0; i--) {
        if (users.get(i).getUsername().equals(user.getUsername())) {
          users.remove(i);
        }
      }
    }
    users.add(user);
  }

  public void removeUser(String username) {
    if (users.size() > 0) {
      for (int i = users.size() - 1; i >= 0; i--) {
        if (users.get(i).getUsername().equals(username)) {
          users.remove(i);
        }
      }
    }
  }

  private static User createUser(long id, String username, String firstName,
      String lastName, String email, String phone, int userStatus) {
    User user = new User();
    user.setId(id);
    user.setUsername(username);
    user.setFirstName(firstName);
    user.setLastName(lastName);
    user.setEmail(email);
    user.setPassword("XXXXXXXXXXX");
    user.setPhone(phone);
    user.setUserStatus(userStatus);
    return user;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-no-annotations/src/main/java/com/wordnik/swagger/sample/data/StoreData.java;<<<<<<< MINE
=======
/**
 *  Copyright 2014 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.data;

import com.wordnik.swagger.sample.model.*;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;

public class StoreData {
  static List<Order> orders = new ArrayList<Order>();

  static {
    orders.add(createOrder(1, 1, 2, new Date(), "placed"));
    orders.add(createOrder(2, 1, 2, new Date(), "delivered"));
    orders.add(createOrder(3, 2, 2, new Date(), "placed"));
    orders.add(createOrder(4, 2, 2, new Date(), "delivered"));
    orders.add(createOrder(5, 3, 2, new Date(), "placed"));
    orders.add(createOrder(11, 3, 2, new Date(), "placed"));
    orders.add(createOrder(12, 3, 2, new Date(), "placed"));
    orders.add(createOrder(13, 3, 2, new Date(), "placed"));
    orders.add(createOrder(14, 3, 2, new Date(), "placed"));
    orders.add(createOrder(15, 3, 2, new Date(), "placed"));
  }

  public Order findOrderById(long orderId) {
    for (Order order : orders) {
      if (order.getId() == orderId) {
        return order;
      }
    }
    return null;
  }

  public void placeOrder(Order order) {
    if (orders.size() > 0) {
      for (int i = orders.size() - 1; i >= 0; i--) {
        if (orders.get(i).getId() == order.getId()) {
          orders.remove(i);
        }
      }
    }
    orders.add(order);
  }

  public void deleteOrder(long orderId) {
    if (orders.size() > 0) {
      for (int i = orders.size() - 1; i >= 0; i--) {
        if (orders.get(i).getId() == orderId) {
          orders.remove(i);
        }
      }
    }
  }

  private static Order createOrder(long id, long petId, int quantity,
      Date shipDate, String status) {
    Order order = new Order();
    order.setId(id);
    order.setPetId(petId);
    order.setQuantity(quantity);
    order.setShipDate(shipDate);
    order.setStatus(status);
    return order;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_605180e_b7719ea/rev_605180e-b7719ea/modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader.java;<<<<<<< MINE
=======
import org.apache.commons.lang3.StringUtils;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ExternalDocs.java;<<<<<<< MINE
 * @since 1.5.2
=======
 * @since 1.5.2-M1
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ExternalDocs.java;<<<<<<< MINE
  /** A short description of the target documentation. GFM syntax can be used for rich text representation. */
=======
  /**
   * A short description of the target documentation. GFM syntax can be used for rich text representation.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ExternalDocs.java;<<<<<<< MINE
  /** URL for the docs. */
=======
  /**
   * URL for the docs.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiResponse.java;<<<<<<< MINE
 * An ApiResponse represents a type of response from a server.  This can be used to
 * describe both success codes as well as errors.
 * If your Api has different response classes, you can describe them here by associating
 * a response class with a response code.  Note, Swagger does not allow multiple response
 * types for a single response code.
=======
 * Describes a possible response of an operation.
 * <p/>
 * This can be used to describe possible success and error codes from your REST API call.
 * You may or may not use this to describe the return type of the operation (normally a
 * successful code), but the successful response should be described as well using the
 * {@link ApiOperation}.
 * <p/>
 * If your API has uses a different response class for these responses, you can describe them
 * here by associating a response class with a response code.
 * Note, Swagger does not allow multiple response types for a single response code.
 * <p/>
 * This annotation is not used directly and will not be parsed by Swagger. It should be used
 * within the {@link ApiResponses}.
 *
 * @see ApiOperation
 * @see ApiResponses
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiResponse.java;<<<<<<< MINE
  /** Response code to describe */
=======
  /**
   * The HTTP status code of the response.
   * <p/>
   * The value should be one of the formal <a target="_blank" href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">HTTP Status Code Definitions</a>.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiResponse.java;<<<<<<< MINE
  /** Human-readable message to accompany the response */
=======
  /**
   * Human-readable message to accompany the response.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiResponse.java;<<<<<<< MINE
  /** Optional response class to describe the payload of the message */
=======
  /**
   * Optional response class to describe the payload of the message.
   * <p/>
   * Corresponds to the `schema` field of the response message object.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiResponse.java;<<<<<<< MINE
=======
  /**
   * A list of possible headers provided alongside the response.
   *
   * @return a list of response headers.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
 * Describes an operation or typically a HTTP method against a specific path.  Operations
 * with equivalent paths are grouped in an array in the Api Declaration.  See
 * https://github.com/wordnik/swagger-core/wiki/API-Declaration
=======
 * Describes an operation or typically a HTTP method against a specific path.
 * <p/>
 * Operations with equivalent paths are grouped in a single Operation Object.
 * A combination of a HTTP method and a path creates a unique operation.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
  /** Brief description of the operation  */
=======
  /**
   * Corresponds to the `summary` field of the operation.
   * <p/>
   * Provides a brief description of this operation. Should be 120 characters or less
   * for proper visibility in Swagger-UI.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
  /** long description of the operation */
=======
  /**
   * Corresponds to the 'notes' field of the operation.
   * <p/>
   * A verbose description of the operation.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
   * A list of tags for API documentation control. 
=======
   * A list of tags for API documentation control.
   * <p/>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
=======
   * A non-empty value will override the value received from {@link Api#value()} or {@link Api#tags()}
   * for this operation.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
   * @since 1.5.2
=======
   * @since 1.5.2-M1
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
  /** default response class from the operation */
=======
  /**
   * The response type of the operation.
   * <p/>
   * In JAX-RS applications, the return type of the method would automatically be used, unless it is
   * {@code javax.ws.rs.core.Response}. In that case, the operation return type would default to `void`
   * as the actual response type cannot be known.
   * <p/>
   * Setting this property would override any automatically-derived data type.
   * <p/>
   * If the value used is a class representing a primitive ({@code Integer}, {@code Long}, ...)
   * the corresponding primitive type will be used.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
  /** if the response class is within a container, specify it here */
=======
  /**
   * Notes whether the response type is a list of values.
   * <p/>
   * Valid values are "List" or "Map". Any other value will be ignored.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
  /** the HTTP method, i.e GET, PUT, POST, DELETE, PATCH, OPTIONS */
=======
  /**
   * Corresponds to the `method` field as the HTTP method used.
   * <p/>
   * If not stated, in JAX-RS applications, the following JAX-RS annotations would be scanned
   * and used: {@code @GET}, {@code @HEAD}, {@code @POST}, {@code @PUT}, {@code @DELETE} and {@code @OPTIONS}.
   * Note that even though not part of the JAX-RS specification, if you create and use the {@code @PATCH} annotation,
   * it will also be parsed and used. If the httpMethod property is set, it will override the JAX-RS annotation.
   * <p/>
   * For Servlets, you must specify the HTTP method manually.
   * <p/>
   * Acceptable values are "GET", "HEAD", "POST", "PUT", "DELETE", "OPTIONS" and "PATCH".
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
  /** allow explicit ordering of operations inside the Api Declaration */
=======
  /**
   * Not used in 1.5.X, kept for legacy support.
   */
  @Deprecated
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
  /** the nickname for the operation, to override what is detected by the annotation scanner */
=======
  /**
   * Corresponds to the `operationId` field.
   * <p/>
   * The operationId is used by third-party tools to uniquely identify this operation. In Swagger 2.0, this is
   * no longer mandatory and if not provided will remain empty.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
  
  /** content type produced by this Api */
=======

  /**
   * Corresponds to the `produces` field of the operation.
   * <p/>
   * Takes in comma-separated values of content types.
   * For example, "application/json, application/xml" would suggest this operation
   * generates JSON and XML output.
   * <p/>
   * For JAX-RS resources, this would automatically take the value of the {@code @Produces}
   * annotation if such exists. It can also be used to override the {@code @Produces} values
   * for the Swagger documentation.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
  /** media type consumed by this Api */
=======
  /**
   * Corresponds to the `consumes` field of the operation.
   * <p/>
   * Takes in comma-separated values of content types.
   * For example, "application/json, application/xml" would suggest this API Resource
   * accepts JSON and XML input.
   * <p/>
   * For JAX-RS resources, this would automatically take the value of the {@code @Consumes}
   * annotation if such exists. It can also be used to override the {@code @Consumes} values
   * for the Swagger documentation.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
  /** protocols that this Api requires (i.e. https) */
=======
  /**
   * Sets specific protocols (schemes) for this operation.
   * <p/>
   * Comma-separated values of the available protocols. Possible values: http, https, ws, wss.
   *
   * @return the protocols supported by the operations under the resource.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
  /** authorizations required by this Api */
  //String authorizations() default "";
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
  /**
   * Corresponds to the `security` field of the Operation Object.
   * <p/>
   * Takes in a list of the authorizations (security requirements) for this operation.
   *
   * @see Authorization
   *
   * @return an array of authorizations required by the server, or a single, empty authorization value if not set.
   */
  Authorization[] authorizations() default @Authorization(value = "");
=======
  /**
   * Corresponds to the `security` field of the Operation Object.
   * <p/>
   * Takes in a list of the authorizations (security requirements) for this operation.
   *
   * @see Authorization
   *
   * @return an array of authorizations required by the server, or a single, empty authorization value if not set.
   */
  Authorization[] authorizations() default @Authorization(value = "", type = "");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
   * Allows an operation to be marked as hidden
=======
   * Hides the operation from the list of operations.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
=======
  /**
   * A list of possible headers provided alongside the response.
   *
   * @return a list of response headers.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
/** 
 * An ApiModelProperty desecribes a property inside a model class.  The annotations can
 * apply to a method, a property, etc., depending on how the model scanner is configured and
 * used.
=======
/**
 * Adds and manipulates data of a model property.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
  /** Provide a human readable synopsis of this property */
=======
  /**
   * A brief description of this property.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
   * Allows overriding the name of the property
=======
   * Allows overriding the name of the property.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
   * If the values that can be set are restricted, they can be set here. In the form of a comma separated list
   * <code>registered, active, closed</code>.
   *
   * @return the allowable values
=======
   * Limits the acceptable values for this property.
   * <p/>
   * There are three ways to describe the allowable values:
   * <ol>
   * <li>To set a list of values, provide a comma-separated list.
   * For example: {@code first, second, third}.</li>
   * <li>To set a range of values, start the value with "range", and surrounding by square
   * brackets include the minimum and maximum values. For example: {@code range[1, 5]}.</li>
   * <li>To set a minimum/maximum value, use the same format for range but use "infinity"
   * or "-infinity" as the second value. For example, {@code range[1, infinity]} means the
   * minimum allowable value of this parameter is 1.</li>
   * </ol>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
  /** 
   * specify an optional access value for filtering in a Filter 
   * implementation.  This
   * allows you to hide certain parameters if a user doesn't have access to them
=======
  /**
   * Allows for filtering a property from the API documentation. See com.wordnik.swagger.core.filter.SwaggerSpecFilter.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
  /** long description of the property */
=======
  /**
   * Currently not in use.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
   * The dataType. See the documentation for the supported datatypes. If the data type is a custom object, set
   * it's name, or nothing. In case of an enum use 'string' and allowableValues for the enum constants.
=======
   * The data type of the parameter.
   * <p/>
   * This can be the class name or a primitive. The value will override the data type as read from the class
   * property.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
   * Whether or not the property is required, defaults to false.
   * 
   * @return true if required, false otherwise
=======
   * Specifies if the parameter is required or not.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
   * allows explicitly ordering the property in the model.  Since reflection has no guarantee on
   * ordering, you should specify property order to keep models consistent across different VM implementations and versions.
=======
   * Allows explicitly ordering the property in the model.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
  
=======

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
   * Allows a model property to be marked as hidden in the swagger model definition
=======
   * Allows a model property to be hidden in the Swagger model definition.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
   * A sample value for the property
   **/
=======
   * A sample value for the property.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
   * Allows a model property to be designated as read only
   **/
=======
   * Allows a model property to be designated as read only.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
   * <li>If {@code paramType} is "body", the name should be "body".</li>
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
   * <li>To set a list of values, provide a comma-separated list surrounded by square brackets.
   * For example: {@code [first, second, third]}.</li>
=======
   * <li>To set a list of values, provide a comma-separated list.
   * For example: {@code first, second, third}.</li>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
=======
   *<p/>
   * See com.wordnik.swagger.core.filter.SwaggerSpecFilter for further details.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
   * Specifies whether the parameter can accept multiple comma-separated values.
=======
   * Specifies whether the parameter can accept multiple values by having multiple occurrences.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java;<<<<<<< MINE
 * <p>
=======
 * <p/>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java;<<<<<<< MINE
   * <p>
=======
   * <p/>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java;<<<<<<< MINE
   * <p>
=======
   * <p/>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiResponses.java;<<<<<<< MINE
 * A simple array wrapper to contain multiple ApiResponse objects
=======
 * A wrapper to allow a list of multiple {@link com.wordnik.swagger.annotations.ApiResponse} objects.
 * <p/>
 * If you need to describe a single {@link com.wordnik.swagger.annotations.ApiResponse}, you still
 * must use this annotation and wrap the {@code @ApiResponse} in an array.
 *
 * @see com.wordnik.swagger.annotations.ApiResponse
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiResponses.java;<<<<<<< MINE
=======
  /**
   * A list of {@link com.wordnik.swagger.annotations.ApiResponse}s provided by the API operation.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
 * <p>
 * The resource affects both the root document of Swagger, the Resource
 * Listing, and the API Declaration of that specific resource.
 * <p>
 * Swagger will only include and introspect only classes that are annotated
=======
 * <p/>
 * By default, Swagger-Core will only include and introspect only classes that are annotated
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * The 'path' that is going to be used to host the API Declaration of the
   * resource.
   * <p>
   * For JAX-RS resources, this would normally have the same value as the {@code @Path}
   * on the resource, but can be any other value as well. It will serve as the path
   * where the documentation is hosted.
   * <p>
   * For Servlets, this path has to be the path serving the Servlet.
   * <p>
   * If the value isn't preceded with a slash, one would be added to it.
   * 
   * @return the document location value, or empty string if not set
=======
   * Implicitly sets a tag for the operations, legacy support (read description).
   * <p/>
   * In swagger-core 1.3.X, this was used as the 'path' that is to host the API Declaration of the
   * resource. This is no longer relevant in swagger-core 1.5.X.
   * <p/>
   * If {@link #tags()} is <i>not</i> used, this value will be used to set the tag for the operations described by this
   * resource. Otherwise, the value will be ignored.
   * <p/>
   * The leading / (if exists) will be removed.
   *
   * @return tag name for operations under this resource, unless {@link #tags()} is defined.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
=======
   * <p/>
   * A non-empty value will override the value provided in {@link #value()}.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * @since 1.5.2
=======
   * @since 1.5.2-M1
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * Corresponds to the `description` field of the Resource Listing API operation.
   * <p>
   * This should be a short description of the resource.
=======
   * Not used in 1.5.X, kept for legacy support.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * @return a longer description about this API
=======
   * @return a longer description about this API, no longer used.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
=======
  @Deprecated
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * Corresponds to the `basePath` field of the API Declaration.
   * <p>
   * The `basePath` is derived automatically by Swagger. This property allows
   * overriding the default value if needed.  for swagger 2.0 specifications, this
   * value is no longer supported
=======
   * Not used in 1.5.X, kept for legacy support.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * @since 1.3.7
   *
   * @return the basePath for this operation
=======
   * @return the basePath for this operation, no longer used.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * Optional explicit ordering of this API resource in the Resource Listing.
   * As of swagger-spec 2.0, this value is no longer used
   *
=======
   * Not used in 1.5.X, kept for legacy support.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * @return the position of this API in the resource listing
=======
   * @return the position of this API in the resource listing, no longer used.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * Corresponds to the `produces` field of the API Declaration.
   * <p>
=======
   * Corresponds to the `produces` field of the operations under this resource.
   * <p/>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * For example, "application/json, application/xml" would suggest this API Resource
   * generates JSON and XML output.
   * <p>
=======
   * For example, "application/json, application/xml" would suggest the operations
   * generate JSON and XML output.
   * <p/>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * @return the supported media types supported by the server, or an empty string if not set
=======
   * @return the supported media types supported by the server, or an empty string if not set.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * Corresponds to the `consumes` field of the API Declaration.
   * <p>
=======
   * Corresponds to the `consumes` field of the operations under this resource.
   * <p/>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * For example, "application/json, application/xml" would suggest this API Resource
   * accepts JSON and XML input.
   * <p>
=======
   * For example, "application/json, application/xml" would suggest the operations
   * accept JSON and XML input.
   * <p/>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * This property is currently not in use.
=======
   * Sets specific protocols (schemes) for the operations under this resource.
   * <p/>
   * Comma-separated values of the available protocols. Possible values: http, https, ws, wss.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * @return the protocols supported by the server
=======
   * @return the protocols supported by the operations under the resource.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * Corresponds to the `authorizations` field of the API Declaration.
   * <p>
   * Takes in a list of the required authorizations for this API Resource.
=======
   * Corresponds to the `security` field of the Operation Object.
   * <p/>
   * Takes in a list of the authorizations (security requirements) for the operations under this resource.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * @return an array of authorizations required by the server, or a single, empty authorization value if not set
=======
   * @return an array of authorizations required by the server, or a single, empty authorization value if not set.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * Hides the api.
   *
   * @since 1.3.8
=======
   * Hides the operations under this resource.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Authorization.java;<<<<<<< MINE
=======
/**
 * Defines an authorization scheme to be used on a resource or an operation.
 * <p/>
 * The authorization scheme used needs to be declared at the Swagger root level first.
 * <p/>
 * This annotation is not used directly and will not be parsed by Swagger. It should be used
 * within either {@link com.wordnik.swagger.annotations.Api} or {@link com.wordnik.swagger.annotations.ApiOperation}.
 *
 * @see com.wordnik.swagger.annotations.ApiOperation
 * @see com.wordnik.swagger.annotations.Api
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Authorization.java;<<<<<<< MINE
=======
  /**
   * The name of the authorization scheme to be used on this resource/operation.
   * <p/>
   * The name must be defined in the Resource Listing's authorization section,
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Authorization.java;<<<<<<< MINE

  /**
   * The scopes to be used if the authorization scheme is OAuth2.
   *
   * @see com.wordnik.swagger.annotations.AuthorizationScope
   */
=======

  /**
   * Not in use!
   */
  String type();

  /**
   * The scopes to be used if the authorization scheme is OAuth2.
   *
   * @see com.wordnik.swagger.annotations.AuthorizationScope
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiParam.java;<<<<<<< MINE
 * Represents a single parameter in an Api Operation.  A parameter is an input
 * to the operation
=======
 * Adds additional meta-data for operation parameters.
 * <p/>
 * This annotation can be used only in combination of JAX-RS 1.x/2.x annotations.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiParam.java;<<<<<<< MINE
  /** Name of the parameter */
=======
  /**
   * The parameter name.
   * <p/>
   * The name of the parameter will be derived from the field/method/parameter name,
   * however you can override it.
   * <p/>
   * Path parameters must always be named as the path section they represent.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiParam.java;<<<<<<< MINE
  /** Description of the parameter */
=======
  /**
   * A brief description of the parameter.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiParam.java;<<<<<<< MINE
  /** Default value  - if e.g. no JAX-RS @DefaultValue is given */
=======
  /**
   * Describes the default value for the parameter.
   * <p/>
   * If the parameter is annotated with JAX-RS's {@code @DefaultValue}, that value would
   * be used, but can be overridden by setting this property.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiParam.java;<<<<<<< MINE
  /** Description of values this endpoint accepts */
=======
  /**
   * Limits the acceptable values for this parameter.
   * <p/>
   * If the original parameter type is an enum, the values of the enum would be translated to
   * the allowableValues. Those can be overridden by setting this property.
   * <p/>
   * There are three ways to describe the allowable values:
   * <ol>
   * <li>To set a list of values, provide a comma-separated list.
   * For example: {@code first, second, third}.</li>
   * <li>To set a range of values, start the value with "range", and surrounding by square
   * brackets include the minimum and maximum values. For example: {@code range[1, 5]}.</li>
   * <li>To set a minimum/maximum value, use the same format for range but use "infinity"
   * or "-infinity" as the second value. For example, {@code range[1, infinity]} means the
   * minimum allowable value of this parameter is 1.</li>
   * </ol>
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiParam.java;<<<<<<< MINE
  /** specifies if the parameter is required or not */
=======
  /**
   * Specifies if the parameter is required or not.
   * <p/>
   * Path parameters will always be set as required, whether you set this property or not.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiParam.java;<<<<<<< MINE
  /** 
   * specify an optional access value for filtering in a Filter 
   * implementation.  This
   * allows you to hide certain parameters if a user doesn't have access to them
=======
  /**
   * Allows for filtering a parameter from the API documentation.
   *<p/>
   * See com.wordnik.swagger.core.filter.SwaggerSpecFilter for further details.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiParam.java;<<<<<<< MINE
  /** specifies whether or not the parameter can have multiple values provided */
=======
  /**
   * Specifies whether the parameter can accept multiple values by having multiple occurrences.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ResponseHeader.java;<<<<<<< MINE
   * */
=======
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ResponseHeader.java;<<<<<<< MINE
   * If the header type is within a container, specify it here.
   * */
=======
   * Notes whether the response type is a list of values.
   * <p/>
   * Valid values are "List" or "Map". Any other value will be ignored.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/AuthorizationScope.java;<<<<<<< MINE
=======
/**
 * Describes an OAuth2 authorization scope.
 * <p/>
 * Used to define an authorization scope that is used by an operation for
 * a defined authorization scheme.
 * <p/>
 * This annotation is not used directly and will not be parsed by Swagger. It should be used
 * within the {@link com.wordnik.swagger.annotations.Authorization}.
 *
 * @see com.wordnik.swagger.annotations.Authorization
 * @see com.wordnik.swagger.annotations.ApiOperation
 * @see com.wordnik.swagger.annotations.Api
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/AuthorizationScope.java;<<<<<<< MINE
=======
  /**
   * The scope of the OAuth2 Authorization scheme to be used.
   * <p/>
   * The scope should be previously declared in the Swagger Object's securityDefinition section.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/AuthorizationScope.java;<<<<<<< MINE
=======


  /**
   * Not used in 1.5.X, kept for legacy support.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_c784806_eaf37e8/rev_c784806-eaf37e8/modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader.java;<<<<<<< MINE
              Property responseProperty = wrapContainer(header.responseContainer(), property);
=======
              Property responseProperty = ContainerWrapper.wrapContainer(header.responseContainer(), property,
                ContainerWrapper.ARRAY, ContainerWrapper.LIST, ContainerWrapper.SET);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_c784806_eaf37e8/rev_c784806-eaf37e8/modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader.java;<<<<<<< MINE
          Property responseProperty = wrapContainer(responseContainer, property);
=======
          Property responseProperty = ContainerWrapper.wrapContainer(responseContainer, property);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_c784806_eaf37e8/rev_c784806-eaf37e8/modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader.java;<<<<<<< MINE
          Property responseProperty = wrapContainer(responseContainer, property);
=======
          Property responseProperty = ContainerWrapper.wrapContainer(responseContainer, property);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_c784806_eaf37e8/rev_c784806-eaf37e8/modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader.java;<<<<<<< MINE
            Property responseProperty = wrapContainer(apiResponse.responseContainer(), property);
=======
            Property responseProperty = ContainerWrapper.wrapContainer(apiResponse.responseContainer(), property);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_c784806_eaf37e8/rev_c784806-eaf37e8/modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader.java;<<<<<<< MINE
  private Property wrapContainer(String container, Property property) {
    if ("list".equalsIgnoreCase(container) || "array".equalsIgnoreCase(container)) {
      return new ArrayProperty(property);
    } else if ("set".equalsIgnoreCase(container)) {
      ArrayProperty arrayProperty = new ArrayProperty(property);
      arrayProperty.setUniqueItems(true);
      return arrayProperty;
    } else if ("map".equalsIgnoreCase(container)) {
      return new MapProperty(property);
    }
    return property;
  }

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_c784806_eaf37e8/rev_c784806-eaf37e8/modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader.java;<<<<<<< MINE

  private boolean isIgnored(String path) {
    for (String item : config.getIgnoredRoutes()) {
      final int length = item.length();
      if (path.startsWith(item) && (path.length() == length || path.startsWith(PATH_DELIMITER, length))) {
        return true;
      }
    }
    return false;
  }

  enum ContainerWrapper {
    LIST("list") {
      @Override
      protected Property doWrap(Property property) {
        return new ArrayProperty(property);
      }
    },
    ARRAY("array") {
      @Override
      protected Property doWrap(Property property) {
        return new ArrayProperty(property);
      }
    },
    MAP("map") {
      @Override
      protected Property doWrap(Property property) {
        return new MapProperty(property);
      }
    },
    SET("set") {
      @Override
      protected Property doWrap(Property property) {
        ArrayProperty arrayProperty = new ArrayProperty(property);
        arrayProperty.setUniqueItems(true);
        return arrayProperty;
      }
    };

    private final String container;

    ContainerWrapper(String container) {
      this.container = container;
    }

    public Property wrap(String container, Property property) {
      if (this.container.equalsIgnoreCase(container)) {
        return doWrap(property);
      }
      return null;
    }

    public static Property wrapContainer(String container, Property property, ContainerWrapper... allowed) {
      final Set<ContainerWrapper> tmp = allowed.length > 0 ? EnumSet.copyOf(Arrays.asList(allowed)) : EnumSet.allOf(ContainerWrapper.class);
      for (ContainerWrapper wrapper : tmp) {
        final Property prop = wrapper.wrap(container, property);
        if (prop != null) {
          return prop;
        }
      }
      return property;
    }

    protected abstract Property doWrap(Property property);
  }
=======

  enum ContainerWrapper {
    LIST("list") {
      @Override
      protected Property doWrap(Property property) {
        return new ArrayProperty(property);
      }
    },
    ARRAY("array") {
      @Override
      protected Property doWrap(Property property) {
        return new ArrayProperty(property);
      }
    },
    MAP("map") {
      @Override
      protected Property doWrap(Property property) {
        return new MapProperty(property);
      }
    },
    SET("set") {
      @Override
      protected Property doWrap(Property property) {
        ArrayProperty arrayProperty = new ArrayProperty(property);
        arrayProperty.setUniqueItems(true);
        return arrayProperty;
      }
    };

    private final String container;

    ContainerWrapper(String container) {
      this.container = container;
    }

    public Property wrap(String container, Property property) {
      if (this.container.equalsIgnoreCase(container)) {
        return doWrap(property);
      }
      return null;
    }

    public static Property wrapContainer(String container, Property property, ContainerWrapper... allowed) {
      final Set<ContainerWrapper> tmp = allowed.length > 0 ? EnumSet.copyOf(Arrays.asList(allowed)) : EnumSet.allOf(ContainerWrapper.class);
      for (ContainerWrapper wrapper : tmp) {
        final Property prop = wrapper.wrap(container, property);
        if (prop != null) {
          return prop;
        }
      }
      return property;
    }

    protected abstract Property doWrap(Property property);
  }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy/src/main/java/com/wordnik/swagger/sample/Bootstrap.java;<<<<<<< MINE
package com.wordnik.swagger.sample;

import com.wordnik.swagger.models.Contact;
import com.wordnik.swagger.models.ExternalDocs;
import com.wordnik.swagger.models.Info;
import com.wordnik.swagger.models.License;
import com.wordnik.swagger.models.Swagger;
import com.wordnik.swagger.models.Tag;
import com.wordnik.swagger.models.auth.OAuth2Definition;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;

public class Bootstrap extends HttpServlet {

  @Override
  public void init(ServletConfig config) throws ServletException {
    Info info = new Info()
            .title("Swagger Sample App")
            .description("This is a sample server Petstore server.  You can find out more about Swagger " +
                    "at <a href=\"http://swagger.io\">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, " +
                    "you can use the api key \"special-key\" to test the authorization filters")
            .termsOfService("http://helloreverb.com/terms/")
            .contact(new Contact()
                    .email("apiteam@swagger.io"))
            .license(new License()
                    .name("Apache 2.0")
                    .url("http://www.apache.org/licenses/LICENSE-2.0.html"));

    ServletContext context = config.getServletContext();
    Swagger swagger = new Swagger().info(info);
    swagger.securityDefinition("petstore_auth",
            new OAuth2Definition()
                    .implicit("http://localhost:8002/oauth/dialog")
                    .scope("email", "Access to your email address")
                    .scope("pets", "Access to your pets"));
    swagger.tag(new Tag()
            .name("pet")
            .description("Everything about your Pets")
            .externalDocs(new ExternalDocs("Find out more", "http://swagger.io")));
    swagger.tag(new Tag()
            .name("store")
            .description("Access to Petstore orders"));
    swagger.tag(new Tag()
            .name("user")
            .description("Operations about user")
            .externalDocs(new ExternalDocs("Find out more about our store", "http://swagger.io")));
    context.setAttribute("swagger", swagger);
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy/src/main/java/com/wordnik/swagger/sample/resource/SampleExceptionMapper.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.resource;

import com.wordnik.swagger.sample.exception.ApiException;
import com.wordnik.swagger.sample.exception.BadRequestException;
import com.wordnik.swagger.sample.exception.NotFoundException;
import com.wordnik.swagger.sample.model.ApiResponse;

import javax.ws.rs.ext.*;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

@Provider
public class SampleExceptionMapper implements ExceptionMapper<Exception> {
  public Response toResponse(Exception exception) {
    if (exception instanceof javax.ws.rs.WebApplicationException) {
      javax.ws.rs.WebApplicationException e = (javax.ws.rs.WebApplicationException) exception;
      return Response
          .status(e.getResponse().getStatus())
          .entity(new ApiResponse(e.getResponse().getStatus(),
              exception.getMessage())).build();
    } else if (exception instanceof com.fasterxml.jackson.core.JsonParseException) {
      return Response.status(400)
          .entity(new ApiResponse(400, "bad input")).build();
    } else if (exception instanceof NotFoundException) {
      return Response
          .status(Status.NOT_FOUND)
          .entity(new ApiResponse(ApiResponse.ERROR, exception
              .getMessage())).build();
    } else if (exception instanceof BadRequestException) {
      return Response
          .status(Status.BAD_REQUEST)
          .entity(new ApiResponse(ApiResponse.ERROR, exception
              .getMessage())).build();
    } else if (exception instanceof ApiException) {
      return Response
          .status(Status.BAD_REQUEST)
          .entity(new ApiResponse(ApiResponse.ERROR, exception
              .getMessage())).build();
    } else {
      return Response.status(500)
          .entity(new ApiResponse(500, "something bad happened"))
          .build();
    }
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy/src/main/java/com/wordnik/swagger/sample/resource/JavaRestResourceUtil.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.resource;

import java.text.SimpleDateFormat;

import java.util.Date;

public class JavaRestResourceUtil {
  public int getInt(int minVal, int maxVal, int defaultValue, String inputString) {
    int output = defaultValue;
    try {
      output = Integer.parseInt(inputString);
    }
    catch (Exception e){
      output = defaultValue;
    }

    if (output < minVal) output = minVal;
    if (maxVal == -1) {
      if (output < minVal) output = minVal;
    }
    else if (output > maxVal) output = maxVal;
    return output;
  }

  public long getLong(long minVal, long maxVal, long defaultValue, String inputString) {
    long output = defaultValue;
    try {
      output = Long.parseLong(inputString);
    }
    catch (Exception e){
      output = defaultValue;
    }

    if (output < minVal) output = minVal;
    if (maxVal == -1) { if (output < minVal) output = minVal; }
    else if (output > maxVal) output = maxVal;
    return output;
  }

  public double getDouble(double minVal, double maxVal, double defaultValue, String inputString) {
    double output = defaultValue;
    try {
      output = Double.parseDouble(inputString);
    }
    catch (Exception e){
      output = defaultValue;
    }

    if (output < minVal) output = minVal;
    if (maxVal == -1) { 
      if (output < minVal) output = minVal; 
    }
    else if (output > maxVal) output = maxVal;
    return output;
  }

  public boolean getBoolean(boolean defaultValue, String booleanString) {
    boolean output = defaultValue;
    if (booleanString == null) output = defaultValue;

    //  treat "", "YES" as "true"
    if ("".equals(booleanString)) output = true;
    else if ("YES".equalsIgnoreCase(booleanString)) output = true;
    else if ("NO".equalsIgnoreCase(booleanString)) output = false;
    else {
      try {
        output = Boolean.parseBoolean(booleanString);
      }
      catch (Exception e){
        output = defaultValue;
      }
    }
    return output;
  }
  
  public Date getDate(Date defaultValue, String dateString){
    try {
      return new SimpleDateFormat("yyyy-MM-dd").parse(dateString);
    }
    catch(Exception e) {
      return defaultValue;
    }
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy/src/main/java/com/wordnik/swagger/sample/exception/ApiException.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.exception;

public class ApiException extends Exception{
  private int code;
  public ApiException (int code, String msg) {
    super(msg);
    this.code = code;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy/src/main/java/com/wordnik/swagger/sample/exception/NotFoundException.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.exception;

public class NotFoundException extends ApiException {
  private int code;
  public NotFoundException (int code, String msg) {
    super(code, msg);
    this.code = code;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy/src/main/java/com/wordnik/swagger/sample/exception/BadRequestException.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.exception;

public class BadRequestException extends ApiException{
  private int code;
  public BadRequestException (int code, String msg) {
    super(code, msg);
    this.code = code;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy/src/main/java/com/wordnik/swagger/sample/PetStoreApplication.java;<<<<<<< MINE
package com.wordnik.swagger.sample;

import com.wordnik.swagger.sample.resource.PetResource;
import com.wordnik.swagger.sample.resource.PetStoreResource;
import com.wordnik.swagger.sample.resource.UserResource;

import javax.ws.rs.core.Application;
import java.util.HashSet;
import java.util.Set;

public class PetStoreApplication extends Application {
    HashSet<Object> singletons = new HashSet<Object>();

    public PetStoreApplication() {
    }

    @Override
    public Set<Class<?>> getClasses() {
        HashSet<Class<?>> set = new HashSet<Class<?>>();

        set.add(PetResource.class);
        set.add(UserResource.class);
        set.add(PetStoreResource.class);

        set.add(com.wordnik.swagger.jaxrs.listing.ApiListingResource.class);
        set.add(com.wordnik.swagger.jaxrs.listing.SwaggerSerializers.class);

        return set;
    }

    @Override
    public Set<Object> getSingletons() {
        return singletons;
    }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy/src/main/java/com/wordnik/swagger/sample/model/ApiResponse.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import javax.xml.bind.annotation.XmlTransient;

@javax.xml.bind.annotation.XmlRootElement
public class ApiResponse {
  public static final int ERROR = 1;
  public static final int WARNING = 2;
  public static final int INFO = 3;
  public static final int OK = 4;
  public static final int TOO_BUSY = 5;

  int code;
  String type;
  String message;
  
  public ApiResponse(){}
  
  public ApiResponse(int code, String message){
    this.code = code;
    switch(code){
    case ERROR:
      setType("error");
      break;
    case WARNING:
      setType("warning");
      break;
    case INFO:
      setType("info");
      break;
    case OK:
      setType("ok");
      break;
    case TOO_BUSY:
      setType("too busy");
      break;
    default:
      setType("unknown");
      break;
    }
    this.message = message;
  }

  @XmlTransient
  public int getCode() {
    return code;
  }

  public void setCode(int code) {
    this.code = code;
  }

  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy/src/main/java/com/wordnik/swagger/sample/model/Pet.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import com.wordnik.swagger.annotations.*;

import java.util.List;
import java.util.ArrayList;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Pet")
public class Pet {
  private long id;
  private Category category;
  private String name;
  private List<String> photoUrls = new ArrayList<String>();
  private List<Tag> tags = new ArrayList<Tag>();
  private String status;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  @XmlElement(name = "category")
  public Category getCategory() {
    return category;
  }

  public void setCategory(Category category) {
    this.category = category;
  }

  @XmlElement(name = "name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  @XmlElementWrapper(name = "photoUrls")
  @XmlElement(name = "photoUrl")
  public List<String> getPhotoUrls() {
    return photoUrls;
  }

  public void setPhotoUrls(List<String> photoUrls) {
    this.photoUrls = photoUrls;
  }

  @XmlElementWrapper(name = "tags")
  @XmlElement(name = "tag")
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }

  @XmlElement(name = "status")
  @ApiModelProperty(value = "pet status in the store", allowableValues = "available,pending,sold")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy/src/main/java/com/wordnik/swagger/sample/model/Order.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import com.wordnik.swagger.annotations.*;

import java.util.Date;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Order")
public class Order {
  private long id;
  private long petId;
  private int quantity;
  private Date shipDate;
  private String status;
    private boolean complete;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

    public boolean isComplete() {
        return complete;
    }

    public void setComplete(boolean complete) {
        this.complete = complete;
    }


  @XmlElement(name = "petId")
  public long getPetId() {
    return petId;
  }

  public void setPetId(long petId) {
    this.petId = petId;
  }

  @XmlElement(name = "quantity")
  public int getQuantity() {
    return quantity;
  }

  public void setQuantity(int quantity) {
    this.quantity = quantity;
  }

  @XmlElement(name = "status")
  @ApiModelProperty(value = "Order Status", allowableValues = "placed, approved, delivered")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  @XmlElement(name = "shipDate")
  public Date getShipDate() {
    return shipDate;
  }

  public void setShipDate(Date shipDate) {
    this.shipDate = shipDate;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy/src/main/java/com/wordnik/swagger/sample/model/User.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import com.wordnik.swagger.annotations.*;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "User")
public class User {
  private long id;
  private String username;
  private String firstName;
  private String lastName;
  private String email;
  private String password;
  private String phone;
  private int userStatus;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  @XmlElement(name = "firstName")
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

  @XmlElement(name = "username")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  @XmlElement(name = "lastName")
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  @XmlElement(name = "email")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  @XmlElement(name = "password")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  @XmlElement(name = "phone")
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }

  @XmlElement(name = "userStatus")
  @ApiModelProperty(value = "User Status", allowableValues = "1-registered,2-active,3-closed")
  public int getUserStatus() {
    return userStatus;
  }

  public void setUserStatus(int userStatus) {
    this.userStatus = userStatus;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy/src/main/java/com/wordnik/swagger/sample/model/Tag.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Tag")
public class Tag {
  private long id;
  private String name;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  @XmlElement(name = "name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy/src/main/java/com/wordnik/swagger/sample/model/Category.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Category")
public class Category {
  private long id;
  private String name;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  @XmlElement(name = "name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy/src/main/java/com/wordnik/swagger/sample/util/ApiAuthorizationFilterImpl.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.util;

import com.wordnik.swagger.model.*;
import com.wordnik.swagger.core.filter.SwaggerSpecFilter;

import com.wordnik.swagger.models.Model;
import com.wordnik.swagger.models.Operation;
import com.wordnik.swagger.models.parameters.Parameter;
import com.wordnik.swagger.models.properties.Property;
import org.slf4j.*;

import java.util.Map;
import java.util.List;

import javax.servlet.ServletConfig;
import javax.servlet.http.HttpServlet;
/**
 * 
 * The rules are maintained in simple map with key as path and a boolean value
 * indicating given path is secure or not. For method level security the key is
 * combination of http method and path .
 * 
 * If the resource or method is secure then it can only be viewed using a
 * secured api key
 * 
 * Note: Objective of this class is not to provide fully functional
 * implementation of authorization filter. This is only a sample demonstration
 * how API authorization filter works.
 * 
 */

public class ApiAuthorizationFilterImpl implements SwaggerSpecFilter {
  static Logger logger = LoggerFactory.getLogger(ApiAuthorizationFilterImpl.class);

  public boolean isOperationAllowed(Operation operation, ApiDescription api, Map<String, List<String>> params, Map<String, String> cookies, Map<String, List<String>> headers) {
    boolean isAuthorized = checkKey(params, headers);
    if(isAuthorized) {
      return true;
    }
    else {
      if(!"GET".equalsIgnoreCase(api.getMethod()) || api.getPath().indexOf("/store") != -1) {
        return false;
      }
      else return true;
    }
  }

  public boolean isParamAllowed(Parameter parameter, Operation operation, ApiDescription api, Map<String, List<String>> params, Map<String, String> cookies, Map<String, List<String>> headers) {
    boolean isAuthorized = checkKey(params, headers);
    if("internal".equals(parameter.getAccess()) && !isAuthorized)
      return false;
    else
      return true;
  }

  @Override
  public boolean isPropertyAllowed(Model model, Property property, String propertyName, Map<String, List<String>> params, Map<String, String> cookies, Map<String, List<String>> headers) {
    return true;
  }

  public boolean checkKey(Map<String, List<String>> params, Map<String, List<String>> headers) {
    String keyValue = null;
    if(params.containsKey("api_key"))
      keyValue = params.get("api_key").get(0);
    else {
      if(headers.containsKey("api_key"))
        keyValue = headers.get("api_key").get(0);
    }
    if("special-key".equals(keyValue))
      return true;
    else
      return false;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy/src/main/java/com/wordnik/swagger/sample/util/ApiOriginFilter.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.util;

import java.io.IOException;

import javax.servlet.*;
import javax.servlet.http.HttpServletResponse;

public class ApiOriginFilter implements javax.servlet.Filter {
  @Override
  public void doFilter(ServletRequest request, ServletResponse response,
      FilterChain chain) throws IOException, ServletException {
    HttpServletResponse res = (HttpServletResponse) response;
    res.addHeader("Access-Control-Allow-Origin", "*");
    res.addHeader("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");
    res.addHeader("Access-Control-Allow-Headers", "Content-Type");
    chain.doFilter(request, response);
  }

  @Override
  public void destroy() {
  }

  @Override
  public void init(FilterConfig filterConfig) throws ServletException {
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy/src/main/java/com/wordnik/swagger/sample/data/PetData.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.data;

import com.wordnik.swagger.sample.model.*;

import java.util.List;
import java.util.ArrayList;

public class PetData {
  static List<Pet> pets = new ArrayList<Pet>();
  static List<Category> categories = new ArrayList<Category>();

  static {
    categories.add(createCategory(1, "Dogs"));
    categories.add(createCategory(2, "Cats"));
    categories.add(createCategory(3, "Rabbits"));
    categories.add(createCategory(4, "Lions"));

    pets.add(createPet(1, categories.get(1), "Cat 1", new String[] {
        "url1", "url2" }, new String[] { "tag1", "tag2" }, "available"));
    pets.add(createPet(2, categories.get(1), "Cat 2", new String[] {
        "url1", "url2" }, new String[] { "tag2", "tag3" }, "available"));
    pets.add(createPet(3, categories.get(1), "Cat 3", new String[] {
        "url1", "url2" }, new String[] { "tag3", "tag4" }, "pending"));

    pets.add(createPet(4, categories.get(0), "Dog 1", new String[] {
        "url1", "url2" }, new String[] { "tag1", "tag2" }, "available"));
    pets.add(createPet(5, categories.get(0), "Dog 2", new String[] {
        "url1", "url2" }, new String[] { "tag2", "tag3" }, "sold"));
    pets.add(createPet(6, categories.get(0), "Dog 3", new String[] {
        "url1", "url2" }, new String[] { "tag3", "tag4" }, "pending"));

    pets.add(createPet(7, categories.get(3), "Lion 1", new String[] {
        "url1", "url2" }, new String[] { "tag1", "tag2" }, "available"));
    pets.add(createPet(8, categories.get(3), "Lion 2", new String[] {
        "url1", "url2" }, new String[] { "tag2", "tag3" }, "available"));
    pets.add(createPet(9, categories.get(3), "Lion 3", new String[] {
        "url1", "url2" }, new String[] { "tag3", "tag4" }, "available"));

    pets.add(createPet(10, categories.get(2), "Rabbit 1", new String[] {
        "url1", "url2" }, new String[] { "tag3", "tag4" }, "available"));
  }

  public Pet getPetbyId(long petId) {
    for (Pet pet : pets) {
      if (pet.getId() == petId) {
        return pet;
      }
    }
    return null;
  }

  public List<Pet> findPetByStatus(String status) {
    String[] statues = status.split(",");
    List<Pet> result = new java.util.ArrayList<Pet>();
    for (Pet pet : pets) {
      for (String s : statues) {
        if (s.equals(pet.getStatus())) {
          result.add(pet);
        }
      }
    }
    return result;
  }

  public List<Pet> findPetByTags(String tags) {
    String[] tagList = tags.split(",");
    List<Pet> result = new java.util.ArrayList<Pet>();
    for (Pet pet : pets) {
      if (null != pet.getTags()) {
        for (Tag tag : pet.getTags()) {
          for (String tagListString : tagList) {
            if (tagListString.equals(tag.getName()))
              result.add(pet);
          }
        }
      }
    }
    return result;
  }

  public void addPet(Pet pet) {
    if (pets.size() > 0) {
      for (int i = pets.size() - 1; i >= 0; i--) {
        if (pets.get(i).getId() == pet.getId()) {
          pets.remove(i);
        }
      }
    }
    pets.add(pet);
  }

  static Pet createPet(long id, Category cat, String name, String[] urls,
      String[] tags, String status) {
    Pet pet = new Pet();
    pet.setId(id);
    pet.setCategory(cat);
    pet.setName(name);
    if (null != urls) {
      List<String> urlObjs = new ArrayList<String>();
      for (String urlString : urls) {
        urlObjs.add(urlString);
      }
      pet.setPhotoUrls(urlObjs);
    }
    List<Tag> tagObjs = new java.util.ArrayList<Tag>();
    int i = 0;
    if (null != tags) {
      for (String tagString : tags) {
        i = i + 1;
        Tag tag = new Tag();
        tag.setId(i);
        tag.setName(tagString);
        tagObjs.add(tag);
      }
    }
    pet.setTags(tagObjs);
    pet.setStatus(status);
    return pet;
  }

  static Category createCategory(long id, String name) {
    Category category = new Category();
    category.setId(id);
    category.setName(name);
    return category;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy/src/main/java/com/wordnik/swagger/sample/data/UserData.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.data;

import com.wordnik.swagger.sample.model.*;

import java.util.List;
import java.util.ArrayList;

public class UserData {
  static List<User> users = new ArrayList<User>();

  static {
    users.add(createUser(1, "user1", "first name 1", "last name 1",
        "email1@test.com", "123-456-7890", 1));
    users.add(createUser(2, "user2", "first name 2", "last name 2",
        "email2@test.com", "123-456-7890", 2));
    users.add(createUser(3, "user3", "first name 3", "last name 3",
        "email3@test.com", "123-456-7890", 3));
    users.add(createUser(4, "user4", "first name 4", "last name 4",
        "email4@test.com", "123-456-7890", 1));
    users.add(createUser(5, "user5", "first name 5", "last name 5",
        "email5@test.com", "123-456-7890", 2));
    users.add(createUser(6, "user6", "first name 6", "last name 6",
        "email6@test.com", "123-456-7890", 3));
    users.add(createUser(7, "user7", "first name 7", "last name 7",
        "email7@test.com", "123-456-7890", 1));
    users.add(createUser(8, "user8", "first name 8", "last name 8",
        "email8@test.com", "123-456-7890", 2));
    users.add(createUser(9, "user9", "first name 9", "last name 9",
        "email9@test.com", "123-456-7890", 3));
    users.add(createUser(10, "user10", "first name 10", "last name 10",
        "email10@test.com", "123-456-7890", 1));
    users.add(createUser(11, "user?10", "first name ?10", "last name ?10",
        "email101@test.com", "123-456-7890", 1));

  }

  public User findUserByName(String username) {
    for (User user : users) {
      if (user.getUsername().equals(username)) {
        return user;
      }
    }
    return null;
  }

  public void addUser(User user) {
    if (users.size() > 0) {
      for (int i = users.size() - 1; i >= 0; i--) {
        if (users.get(i).getUsername().equals(user.getUsername())) {
          users.remove(i);
        }
      }
    }
    users.add(user);
  }

  public void removeUser(String username) {
    if (users.size() > 0) {
      for (int i = users.size() - 1; i >= 0; i--) {
        if (users.get(i).getUsername().equals(username)) {
          users.remove(i);
        }
      }
    }
  }

  private static User createUser(long id, String username, String firstName,
      String lastName, String email, String phone, int userStatus) {
    User user = new User();
    user.setId(id);
    user.setUsername(username);
    user.setFirstName(firstName);
    user.setLastName(lastName);
    user.setEmail(email);
    user.setPassword("XXXXXXXXXXX");
    user.setPhone(phone);
    user.setUserStatus(userStatus);
    return user;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy/src/main/java/com/wordnik/swagger/sample/data/StoreData.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.data;

import com.wordnik.swagger.sample.model.*;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;

public class StoreData {
  static List<Order> orders = new ArrayList<Order>();

  static {
    orders.add(createOrder(1, 1, 2, new Date(), "placed"));
    orders.add(createOrder(2, 1, 2, new Date(), "delivered"));
    orders.add(createOrder(3, 2, 2, new Date(), "placed"));
    orders.add(createOrder(4, 2, 2, new Date(), "delivered"));
    orders.add(createOrder(5, 3, 2, new Date(), "placed"));
    orders.add(createOrder(11, 3, 2, new Date(), "placed"));
    orders.add(createOrder(12, 3, 2, new Date(), "placed"));
    orders.add(createOrder(13, 3, 2, new Date(), "placed"));
    orders.add(createOrder(14, 3, 2, new Date(), "placed"));
    orders.add(createOrder(15, 3, 2, new Date(), "placed"));
  }

  public Order findOrderById(long orderId) {
    for (Order order : orders) {
      if (order.getId() == orderId) {
        return order;
      }
    }
    return null;
  }

  public void placeOrder(Order order) {
    if (orders.size() > 0) {
      for (int i = orders.size() - 1; i >= 0; i--) {
        if (orders.get(i).getId() == order.getId()) {
          orders.remove(i);
        }
      }
    }
    orders.add(order);
  }

  public void deleteOrder(long orderId) {
    if (orders.size() > 0) {
      for (int i = orders.size() - 1; i >= 0; i--) {
        if (orders.get(i).getId() == orderId) {
          orders.remove(i);
        }
      }
    }
  }

  private static Order createOrder(long id, long petId, int quantity,
      Date shipDate, String status) {
    Order order = new Order();
    order.setId(id);
    order.setPetId(petId);
    order.setQuantity(quantity);
    order.setShipDate(shipDate);
    order.setStatus(status);
    return order;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jersey-spring/src/main/java/com/wordnik/swagger/sample/Bootstrap.java;<<<<<<< MINE
package com.wordnik.swagger.sample;

import com.wordnik.swagger.models.*;

import com.wordnik.swagger.models.auth.*;

import javax.servlet.http.HttpServlet;
import javax.servlet.ServletContext;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;

public class Bootstrap extends HttpServlet {

  @Override
  public void init(ServletConfig config) throws ServletException {
    Info info = new Info()
      .title("Swagger Sample App")
      .description("This is a sample server Petstore server.  You can find out more about Swagger " +
        "at <a href=\"http://swagger.io\">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, " +
        "you can use the api key \"special-key\" to test the authorization filters")
      .termsOfService("http://helloreverb.com/terms/")
      .contact(new Contact()
        .email("apiteam@swagger.io"))
      .license(new License()
        .name("Apache 2.0")
        .url("http://www.apache.org/licenses/LICENSE-2.0.html"));

    ServletContext context = config.getServletContext();
    Swagger swagger = new Swagger().info(info);
    swagger.securityDefinition("api_key", new ApiKeyAuthDefinition("api_key", In.HEADER));
    swagger.securityDefinition("petstore_auth",
      new OAuth2Definition()
        .implicit("http://localhost:8002/oauth/dialog")
        .scope("email", "Access to your email address")
        .scope("pets", "Access to your pets"));
    swagger.tag(new Tag()
            .name("pet")
            .description("Everything about your Pets")
            .externalDocs(new ExternalDocs("Find out more", "http://swagger.io")));
    swagger.tag(new Tag()
            .name("store")
            .description("Access to Petstore orders"));
    swagger.tag(new Tag()
            .name("user")
            .description("Operations about user")
            .externalDocs(new ExternalDocs("Find out more about our store", "http://swagger.io")));
    context.setAttribute("swagger", swagger);
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jersey-spring/src/main/java/com/wordnik/swagger/sample/exception/ApiException.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.exception;

public class ApiException extends Exception{
  private int code;
  public ApiException (int code, String msg) {
    super(msg);
    this.code = code;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jersey-spring/src/main/java/com/wordnik/swagger/sample/exception/NotFoundException.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.exception;

public class NotFoundException extends ApiException {
  private int code;
  public NotFoundException (int code, String msg) {
    super(code, msg);
    this.code = code;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jersey-spring/src/main/java/com/wordnik/swagger/sample/exception/BadRequestException.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.exception;

public class BadRequestException extends ApiException{
  private int code;
  public BadRequestException (int code, String msg) {
    super(code, msg);
    this.code = code;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jersey-spring/src/main/java/com/wordnik/swagger/sample/model/ApiResponse.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import javax.xml.bind.annotation.XmlTransient;

@javax.xml.bind.annotation.XmlRootElement
public class ApiResponse {
  public static final int ERROR = 1;
  public static final int WARNING = 2;
  public static final int INFO = 3;
  public static final int OK = 4;
  public static final int TOO_BUSY = 5;

  int code;
  String type;
  String message;
  
  public ApiResponse(){}
  
  public ApiResponse(int code, String message){
    this.code = code;
    switch(code){
    case ERROR:
      setType("error");
      break;
    case WARNING:
      setType("warning");
      break;
    case INFO:
      setType("info");
      break;
    case OK:
      setType("ok");
      break;
    case TOO_BUSY:
      setType("too busy");
      break;
    default:
      setType("unknown");
      break;
    }
    this.message = message;
  }

  @XmlTransient
  public int getCode() {
    return code;
  }

  public void setCode(int code) {
    this.code = code;
  }

  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jersey-spring/src/main/java/com/wordnik/swagger/sample/model/Pet.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import com.wordnik.swagger.annotations.*;

import java.util.List;
import java.util.ArrayList;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Pet")
public class Pet {
  private long id;
  private Category category;
  private String name;
  private List<String> photoUrls = new ArrayList<String>();
  private List<Tag> tags = new ArrayList<Tag>();
  private String status;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  @XmlElement(name = "category")
  public Category getCategory() {
    return category;
  }

  public void setCategory(Category category) {
    this.category = category;
  }

  @XmlElement(name = "name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  @XmlElementWrapper(name = "photoUrls")
  @XmlElement(name = "photoUrl")
  public List<String> getPhotoUrls() {
    return photoUrls;
  }

  public void setPhotoUrls(List<String> photoUrls) {
    this.photoUrls = photoUrls;
  }

  @XmlElementWrapper(name = "tags")
  @XmlElement(name = "tag")
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }

  @XmlElement(name = "status")
  @ApiModelProperty(value = "pet status in the store", allowableValues = "available,pending,sold")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jersey-spring/src/main/java/com/wordnik/swagger/sample/model/Order.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import com.wordnik.swagger.annotations.*;

import java.util.Date;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Order")
public class Order {
  private long id;
  private long petId;
  private int quantity;
  private Date shipDate;
  private String status;
    private boolean complete;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

    public boolean isComplete() {
        return complete;
    }

    public void setComplete(boolean complete) {
        this.complete = complete;
    }


  @XmlElement(name = "petId")
  public long getPetId() {
    return petId;
  }

  public void setPetId(long petId) {
    this.petId = petId;
  }

  @XmlElement(name = "quantity")
  public int getQuantity() {
    return quantity;
  }

  public void setQuantity(int quantity) {
    this.quantity = quantity;
  }

  @XmlElement(name = "status")
  @ApiModelProperty(value = "Order Status", allowableValues = "placed, approved, delivered")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  @XmlElement(name = "shipDate")
  public Date getShipDate() {
    return shipDate;
  }

  public void setShipDate(Date shipDate) {
    this.shipDate = shipDate;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jersey-spring/src/main/java/com/wordnik/swagger/sample/model/User.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import com.wordnik.swagger.annotations.*;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "User")
public class User {
  private long id;
  private String username;
  private String firstName;
  private String lastName;
  private String email;
  private String password;
  private String phone;
  private int userStatus;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  @XmlElement(name = "firstName")
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

  @XmlElement(name = "username")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  @XmlElement(name = "lastName")
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  @XmlElement(name = "email")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  @XmlElement(name = "password")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  @XmlElement(name = "phone")
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }

  @XmlElement(name = "userStatus")
  @ApiModelProperty(value = "User Status", allowableValues = "1-registered,2-active,3-closed")
  public int getUserStatus() {
    return userStatus;
  }

  public void setUserStatus(int userStatus) {
    this.userStatus = userStatus;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jersey-spring/src/main/java/com/wordnik/swagger/sample/model/Tag.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Tag")
public class Tag {
  private long id;
  private String name;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  @XmlElement(name = "name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jersey-spring/src/main/java/com/wordnik/swagger/sample/model/Category.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Category")
public class Category {
  private long id;
  private String name;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  @XmlElement(name = "name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jersey-spring/src/main/java/com/wordnik/swagger/sample/bean/UserResourceBean.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.bean;

import com.wordnik.swagger.annotations.*;
import com.wordnik.swagger.sample.data.UserData;
import com.wordnik.swagger.sample.model.User;
import com.wordnik.swagger.sample.exception.ApiException;
import com.wordnik.swagger.sample.exception.NotFoundException;
import com.wordnik.swagger.sample.resource.UserResource;
import org.springframework.stereotype.Component;

import javax.ws.rs.core.Response;
import javax.ws.rs.*;

@Component
public class UserResourceBean implements UserResource {
  static UserData userData = new UserData();

  @Override
  public Response createUser(User user) {
    userData.addUser(user);
    return Response.ok().entity("").build();
  }

  @Override
  public Response createUsersWithArrayInput(User[] users) {
      for (User user : users) {
          userData.addUser(user);
      }
      return Response.ok().entity("").build();
  }

  @Override
  public Response createUsersWithListInput(java.util.List<User> users) {
      for (User user : users) {
          userData.addUser(user);
      }
      return Response.ok().entity("").build();
  }

  @Override
  public Response updateUser(String username, User user) {
    userData.addUser(user);
    return Response.ok().entity("").build();
  }

  @Override
  public Response deleteUser(String username) {
    userData.removeUser(username);
    return Response.ok().entity("").build();
  }

  @Override
  public Response getUserByName(String username)
    throws ApiException {
    User user = userData.findUserByName(username);
    if (null != user) {
      return Response.ok().entity(user).build();
    } else {
      throw new NotFoundException(404, "User not found");
    }
  }

  @Override
  public Response loginUser(String username, String password) {
    return Response.ok()
        .entity("logged in user session:" + System.currentTimeMillis())
        .build();
  }

  @Override
  public Response logoutUser() {
    return Response.ok().entity("").build();
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jersey-spring/src/main/java/com/wordnik/swagger/sample/bean/SampleExceptionMapper.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.bean;

import com.wordnik.swagger.sample.exception.ApiException;
import com.wordnik.swagger.sample.exception.BadRequestException;
import com.wordnik.swagger.sample.exception.NotFoundException;
import com.wordnik.swagger.sample.model.ApiResponse;

import javax.ws.rs.ext.*;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

@Provider
public class SampleExceptionMapper implements ExceptionMapper<Exception> {
  public Response toResponse(Exception exception) {
    if (exception instanceof javax.ws.rs.WebApplicationException) {
      javax.ws.rs.WebApplicationException e = (javax.ws.rs.WebApplicationException) exception;
      return Response
          .status(e.getResponse().getStatus())
          .entity(new ApiResponse(e.getResponse().getStatus(),
              exception.getMessage())).build();
    } else if (exception instanceof com.fasterxml.jackson.core.JsonParseException) {
      return Response.status(400)
          .entity(new ApiResponse(400, "bad input")).build();
    } else if (exception instanceof NotFoundException) {
      return Response
          .status(Status.NOT_FOUND)
          .entity(new ApiResponse(ApiResponse.ERROR, exception
              .getMessage())).build();
    } else if (exception instanceof BadRequestException) {
      return Response
          .status(Status.BAD_REQUEST)
          .entity(new ApiResponse(ApiResponse.ERROR, exception
              .getMessage())).build();
    } else if (exception instanceof ApiException) {
      return Response
          .status(Status.BAD_REQUEST)
          .entity(new ApiResponse(ApiResponse.ERROR, exception
              .getMessage())).build();
    } else {
      return Response.status(500)
          .entity(new ApiResponse(500, "something bad happened"))
          .build();
    }
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jersey-spring/src/main/java/com/wordnik/swagger/sample/bean/PetStoreResourceBean.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.bean;

import com.wordnik.swagger.annotations.*;
import com.wordnik.swagger.sample.data.StoreData;
import com.wordnik.swagger.sample.model.Order;
import com.wordnik.swagger.sample.exception.NotFoundException;
import com.wordnik.swagger.sample.resource.PetStoreResource;
import org.springframework.stereotype.Component;

import javax.ws.rs.core.Response;
import javax.ws.rs.*;

@Component
public class PetStoreResourceBean implements PetStoreResource {
  static StoreData storeData = new StoreData();
  static JavaRestResourceUtil ru = new JavaRestResourceUtil();

  @Override
  public Response getOrderById(String orderId) throws NotFoundException {
    Order order = storeData.findOrderById(ru.getLong(0, 10000, 0, orderId));
    if (null != order) {
      return Response.ok().entity(order).build();
    } else {
      throw new NotFoundException(404, "Order not found");
    }
  }

  @Override
  public Response placeOrder(Order order) {
    storeData.placeOrder(order);
    return Response.ok().entity("").build();
  }

  @Override
  public Response deleteOrder(String orderId) {
    storeData.deleteOrder(ru.getLong(0, 10000, 0, orderId));
    return Response.ok().entity("").build();
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jersey-spring/src/main/java/com/wordnik/swagger/sample/bean/PetResourceBean.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.bean;

import com.wordnik.swagger.sample.data.PetData;
import com.wordnik.swagger.sample.model.Pet;
import com.wordnik.swagger.sample.exception.NotFoundException;
import com.wordnik.swagger.sample.resource.PetResource;
import org.springframework.stereotype.Component;

import javax.ws.rs.core.Response;
import javax.ws.rs.*;

@Component
public class PetResourceBean implements PetResource {
    static PetData petData = new PetData();
    static JavaRestResourceUtil ru = new JavaRestResourceUtil();

    @Override
    public Pet getPetById(String petId) throws NotFoundException {
        Pet pet = petData.getPetbyId(ru.getLong(0, 100000, 0, petId));
        if (null != pet) {
            return pet;
        } else {
            throw new NotFoundException(404, "Pet not found");
        }
    }

    @Override
    public Response addPet(Pet pet) {
        petData.addPet(pet);
        return Response.ok().entity("SUCCESS").build();
    }

    @Override
    public Response updatePet(Pet pet) {
        petData.addPet(pet);
        return Response.ok().entity("SUCCESS").build();
    }

    @Override
    public Response findPetsByStatus(String status) {
        return Response.ok(petData.findPetByStatus(status)).build();
    }

    @Override
    @Deprecated
    public Response findPetsByTags(String tags) {
        return Response.ok(petData.findPetByTags(tags)).build();
    }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jersey-spring/src/main/java/com/wordnik/swagger/sample/bean/JavaRestResourceUtil.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.bean;

import java.text.SimpleDateFormat;

import java.util.Date;

public class JavaRestResourceUtil {
  public int getInt(int minVal, int maxVal, int defaultValue, String inputString) {
    int output = defaultValue;
    try {
      output = Integer.parseInt(inputString);
    }
    catch (Exception e){
      output = defaultValue;
    }

    if (output < minVal) output = minVal;
    if (maxVal == -1) {
      if (output < minVal) output = minVal;
    }
    else if (output > maxVal) output = maxVal;
    return output;
  }

  public long getLong(long minVal, long maxVal, long defaultValue, String inputString) {
    long output = defaultValue;
    try {
      output = Long.parseLong(inputString);
    }
    catch (Exception e){
      output = defaultValue;
    }

    if (output < minVal) output = minVal;
    if (maxVal == -1) { if (output < minVal) output = minVal; }
    else if (output > maxVal) output = maxVal;
    return output;
  }

  public double getDouble(double minVal, double maxVal, double defaultValue, String inputString) {
    double output = defaultValue;
    try {
      output = Double.parseDouble(inputString);
    }
    catch (Exception e){
      output = defaultValue;
    }

    if (output < minVal) output = minVal;
    if (maxVal == -1) { 
      if (output < minVal) output = minVal; 
    }
    else if (output > maxVal) output = maxVal;
    return output;
  }

  public boolean getBoolean(boolean defaultValue, String booleanString) {
    boolean output = defaultValue;
    if (booleanString == null) output = defaultValue;

    //  treat "", "YES" as "true"
    if ("".equals(booleanString)) output = true;
    else if ("YES".equalsIgnoreCase(booleanString)) output = true;
    else if ("NO".equalsIgnoreCase(booleanString)) output = false;
    else {
      try {
        output = Boolean.parseBoolean(booleanString);
      }
      catch (Exception e){
        output = defaultValue;
      }
    }
    return output;
  }
  
  public Date getDate(Date defaultValue, String dateString){
    try {
      return new SimpleDateFormat("yyyy-MM-dd").parse(dateString);
    }
    catch(Exception e) {
      return defaultValue;
    }
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jersey-spring/src/main/java/com/wordnik/swagger/sample/util/ApiAuthorizationFilterImpl.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.util;

import com.wordnik.swagger.model.*;
import com.wordnik.swagger.core.filter.SwaggerSpecFilter;

import com.wordnik.swagger.models.Model;
import com.wordnik.swagger.models.Operation;
import com.wordnik.swagger.models.parameters.Parameter;
import com.wordnik.swagger.models.properties.Property;
import org.slf4j.*;

import java.util.Map;
import java.util.List;

import javax.servlet.ServletConfig;
import javax.servlet.http.HttpServlet;
/**
 * 
 * The rules are maintained in simple map with key as path and a boolean value
 * indicating given path is secure or not. For method level security the key is
 * combination of http method and path .
 * 
 * If the resource or method is secure then it can only be viewed using a
 * secured api key
 * 
 * Note: Objective of this class is not to provide fully functional
 * implementation of authorization filter. This is only a sample demonstration
 * how API authorization filter works.
 * 
 */

public class ApiAuthorizationFilterImpl implements SwaggerSpecFilter {
  static Logger logger = LoggerFactory.getLogger(ApiAuthorizationFilterImpl.class);

  public boolean isOperationAllowed(Operation operation, ApiDescription api, Map<String, List<String>> params, Map<String, String> cookies, Map<String, List<String>> headers) {
    boolean isAuthorized = checkKey(params, headers);
    if(isAuthorized) {
      return true;
    }
    else {
      if(!"GET".equalsIgnoreCase(api.getMethod()) || api.getPath().indexOf("/store") != -1) {
        return false;
      }
      else return true;
    }
  }

  public boolean isParamAllowed(Parameter parameter, Operation operation, ApiDescription api, Map<String, List<String>> params, Map<String, String> cookies, Map<String, List<String>> headers) {
    boolean isAuthorized = checkKey(params, headers);
    if("internal".equals(parameter.getAccess()) && !isAuthorized)
      return false;
    else 
      return true;
  }

  @Override
  public boolean isPropertyAllowed(Model model, Property property, String propertyName, Map<String, List<String>> params, Map<String, String> cookies, Map<String, List<String>> headers) {
    return true;
  }

  public boolean checkKey(Map<String, List<String>> params, Map<String, List<String>> headers) {
    String keyValue = null;
    if(params.containsKey("api_key"))
      keyValue = params.get("api_key").get(0);
    else {
      if(headers.containsKey("api_key"))
        keyValue = headers.get("api_key").get(0);
    }
    if("special-key".equals(keyValue))
      return true;
    else
      return false;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jersey-spring/src/main/java/com/wordnik/swagger/sample/data/PetData.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.data;

import com.wordnik.swagger.sample.model.*;

import java.util.List;
import java.util.ArrayList;

public class PetData {
  static List<Pet> pets = new ArrayList<Pet>();
  static List<Category> categories = new ArrayList<Category>();

  static {
    categories.add(createCategory(1, "Dogs"));
    categories.add(createCategory(2, "Cats"));
    categories.add(createCategory(3, "Rabbits"));
    categories.add(createCategory(4, "Lions"));

    pets.add(createPet(1, categories.get(1), "Cat 1", new String[] {
        "url1", "url2" }, new String[] { "tag1", "tag2" }, "available"));
    pets.add(createPet(2, categories.get(1), "Cat 2", new String[] {
        "url1", "url2" }, new String[] { "tag2", "tag3" }, "available"));
    pets.add(createPet(3, categories.get(1), "Cat 3", new String[] {
        "url1", "url2" }, new String[] { "tag3", "tag4" }, "pending"));

    pets.add(createPet(4, categories.get(0), "Dog 1", new String[] {
        "url1", "url2" }, new String[] { "tag1", "tag2" }, "available"));
    pets.add(createPet(5, categories.get(0), "Dog 2", new String[] {
        "url1", "url2" }, new String[] { "tag2", "tag3" }, "sold"));
    pets.add(createPet(6, categories.get(0), "Dog 3", new String[] {
        "url1", "url2" }, new String[] { "tag3", "tag4" }, "pending"));

    pets.add(createPet(7, categories.get(3), "Lion 1", new String[] {
        "url1", "url2" }, new String[] { "tag1", "tag2" }, "available"));
    pets.add(createPet(8, categories.get(3), "Lion 2", new String[] {
        "url1", "url2" }, new String[] { "tag2", "tag3" }, "available"));
    pets.add(createPet(9, categories.get(3), "Lion 3", new String[] {
        "url1", "url2" }, new String[] { "tag3", "tag4" }, "available"));

    pets.add(createPet(10, categories.get(2), "Rabbit 1", new String[] {
        "url1", "url2" }, new String[] { "tag3", "tag4" }, "available"));
  }

  public Pet getPetbyId(long petId) {
    for (Pet pet : pets) {
      if (pet.getId() == petId) {
        return pet;
      }
    }
    return null;
  }

  public List<Pet> findPetByStatus(String status) {
    String[] statues = status.split(",");
    List<Pet> result = new java.util.ArrayList<Pet>();
    for (Pet pet : pets) {
      for (String s : statues) {
        if (s.equals(pet.getStatus())) {
          result.add(pet);
        }
      }
    }
    return result;
  }

  public List<Pet> findPetByTags(String tags) {
    String[] tagList = tags.split(",");
    List<Pet> result = new java.util.ArrayList<Pet>();
    for (Pet pet : pets) {
      if (null != pet.getTags()) {
        for (Tag tag : pet.getTags()) {
          for (String tagListString : tagList) {
            if (tagListString.equals(tag.getName()))
              result.add(pet);
          }
        }
      }
    }
    return result;
  }

  public void addPet(Pet pet) {
    if (pets.size() > 0) {
      for (int i = pets.size() - 1; i >= 0; i--) {
        if (pets.get(i).getId() == pet.getId()) {
          pets.remove(i);
        }
      }
    }
    pets.add(pet);
  }

  static Pet createPet(long id, Category cat, String name, String[] urls,
      String[] tags, String status) {
    Pet pet = new Pet();
    pet.setId(id);
    pet.setCategory(cat);
    pet.setName(name);
    if (null != urls) {
      List<String> urlObjs = new ArrayList<String>();
      for (String urlString : urls) {
        urlObjs.add(urlString);
      }
      pet.setPhotoUrls(urlObjs);
    }
    List<Tag> tagObjs = new java.util.ArrayList<Tag>();
    int i = 0;
    if (null != tags) {
      for (String tagString : tags) {
        i = i + 1;
        Tag tag = new Tag();
        tag.setId(i);
        tag.setName(tagString);
        tagObjs.add(tag);
      }
    }
    pet.setTags(tagObjs);
    pet.setStatus(status);
    return pet;
  }

  static Category createCategory(long id, String name) {
    Category category = new Category();
    category.setId(id);
    category.setName(name);
    return category;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jersey-spring/src/main/java/com/wordnik/swagger/sample/data/UserData.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.data;

import com.wordnik.swagger.sample.model.*;

import java.util.List;
import java.util.ArrayList;

public class UserData {
  static List<User> users = new ArrayList<User>();

  static {
    users.add(createUser(1, "user1", "first name 1", "last name 1",
        "email1@test.com", "123-456-7890", 1));
    users.add(createUser(2, "user2", "first name 2", "last name 2",
        "email2@test.com", "123-456-7890", 2));
    users.add(createUser(3, "user3", "first name 3", "last name 3",
        "email3@test.com", "123-456-7890", 3));
    users.add(createUser(4, "user4", "first name 4", "last name 4",
        "email4@test.com", "123-456-7890", 1));
    users.add(createUser(5, "user5", "first name 5", "last name 5",
        "email5@test.com", "123-456-7890", 2));
    users.add(createUser(6, "user6", "first name 6", "last name 6",
        "email6@test.com", "123-456-7890", 3));
    users.add(createUser(7, "user7", "first name 7", "last name 7",
        "email7@test.com", "123-456-7890", 1));
    users.add(createUser(8, "user8", "first name 8", "last name 8",
        "email8@test.com", "123-456-7890", 2));
    users.add(createUser(9, "user9", "first name 9", "last name 9",
        "email9@test.com", "123-456-7890", 3));
    users.add(createUser(10, "user10", "first name 10", "last name 10",
        "email10@test.com", "123-456-7890", 1));
    users.add(createUser(11, "user?10", "first name ?10", "last name ?10",
        "email101@test.com", "123-456-7890", 1));

  }

  public User findUserByName(String username) {
    for (User user : users) {
      if (user.getUsername().equals(username)) {
        return user;
      }
    }
    return null;
  }

  public void addUser(User user) {
    if (users.size() > 0) {
      for (int i = users.size() - 1; i >= 0; i--) {
        if (users.get(i).getUsername().equals(user.getUsername())) {
          users.remove(i);
        }
      }
    }
    users.add(user);
  }

  public void removeUser(String username) {
    if (users.size() > 0) {
      for (int i = users.size() - 1; i >= 0; i--) {
        if (users.get(i).getUsername().equals(username)) {
          users.remove(i);
        }
      }
    }
  }

  private static User createUser(long id, String username, String firstName,
      String lastName, String email, String phone, int userStatus) {
    User user = new User();
    user.setId(id);
    user.setUsername(username);
    user.setFirstName(firstName);
    user.setLastName(lastName);
    user.setEmail(email);
    user.setPassword("XXXXXXXXXXX");
    user.setPhone(phone);
    user.setUserStatus(userStatus);
    return user;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jersey-spring/src/main/java/com/wordnik/swagger/sample/data/StoreData.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.data;

import com.wordnik.swagger.sample.model.*;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;

public class StoreData {
  static List<Order> orders = new ArrayList<Order>();

  static {
    orders.add(createOrder(1, 1, 2, new Date(), "placed"));
    orders.add(createOrder(2, 1, 2, new Date(), "delivered"));
    orders.add(createOrder(3, 2, 2, new Date(), "placed"));
    orders.add(createOrder(4, 2, 2, new Date(), "delivered"));
    orders.add(createOrder(5, 3, 2, new Date(), "placed"));
    orders.add(createOrder(11, 3, 2, new Date(), "placed"));
    orders.add(createOrder(12, 3, 2, new Date(), "placed"));
    orders.add(createOrder(13, 3, 2, new Date(), "placed"));
    orders.add(createOrder(14, 3, 2, new Date(), "placed"));
    orders.add(createOrder(15, 3, 2, new Date(), "placed"));
  }

  public Order findOrderById(long orderId) {
    for (Order order : orders) {
      if (order.getId() == orderId) {
        return order;
      }
    }
    return null;
  }

  public void placeOrder(Order order) {
    if (orders.size() > 0) {
      for (int i = orders.size() - 1; i >= 0; i--) {
        if (orders.get(i).getId() == order.getId()) {
          orders.remove(i);
        }
      }
    }
    orders.add(order);
  }

  public void deleteOrder(long orderId) {
    if (orders.size() > 0) {
      for (int i = orders.size() - 1; i >= 0; i--) {
        if (orders.get(i).getId() == orderId) {
          orders.remove(i);
        }
      }
    }
  }

  private static Order createOrder(long id, long petId, int quantity,
      Date shipDate, String status) {
    Order order = new Order();
    order.setId(id);
    order.setPetId(petId);
    order.setQuantity(quantity);
    order.setShipDate(shipDate);
    order.setStatus(status);
    return order;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jaxrs-wink/src/main/java/com/wordnik/swagger/sample/Bootstrap.java;<<<<<<< MINE
package com.wordnik.swagger.sample;


import com.wordnik.swagger.models.Contact;
import com.wordnik.swagger.models.ExternalDocs;
import com.wordnik.swagger.models.Info;
import com.wordnik.swagger.models.License;
import com.wordnik.swagger.models.Swagger;
import com.wordnik.swagger.models.Tag;
import com.wordnik.swagger.models.auth.OAuth2Definition;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;

public class Bootstrap extends HttpServlet {

  @Override
  public void init(ServletConfig config) throws ServletException {
    Info info = new Info()
            .title("Swagger Sample App")
            .description("This is a sample server Petstore server.  You can find out more about Swagger " +
                    "at <a href=\"http://swagger.io\">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, " +
                    "you can use the api key \"special-key\" to test the authorization filters")
            .termsOfService("http://helloreverb.com/terms/")
            .contact(new Contact()
                    .email("apiteam@swagger.io"))
            .license(new License()
                    .name("Apache 2.0")
                    .url("http://www.apache.org/licenses/LICENSE-2.0.html"));

    ServletContext context = config.getServletContext();
    Swagger swagger = new Swagger().info(info);
    swagger.securityDefinition("petstore_auth",
            new OAuth2Definition()
                    .implicit("http://localhost:8002/oauth/dialog")
                    .scope("email", "Access to your email address")
                    .scope("pets", "Access to your pets"));
    swagger.tag(new Tag()
            .name("pet")
            .description("Everything about your Pets")
            .externalDocs(new ExternalDocs("Find out more", "http://swagger.io")));
    swagger.tag(new Tag()
            .name("store")
            .description("Access to Petstore orders"));
    swagger.tag(new Tag()
            .name("user")
            .description("Operations about user")
            .externalDocs(new ExternalDocs("Find out more about our store", "http://swagger.io")));
    context.setAttribute("swagger", swagger);
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jaxrs-wink/src/main/java/com/wordnik/swagger/sample/exception/ApiException.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.exception;

public class ApiException extends Exception{
  private int code;
  public ApiException (int code, String msg) {
    super(msg);
    this.code = code;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jaxrs-wink/src/main/java/com/wordnik/swagger/sample/exception/NotFoundException.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.exception;

public class NotFoundException extends ApiException {
  private final int code;
  public NotFoundException (int code, String msg) {
    super(code, msg);
    this.code = code;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jaxrs-wink/src/main/java/com/wordnik/swagger/sample/exception/BadRequestException.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.exception;

public class BadRequestException extends ApiException{
  private int code;
  public BadRequestException (int code, String msg) {
    super(code, msg);
    this.code = code;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jaxrs-wink/src/main/java/com/wordnik/swagger/sample/model/ApiResponse.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import javax.xml.bind.annotation.XmlTransient;

@javax.xml.bind.annotation.XmlRootElement
public class ApiResponse {
  public static final int ERROR = 1;
  public static final int WARNING = 2;
  public static final int INFO = 3;
  public static final int OK = 4;
  public static final int TOO_BUSY = 5;

  int code;
  String type;
  String message;
  
  public ApiResponse(){}
  
  public ApiResponse(int code, String message){
    this.code = code;
    switch(code){
    case ERROR:
      setType("error");
      break;
    case WARNING:
      setType("warning");
      break;
    case INFO:
      setType("info");
      break;
    case OK:
      setType("ok");
      break;
    case TOO_BUSY:
      setType("too busy");
      break;
    default:
      setType("unknown");
      break;
    }
    this.message = message;
  }

  @XmlTransient
  public int getCode() {
    return code;
  }

  public void setCode(int code) {
    this.code = code;
  }

  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jaxrs-wink/src/main/java/com/wordnik/swagger/sample/model/Pet.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import com.wordnik.swagger.annotations.*;

import java.util.List;
import java.util.ArrayList;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Pet")
public class Pet {
  private long id;
  private Category category;
  private String name;
  private List<String> photoUrls = new ArrayList<String>();
  private List<Tag> tags = new ArrayList<Tag>();
  private String status;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  @XmlElement(name = "category")
  public Category getCategory() {
    return category;
  }

  public void setCategory(Category category) {
    this.category = category;
  }

  @XmlElement(name = "name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  @XmlElementWrapper(name = "photoUrls")
  @XmlElement(name = "photoUrl")
  public List<String> getPhotoUrls() {
    return photoUrls;
  }

  public void setPhotoUrls(List<String> photoUrls) {
    this.photoUrls = photoUrls;
  }

  @XmlElementWrapper(name = "tags")
  @XmlElement(name = "tag")
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }

  @XmlElement(name = "status")
  @ApiModelProperty(value = "pet status in the store", allowableValues = "available,pending,sold")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jaxrs-wink/src/main/java/com/wordnik/swagger/sample/model/Order.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import com.wordnik.swagger.annotations.*;

import java.util.Date;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Order")
public class Order {
  private long id;
  private long petId;
  private int quantity;
  private Date shipDate;
  private String status;
    private boolean complete;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

    public boolean isComplete() {
        return complete;
    }

    public void setComplete(boolean complete) {
        this.complete = complete;
    }


  @XmlElement(name = "petId")
  public long getPetId() {
    return petId;
  }

  public void setPetId(long petId) {
    this.petId = petId;
  }

  @XmlElement(name = "quantity")
  public int getQuantity() {
    return quantity;
  }

  public void setQuantity(int quantity) {
    this.quantity = quantity;
  }

  @XmlElement(name = "status")
  @ApiModelProperty(value = "Order Status", allowableValues = "placed, approved, delivered")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  @XmlElement(name = "shipDate")
  public Date getShipDate() {
    return shipDate;
  }

  public void setShipDate(Date shipDate) {
    this.shipDate = shipDate;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jaxrs-wink/src/main/java/com/wordnik/swagger/sample/model/User.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import com.wordnik.swagger.annotations.ApiModelProperty;

import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;


@XmlRootElement(name = "User")
public class User {
  private long id;
  private String username;
  private String firstName;
  private String lastName;
  private String email;
  private String password;
  private String phone;
  private int userStatus;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  @XmlElement(name = "firstName")
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

  @XmlElement(name = "username")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  @XmlElement(name = "lastName")
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  @XmlElement(name = "email")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  @XmlElement(name = "password")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  @XmlElement(name = "phone")
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }

  @XmlElement(name = "userStatus")
  @ApiModelProperty(value = "User Status", allowableValues = "1-registered,2-active,3-closed")
  public int getUserStatus() {
    return userStatus;
  }

  public void setUserStatus(int userStatus) {
    this.userStatus = userStatus;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jaxrs-wink/src/main/java/com/wordnik/swagger/sample/model/Tag.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Tag")
public class Tag {
  private long id;
  private String name;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  @XmlElement(name = "name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jaxrs-wink/src/main/java/com/wordnik/swagger/sample/model/Category.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Category")
public class Category {
  private long id;
  private String name;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  @XmlElement(name = "name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jaxrs-wink/src/main/java/com/wordnik/swagger/sample/util/ApiAuthorizationFilterImpl.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.util;

import com.wordnik.swagger.model.*;
import com.wordnik.swagger.core.filter.SwaggerSpecFilter;

import com.wordnik.swagger.models.Model;
import com.wordnik.swagger.models.Operation;
import com.wordnik.swagger.models.parameters.Parameter;
import com.wordnik.swagger.models.properties.Property;
import org.slf4j.*;

import java.util.Map;
import java.util.List;

/**
 * 
 * The rules are maintained in simple map with key as path and a boolean value
 * indicating given path is secure or not. For method level security the key is
 * combination of http method and path .
 * 
 * If the resource or method is secure then it can only be viewed using a
 * secured api key
 * 
 * Note: Objective of this class is not to provide fully functional
 * implementation of authorization filter. This is only a sample demonstration
 * how API authorization filter works.
 * 
 */

public class ApiAuthorizationFilterImpl implements SwaggerSpecFilter {
  static Logger logger = LoggerFactory.getLogger(ApiAuthorizationFilterImpl.class);

  public boolean isOperationAllowed(Operation operation, ApiDescription api, Map<String, List<String>> params, Map<String, String> cookies, Map<String, List<String>> headers) {
    boolean isAuthorized = checkKey(params, headers);
    if(isAuthorized) {
      return true;
    }
    else {
      if(!"GET".equalsIgnoreCase(api.getMethod()) || api.getPath().indexOf("/store") != -1) {
        return false;
      }
      else return true;
    }
  }

  public boolean isParamAllowed(Parameter parameter, Operation operation, ApiDescription api, Map<String, List<String>> params, Map<String, String> cookies, Map<String, List<String>> headers) {
    boolean isAuthorized = checkKey(params, headers);
    if("internal".equals(parameter.getAccess()) && !isAuthorized)
      return false;
    else
      return true;
  }

  @Override
  public boolean isPropertyAllowed(Model model, Property property, String propertyName, Map<String, List<String>> params, Map<String, String> cookies, Map<String, List<String>> headers) {
    return true;
  }

  public boolean checkKey(Map<String, List<String>> params, Map<String, List<String>> headers) {
    String keyValue = null;
    if(params.containsKey("api_key"))
      keyValue = params.get("api_key").get(0);
    else {
      if(headers.containsKey("api_key"))
        keyValue = headers.get("api_key").get(0);
    }
    if("special-key".equals(keyValue))
      return true;
    else
      return false;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jaxrs-wink/src/main/java/com/wordnik/swagger/sample/util/ApiOriginFilter.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.util;

import java.io.IOException;

import javax.servlet.*;
import javax.servlet.http.HttpServletResponse;

public class ApiOriginFilter implements javax.servlet.Filter {
  @Override
  public void doFilter(ServletRequest request, ServletResponse response,
      FilterChain chain) throws IOException, ServletException {
    HttpServletResponse res = (HttpServletResponse) response;
    res.addHeader("Access-Control-Allow-Origin", "*");
    res.addHeader("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");
    res.addHeader("Access-Control-Allow-Headers", "Content-Type");
    chain.doFilter(request, response);
  }

  @Override
  public void destroy() {
  }

  @Override
  public void init(FilterConfig filterConfig) throws ServletException {
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jaxrs-wink/src/main/java/com/wordnik/swagger/sample/data/PetData.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.data;

import com.wordnik.swagger.sample.model.Category;
import com.wordnik.swagger.sample.model.Pet;
import com.wordnik.swagger.sample.model.Tag;

import java.util.List;
import java.util.ArrayList;

public class PetData {
  static List<Pet> pets = new ArrayList<Pet>();
  static List<Category> categories = new ArrayList<Category>();

  static {
    categories.add(createCategory(1, "Dogs"));
    categories.add(createCategory(2, "Cats"));
    categories.add(createCategory(3, "Rabbits"));
    categories.add(createCategory(4, "Lions"));

    pets.add(createPet(1, categories.get(1), "Cat 1", new String[] {
        "url1", "url2" }, new String[] { "tag1", "tag2" }, "available"));
    pets.add(createPet(2, categories.get(1), "Cat 2", new String[] {
        "url1", "url2" }, new String[] { "tag2", "tag3" }, "available"));
    pets.add(createPet(3, categories.get(1), "Cat 3", new String[] {
        "url1", "url2" }, new String[] { "tag3", "tag4" }, "pending"));

    pets.add(createPet(4, categories.get(0), "Dog 1", new String[] {
        "url1", "url2" }, new String[] { "tag1", "tag2" }, "available"));
    pets.add(createPet(5, categories.get(0), "Dog 2", new String[] {
        "url1", "url2" }, new String[] { "tag2", "tag3" }, "sold"));
    pets.add(createPet(6, categories.get(0), "Dog 3", new String[] {
        "url1", "url2" }, new String[] { "tag3", "tag4" }, "pending"));

    pets.add(createPet(7, categories.get(3), "Lion 1", new String[] {
        "url1", "url2" }, new String[] { "tag1", "tag2" }, "available"));
    pets.add(createPet(8, categories.get(3), "Lion 2", new String[] {
        "url1", "url2" }, new String[] { "tag2", "tag3" }, "available"));
    pets.add(createPet(9, categories.get(3), "Lion 3", new String[] {
        "url1", "url2" }, new String[] { "tag3", "tag4" }, "available"));

    pets.add(createPet(10, categories.get(2), "Rabbit 1", new String[] {
        "url1", "url2" }, new String[] { "tag3", "tag4" }, "available"));
  }

  public Pet getPetbyId(long petId) {
    for (Pet pet : pets) {
      if (pet.getId() == petId) {
        return pet;
      }
    }
    return null;
  }

  public List<Pet> findPetByStatus(String status) {
    String[] statues = status.split(",");
    List<Pet> result = new java.util.ArrayList<Pet>();
    for (Pet pet : pets) {
      for (String s : statues) {
        if (s.equals(pet.getStatus())) {
          result.add(pet);
        }
      }
    }
    return result;
  }

  public List<Pet> findPetByTags(String tags) {
    String[] tagList = tags.split(",");
    List<Pet> result = new java.util.ArrayList<Pet>();
    for (Pet pet : pets) {
      if (null != pet.getTags()) {
        for (Tag tag : pet.getTags()) {
          for (String tagListString : tagList) {
            if (tagListString.equals(tag.getName()))
              result.add(pet);
          }
        }
      }
    }
    return result;
  }

  public void addPet(Pet pet) {
    if (pets.size() > 0) {
      for (int i = pets.size() - 1; i >= 0; i--) {
        if (pets.get(i).getId() == pet.getId()) {
          pets.remove(i);
        }
      }
    }
    pets.add(pet);
  }

  static Pet createPet(long id, Category cat, String name, String[] urls,
      String[] tags, String status) {
    Pet pet = new Pet();
    pet.setId(id);
    pet.setCategory(cat);
    pet.setName(name);
    if (null != urls) {
      List<String> urlObjs = new ArrayList<String>();
      for (String urlString : urls) {
        urlObjs.add(urlString);
      }
      pet.setPhotoUrls(urlObjs);
    }
    List<Tag> tagObjs = new java.util.ArrayList<Tag>();
    int i = 0;
    if (null != tags) {
      for (String tagString : tags) {
        i = i + 1;
        Tag tag = new Tag();
        tag.setId(i);
        tag.setName(tagString);
        tagObjs.add(tag);
      }
    }
    pet.setTags(tagObjs);
    pet.setStatus(status);
    return pet;
  }

  static Category createCategory(long id, String name) {
    Category category = new Category();
    category.setId(id);
    category.setName(name);
    return category;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jaxrs-wink/src/main/java/com/wordnik/swagger/sample/data/UserData.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.data;

import com.wordnik.swagger.sample.model.User;

import java.util.List;
import java.util.ArrayList;

public class UserData {
  static List<User> users = new ArrayList<User>();

  static {
    users.add(createUser(1, "user1", "first name 1", "last name 1",
        "email1@test.com", "123-456-7890", 1));
    users.add(createUser(2, "user2", "first name 2", "last name 2",
        "email2@test.com", "123-456-7890", 2));
    users.add(createUser(3, "user3", "first name 3", "last name 3",
        "email3@test.com", "123-456-7890", 3));
    users.add(createUser(4, "user4", "first name 4", "last name 4",
        "email4@test.com", "123-456-7890", 1));
    users.add(createUser(5, "user5", "first name 5", "last name 5",
        "email5@test.com", "123-456-7890", 2));
    users.add(createUser(6, "user6", "first name 6", "last name 6",
        "email6@test.com", "123-456-7890", 3));
    users.add(createUser(7, "user7", "first name 7", "last name 7",
        "email7@test.com", "123-456-7890", 1));
    users.add(createUser(8, "user8", "first name 8", "last name 8",
        "email8@test.com", "123-456-7890", 2));
    users.add(createUser(9, "user9", "first name 9", "last name 9",
        "email9@test.com", "123-456-7890", 3));
    users.add(createUser(10, "user10", "first name 10", "last name 10",
        "email10@test.com", "123-456-7890", 1));
    users.add(createUser(11, "user?10", "first name ?10", "last name ?10",
        "email101@test.com", "123-456-7890", 1));

  }

  public User findUserByName(String username) {
    for (User user : users) {
      if (user.getUsername().equals(username)) {
        return user;
      }
    }
    return null;
  }

  public void addUser(User user) {
    if (users.size() > 0) {
      for (int i = users.size() - 1; i >= 0; i--) {
        if (users.get(i).getUsername().equals(user.getUsername())) {
          users.remove(i);
        }
      }
    }
    users.add(user);
  }

  public void removeUser(String username) {
    if (users.size() > 0) {
      for (int i = users.size() - 1; i >= 0; i--) {
        if (users.get(i).getUsername().equals(username)) {
          users.remove(i);
        }
      }
    }
  }

  private static User createUser(long id, String username, String firstName,
      String lastName, String email, String phone, int userStatus) {
    User user = new User();
    user.setId(id);
    user.setUsername(username);
    user.setFirstName(firstName);
    user.setLastName(lastName);
    user.setEmail(email);
    user.setPassword("XXXXXXXXXXX");
    user.setPhone(phone);
    user.setUserStatus(userStatus);
    return user;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jaxrs-wink/src/main/java/com/wordnik/swagger/sample/data/StoreData.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.data;

import com.wordnik.swagger.sample.model.Order;

import java.util.Date;
import java.util.List;
import java.util.ArrayList;

public class StoreData {
  static List<Order> orders = new ArrayList<Order>();

  static {
    orders.add(createOrder(1, 1, 2, new Date(), "placed"));
    orders.add(createOrder(2, 1, 2, new Date(), "delivered"));
    orders.add(createOrder(3, 2, 2, new Date(), "placed"));
    orders.add(createOrder(4, 2, 2, new Date(), "delivered"));
    orders.add(createOrder(5, 3, 2, new Date(), "placed"));
    orders.add(createOrder(11, 3, 2, new Date(), "placed"));
    orders.add(createOrder(12, 3, 2, new Date(), "placed"));
    orders.add(createOrder(13, 3, 2, new Date(), "placed"));
    orders.add(createOrder(14, 3, 2, new Date(), "placed"));
    orders.add(createOrder(15, 3, 2, new Date(), "placed"));
  }

  public Order findOrderById(long orderId) {
    for (Order order : orders) {
      if (order.getId() == orderId) {
        return order;
      }
    }
    return null;
  }

  public void placeOrder(Order order) {
    if (orders.size() > 0) {
      for (int i = orders.size() - 1; i >= 0; i--) {
        if (orders.get(i).getId() == order.getId()) {
          orders.remove(i);
        }
      }
    }
    orders.add(order);
  }

  public void deleteOrder(long orderId) {
    if (orders.size() > 0) {
      for (int i = orders.size() - 1; i >= 0; i--) {
        if (orders.get(i).getId() == orderId) {
          orders.remove(i);
        }
      }
    }
  }

  private static Order createOrder(long id, long petId, int quantity,
      Date shipDate, String status) {
    Order order = new Order();
    order.setId(id);
    order.setPetId(petId);
    order.setQuantity(quantity);
    order.setShipDate(shipDate);
    order.setStatus(status);
    return order;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jaxrs-wink/src/main/java/com/wordnik/swagger/sample/resources/SampleExceptionMapper.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.resources;

import com.wordnik.swagger.sample.exception.ApiException;
import com.wordnik.swagger.sample.exception.BadRequestException;
import com.wordnik.swagger.sample.model.ApiResponse;

import javax.ws.rs.NotFoundException;
import javax.ws.rs.ext.*;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

@Provider
public class SampleExceptionMapper implements ExceptionMapper<Exception> {
  public Response toResponse(Exception exception) {
    if (exception instanceof javax.ws.rs.WebApplicationException) {
      javax.ws.rs.WebApplicationException e = (javax.ws.rs.WebApplicationException) exception;
      return Response
          .status(e.getResponse().getStatus())
          .entity(new ApiResponse(e.getResponse().getStatus(),
              exception.getMessage())).build();
    } else if (exception instanceof com.fasterxml.jackson.core.JsonParseException) {
      return Response.status(400)
          .entity(new ApiResponse(400, "bad input")).build();
    } else if (exception instanceof NotFoundException) {
      return Response
          .status(Status.NOT_FOUND)
          .entity(new ApiResponse(ApiResponse.ERROR, exception
              .getMessage())).build();
    } else if (exception instanceof BadRequestException) {
      return Response
          .status(Status.BAD_REQUEST)
          .entity(new ApiResponse(ApiResponse.ERROR, exception
              .getMessage())).build();
    } else if (exception instanceof ApiException) {
      return Response
          .status(Status.BAD_REQUEST)
          .entity(new ApiResponse(ApiResponse.ERROR, exception
              .getMessage())).build();
    } else {
      return Response.status(500)
          .entity(new ApiResponse(500, "something bad happened"))
          .build();
    }
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jaxrs-wink/src/main/java/com/wordnik/swagger/sample/resources/ResourceConfiguration.java;<<<<<<< MINE
package com.wordnik.swagger.sample.resources;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider;
import com.fasterxml.jackson.module.jaxb.JaxbAnnotationModule;

import java.util.HashSet;
import java.util.Set;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

@ApplicationPath("/rest")
public class ResourceConfiguration extends Application {

    @Override
    public Set<Class<?>> getClasses() {
        Set<Class<?>> classes = new HashSet<Class<?>>();

        classes.add(com.wordnik.swagger.jaxrs.listing.ApiListingResource.class);
        classes.add(com.wordnik.swagger.jaxrs.listing.SwaggerSerializers.class);

        addRestResources(classes);

        return classes;
    }

    /**
     * Here you can add your extra resources.
     *
     * @param resources
     */
    private void addRestResources(Set<Class<?>> resources) {
        resources.add(PetResource.class);
        resources.add(PetStoreResource.class);
        resources.add(UserResource.class);

    }

    @Override
    public Set<Object> getSingletons() {
        Set<Object> s = new HashSet<Object>();

        // TODO : Is this the correct configuration???
        // Register the Jackson provider for JSON
        // Make (de)serializer use a subset of JAXB and (afterwards) Jackson annotations
        // See http://wiki.fasterxml.com/JacksonJAXBAnnotations for more information
        ObjectMapper mapper = new ObjectMapper();

        JaxbAnnotationModule module = new JaxbAnnotationModule();
        // configure as necessary
        mapper.registerModule(module);

        // Set up the provider
        JacksonJaxbJsonProvider jaxbProvider = new JacksonJaxbJsonProvider();
        jaxbProvider.setMapper(mapper);

        s.add(jaxbProvider);
        return s;
    }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-jaxrs-wink/src/main/java/com/wordnik/swagger/sample/resources/JavaRestResourceUtil.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.resources;

import java.text.SimpleDateFormat;

import java.util.Date;

public class JavaRestResourceUtil {
  public int getInt(int minVal, int maxVal, int defaultValue, String inputString) {
    int output = defaultValue;
    try {
      output = Integer.parseInt(inputString);
    }
    catch (Exception e){
      output = defaultValue;
    }

    if (output < minVal) output = minVal;
    if (maxVal == -1) {
      if (output < minVal) output = minVal;
    }
    else if (output > maxVal) output = maxVal;
    return output;
  }

  public long getLong(long minVal, long maxVal, long defaultValue, String inputString) {
    long output = defaultValue;
    try {
      output = Long.parseLong(inputString);
    }
    catch (Exception e){
      output = defaultValue;
    }

    if (output < minVal) output = minVal;
    if (maxVal == -1) { if (output < minVal) output = minVal; }
    else if (output > maxVal) output = maxVal;
    return output;
  }

  public double getDouble(double minVal, double maxVal, double defaultValue, String inputString) {
    double output = defaultValue;
    try {
      output = Double.parseDouble(inputString);
    }
    catch (Exception e){
      output = defaultValue;
    }

    if (output < minVal) output = minVal;
    if (maxVal == -1) { 
      if (output < minVal) output = minVal; 
    }
    else if (output > maxVal) output = maxVal;
    return output;
  }

  public boolean getBoolean(boolean defaultValue, String booleanString) {
    boolean output = defaultValue;
    if (booleanString == null) output = defaultValue;

    //  treat "", "YES" as "true"
    if ("".equals(booleanString)) output = true;
    else if ("YES".equalsIgnoreCase(booleanString)) output = true;
    else if ("NO".equalsIgnoreCase(booleanString)) output = false;
    else {
      try {
        output = Boolean.parseBoolean(booleanString);
      }
      catch (Exception e){
        output = defaultValue;
      }
    }
    return output;
  }
  
  public Date getDate(Date defaultValue, String dateString){
    try {
      return new SimpleDateFormat("yyyy-MM-dd").parse(dateString);
    }
    catch(Exception e) {
      return defaultValue;
    }
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-mule/src/main/java/com/wordnik/swagger/sample/resource/SampleExceptionMapper.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.resource;

import com.wordnik.swagger.sample.exception.ApiException;
import com.wordnik.swagger.sample.exception.BadRequestException;
import com.wordnik.swagger.sample.exception.NotFoundException;
import com.wordnik.swagger.sample.model.ApiResponse;

import javax.ws.rs.ext.*;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

@Provider
public class SampleExceptionMapper implements ExceptionMapper<Exception> {
  public Response toResponse(Exception exception) {
    if (exception instanceof javax.ws.rs.WebApplicationException) {
      javax.ws.rs.WebApplicationException e = (javax.ws.rs.WebApplicationException) exception;
      return Response
          .status(e.getResponse().getStatus())
          .entity(new ApiResponse(e.getResponse().getStatus(),
              exception.getMessage())).build();
    } else if (exception instanceof com.fasterxml.jackson.core.JsonParseException) {
      return Response.status(400)
          .entity(new ApiResponse(400, "bad input")).build();
    } else if (exception instanceof NotFoundException) {
      return Response
          .status(Status.NOT_FOUND)
          .entity(new ApiResponse(ApiResponse.ERROR, exception
              .getMessage())).build();
    } else if (exception instanceof BadRequestException) {
      return Response
          .status(Status.BAD_REQUEST)
          .entity(new ApiResponse(ApiResponse.ERROR, exception
              .getMessage())).build();
    } else if (exception instanceof ApiException) {
      return Response
          .status(Status.BAD_REQUEST)
          .entity(new ApiResponse(ApiResponse.ERROR, exception
              .getMessage())).build();
    } else {
      return Response.status(500)
          .entity(new ApiResponse(500, "something bad happened"))
          .build();
    }
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-mule/src/main/java/com/wordnik/swagger/sample/resource/JavaRestResourceUtil.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.resource;

import java.text.SimpleDateFormat;

import java.util.Date;

public class JavaRestResourceUtil {
  public int getInt(int minVal, int maxVal, int defaultValue, String inputString) {
    int output = defaultValue;
    try {
      output = Integer.parseInt(inputString);
    }
    catch (Exception e){
      output = defaultValue;
    }

    if (output < minVal) output = minVal;
    if (maxVal == -1) {
      if (output < minVal) output = minVal;
    }
    else if (output > maxVal) output = maxVal;
    return output;
  }

  public long getLong(long minVal, long maxVal, long defaultValue, String inputString) {
    long output = defaultValue;
    try {
      output = Long.parseLong(inputString);
    }
    catch (Exception e){
      output = defaultValue;
    }

    if (output < minVal) output = minVal;
    if (maxVal == -1) { if (output < minVal) output = minVal; }
    else if (output > maxVal) output = maxVal;
    return output;
  }

  public double getDouble(double minVal, double maxVal, double defaultValue, String inputString) {
    double output = defaultValue;
    try {
      output = Double.parseDouble(inputString);
    }
    catch (Exception e){
      output = defaultValue;
    }

    if (output < minVal) output = minVal;
    if (maxVal == -1) { 
      if (output < minVal) output = minVal; 
    }
    else if (output > maxVal) output = maxVal;
    return output;
  }

  public boolean getBoolean(boolean defaultValue, String booleanString) {
    boolean output = defaultValue;
    if (booleanString == null) output = defaultValue;

    //  treat "", "YES" as "true"
    if ("".equals(booleanString)) output = true;
    else if ("YES".equalsIgnoreCase(booleanString)) output = true;
    else if ("NO".equalsIgnoreCase(booleanString)) output = false;
    else {
      try {
        output = Boolean.parseBoolean(booleanString);
      }
      catch (Exception e){
        output = defaultValue;
      }
    }
    return output;
  }
  
  public Date getDate(Date defaultValue, String dateString){
    try {
      return new SimpleDateFormat("yyyy-MM-dd").parse(dateString);
    }
    catch(Exception e) {
      return defaultValue;
    }
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-mule/src/main/java/com/wordnik/swagger/sample/exception/ApiException.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.exception;

public class ApiException extends Exception{
  private int code;
  public ApiException (int code, String msg) {
    super(msg);
    this.code = code;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-mule/src/main/java/com/wordnik/swagger/sample/exception/NotFoundException.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.exception;

public class NotFoundException extends ApiException {
  private int code;
  public NotFoundException (int code, String msg) {
    super(code, msg);
    this.code = code;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-mule/src/main/java/com/wordnik/swagger/sample/exception/BadRequestException.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.exception;

public class BadRequestException extends ApiException{
  private int code;
  public BadRequestException (int code, String msg) {
    super(code, msg);
    this.code = code;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-mule/src/main/java/com/wordnik/swagger/sample/model/ApiResponse.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import javax.xml.bind.annotation.XmlTransient;

@javax.xml.bind.annotation.XmlRootElement
public class ApiResponse {
  public static final int ERROR = 1;
  public static final int WARNING = 2;
  public static final int INFO = 3;
  public static final int OK = 4;
  public static final int TOO_BUSY = 5;

  int code;
  String type;
  String message;
  
  public ApiResponse(){}
  
  public ApiResponse(int code, String message){
    this.code = code;
    switch(code){
    case ERROR:
      setType("error");
      break;
    case WARNING:
      setType("warning");
      break;
    case INFO:
      setType("info");
      break;
    case OK:
      setType("ok");
      break;
    case TOO_BUSY:
      setType("too busy");
      break;
    default:
      setType("unknown");
      break;
    }
    this.message = message;
  }

  @XmlTransient
  public int getCode() {
    return code;
  }

  public void setCode(int code) {
    this.code = code;
  }

  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-mule/src/main/java/com/wordnik/swagger/sample/model/Pet.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import com.wordnik.swagger.annotations.*;

import java.util.List;
import java.util.ArrayList;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Pet")
public class Pet {
  private long id;
  private Category category;
  private String name;
  private List<String> photoUrls = new ArrayList<String>();
  private List<Tag> tags = new ArrayList<Tag>();
  private String status;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  @XmlElement(name = "category")
  public Category getCategory() {
    return category;
  }

  public void setCategory(Category category) {
    this.category = category;
  }

  @XmlElement(name = "name")
  @ApiModelProperty(example = "doggie", required = true)
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  @XmlElementWrapper(name = "photoUrls")
  @XmlElement(name = "photoUrl", required = true)
  public List<String> getPhotoUrls() {
    return photoUrls;
  }

  public void setPhotoUrls(List<String> photoUrls) {
    this.photoUrls = photoUrls;
  }

  @XmlElementWrapper(name = "tags")
  @XmlElement(name = "tag")
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }

  @XmlElement(name = "status")
  @ApiModelProperty(value = "pet status in the store", allowableValues = "available,pending,sold")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-mule/src/main/java/com/wordnik/swagger/sample/model/Order.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import com.wordnik.swagger.annotations.*;

import java.util.Date;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Order")
public class Order {
  private long id;
  private long petId;
  private int quantity;
  private Date shipDate;
  private String status;
  private boolean complete;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  public boolean isComplete() {
    return complete;
  }

  public void setComplete(boolean complete) {
    this.complete = complete;
  }

  @XmlElement(name = "petId")
  public long getPetId() {
    return petId;
  }

  public void setPetId(long petId) {
    this.petId = petId;
  }

  @XmlElement(name = "quantity")
  public int getQuantity() {
    return quantity;
  }

  public void setQuantity(int quantity) {
    this.quantity = quantity;
  }

  @XmlElement(name = "status")
  @ApiModelProperty(value = "Order Status", allowableValues = "placed, approved, delivered")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  @XmlElement(name = "shipDate")
  public Date getShipDate() {
    return shipDate;
  }

  public void setShipDate(Date shipDate) {
    this.shipDate = shipDate;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-mule/src/main/java/com/wordnik/swagger/sample/model/User.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import com.wordnik.swagger.annotations.*;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "User")
public class User {
  private long id;
  private String username;
  private String firstName;
  private String lastName;
  private String email;
  private String password;
  private String phone;
  private int userStatus;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  @XmlElement(name = "firstName")
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

  @XmlElement(name = "username")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  @XmlElement(name = "lastName")
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  @XmlElement(name = "email")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  @XmlElement(name = "password")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  @XmlElement(name = "phone")
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }

  @XmlElement(name = "userStatus")
  @ApiModelProperty(value = "User Status", allowableValues = "1-registered,2-active,3-closed")
  public int getUserStatus() {
    return userStatus;
  }

  public void setUserStatus(int userStatus) {
    this.userStatus = userStatus;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-mule/src/main/java/com/wordnik/swagger/sample/model/Tag.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Tag")
public class Tag {
  private long id;
  private String name;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  @XmlElement(name = "name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-mule/src/main/java/com/wordnik/swagger/sample/model/Category.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Category")
public class Category {
  private long id;
  private String name;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  @XmlElement(name = "name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-mule/src/main/java/com/wordnik/swagger/sample/data/PetData.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.data;

import com.wordnik.swagger.sample.model.*;

import java.util.*;

public class PetData {
  static List<Pet> pets = new ArrayList<Pet>();
  static List<Category> categories = new ArrayList<Category>();

  static {
    categories.add(createCategory(1, "Dogs"));
    categories.add(createCategory(2, "Cats"));
    categories.add(createCategory(3, "Rabbits"));
    categories.add(createCategory(4, "Lions"));

    pets.add(createPet(1, categories.get(1), "Cat 1", new String[] {
        "url1", "url2" }, new String[] { "tag1", "tag2" }, "available"));
    pets.add(createPet(2, categories.get(1), "Cat 2", new String[] {
        "url1", "url2" }, new String[] { "tag2", "tag3" }, "available"));
    pets.add(createPet(3, categories.get(1), "Cat 3", new String[] {
        "url1", "url2" }, new String[] { "tag3", "tag4" }, "pending"));

    pets.add(createPet(4, categories.get(0), "Dog 1", new String[] {
        "url1", "url2" }, new String[] { "tag1", "tag2" }, "available"));
    pets.add(createPet(5, categories.get(0), "Dog 2", new String[] {
        "url1", "url2" }, new String[] { "tag2", "tag3" }, "sold"));
    pets.add(createPet(6, categories.get(0), "Dog 3", new String[] {
        "url1", "url2" }, new String[] { "tag3", "tag4" }, "pending"));

    pets.add(createPet(7, categories.get(3), "Lion 1", new String[] {
        "url1", "url2" }, new String[] { "tag1", "tag2" }, "available"));
    pets.add(createPet(8, categories.get(3), "Lion 2", new String[] {
        "url1", "url2" }, new String[] { "tag2", "tag3" }, "available"));
    pets.add(createPet(9, categories.get(3), "Lion 3", new String[] {
        "url1", "url2" }, new String[] { "tag3", "tag4" }, "available"));

    pets.add(createPet(10, categories.get(2), "Rabbit 1", new String[] {
        "url1", "url2" }, new String[] { "tag3", "tag4" }, "available"));
  }

  public Pet getPetbyId(long petId) {
    for (Pet pet : pets) {
      if (pet.getId() == petId) {
        return pet;
      }
    }
    return null;
  }

  public void deletePet(long petId) {
    if(pets.size() > 0) {
      for (int i = pets.size(); i >= 0; i++) {
        Pet pet = pets.get(i);
        if(pet.getId() == petId) {
          pets.remove(i);
        }
      }
    }
  }

  public List<Pet> findPetByStatus(String status) {
    String[] statues = status.split(",");
    List<Pet> result = new java.util.ArrayList<Pet>();
    for (Pet pet : pets) {
      for (String s : statues) {
        if (s.equals(pet.getStatus())) {
          result.add(pet);
        }
      }
    }
    return result;
  }

  public List<Pet> findPetByTags(String tags) {
    String[] tagList = tags.split(",");
    List<Pet> result = new java.util.ArrayList<Pet>();
    for (Pet pet : pets) {
      if (null != pet.getTags()) {
        for (Tag tag : pet.getTags()) {
          for (String tagListString : tagList) {
            if (tagListString.equals(tag.getName()))
              result.add(pet);
          }
        }
      }
    }
    return result;
  }

  public Pet addPet(Pet pet) {
    if(pet.getId() == 0) {
      long maxId = 0;
      for (int i = pets.size() - 1; i >= 0; i--) {
        if(pets.get(i).getId() > maxId) {
          maxId = pets.get(i).getId();
        }
      }
      pet.setId(maxId + 1);
    }
    if (pets.size() > 0) {
      for (int i = pets.size() - 1; i >= 0; i--) {
        if (pets.get(i).getId() == pet.getId()) {
          pets.remove(i);
        }
      }
    }
    pets.add(pet);
    return pet;
  }

  public Map<String, Integer> getInventoryByStatus() {
    Map<String, Integer> output = new HashMap<String, Integer>();
    for(Pet pet : pets) {
      String status = pet.getStatus();
      if(status != null && !"".equals(status)) {
        Integer count = output.get(status);
        if(count == null)
          count = new Integer(1);
        else
          count = count.intValue() + 1;
        output.put(status, count);
      }
    }
    return output;
  }

  static Pet createPet(long id, Category cat, String name, String[] urls,
      String[] tags, String status) {
    Pet pet = new Pet();
    pet.setId(id);
    pet.setCategory(cat);
    pet.setName(name);
    if (null != urls) {
      List<String> urlObjs = new ArrayList<String>();
      for (String urlString : urls) {
        urlObjs.add(urlString);
      }
      pet.setPhotoUrls(urlObjs);
    }
    List<Tag> tagObjs = new java.util.ArrayList<Tag>();
    int i = 0;
    if (null != tags) {
      for (String tagString : tags) {
        i = i + 1;
        Tag tag = new Tag();
        tag.setId(i);
        tag.setName(tagString);
        tagObjs.add(tag);
      }
    }
    pet.setTags(tagObjs);
    pet.setStatus(status);
    return pet;
  }

  static Category createCategory(long id, String name) {
    Category category = new Category();
    category.setId(id);
    category.setName(name);
    return category;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-mule/src/main/java/com/wordnik/swagger/sample/data/UserData.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.data;

import com.wordnik.swagger.sample.model.*;

import java.util.List;
import java.util.ArrayList;

public class UserData {
  static List<User> users = new ArrayList<User>();

  static {
    users.add(createUser(1, "user1", "first name 1", "last name 1",
        "email1@test.com", "123-456-7890", 1));
    users.add(createUser(2, "user2", "first name 2", "last name 2",
        "email2@test.com", "123-456-7890", 2));
    users.add(createUser(3, "user3", "first name 3", "last name 3",
        "email3@test.com", "123-456-7890", 3));
    users.add(createUser(4, "user4", "first name 4", "last name 4",
        "email4@test.com", "123-456-7890", 1));
    users.add(createUser(5, "user5", "first name 5", "last name 5",
        "email5@test.com", "123-456-7890", 2));
    users.add(createUser(6, "user6", "first name 6", "last name 6",
        "email6@test.com", "123-456-7890", 3));
    users.add(createUser(7, "user7", "first name 7", "last name 7",
        "email7@test.com", "123-456-7890", 1));
    users.add(createUser(8, "user8", "first name 8", "last name 8",
        "email8@test.com", "123-456-7890", 2));
    users.add(createUser(9, "user9", "first name 9", "last name 9",
        "email9@test.com", "123-456-7890", 3));
    users.add(createUser(10, "user10", "first name 10", "last name 10",
        "email10@test.com", "123-456-7890", 1));
    users.add(createUser(11, "user?10", "first name ?10", "last name ?10",
        "email101@test.com", "123-456-7890", 1));

  }

  public User findUserByName(String username) {
    for (User user : users) {
      if (user.getUsername().equals(username)) {
        return user;
      }
    }
    return null;
  }

  public void addUser(User user) {
    if (users.size() > 0) {
      for (int i = users.size() - 1; i >= 0; i--) {
        if (users.get(i).getUsername().equals(user.getUsername())) {
          users.remove(i);
        }
      }
    }
    users.add(user);
  }

  public void removeUser(String username) {
    if (users.size() > 0) {
      for (int i = users.size() - 1; i >= 0; i--) {
        if (users.get(i).getUsername().equals(username)) {
          users.remove(i);
        }
      }
    }
  }

  private static User createUser(long id, String username, String firstName,
      String lastName, String email, String phone, int userStatus) {
    User user = new User();
    user.setId(id);
    user.setUsername(username);
    user.setFirstName(firstName);
    user.setLastName(lastName);
    user.setEmail(email);
    user.setPassword("XXXXXXXXXXX");
    user.setPhone(phone);
    user.setUserStatus(userStatus);
    return user;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-mule/src/main/java/com/wordnik/swagger/sample/data/StoreData.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.data;

import com.wordnik.swagger.sample.model.*;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;

public class StoreData {
  static List<Order> orders = new ArrayList<Order>();

  static {
    orders.add(createOrder(1, 1, 2, new Date(), "placed"));
    orders.add(createOrder(2, 1, 2, new Date(), "delivered"));
    orders.add(createOrder(3, 2, 2, new Date(), "placed"));
    orders.add(createOrder(4, 2, 2, new Date(), "delivered"));
    orders.add(createOrder(5, 3, 2, new Date(), "placed"));
    orders.add(createOrder(11, 3, 2, new Date(), "placed"));
    orders.add(createOrder(12, 3, 2, new Date(), "placed"));
    orders.add(createOrder(13, 3, 2, new Date(), "placed"));
    orders.add(createOrder(14, 3, 2, new Date(), "placed"));
    orders.add(createOrder(15, 3, 2, new Date(), "placed"));
  }

  public Order findOrderById(long orderId) {
    for (Order order : orders) {
      if (order.getId() == orderId) {
        return order;
      }
    }
    return null;
  }

  public Order placeOrder(Order order) {
    if (orders.size() > 0) {
      for (int i = orders.size() - 1; i >= 0; i--) {
        if (orders.get(i).getId() == order.getId()) {
          orders.remove(i);
        }
      }
    }
    orders.add(order);
    return order;
  }

  public void deleteOrder(long orderId) {
    if (orders.size() > 0) {
      for (int i = orders.size() - 1; i >= 0; i--) {
        if (orders.get(i).getId() == orderId) {
          orders.remove(i);
        }
      }
    }
  }

  private static Order createOrder(long id, long petId, int quantity,
      Date shipDate, String status) {
    Order order = new Order();
    order.setId(id);
    order.setPetId(petId);
    order.setQuantity(quantity);
    order.setShipDate(shipDate);
    order.setStatus(status);
    return order;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy-spring/src/main/java/com/wordnik/swagger/sample/Bootstrap.java;<<<<<<< MINE
package com.wordnik.swagger.sample;

import com.wordnik.swagger.models.Contact;
import com.wordnik.swagger.models.ExternalDocs;
import com.wordnik.swagger.models.Info;
import com.wordnik.swagger.models.License;
import com.wordnik.swagger.models.Swagger;
import com.wordnik.swagger.models.Tag;
import com.wordnik.swagger.models.auth.OAuth2Definition;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;


public class Bootstrap extends HttpServlet {

  @Override
  public void init(ServletConfig config) throws ServletException {
    Info info = new Info()
            .title("Swagger Sample App")
            .description("This is a sample server Petstore server.  You can find out more about Swagger " +
                    "at <a href=\"http://swagger.io\">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, " +
                    "you can use the api key \"special-key\" to test the authorization filters")
            .termsOfService("http://helloreverb.com/terms/")
            .contact(new Contact()
                    .email("apiteam@swagger.io"))
            .license(new License()
                    .name("Apache 2.0")
                    .url("http://www.apache.org/licenses/LICENSE-2.0.html"));

    ServletContext context = config.getServletContext();
    Swagger swagger = new Swagger().info(info);
    swagger.securityDefinition("petstore_auth",
            new OAuth2Definition()
                    .implicit("http://localhost:8002/oauth/dialog")
                    .scope("email", "Access to your email address")
                    .scope("pets", "Access to your pets"));
    swagger.tag(new Tag()
            .name("pet")
            .description("Everything about your Pets")
            .externalDocs(new ExternalDocs("Find out more", "http://swagger.io")));
    swagger.tag(new Tag()
            .name("store")
            .description("Access to Petstore orders"));
    swagger.tag(new Tag()
            .name("user")
            .description("Operations about user")
            .externalDocs(new ExternalDocs("Find out more about our store", "http://swagger.io")));
    context.setAttribute("swagger", swagger);
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy-spring/src/main/java/com/wordnik/swagger/sample/exception/ApiException.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.exception;

public class ApiException extends Exception{
  private int code;
  public ApiException (int code, String msg) {
    super(msg);
    this.code = code;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy-spring/src/main/java/com/wordnik/swagger/sample/exception/NotFoundException.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.exception;

public class NotFoundException extends ApiException {
  private int code;
  public NotFoundException (int code, String msg) {
    super(code, msg);
    this.code = code;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy-spring/src/main/java/com/wordnik/swagger/sample/exception/BadRequestException.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.exception;

public class BadRequestException extends ApiException{
  private int code;
  public BadRequestException (int code, String msg) {
    super(code, msg);
    this.code = code;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy-spring/src/main/java/com/wordnik/swagger/sample/model/ApiResponse.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import javax.xml.bind.annotation.XmlTransient;

@javax.xml.bind.annotation.XmlRootElement
public class ApiResponse {
  public static final int ERROR = 1;
  public static final int WARNING = 2;
  public static final int INFO = 3;
  public static final int OK = 4;
  public static final int TOO_BUSY = 5;

  int code;
  String type;
  String message;
  
  public ApiResponse(){}
  
  public ApiResponse(int code, String message){
    this.code = code;
    switch(code){
    case ERROR:
      setType("error");
      break;
    case WARNING:
      setType("warning");
      break;
    case INFO:
      setType("info");
      break;
    case OK:
      setType("ok");
      break;
    case TOO_BUSY:
      setType("too busy");
      break;
    default:
      setType("unknown");
      break;
    }
    this.message = message;
  }

  @XmlTransient
  public int getCode() {
    return code;
  }

  public void setCode(int code) {
    this.code = code;
  }

  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy-spring/src/main/java/com/wordnik/swagger/sample/model/Pet.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import com.wordnik.swagger.annotations.*;

import java.util.List;
import java.util.ArrayList;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Pet")
public class Pet {
  private long id;
  private Category category;
  private String name;
  private List<String> photoUrls = new ArrayList<String>();
  private List<Tag> tags = new ArrayList<Tag>();
  private String status;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  @XmlElement(name = "category")
  public Category getCategory() {
    return category;
  }

  public void setCategory(Category category) {
    this.category = category;
  }

  @XmlElement(name = "name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  @XmlElementWrapper(name = "photoUrls")
  @XmlElement(name = "photoUrl")
  public List<String> getPhotoUrls() {
    return photoUrls;
  }

  public void setPhotoUrls(List<String> photoUrls) {
    this.photoUrls = photoUrls;
  }

  @XmlElementWrapper(name = "tags")
  @XmlElement(name = "tag")
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }

  @XmlElement(name = "status")
  @ApiModelProperty(value = "pet status in the store", allowableValues = "available,pending,sold")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy-spring/src/main/java/com/wordnik/swagger/sample/model/Order.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import com.wordnik.swagger.annotations.*;

import java.util.Date;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Order")
public class Order {
  private long id;
  private long petId;
  private int quantity;
  private Date shipDate;
  private String status;
    private boolean complete;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

    public boolean isComplete() {
        return complete;
    }

    public void setComplete(boolean complete) {
        this.complete = complete;
    }


  @XmlElement(name = "petId")
  public long getPetId() {
    return petId;
  }

  public void setPetId(long petId) {
    this.petId = petId;
  }

  @XmlElement(name = "quantity")
  public int getQuantity() {
    return quantity;
  }

  public void setQuantity(int quantity) {
    this.quantity = quantity;
  }

  @XmlElement(name = "status")
  @ApiModelProperty(value = "Order Status", allowableValues = "placed, approved, delivered")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  @XmlElement(name = "shipDate")
  public Date getShipDate() {
    return shipDate;
  }

  public void setShipDate(Date shipDate) {
    this.shipDate = shipDate;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy-spring/src/main/java/com/wordnik/swagger/sample/model/User.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import com.wordnik.swagger.annotations.*;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "User")
public class User {
  private long id;
  private String username;
  private String firstName;
  private String lastName;
  private String email;
  private String password;
  private String phone;
  private int userStatus;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  @XmlElement(name = "firstName")
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

  @XmlElement(name = "username")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  @XmlElement(name = "lastName")
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  @XmlElement(name = "email")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  @XmlElement(name = "password")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  @XmlElement(name = "phone")
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }

  @XmlElement(name = "userStatus")
  @ApiModelProperty(value = "User Status", allowableValues = "1-registered,2-active,3-closed")
  public int getUserStatus() {
    return userStatus;
  }

  public void setUserStatus(int userStatus) {
    this.userStatus = userStatus;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy-spring/src/main/java/com/wordnik/swagger/sample/model/Tag.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Tag")
public class Tag {
  private long id;
  private String name;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  @XmlElement(name = "name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy-spring/src/main/java/com/wordnik/swagger/sample/model/Category.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.model;

import javax.xml.bind.annotation.*;

@XmlRootElement(name = "Category")
public class Category {
  private long id;
  private String name;

  @XmlElement(name = "id")
  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  @XmlElement(name = "name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy-spring/src/main/java/com/wordnik/swagger/sample/bean/UserResourceBean.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.bean;

import com.wordnik.swagger.annotations.*;
import com.wordnik.swagger.sample.data.UserData;
import com.wordnik.swagger.sample.model.User;
import com.wordnik.swagger.sample.exception.ApiException;
import com.wordnik.swagger.sample.exception.NotFoundException;
import com.wordnik.swagger.sample.resource.UserResource;

import javax.ws.rs.core.Response;
import javax.ws.rs.*;

public class UserResourceBean implements UserResource {
  static UserData userData = new UserData();

  @Override
  public Response createUser(User user) {
    userData.addUser(user);
    return Response.ok().entity("").build();
  }

  @Override
  public Response createUsersWithArrayInput(User[] users) {
      for (User user : users) {
          userData.addUser(user);
      }
      return Response.ok().entity("").build();
  }

  @Override
  public Response createUsersWithListInput(java.util.List<User> users) {
      for (User user : users) {
          userData.addUser(user);
      }
      return Response.ok().entity("").build();
  }

  @Override
  public Response updateUser(String username, User user) {
    userData.addUser(user);
    return Response.ok().entity("").build();
  }

  @Override
  public Response deleteUser(String username) {
    userData.removeUser(username);
    return Response.ok().entity("").build();
  }

  @Override
  public Response getUserByName(String username) throws ApiException {
    User user = userData.findUserByName(username);
    if (null != user) {
      return Response.ok().entity(user).build();
    } else {
      throw new NotFoundException(404, "User not found");
    }
  }

  @Override
  public Response loginUser(String username, String password) {
    return Response.ok()
        .entity("logged in user session:" + System.currentTimeMillis())
        .build();
  }

  @Override
  public Response logoutUser() {
    return Response.ok().entity("").build();
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy-spring/src/main/java/com/wordnik/swagger/sample/bean/SampleExceptionMapper.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.bean;

import com.wordnik.swagger.sample.exception.ApiException;
import com.wordnik.swagger.sample.exception.BadRequestException;
import com.wordnik.swagger.sample.exception.NotFoundException;
import com.wordnik.swagger.sample.model.ApiResponse;

import javax.ws.rs.ext.*;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

@Provider
public class SampleExceptionMapper implements ExceptionMapper<Exception> {
  public Response toResponse(Exception exception) {
    if (exception instanceof javax.ws.rs.WebApplicationException) {
      javax.ws.rs.WebApplicationException e = (javax.ws.rs.WebApplicationException) exception;
      return Response
          .status(e.getResponse().getStatus())
          .entity(new ApiResponse(e.getResponse().getStatus(),
              exception.getMessage())).build();
    } else if (exception instanceof com.fasterxml.jackson.core.JsonParseException) {
      return Response.status(400)
          .entity(new ApiResponse(400, "bad input")).build();
    } else if (exception instanceof NotFoundException) {
      return Response
          .status(Status.NOT_FOUND)
          .entity(new ApiResponse(ApiResponse.ERROR, exception
              .getMessage())).build();
    } else if (exception instanceof BadRequestException) {
      return Response
          .status(Status.BAD_REQUEST)
          .entity(new ApiResponse(ApiResponse.ERROR, exception
              .getMessage())).build();
    } else if (exception instanceof ApiException) {
      return Response
          .status(Status.BAD_REQUEST)
          .entity(new ApiResponse(ApiResponse.ERROR, exception
              .getMessage())).build();
    } else {
      return Response.status(500)
          .entity(new ApiResponse(500, "something bad happened"))
          .build();
    }
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy-spring/src/main/java/com/wordnik/swagger/sample/bean/PetStoreResourceBean.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.bean;

import com.wordnik.swagger.annotations.*;
import com.wordnik.swagger.sample.data.StoreData;
import com.wordnik.swagger.sample.model.Order;
import com.wordnik.swagger.sample.exception.NotFoundException;
import com.wordnik.swagger.sample.resource.PetStoreResource;

import javax.ws.rs.core.Response;
import javax.ws.rs.*;

public class PetStoreResourceBean implements PetStoreResource {
  static StoreData storeData = new StoreData();
  static JavaRestResourceUtil ru = new JavaRestResourceUtil();

  @Override
  public Response getOrderById(String orderId) throws NotFoundException {
    Order order = storeData.findOrderById(ru.getLong(0, 10000, 0, orderId));
    if (null != order) {
      return Response.ok().entity(order).build();
    } else {
      throw new NotFoundException(404, "Order not found");
    }
  }

  @Override
  public Response placeOrder(Order order) {
    storeData.placeOrder(order);
    return Response.ok().entity("").build();
  }

  @Override
  public Response deleteOrder(String orderId) {
    storeData.deleteOrder(ru.getLong(0, 10000, 0, orderId));
    return Response.ok().entity("").build();
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy-spring/src/main/java/com/wordnik/swagger/sample/bean/PetResourceBean.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.bean;

import com.wordnik.swagger.sample.data.PetData;
import com.wordnik.swagger.sample.model.Pet;
import com.wordnik.swagger.sample.exception.NotFoundException;
import com.wordnik.swagger.sample.resource.PetResource;

import javax.ws.rs.core.Response;
import javax.ws.rs.*;

public class PetResourceBean implements PetResource {
    static PetData petData = new PetData();
    static JavaRestResourceUtil ru = new JavaRestResourceUtil();

    @Override
    public Pet getPetById(String petId) throws NotFoundException {
        Pet pet = petData.getPetbyId(ru.getLong(0, 100000, 0, petId));
        if (null != pet) {
            return pet;
        } else {
            throw new NotFoundException(404, "Pet not found");
        }
    }

    @Override
    public Response addPet(Pet pet) {
        petData.addPet(pet);
        return Response.ok().entity("SUCCESS").build();
    }

    @Override
    public Response updatePet(Pet pet) {
        petData.addPet(pet);
        return Response.ok().entity("SUCCESS").build();
    }

    @Override
    public Response findPetsByStatus(String status) {
        return Response.ok(petData.findPetByStatus(status)).build();
    }

    @Override
    @Deprecated
    public Response findPetsByTags(String tags) {
        return Response.ok(petData.findPetByTags(tags)).build();
    }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy-spring/src/main/java/com/wordnik/swagger/sample/bean/JavaRestResourceUtil.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.bean;

import java.text.SimpleDateFormat;

import java.util.Date;

public class JavaRestResourceUtil {
  public int getInt(int minVal, int maxVal, int defaultValue, String inputString) {
    int output = defaultValue;
    try {
      output = Integer.parseInt(inputString);
    }
    catch (Exception e){
      output = defaultValue;
    }

    if (output < minVal) output = minVal;
    if (maxVal == -1) {
      if (output < minVal) output = minVal;
    }
    else if (output > maxVal) output = maxVal;
    return output;
  }

  public long getLong(long minVal, long maxVal, long defaultValue, String inputString) {
    long output = defaultValue;
    try {
      output = Long.parseLong(inputString);
    }
    catch (Exception e){
      output = defaultValue;
    }

    if (output < minVal) output = minVal;
    if (maxVal == -1) { if (output < minVal) output = minVal; }
    else if (output > maxVal) output = maxVal;
    return output;
  }

  public double getDouble(double minVal, double maxVal, double defaultValue, String inputString) {
    double output = defaultValue;
    try {
      output = Double.parseDouble(inputString);
    }
    catch (Exception e){
      output = defaultValue;
    }

    if (output < minVal) output = minVal;
    if (maxVal == -1) { 
      if (output < minVal) output = minVal; 
    }
    else if (output > maxVal) output = maxVal;
    return output;
  }

  public boolean getBoolean(boolean defaultValue, String booleanString) {
    boolean output = defaultValue;
    if (booleanString == null) output = defaultValue;

    //  treat "", "YES" as "true"
    if ("".equals(booleanString)) output = true;
    else if ("YES".equalsIgnoreCase(booleanString)) output = true;
    else if ("NO".equalsIgnoreCase(booleanString)) output = false;
    else {
      try {
        output = Boolean.parseBoolean(booleanString);
      }
      catch (Exception e){
        output = defaultValue;
      }
    }
    return output;
  }
  
  public Date getDate(Date defaultValue, String dateString){
    try {
      return new SimpleDateFormat("yyyy-MM-dd").parse(dateString);
    }
    catch(Exception e) {
      return defaultValue;
    }
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy-spring/src/main/java/com/wordnik/swagger/sample/util/ApiAuthorizationFilterImpl.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.util;

import com.wordnik.swagger.model.*;
import com.wordnik.swagger.core.filter.SwaggerSpecFilter;

import com.wordnik.swagger.models.Model;
import com.wordnik.swagger.models.Operation;
import com.wordnik.swagger.models.parameters.Parameter;
import com.wordnik.swagger.models.properties.Property;
import org.slf4j.*;

import java.util.Map;
import java.util.List;

import javax.servlet.ServletConfig;
import javax.servlet.http.HttpServlet;
/**
 * 
 * The rules are maintained in simple map with key as path and a boolean value
 * indicating given path is secure or not. For method level security the key is
 * combination of http method and path .
 * 
 * If the resource or method is secure then it can only be viewed using a
 * secured api key
 * 
 * Note: Objective of this class is not to provide fully functional
 * implementation of authorization filter. This is only a sample demonstration
 * how API authorization filter works.
 * 
 */

public class ApiAuthorizationFilterImpl implements SwaggerSpecFilter {
  static Logger logger = LoggerFactory.getLogger(ApiAuthorizationFilterImpl.class);

  public boolean isOperationAllowed(Operation operation, ApiDescription api, Map<String, List<String>> params, Map<String, String> cookies, Map<String, List<String>> headers) {
    boolean isAuthorized = checkKey(params, headers);
    if(isAuthorized) {
      return true;
    }
    else {
      if(!"GET".equalsIgnoreCase(api.getMethod()) || api.getPath().indexOf("/store") != -1) {
        return false;
      }
      else return true;
    }
  }

  public boolean isParamAllowed(Parameter parameter, Operation operation, ApiDescription api, Map<String, List<String>> params, Map<String, String> cookies, Map<String, List<String>> headers) {
    boolean isAuthorized = checkKey(params, headers);
    if("internal".equals(parameter.getAccess()) && !isAuthorized)
      return false;
    else
      return true;
  }

  @Override
  public boolean isPropertyAllowed(Model model, Property property, String propertyName, Map<String, List<String>> params, Map<String, String> cookies, Map<String, List<String>> headers) {
    return true;
  }

  public boolean checkKey(Map<String, List<String>> params, Map<String, List<String>> headers) {
    String keyValue = null;
    if(params.containsKey("api_key"))
      keyValue = params.get("api_key").get(0);
    else {
      if(headers.containsKey("api_key"))
        keyValue = headers.get("api_key").get(0);
    }
    if("special-key".equals(keyValue))
      return true;
    else
      return false;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy-spring/src/main/java/com/wordnik/swagger/sample/util/ApiOriginFilter.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.util;

import java.io.IOException;

import javax.servlet.*;
import javax.servlet.http.HttpServletResponse;

public class ApiOriginFilter implements javax.servlet.Filter {
  @Override
  public void doFilter(ServletRequest request, ServletResponse response,
      FilterChain chain) throws IOException, ServletException {
    HttpServletResponse res = (HttpServletResponse) response;
    res.addHeader("Access-Control-Allow-Origin", "*");
    res.addHeader("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");
    res.addHeader("Access-Control-Allow-Headers", "Content-Type");
    chain.doFilter(request, response);
  }

  @Override
  public void destroy() {
  }

  @Override
  public void init(FilterConfig filterConfig) throws ServletException {
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy-spring/src/main/java/com/wordnik/swagger/sample/data/PetData.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.data;

import com.wordnik.swagger.sample.model.*;

import java.util.List;
import java.util.ArrayList;

public class PetData {
  static List<Pet> pets = new ArrayList<Pet>();
  static List<Category> categories = new ArrayList<Category>();

  static {
    categories.add(createCategory(1, "Dogs"));
    categories.add(createCategory(2, "Cats"));
    categories.add(createCategory(3, "Rabbits"));
    categories.add(createCategory(4, "Lions"));

    pets.add(createPet(1, categories.get(1), "Cat 1", new String[] {
        "url1", "url2" }, new String[] { "tag1", "tag2" }, "available"));
    pets.add(createPet(2, categories.get(1), "Cat 2", new String[] {
        "url1", "url2" }, new String[] { "tag2", "tag3" }, "available"));
    pets.add(createPet(3, categories.get(1), "Cat 3", new String[] {
        "url1", "url2" }, new String[] { "tag3", "tag4" }, "pending"));

    pets.add(createPet(4, categories.get(0), "Dog 1", new String[] {
        "url1", "url2" }, new String[] { "tag1", "tag2" }, "available"));
    pets.add(createPet(5, categories.get(0), "Dog 2", new String[] {
        "url1", "url2" }, new String[] { "tag2", "tag3" }, "sold"));
    pets.add(createPet(6, categories.get(0), "Dog 3", new String[] {
        "url1", "url2" }, new String[] { "tag3", "tag4" }, "pending"));

    pets.add(createPet(7, categories.get(3), "Lion 1", new String[] {
        "url1", "url2" }, new String[] { "tag1", "tag2" }, "available"));
    pets.add(createPet(8, categories.get(3), "Lion 2", new String[] {
        "url1", "url2" }, new String[] { "tag2", "tag3" }, "available"));
    pets.add(createPet(9, categories.get(3), "Lion 3", new String[] {
        "url1", "url2" }, new String[] { "tag3", "tag4" }, "available"));

    pets.add(createPet(10, categories.get(2), "Rabbit 1", new String[] {
        "url1", "url2" }, new String[] { "tag3", "tag4" }, "available"));
  }

  public Pet getPetbyId(long petId) {
    for (Pet pet : pets) {
      if (pet.getId() == petId) {
        return pet;
      }
    }
    return null;
  }

  public List<Pet> findPetByStatus(String status) {
    String[] statues = status.split(",");
    List<Pet> result = new java.util.ArrayList<Pet>();
    for (Pet pet : pets) {
      for (String s : statues) {
        if (s.equals(pet.getStatus())) {
          result.add(pet);
        }
      }
    }
    return result;
  }

  public List<Pet> findPetByTags(String tags) {
    String[] tagList = tags.split(",");
    List<Pet> result = new java.util.ArrayList<Pet>();
    for (Pet pet : pets) {
      if (null != pet.getTags()) {
        for (Tag tag : pet.getTags()) {
          for (String tagListString : tagList) {
            if (tagListString.equals(tag.getName()))
              result.add(pet);
          }
        }
      }
    }
    return result;
  }

  public void addPet(Pet pet) {
    if (pets.size() > 0) {
      for (int i = pets.size() - 1; i >= 0; i--) {
        if (pets.get(i).getId() == pet.getId()) {
          pets.remove(i);
        }
      }
    }
    pets.add(pet);
  }

  static Pet createPet(long id, Category cat, String name, String[] urls,
      String[] tags, String status) {
    Pet pet = new Pet();
    pet.setId(id);
    pet.setCategory(cat);
    pet.setName(name);
    if (null != urls) {
      List<String> urlObjs = new ArrayList<String>();
      for (String urlString : urls) {
        urlObjs.add(urlString);
      }
      pet.setPhotoUrls(urlObjs);
    }
    List<Tag> tagObjs = new java.util.ArrayList<Tag>();
    int i = 0;
    if (null != tags) {
      for (String tagString : tags) {
        i = i + 1;
        Tag tag = new Tag();
        tag.setId(i);
        tag.setName(tagString);
        tagObjs.add(tag);
      }
    }
    pet.setTags(tagObjs);
    pet.setStatus(status);
    return pet;
  }

  static Category createCategory(long id, String name) {
    Category category = new Category();
    category.setId(id);
    category.setName(name);
    return category;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy-spring/src/main/java/com/wordnik/swagger/sample/data/UserData.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.data;

import com.wordnik.swagger.sample.model.*;

import java.util.List;
import java.util.ArrayList;

public class UserData {
  static List<User> users = new ArrayList<User>();

  static {
    users.add(createUser(1, "user1", "first name 1", "last name 1",
        "email1@test.com", "123-456-7890", 1));
    users.add(createUser(2, "user2", "first name 2", "last name 2",
        "email2@test.com", "123-456-7890", 2));
    users.add(createUser(3, "user3", "first name 3", "last name 3",
        "email3@test.com", "123-456-7890", 3));
    users.add(createUser(4, "user4", "first name 4", "last name 4",
        "email4@test.com", "123-456-7890", 1));
    users.add(createUser(5, "user5", "first name 5", "last name 5",
        "email5@test.com", "123-456-7890", 2));
    users.add(createUser(6, "user6", "first name 6", "last name 6",
        "email6@test.com", "123-456-7890", 3));
    users.add(createUser(7, "user7", "first name 7", "last name 7",
        "email7@test.com", "123-456-7890", 1));
    users.add(createUser(8, "user8", "first name 8", "last name 8",
        "email8@test.com", "123-456-7890", 2));
    users.add(createUser(9, "user9", "first name 9", "last name 9",
        "email9@test.com", "123-456-7890", 3));
    users.add(createUser(10, "user10", "first name 10", "last name 10",
        "email10@test.com", "123-456-7890", 1));
    users.add(createUser(11, "user?10", "first name ?10", "last name ?10",
        "email101@test.com", "123-456-7890", 1));

  }

  public User findUserByName(String username) {
    for (User user : users) {
      if (user.getUsername().equals(username)) {
        return user;
      }
    }
    return null;
  }

  public void addUser(User user) {
    if (users.size() > 0) {
      for (int i = users.size() - 1; i >= 0; i--) {
        if (users.get(i).getUsername().equals(user.getUsername())) {
          users.remove(i);
        }
      }
    }
    users.add(user);
  }

  public void removeUser(String username) {
    if (users.size() > 0) {
      for (int i = users.size() - 1; i >= 0; i--) {
        if (users.get(i).getUsername().equals(username)) {
          users.remove(i);
        }
      }
    }
  }

  private static User createUser(long id, String username, String firstName,
      String lastName, String email, String phone, int userStatus) {
    User user = new User();
    user.setId(id);
    user.setUsername(username);
    user.setFirstName(firstName);
    user.setLastName(lastName);
    user.setEmail(email);
    user.setPassword("XXXXXXXXXXX");
    user.setPhone(phone);
    user.setUserStatus(userStatus);
    return user;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7222e10_ee0b639/rev_7222e10-ee0b639/samples/java-resteasy-spring/src/main/java/com/wordnik/swagger/sample/data/StoreData.java;<<<<<<< MINE
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.wordnik.swagger.sample.data;

import com.wordnik.swagger.sample.model.*;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;

public class StoreData {
  static List<Order> orders = new ArrayList<Order>();

  static {
    orders.add(createOrder(1, 1, 2, new Date(), "placed"));
    orders.add(createOrder(2, 1, 2, new Date(), "delivered"));
    orders.add(createOrder(3, 2, 2, new Date(), "placed"));
    orders.add(createOrder(4, 2, 2, new Date(), "delivered"));
    orders.add(createOrder(5, 3, 2, new Date(), "placed"));
    orders.add(createOrder(11, 3, 2, new Date(), "placed"));
    orders.add(createOrder(12, 3, 2, new Date(), "placed"));
    orders.add(createOrder(13, 3, 2, new Date(), "placed"));
    orders.add(createOrder(14, 3, 2, new Date(), "placed"));
    orders.add(createOrder(15, 3, 2, new Date(), "placed"));
  }

  public Order findOrderById(long orderId) {
    for (Order order : orders) {
      if (order.getId() == orderId) {
        return order;
      }
    }
    return null;
  }

  public void placeOrder(Order order) {
    if (orders.size() > 0) {
      for (int i = orders.size() - 1; i >= 0; i--) {
        if (orders.get(i).getId() == order.getId()) {
          orders.remove(i);
        }
      }
    }
    orders.add(order);
  }

  public void deleteOrder(long orderId) {
    if (orders.size() > 0) {
      for (int i = orders.size() - 1; i >= 0; i--) {
        if (orders.get(i).getId() == orderId) {
          orders.remove(i);
        }
      }
    }
  }

  private static Order createOrder(long id, long petId, int quantity,
      Date shipDate, String status) {
    Order order = new Order();
    order.setId(id);
    order.setPetId(petId);
    order.setQuantity(quantity);
    order.setShipDate(shipDate);
    order.setStatus(status);
    return order;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_3cd4c90_a084cf6/rev_3cd4c90-a084cf6/modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader.java;<<<<<<< MINE
  private Swagger swagger;
  private static ObjectMapper m = Json.mapper();

  private Map<Class<?>,ReaderListener> listeners = new HashMap<Class<?>, ReaderListener>();
=======
  Swagger swagger;
  private final ReaderConfig config;
  static ObjectMapper m = Json.mapper();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_3cd4c90_a084cf6/rev_3cd4c90-a084cf6/modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader.java;<<<<<<< MINE

  public ObjectMapper getObjectMapper() {
    return m;
  }

  public void setObjectMapper(ObjectMapper m) {
    Reader.m = m;
  }
=======

  private boolean isIgnored(String path) {
    for (String item : config.getIgnoredRoutes()) {
      final int length = item.length();
      if (path.startsWith(item) && (path.length() == length || path.startsWith(PATH_DELIMITER, length))) {
        return true;
      }
    }
    return false;
  }

  enum ContainerWrapper {
    LIST("list") {
      @Override
      protected Property doWrap(Property property) {
        return new ArrayProperty(property);
      }
    },
    ARRAY("array") {
      @Override
      protected Property doWrap(Property property) {
        return new ArrayProperty(property);
      }
    },
    MAP("map") {
      @Override
      protected Property doWrap(Property property) {
        return new MapProperty(property);
      }
    },
    SET("set") {
      @Override
      protected Property doWrap(Property property) {
        ArrayProperty arrayProperty = new ArrayProperty(property);
        arrayProperty.setUniqueItems(true);
        return arrayProperty;
      }
    };

    private final String container;

    ContainerWrapper(String container) {
      this.container = container;
    }

    public Property wrap(String container, Property property) {
      if (this.container.equalsIgnoreCase(container)) {
        return doWrap(property);
      }
      return null;
    }

    public static Property wrapContainer(String container, Property property, ContainerWrapper... allowed) {
      final Set<ContainerWrapper> tmp = allowed.length > 0 ? EnumSet.copyOf(Arrays.asList(allowed)) : EnumSet.allOf(ContainerWrapper.class);
      for (ContainerWrapper wrapper : tmp) {
        final Property prop = wrapper.wrap(container, property);
        if (prop != null) {
          return prop;
        }
      }
      return property;
    }

    protected abstract Property doWrap(Property property);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_c497ee8_a4484d4/rev_c497ee8-a4484d4/modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader.java;<<<<<<< MINE

  private Swagger swagger;
  private static ObjectMapper m = Json.mapper();
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_c497ee8_a4484d4/rev_c497ee8-a4484d4/modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader.java;<<<<<<< MINE

  List<Parameter> getParameters(Class<?> cls, Type type, Annotation[] annotations) {
    // look for path, query
    boolean isArray = ParameterUtils.isMethodArgumentAnArray(cls, type);
    Iterator<SwaggerExtension> chain = SwaggerExtensions.chain();
    List<Parameter> parameters = null;

    LOGGER.debug("getParameters for " + cls);
    Set<Class<?>> classesToSkip = new HashSet<Class<?>>();
    if(chain.hasNext()) {
      SwaggerExtension extension = chain.next();
      LOGGER.debug("trying extension " + extension);
      parameters = extension.extractParameters(annotations, cls, isArray, classesToSkip, chain);
    }
=======
  private List<Parameter> getParameters(Type type, List <Annotation> annotations) {
    final Iterator<SwaggerExtension> chain = SwaggerExtensions.chain();
    if (!chain.hasNext()) {
      return Collections.emptyList();
    }
    LOGGER.debug("getParameters for " + type);
    Set<Type> typesToSkip = new HashSet<Type>();
    final SwaggerExtension extension = chain.next();
    LOGGER.debug("trying extension " + extension);

    final List<Parameter> parameters = extension.extractParameters(annotations, type, typesToSkip, chain);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_2d26f02_a5ea4f1/rev_2d26f02-a5ea4f1/modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader.java;<<<<<<< MINE
import com.wordnik.swagger.annotations.ExtensionProperty;
import com.wordnik.swagger.annotations.Extension;
import com.wordnik.swagger.annotations.SwaggerDefinition;
import com.wordnik.swagger.jaxrs.config.DefaultReaderConfig;
import com.wordnik.swagger.jaxrs.config.ReaderConfig;
import com.wordnik.swagger.jaxrs.config.ReaderListener;
import com.wordnik.swagger.models.Contact;
import com.wordnik.swagger.models.ExternalDocs;
import com.wordnik.swagger.models.Info;
import com.wordnik.swagger.models.License;
=======
import com.wordnik.swagger.jaxrs.utils.ReflectionUtils;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_4cc76fb_66d9203/rev_4cc76fb-66d9203/modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader.java;<<<<<<< MINE
import com.wordnik.swagger.annotations.ApiImplicitParam;
import com.wordnik.swagger.annotations.ApiImplicitParams;
import com.wordnik.swagger.models.parameters.AbstractSerializableParameter;
import com.wordnik.swagger.models.parameters.BodyParameter;
import com.wordnik.swagger.models.parameters.FormParameter;
import com.wordnik.swagger.models.parameters.HeaderParameter;
import com.wordnik.swagger.models.parameters.PathParameter;
import com.wordnik.swagger.models.parameters.QueryParameter;
=======
import com.wordnik.swagger.jaxrs.utils.ReflectionUtils;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_4cc76fb_66d9203/rev_4cc76fb-66d9203/modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/ParameterProcessor.java;<<<<<<< MINE
import com.wordnik.swagger.annotations.ApiImplicitParam;
import com.wordnik.swagger.util.Json;

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_4cc76fb_66d9203/rev_4cc76fb-66d9203/modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/ParameterProcessor.java;<<<<<<< MINE
    final ParamWrapper<?> param = helper.getApiParam();
=======
    final JavaType javaType = TypeFactory.defaultInstance().constructType(type);
    final ApiParam param = helper.getApiParam();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_4cc76fb_66d9203/rev_4cc76fb-66d9203/modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/ParameterProcessor.java;<<<<<<< MINE
      final String defaultValue = param.getDefaultValue();
      if (param.isAllowMultiple() || isArray) {
=======
      final String defaultValue = param.defaultValue();
      if (p.getItems() != null || param.allowMultiple()) {
        if (p.getItems() == null) {
          // Convert to array
          final Map<PropertyBuilder.PropertyId, Object> args = new EnumMap<PropertyBuilder.PropertyId, Object>(PropertyBuilder.PropertyId.class);
          args.put(PropertyBuilder.PropertyId.DEFAULT, p.getDefaultValue());
          p.setDefaultValue(null);
          args.put(PropertyBuilder.PropertyId.ENUM, p.getEnum());
          p.setEnum(null);
          args.put(PropertyBuilder.PropertyId.MINIMUM, p.getMinimum());
          p.setMinimum(null);
          args.put(PropertyBuilder.PropertyId.EXCLUSIVE_MINIMUM, p.isExclusiveMinimum());
          p.setExclusiveMinimum(null);
          args.put(PropertyBuilder.PropertyId.MAXIMUM, p.getMaximum());
          p.setMaximum(null);
          args.put(PropertyBuilder.PropertyId.EXCLUSIVE_MAXIMUM, p.isExclusiveMaximum());
          p.setExclusiveMaximum(null);
          Property items = PropertyBuilder.build(p.getType(), p.getFormat(), args);
          p.type(ArrayProperty.TYPE).format(null).items(items);
        }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_255f91b_b44b35d/rev_255f91b-b44b35d/modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader.java;<<<<<<< MINE
import com.wordnik.swagger.annotations.ExtensionProperty;
import com.wordnik.swagger.annotations.Extension;
import com.wordnik.swagger.annotations.SwaggerDefinition;
import com.wordnik.swagger.jaxrs.config.DefaultReaderConfig;
import com.wordnik.swagger.jaxrs.config.ReaderConfig;
import com.wordnik.swagger.jaxrs.config.ReaderListener;
import com.wordnik.swagger.models.Contact;
import com.wordnik.swagger.models.ExternalDocs;
import com.wordnik.swagger.models.Info;
import com.wordnik.swagger.models.License;
=======
import com.wordnik.swagger.annotations.ApiImplicitParam;
import com.wordnik.swagger.annotations.ApiImplicitParams;
import com.wordnik.swagger.models.parameters.AbstractSerializableParameter;
import com.wordnik.swagger.models.parameters.BodyParameter;
import com.wordnik.swagger.models.parameters.FormParameter;
import com.wordnik.swagger.models.parameters.HeaderParameter;
import com.wordnik.swagger.models.parameters.PathParameter;
import com.wordnik.swagger.models.parameters.QueryParameter;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_255f91b_b44b35d/rev_255f91b-b44b35d/modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader.java;<<<<<<< MINE
  protected void readSwaggerConfig(Class<?> cls, SwaggerDefinition config) {

    if( !config.basePath().isEmpty()){
      swagger.setBasePath( config.basePath());
    }

    if( !config.host().isEmpty()){
      swagger.setHost( config.host());
    }

    readInfoConfig(config);

    for( String consume: config.consumes()){
      swagger.addConsumes(consume);
    }

    for( String produce: config.produces()){
      swagger.addProduces( produce );
    }

    if( !config.externalDocs().value().isEmpty() ){
      ExternalDocs externalDocs = swagger.getExternalDocs();
      if( externalDocs == null ){
        externalDocs = new ExternalDocs();
        swagger.setExternalDocs(externalDocs);
      }

      externalDocs.setDescription(config.externalDocs().value());

      if( !config.externalDocs().url().isEmpty()){
        externalDocs.setUrl( config.externalDocs().url() );
      }
    }

    for( com.wordnik.swagger.annotations.Tag tagConfig : config.tags()){
      if( !tagConfig.name().isEmpty()){
        Tag tag = new Tag();
        tag.setName( tagConfig.name() );
        tag.setDescription( tagConfig.description());

        if( !tagConfig.externalDocs().value().isEmpty() ){
           tag.setExternalDocs( new ExternalDocs( tagConfig.externalDocs().value(),
                   tagConfig.externalDocs().url()));
        }

        addExtensionProperties( tagConfig.extensions(), tag.getVendorExtensions());

        swagger.addTag( tag );
      }
    }

    for( SwaggerDefinition.Scheme scheme : config.schemes()){
      if( scheme != SwaggerDefinition.Scheme.DEFAULT ){
        swagger.addScheme( Scheme.forValue( scheme.name()));
      }
    }
  }

  protected void readInfoConfig(SwaggerDefinition config) {
    com.wordnik.swagger.annotations.Info infoConfig = config.info();
    Info info = swagger.getInfo();
    if( info == null ){
      info = new Info();
      swagger.setInfo(info);
    }

    if( !infoConfig.description().isEmpty() ){
      info.setDescription( infoConfig.description());
    }

    if( !infoConfig.termsOfService().isEmpty() ){
      info.setTermsOfService( infoConfig.termsOfService());
    }

    if( !infoConfig.title().isEmpty() ){
      info.setTitle(infoConfig.title());
    }

    if( !infoConfig.version().isEmpty() ){
      info.setVersion(infoConfig.version());
    }

    if( !infoConfig.contact().name().isEmpty() ){
      Contact contact = info.getContact();
      if( contact == null ){
        contact = new Contact();
        info.setContact( contact );
      }

      contact.setName( infoConfig.contact().name() );
      if( !infoConfig.contact().email().isEmpty() ){
        contact.setEmail( infoConfig.contact().email());
      }

      if( !infoConfig.contact().url().isEmpty() ){
        contact.setUrl(infoConfig.contact().url());
      }
    }

    if( !infoConfig.license().name().isEmpty() ){
      License license = info.getLicense();
      if( license == null ){
        license = new License();
        info.setLicense( license );
      }

      license.setName( infoConfig.license().name());
      if( !infoConfig.license().url().isEmpty() ){
        license.setUrl( infoConfig.license().url());
      }
    }

    addExtensionProperties(infoConfig.extensions(), info.getVendorExtensions());
  }

  private void addExtensionProperties(Extension [] extensions, Map<String, Object> map) {
    for( Extension extension : extensions ) {
      String name = extension.name();
      if (name.length() > 0) {

        if( !name.startsWith("x-")){
          name = "x-" + name;
        }

        if( !map.containsKey( name )) {
          map.put(name, new HashMap<String, Object>());
        }

        map = (Map<String, Object>) map.get(name);
      }

      for (ExtensionProperty property : extension.properties()) {
        if (!property.name().isEmpty() && !property.value().isEmpty()) {

          String propertyName = property.name();
          if( name.isEmpty() && !propertyName.startsWith( "x-")){
            propertyName = "x-" + propertyName;
          }

          map.put(propertyName, property.value());
        }
      }
    }
  }

=======
  private void readImplicitParameters(Method method, Operation operation) {
    ApiImplicitParams implicitParams = method.getAnnotation(ApiImplicitParams.class);
    if( implicitParams != null && implicitParams.value().length > 0 ){
       for(ApiImplicitParam param : implicitParams.value()) {
         Parameter p = readImplicitParam(param, method.getDeclaringClass());
         if (p != null) {
           operation.addParameter( p );
         }
       }
    }
  }

  protected Parameter readImplicitParam(ApiImplicitParam param, Class<?> apiClass) {
    Parameter p;
    if( param.paramType().equalsIgnoreCase("path") ){
      p = new PathParameter();
    }
    else if( param.paramType().equalsIgnoreCase("query")){
      p = new QueryParameter();
    }
    else if( param.paramType().equalsIgnoreCase("form") || param.paramType().equalsIgnoreCase("formData")){
      p = new FormParameter();
    }
    else if( param.paramType().equalsIgnoreCase("body")){
      p = new BodyParameter();
    }
    else if (param.paramType().equalsIgnoreCase("header")){
      p = new HeaderParameter();
    }
    else {
      LOGGER.warn( "Unkown implicit parameter type: [" + param.paramType() + "]");
      return null;
    }

    return ParameterProcessor.applyAnnotations( swagger, p, apiClass, Arrays.asList(new Annotation[]{param}));
  }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_71a04d0_06cfbe1/rev_71a04d0-06cfbe1/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/PropertyBuilder.java;<<<<<<< MINE
package com.wordnik.swagger.models.properties;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Collections;
import java.util.List;
import java.util.Map;

public class PropertyBuilder {
  static Logger LOGGER = LoggerFactory.getLogger(PropertyBuilder.class);

  public static Property build(String type, String format, Map<PropertyId, Object> args) {
    if(args == null) {
      args = Collections.emptyMap();
    }

    List<String> _enum = PropertyId.ENUM.findValue(args);
    String title = PropertyId.TITLE.findValue(args);
    String description = PropertyId.DESCRIPTION.findValue(args);
    String _default = PropertyId.DEFAULT.findValue(args);
    String pattern = PropertyId.PATTERN.findValue(args);
    Integer minLength = PropertyId.MIN_LENGTH.findValue(args);
    Integer maxLength = PropertyId.MAX_LENGTH.findValue(args);
    Double minimum = PropertyId.MINIMUM.findValue(args);
    Double maximum = PropertyId.MAXIMUM.findValue(args);
    Boolean exclusiveMinimum = PropertyId.EXCLUSIVE_MINIMUM.findValue(args);
    Boolean exclusiveMaximum = PropertyId.EXCLUSIVE_MAXIMUM.findValue(args);

    AbstractProperty property = null;
    if(BooleanProperty.isType(type, format)) {
      property = new BooleanProperty()
        ._default(_default);
    }
    if(DateProperty.isType(type, format))
      property = new DateProperty();
    if(DateTimeProperty.isType(type, format))
      property = new DateTimeProperty();
    if(DoubleProperty.isType(type, format)) {
      property = new DoubleProperty()
        ._default(_default)
        .minimum(minimum)
        .maximum(maximum)
        .exclusiveMinimum(exclusiveMinimum)
        .exclusiveMaximum(exclusiveMaximum);
    }
    if(FloatProperty.isType(type, format)) {
      property = new FloatProperty()
        ._default(_default)
        .minimum(minimum)
        .maximum(maximum)
        .exclusiveMinimum(exclusiveMinimum)
        .exclusiveMaximum(exclusiveMaximum);
    }
    if(FileProperty.isType(type, format)) {
      property = new FileProperty();
    }
    if(DecimalProperty.isType(type, format))
      property = new DecimalProperty()
        .minimum(minimum)
        .maximum(maximum)
        .exclusiveMinimum(exclusiveMinimum)
        .exclusiveMaximum(exclusiveMaximum);
    if(IntegerProperty.isType(type, format)) {
      property = new IntegerProperty()
        ._default(_default)
        .minimum(minimum)
        .maximum(maximum)
        .exclusiveMinimum(exclusiveMinimum)
        .exclusiveMaximum(exclusiveMaximum);
    }
    if(LongProperty.isType(type, format)) {
      property = new LongProperty()
        ._default(_default)
        .minimum(minimum)
        .maximum(maximum)
        .exclusiveMinimum(exclusiveMinimum)
        .exclusiveMaximum(exclusiveMaximum);
    }
    if(RefProperty.isType(type, format))
      property = new RefProperty();
    if(EmailProperty.isType(type, format))
      property = new EmailProperty()
        .minLength(minLength)
        .maxLength(maxLength)
        .pattern(pattern)
        ._enum(_enum);
    if(StringProperty.isType(type, format)) {
      property = new StringProperty()
        ._default(_default)
        .minLength(minLength)
        .maxLength(maxLength)
        .pattern(pattern)
        ._enum(_enum);
    }
    if(UUIDProperty.isType(type, format)) {
      property = new UUIDProperty()
        ._default(_default)
        .minLength(minLength)
        .maxLength(maxLength)
        .pattern(pattern);
    }
    if(ByteArrayProperty.isType(type, format)){
        property = new ByteArrayProperty();
    }
    // general properties
    if(property != null) {
      property
        .title(title)
        .description(description);
      String example = PropertyId.EXAMPLE.findValue (args);
      if (example != null) {
        property.setExample(example);
      }
    }
    // fallbacks
    if("integer".equals(type) && format == null) {
        // fall back to Integer if type is integer and format is missing
      LOGGER.debug("no format specified for integer type, falling back to int32");
      property = new IntegerProperty()
        ._default(_default)
        .minimum(minimum)
        .maximum(maximum)
        .exclusiveMinimum(exclusiveMinimum)
        .exclusiveMaximum(exclusiveMaximum);
    }
    if(ObjectProperty.isType(type) && format == null) {
        // fall back to Map if type is object and format is missing
      LOGGER.debug("no format specified for object type, falling back to object");
      property = new ObjectProperty();
    }    
    if(property == null)
      LOGGER.debug("no property for " + type + ", " + format);
    return property;
  }

  public enum PropertyId {
    ENUM("enum"),
    TITLE("title"),
    DESCRIPTION("description"),
    DEFAULT("default"),
    PATTERN("pattern"),
    DESCRIMINATOR("discriminator"),
    MIN_ITEMS("minItems"),
    MAX_ITEMS("maxItems"),
    MIN_PROPERTIES("minProperties"),
    MAX_PROPERTIES("maxProperties"),
    MIN_LENGTH("minLength"),
    MAX_LENGTH("maxLength"),
    MINIMUM("minimum"),
    MAXIMUM("maximum"),
    EXCLUSIVE_MINIMUM("exclusiveMinimum"),
    EXCLUSIVE_MAXIMUM("exclusiveMaximum"),
    UNIQUE_ITEMS("uniqueItems"),
    EXAMPLE("example"),
    TYPE("type"),
    FORMAT("format");

    private String propertyName;

    private PropertyId(String propertyName) {
      this.propertyName = propertyName;
    }

    public String getPropertyName() {
      return propertyName;
    }

    public <T> T findValue(Map<PropertyId, Object> args) {
      return (T) args.get(this);
    }
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_71a04d0_06cfbe1/rev_71a04d0-06cfbe1/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/StringProperty.java;<<<<<<< MINE
package com.wordnik.swagger.models.properties;

import com.wordnik.swagger.models.Xml;
import java.util.*;

public class StringProperty extends AbstractProperty implements Property {
  protected List<String> _enum;
  protected Integer minLength = null, maxLength = null;
  protected String pattern = null;
  protected String _default;

  public StringProperty() {
    super.type = "string";
  }
  public StringProperty xml(Xml xml) {
    this.setXml(xml);
    return this;
  }
  public StringProperty example(String example) {
    this.setExample(example);
    return this;
  }
  public StringProperty minLength(Integer minLength) {
    this.setMinLength(minLength);
    return this;
  }
  public StringProperty maxLength(Integer maxLength) {
    this.setMaxLength(maxLength);
    return this;
  }
  public StringProperty pattern(String pattern) {
    this.setPattern(pattern);
    return this;
  }
  public StringProperty _enum(String value) {
    if(this._enum == null)
      this._enum = new ArrayList<String>();
    if(!_enum.contains(value))
      _enum.add(value);
    return this;
  }
  public StringProperty _enum(List<String> value) {
    this._enum = value;
    return this;
  }
  public StringProperty _default(String _default) {
    this._default = _default;
    return this;
  }

  public List<String> getEnum() {
    return _enum;
  }
  public void setEnum(List<String> _enum) {
    this._enum = _enum;
  }

  public Integer getMinLength() {
    return minLength;
  }
  public void setMinLength(Integer minLength) {
    this.minLength = minLength;
  }

  public Integer getMaxLength() {
    return maxLength;
  }
  public void setMaxLength(Integer maxLength) {
    this.maxLength = maxLength;
  }

  public String getPattern() {
    return pattern;
  }
  public void setPattern(String pattern) {
    this.pattern = pattern;
  }

  public String getDefault() {
    return _default;
  }
  public void setDefault(String _default) {
    this._default = _default;
  }

  //TODO: implement additional formats
  public static boolean isType(String type, String format) {
    boolean formatMatchStringType = "uri".equals(format) || "url".equals(format);
    if("string".equals(type) && (format == null || formatMatchStringType))
      return true;
    else return false;
  }

  @Override
  public int hashCode() {
  	final int prime = 31;
  	int result = 1;
  	result = prime * result + ((_default == null) ? 0 : _default.hashCode());
  	result = prime * result + ((_enum == null) ? 0 : _enum.hashCode());
  	result = prime * result + ((maxLength == null) ? 0 : maxLength.hashCode());
  	result = prime * result + ((minLength == null) ? 0 : minLength.hashCode());
  	result = prime * result + ((pattern == null) ? 0 : pattern.hashCode());
  	return result;
  }

  @Override
  public boolean equals(Object obj) {
  	if (this == obj)
  		return true;
  	if (obj == null)
  		return false;
  	if (getClass() != obj.getClass())
  		return false;
  	StringProperty other = (StringProperty) obj;
  	if (_default == null) {
  		if (other._default != null)
  			return false;
  	} else if (!_default.equals(other._default))
  		return false;
  	if (_enum == null) {
  		if (other._enum != null)
  			return false;
  	} else if (!_enum.equals(other._enum))
  		return false;
  	if (maxLength == null) {
  		if (other.maxLength != null)
  			return false;
  	} else if (!maxLength.equals(other.maxLength))
  		return false;
  	if (minLength == null) {
  		if (other.minLength != null)
  			return false;
  	} else if (!minLength.equals(other.minLength))
  		return false;
  	if (pattern == null) {
  		if (other.pattern != null)
  			return false;
  	} else if (!pattern.equals(other.pattern))
  		return false;
  	return true;
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_d1cb707_38673c9/rev_d1cb707-38673c9/modules/swagger-core/src/main/java/io/swagger/core/filter/SpecFilter.java;<<<<<<< MINE
import io.swagger.models.*;
=======
import io.swagger.models.Model;
import io.swagger.models.Operation;
import io.swagger.models.Path;
import io.swagger.models.Swagger;
import io.swagger.models.Tag;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_47535a5_5a3f677/rev_47535a5-5a3f677/modules/swagger-jaxrs/src/test/scala/resources/ResourceWithConfigAndExtensions.java;<<<<<<< MINE
package resources;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.Contact;
import io.swagger.annotations.Extension;
import io.swagger.annotations.ExtensionProperty;
import io.swagger.annotations.ExternalDocs;
import io.swagger.annotations.Info;
import io.swagger.annotations.License;
import io.swagger.annotations.SwaggerDefinition;
import io.swagger.annotations.Tag;
import io.swagger.jaxrs.Reader;
import io.swagger.jaxrs.config.ReaderListener;
import io.swagger.models.Swagger;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import java.util.ArrayList;

@SwaggerDefinition(
        info = @Info(
                description = "Custom description",
                version = "V1.2.3",
                title = "TheAwesomeApi",
                termsOfService = "do-what-you-want",
                contact = @Contact(name = "Sponge-Bob", email = "sponge-bob@swagger.io", url = "http://swagger.io"),
                license = @License(name = "Apache 2.0", url = "http://www.apache.org"),
                extensions = {
                        @Extension(properties = {
                                @ExtensionProperty(name = "test1", value = "value1"),
                                @ExtensionProperty(name = "test2", value = "value2")
                        }),
                        @Extension(name = "test", properties = {
                                @ExtensionProperty(name = "test1", value = "value1"),
                                @ExtensionProperty(name = "test2", value = "value2")
                        })
                }
        ),
        consumes = {"application/json", "application/xml"},
        produces = {"application/json", "application/xml"},
        schemes = {SwaggerDefinition.Scheme.HTTP, SwaggerDefinition.Scheme.HTTPS},
        tags = {
                @Tag(name = "mytag", description = "my tag"),
                @Tag(name = "anothertag", description = "another tag",
                        externalDocs = @ExternalDocs(value = "test", url = "http://swagger.io")),
                @Tag(name = "tagwithextensions", description = "my tag",
                        extensions = @Extension(properties = {@ExtensionProperty(name = "test", value = "value")}))
        }, externalDocs = @ExternalDocs(value = "test", url = "http://swagger.io")
)
@Api(value = "/external/info/")
@Path("who/cares")
public class ResourceWithConfigAndExtensions implements ReaderListener {
    @ApiOperation(value = "test.", tags = {"tagwithextensions", "mytag", "testingtag"}, extensions = {
            @Extension(properties = @ExtensionProperty(name = "test", value = "value"))
    })
    @GET
    public void getTest(@ApiParam(value = "test") ArrayList<String> tenantId) {
        return;
    }

    @Override
    public void beforeScan(Reader reader, Swagger swagger) {
        swagger.addTag(new io.swagger.models.Tag().name("Tag-added-before-read"));
    }

    @Override
    public void afterScan(Reader reader, Swagger swagger) {
        swagger.addTag(new io.swagger.models.Tag().name("Tag-added-after-read"));
    }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_fe71f6d_cea99b5/rev_fe71f6d-cea99b5/modules/swagger-jaxrs/src/test/scala/resources/ResourceWithKnownInjections.java;<<<<<<< MINE
package resources;

import io.swagger.annotations.Api;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.Request;

@Path("/resource/{id}")
@Api(value = "/resource", description = "Summary of injections resource")
@Produces({"application/json", "application/xml"})
public class ResourceWithKnownInjections {

    private Integer constructorParam;
    @QueryParam("fieldParam")
    private String fieldParam; // injection into a class field

    // injection into a constructor parameter
    public ResourceWithKnownInjections(@PathParam("id") Integer constructorParam) {
        this.constructorParam = constructorParam;
    }

    private ResourceWithKnownInjections(@PathParam("id") Integer constructorParam, @QueryParam("fakeParam") String
            fakeParam) {
        this.constructorParam = constructorParam;
    }

    @GET
    public String get(@QueryParam("methodParam") String methodParam) {
        // injection into a resource method parameter
        final StringBuilder sb = new StringBuilder();
        sb.append("Constructor param: ").append(constructorParam).append("\n");
        sb.append("Field param: ").append(fieldParam).append("\n");
        sb.append("Method param: ").append(methodParam).append("\n");
        return sb.toString();
    }

    @Path("/subresource1")
    public SubResource1 subResourceLocator1(@QueryParam("subResourceParam") String subResourceParam) {
        // injection into a sub resource locator parameter
        return new SubResource1(subResourceParam);
    }

    @Path("/subresource2")
    public Class<SubResource2> subResourceLocator2(@QueryParam("subResourceParam") String subResourceParam) {
        // injection into a sub resource locator parameter
        return SubResource2.class;
    }

    @Path("/subresource3")
    public Class<SubResource3> subResourceLocator3(@QueryParam("subResourceParam") String subResourceParam) {
        // injection into a sub resource locator parameter
        return SubResource3.class;
    }

    @Context
    public void setRequest(Request request) {
        // injection into a setter method
    }

    @Api(description = "Sub resource 1")
    public static class SubResource1 {

        private String subResourceParam;

        public SubResource1(String subResourceParam) {
            this.subResourceParam = subResourceParam;
        }

        @GET
        public String get() {
            final StringBuilder sb = new StringBuilder();
            sb.append("Sub Resource: ").append(subResourceParam);
            return sb.toString();
        }
    }

    @Api(description = "Sub resource 2")
    public static class SubResource2 {

        private String subResourceParam;

        public SubResource2(@QueryParam("subConstructorParam") String subResourceParam) {
            this.subResourceParam = subResourceParam;
        }

        @GET
        public String get() {
            final StringBuilder sb = new StringBuilder();
            sb.append("Sub Resource: ").append(subResourceParam);
            return sb.toString();
        }
    }

    @Api(description = "Sub resource 3")
    public class SubResource3 {

        private String subResourceParam;

        public SubResource3(@QueryParam("subConstructorParam") String subResourceParam) {
            this.subResourceParam = subResourceParam;
        }

        @GET
        public String get() {
            final StringBuilder sb = new StringBuilder();
            sb.append("Sub Resource: ").append(subResourceParam);
            return sb.toString();
        }
    }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_e242269_afdc074/rev_e242269-afdc074/modules/swagger-core/src/main/java/io/swagger/jackson/ModelResolver.java;<<<<<<< MINE
import io.swagger.util.PrimitiveType;
=======
import io.swagger.util.AllowableValues;
import io.swagger.util.AllowableValuesUtils;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_2338ebe_a2a9a04/rev_2338ebe-a2a9a04/modules/swagger-jaxrs/src/test/java/io/swagger/models/Sample.java;<<<<<<< MINE
=======
package io.swagger.models;

public class Sample {
    String name;
    String value;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getValue() {
        return value;
    }

    public void setValue(String value) {
        this.value = value;
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_2338ebe_a2a9a04/rev_2338ebe-a2a9a04/modules/swagger-jaxrs/src/test/java/io/swagger/models/duplicated/Tag.java;<<<<<<< MINE
=======
package io.swagger.models.duplicated;

import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;

@XmlRootElement(name = "Tag")
public class Tag {
    private long id;
    private String name;

    @XmlElement(name = "id")
    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    @XmlElement(name = "name")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_2338ebe_a2a9a04/rev_2338ebe-a2a9a04/modules/swagger-jaxrs/src/test/java/io/swagger/models/TestEnum.java;<<<<<<< MINE
=======
package io.swagger.models;

public enum TestEnum {
    ONE, TWO, THREE;
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_36a5d31_0553cfb/rev_36a5d31-0553cfb/modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/models/Pagination.java;<<<<<<< MINE
=======
package io.swagger.models;

import io.swagger.annotations.ApiParam;

import javax.ws.rs.QueryParam;

public class Pagination {
    @QueryParam("skip")
    @ApiParam("number of records to skip")
    protected Integer skip;

    @QueryParam("limit")
    @ApiParam("maximum number of records to return")
    protected Integer limit;

    public Integer getSkip() {
        return skip;
    }

    public void setSkip(Integer skip) {
        this.skip = skip;
    }

    public Integer getLimit() {
        return limit;
    }

    public void setLimit(Integer limit) {
        this.limit = limit;
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_e199bff_cc4e4f4/rev_e199bff-cc4e4f4/modules/swagger-models/src/main/java/io/swagger/models/properties/PropertyBuilder.java;<<<<<<< MINE
        FORMAT("format"),
        VENDOR_EXTENSIONS("vendorExtensions");
=======
        FORMAT("format"),
        READ_ONLY("readOnly");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java;<<<<<<< MINE
                        operation = parseMethod(method, globalParameters);
=======
                        operation = parseMethod(cls, method, globalParameters);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java;<<<<<<< MINE
        return parseMethod(method, Collections.<Parameter>emptyList());
=======
        return parseMethod(method.getDeclaringClass(), method, Collections.<Parameter>emptyList());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java;<<<<<<< MINE
    private Operation parseMethod(Method method, List<Parameter> globalParameters) {
=======
    private Operation parseMethod(Class<?> cls, Method method, List<Parameter> globalParameters) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java;<<<<<<< MINE
            Type type = genericParameterTypes[i];
=======
            final Type type = TypeFactory.defaultInstance().constructType(genericParameterTypes[i], cls);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java;<<<<<<< MINE

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/config/ReaderListener.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/config/ReaderListener.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/config/ReaderListener.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/utils/ReflectionUtils.java;<<<<<<< MINE
=======
import java.lang.reflect.Field;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/utils/ReflectionUtils.java;<<<<<<< MINE
=======
import java.util.ArrayList;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/utils/ReflectionUtils.java;<<<<<<< MINE
=======
import java.util.Collections;
import java.util.HashSet;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/utils/ReflectionUtils.java;<<<<<<< MINE
=======
import java.util.Set;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/utils/ReflectionUtils.java;<<<<<<< MINE
=======

    /**
     * Returns the list of declared fields from the class <code>cls</code> and its superclasses
     * excluding <code>Object</code> class. If the field from child class hides the field from superclass,
     * the field from superclass won't be added to the result list.
     *
     * @param cls is the processing class
     * @return list of Fields
     */
    public static List<Field> getDeclaredFields(Class<?> cls) {
        if (cls.equals(Object.class)) {
            return Collections.emptyList();
        }
        final List<Field> fields = new ArrayList<Field>();
        final Set<String> fieldNames = new HashSet<String>();
        for (Field field : cls.getDeclaredFields()) {
            fields.add(field);
            fieldNames.add(field.getName());
        }
        for (Field field : getDeclaredFields(cls.getSuperclass())) {
            if (!fieldNames.contains(field.getName())) {
                fields.add(field);
            }
        }
        return fields;
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/utils/ReaderUtils.java;<<<<<<< MINE
        for (Field field : cls.getDeclaredFields()) {
=======
        for (Field field : ReflectionUtils.getDeclaredFields(cls)) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/json/JacksonJsonProvider.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/json/JacksonJsonProvider.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/json/JacksonJsonProvider.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/ParameterProcessor.java;<<<<<<< MINE
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.TypeFactory;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/ParameterProcessor.java;<<<<<<< MINE
        final JavaType javaType = TypeFactory.defaultInstance().constructType(type);
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/ParameterProcessor.java;<<<<<<< MINE
            final Property property = ModelConverters.getInstance().readAsProperty(javaType);
=======
            final Property property = ModelConverters.getInstance().readAsProperty(type);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/ParameterProcessor.java;<<<<<<< MINE
                for (Map.Entry<String, Model> entry : ModelConverters.getInstance().readAll(javaType).entrySet()) {
=======
                for (Map.Entry<String, Model> entry : ModelConverters.getInstance().readAll(type).entrySet()) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/test/java/io/swagger/PostParamTest.java;<<<<<<< MINE
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/test/java/io/swagger/PostParamTest.java;<<<<<<< MINE
=======
import static org.testng.Assert.assertNull;
import static org.testng.Assert.assertTrue;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/test/java/io/swagger/GenericsTest.java;<<<<<<< MINE
=======
import io.swagger.models.Model;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/test/java/io/swagger/GenericsTest.java;<<<<<<< MINE
=======
import io.swagger.resources.generics.UserApiRoute;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/test/java/io/swagger/GenericsTest.java;<<<<<<< MINE
=======
import java.util.Map;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/test/java/io/swagger/GenericsTest.java;<<<<<<< MINE
=======
import static org.testng.Assert.assertNotNull;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/test/java/io/swagger/GenericsTest.java;<<<<<<< MINE
=======

    @Test(description = "scan model with Generic Type")
    public void scanModelWithGenericType() {
        final Swagger swagger = new Reader(new Swagger()).read(UserApiRoute.class);
        assertNotNull(swagger);
        final Model userEntity = swagger.getDefinitions().get("UserEntity");
        assertNotNull(userEntity);
        final Map<String, Property> properties = userEntity.getProperties();
        assertEquals(properties.size(), 2);
        assertNotNull(properties.get("id"));
        assertNotNull(properties.get("name"));
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/test/java/io/swagger/ReaderTest.java;<<<<<<< MINE
=======
import io.swagger.resources.BookResource;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/test/java/io/swagger/ReaderTest.java;<<<<<<< MINE
    @org.junit.Test//(description = "scan class level and field level annotations")
=======
    @Test(description = "scan class level and field level annotations")
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/test/java/io/swagger/ReaderTest.java;<<<<<<< MINE
=======
    @Test(description = "it should scan parameters from base resource class")
    public void scanParametersFromBaseResource(){
        Swagger swagger = getSwagger(BookResource.class);
        assertNotNull(swagger);

        List<Parameter> parameters =  getGet(swagger, "/{id}/v1/books/{name}").getParameters();
        assertEquals(parameters.size(), 4);

        Parameter description = parameters.get(0);
        assertTrue(description instanceof PathParameter);
        assertEquals(description.getName(), "description");
        assertEquals(description.getDescription(), "Overriden description");

        Parameter id = parameters.get(1);
        assertTrue(id instanceof PathParameter);
        assertEquals(id.getName(), "id");
        assertEquals(id.getDescription(), "The Identifier of entity");

        Parameter test = parameters.get(2);
        assertTrue(test instanceof QueryParameter);
        assertEquals(test.getName(), "test");
        assertEquals(test.getDescription(), "Test Query Param");

        Parameter name = parameters.get(3);
        assertTrue(name instanceof PathParameter);
        assertEquals(name.getName(), "name");
        assertEquals(name.getDescription(), "The books name");
    }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/test/java/io/swagger/ResourceTest1343.java;<<<<<<< MINE
    @org.junit.Test///(description = "scan resource 1343")
=======
    @Test(description = "scan resource 1343")
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/test/java/io/swagger/resources/BaseResource.java;<<<<<<< MINE
=======
package io.swagger.resources;

import io.swagger.annotations.ApiParam;

import javax.ws.rs.PathParam;
import javax.ws.rs.QueryParam;

public class BaseResource {
    @ApiParam("The Identifier of entity")
    @PathParam("id")
    private String id;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @ApiParam("Base description")
    @PathParam("description")
    private String description = "base";

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @ApiParam(value = "Test Query Param")
    @QueryParam("test")
    protected boolean test;
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/test/java/io/swagger/resources/generics/UserEntity.java;<<<<<<< MINE
=======
package io.swagger.resources.generics;

import io.swagger.annotations.ApiModel;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;

@XmlRootElement
@ApiModel(value = "UserEntity")
@XmlAccessorType(XmlAccessType.FIELD)
public class UserEntity extends AbstractEntity {
    public String name;
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/test/java/io/swagger/resources/generics/UserApiRoute.java;<<<<<<< MINE
=======
package io.swagger.resources.generics;

import io.swagger.annotations.Api;

import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

@Path("/api/users")
@Api(value = "/users")
@Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})
public class UserApiRoute extends ApiCrudRoute<UserEntity> {

}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/test/java/io/swagger/resources/generics/AbstractEntity.java;<<<<<<< MINE
=======
package io.swagger.resources.generics;

import java.io.Serializable;

public abstract class AbstractEntity implements Serializable {
    public String id;
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/test/java/io/swagger/resources/generics/ApiCrudRoute.java;<<<<<<< MINE
=======
package io.swagger.resources.generics;

import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.models.Response;

import java.util.List;

import javax.ws.rs.POST;

public abstract class ApiCrudRoute<T extends AbstractEntity> {
    protected List<T> service;

    @POST
    @ApiOperation(value = "Create")
    public Response doCreate(
            @ApiParam(value = "Create object", required = true) T entity) throws Exception {
        service.add(entity);
        return new Response();
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-core/src/main/java/io/swagger/util/PropertyDeserializer.java;<<<<<<< MINE
=======
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.NumericNode;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-core/src/main/java/io/swagger/util/PropertyDeserializer.java;<<<<<<< MINE
=======

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-core/src/main/java/io/swagger/util/PropertyDeserializer.java;<<<<<<< MINE
                if (child instanceof TextNode) {
=======
                if (child instanceof TextNode ||
                    child instanceof NumericNode ||
                    child instanceof IntNode ||
                    child instanceof LongNode ||
                    child instanceof DoubleNode || 
                    child instanceof FloatNode) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-core/src/main/java/io/swagger/util/PropertyDeserializer.java;<<<<<<< MINE

        Map result = new HashMap<String, Object>();
=======
        Map<String, Object> result = new HashMap<String, Object>();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-core/src/main/java/io/swagger/util/PropertyDeserializer.java;<<<<<<< MINE

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-core/src/main/java/io/swagger/util/PropertyDeserializer.java;<<<<<<< MINE

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-core/src/main/java/io/swagger/util/PropertyDeserializer.java;<<<<<<< MINE
                return new ArrayProperty().items(subProperty).description(description);
=======
                ArrayProperty arrayProperty = new ArrayProperty().items(subProperty).description(description);
                arrayProperty.setVendorExtensionMap(getVendorExtensions(node));
                return arrayProperty;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-core/src/main/java/io/swagger/util/PropertyDeserializer.java;<<<<<<< MINE

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-core/src/main/java/io/swagger/util/PropertyDeserializer.java;<<<<<<< MINE
=======
        
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-core/src/test/java/io/swagger/ModelSerializerTest.java;<<<<<<< MINE
=======
import static org.testng.Assert.assertNotNull;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-core/src/test/java/io/swagger/ModelSerializerTest.java;<<<<<<< MINE
=======

    @Test(description = "it should generate an integer field with enum")
    public void integerEnumGeneration() throws IOException {
        final String json = "{\n" +
                "   \"properties\":{\n" +
                "      \"id\":{\n" +
                "         \"description\":\"fun!\",\n" +
                "         \"type\":\"integer\",\n" +
                "         \"format\":\"int32\",\n" +
                "         \"readOnly\":true,\n" +
                "         \"enum\": [ 0, 1]\n" +
                "      }\n" +
                "   }\n" +
                "}";
        final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);
        IntegerProperty p = (IntegerProperty)model.getProperties().get("id");

        assertNotNull(p.getEnum());
        assertEquals(p.getEnum().get(0), new Integer(0));
        assertEquals(p.getEnum().get(1), new Integer(1));
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-core/src/test/java/io/swagger/util/JsonDeserializationTest.java;<<<<<<< MINE
import java.io.File;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-core/src/test/java/io/swagger/util/JsonDeserializationTest.java;<<<<<<< MINE
=======

        //check for vendor extensions in array property types
        vendorExtensions = swagger.getDefinitions().get("Health").getProperties().get("array").getVendorExtensions();

        xStringValue = (String) vendorExtensions.get("x-string-value");
        assertNotNull(xStringValue);
        assertEquals(xStringValue, "string_value");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-core/src/test/java/io/swagger/ObjectPropertyTest.java;<<<<<<< MINE
import java.io.IOException;
=======
import io.swagger.models.ModelImpl;
import io.swagger.models.properties.ObjectProperty;
import io.swagger.models.properties.Property;
import io.swagger.models.properties.StringProperty;
import io.swagger.util.Json;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-core/src/test/java/io/swagger/ObjectPropertyTest.java;<<<<<<< MINE
import org.apache.commons.io.IOUtils;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-core/src/test/java/io/swagger/ObjectPropertyTest.java;<<<<<<< MINE
import io.swagger.models.ModelImpl;
import io.swagger.models.properties.ObjectProperty;
import io.swagger.models.properties.Property;
import io.swagger.models.properties.StringProperty;
import io.swagger.util.Json;
=======

import java.io.IOException;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-core/src/test/java/io/swagger/ObjectPropertyTest.java;<<<<<<< MINE
    @org.junit.Test //(description = "convert a model with object properties")
=======
    @Test (description = "convert a model with object properties")
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/Path.java;<<<<<<< MINE
=======
        if (head != null) {
            result.put(HttpMethod.HEAD, head);
        }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/Path.java;<<<<<<< MINE
            result.put(HttpMethod.OPTIONS, options);
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/HttpMethod.java;<<<<<<< MINE
=======
    HEAD,
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/DecimalProperty.java;<<<<<<< MINE
=======
import java.util.ArrayList;
import java.util.List;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/FloatProperty.java;<<<<<<< MINE
=======
import java.util.ArrayList;
import java.util.List;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/FloatProperty.java;<<<<<<< MINE
=======
    protected List<Float> _enum;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/FloatProperty.java;<<<<<<< MINE
=======
    public FloatProperty _enum(Float value) {
        if (this._enum == null) {
            this._enum = new ArrayList<Float>();
        }
        if (!_enum.contains(value)) {
            _enum.add(value);
        }
        return this;
    }

    public FloatProperty _enum(List<Float> value) {
        this._enum = value;
        return this;
    }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/FloatProperty.java;<<<<<<< MINE
=======
    public List<Float> getEnum() {
        return _enum;
    }

    public void setEnum(List<Float> _enum) {
        this._enum = _enum;
    }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/DateProperty.java;<<<<<<< MINE
=======
import java.util.ArrayList;
import java.util.List;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/DateProperty.java;<<<<<<< MINE
=======
    protected List<String> _enum;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/DateProperty.java;<<<<<<< MINE
=======
    public DateProperty _enum(String value) {
        if (this._enum == null) {
            this._enum = new ArrayList<String>();
        }
        if (!_enum.contains(value)) {
            _enum.add(value);
        }
        return this;
    }

    public DateProperty _enum(List<String> value) {
        this._enum = value;
        return this;
    }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/DateProperty.java;<<<<<<< MINE
=======

    public List<String> getEnum() {
        return _enum;
    }

    public void setEnum(List<String> _enum) {
        this._enum = _enum;
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/UUIDProperty.java;<<<<<<< MINE
=======
import java.util.ArrayList;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/UUIDProperty.java;<<<<<<< MINE
=======
    public UUIDProperty _enum(String value) {
        if (this._enum == null) {
            this._enum = new ArrayList<String>();
        }
        if (!_enum.contains(value)) {
            _enum.add(value);
        }
        return this;
    }

    public UUIDProperty _enum(List<String> value) {
        this._enum = value;
        return this;
    }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/UUIDProperty.java;<<<<<<< MINE
=======
    public List<String> getEnum() {
        return _enum;
    }

    public void setEnum(List<String> _enum) {
        this._enum = _enum;
    }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/IntegerProperty.java;<<<<<<< MINE
=======
import java.util.ArrayList;
import java.util.List;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/IntegerProperty.java;<<<<<<< MINE
=======
    protected List<Integer> _enum;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/IntegerProperty.java;<<<<<<< MINE
=======
    public IntegerProperty _enum(Integer value) {
        if (this._enum == null) {
            this._enum = new ArrayList<Integer>();
        }
        if (!_enum.contains(value)) {
            _enum.add(value);
        }
        return this;
    }

    public IntegerProperty _enum(List<Integer> value) {
        this._enum = value;
        return this;
    }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/IntegerProperty.java;<<<<<<< MINE
=======
    public List<Integer> getEnum() {
        return _enum;
    }

    public void setEnum(List<Integer> _enum) {
        this._enum = _enum;
    }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/DateTimeProperty.java;<<<<<<< MINE
=======
import java.util.ArrayList;
import java.util.List;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/DateTimeProperty.java;<<<<<<< MINE
=======
    protected List<String> _enum;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/DateTimeProperty.java;<<<<<<< MINE
=======
    public DateTimeProperty _enum(String value) {
        if (this._enum == null) {
            this._enum = new ArrayList<String>();
        }
        if (!_enum.contains(value)) {
            _enum.add(value);
        }
        return this;
    }

    public DateTimeProperty _enum(List<String> value) {
        this._enum = value;
        return this;
    }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/DateTimeProperty.java;<<<<<<< MINE
=======

    public List<String> getEnum() {
        return _enum;
    }

    public void setEnum(List<String> _enum) {
        this._enum = _enum;
    }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/PropertyBuilder.java;<<<<<<< MINE
=======
                if(args.containsKey(PropertyId.ENUM)) {
                    final List<String> values = PropertyId.ENUM.findValue(args);
                    if(values != null) {
                        if(property instanceof IntegerProperty) {
                            IntegerProperty p = (IntegerProperty) property;
                            for(String value : values) {
                              try {
                                p._enum(Integer.parseInt(value));
                              }
                              catch(Exception e) {
                                // continue
                              }
                            }                            
                        }
                        if(property instanceof LongProperty) {
                          LongProperty p = (LongProperty) property;
                          for(String value : values) {
                            try {
                              p._enum(Long.parseLong(value));
                            }
                            catch(Exception e) {
                              // continue
                            }
                          }                            
                        }
                        if(property instanceof DoubleProperty) {
                            DoubleProperty p = (DoubleProperty) property;
                            for(String value : values) {
                              try {
                                p._enum(Double.parseDouble(value));
                              }
                              catch(Exception e) {
                                // continue
                              }
                            }                            
                        }
                        if(property instanceof FloatProperty) {
                          FloatProperty p = (FloatProperty) property;
                          for(String value : values) {
                            try {
                              p._enum(Float.parseFloat(value));
                            }
                            catch(Exception e) {
                              // continue
                            }
                          }                            
                       }
                       if(property instanceof DateProperty) {
                          DateProperty p = (DateProperty) property;
                          for(String value : values) {
                            try {
                              p._enum(value);
                            }
                            catch(Exception e) {
                              // continue
                            }
                          }                            
                       }
                       if(property instanceof DateTimeProperty) {
                         DateTimeProperty p = (DateTimeProperty) property;
                         for(String value : values) {
                           try {
                             p._enum(value);
                           }
                           catch(Exception e) {
                             // continue
                           }
                         }                            
                       }
                       if(property instanceof UUIDProperty) {
                         UUIDProperty p = (UUIDProperty) property;
                         for(String value : values) {
                           try {
                             p._enum(value);
                           }
                           catch(Exception e) {
                             // continue
                           }
                         }                            
                       }
                    }
                }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/EmailProperty.java;<<<<<<< MINE
=======
import java.util.ArrayList;
import java.util.List;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/EmailProperty.java;<<<<<<< MINE
=======
    public EmailProperty _enum(String value) {
        if (this._enum == null) {
            this._enum = new ArrayList<String>();
        }
        if (!_enum.contains(value)) {
            _enum.add(value);
        }
        return this;
    }

    public EmailProperty _enum(List<String> value) {
        this._enum = value;
        return this;
    }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/EmailProperty.java;<<<<<<< MINE

    public EmailProperty _enum(String value) {
        super._enum(value);
        return this;
    }

    public EmailProperty _enum(List<String> value) {
        super._enum(value);
        return this;
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/LongProperty.java;<<<<<<< MINE
=======
import java.util.ArrayList;
import java.util.List;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/LongProperty.java;<<<<<<< MINE
=======
    protected List<Long> _enum;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/LongProperty.java;<<<<<<< MINE
=======
    public LongProperty _enum(Long value) {
        if (this._enum == null) {
            this._enum = new ArrayList<Long>();
        }
        if (!_enum.contains(value)) {
            _enum.add(value);
        }
        return this;
    }

    public LongProperty _enum(List<Long> value) {
        this._enum = value;
        return this;
    }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/LongProperty.java;<<<<<<< MINE
=======
    public List<Long> getEnum() {
        return _enum;
    }

    public void setEnum(List<Long> _enum) {
        this._enum = _enum;
    }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/DoubleProperty.java;<<<<<<< MINE
=======
import java.util.ArrayList;
import java.util.List;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/DoubleProperty.java;<<<<<<< MINE
=======
    protected List<Double> _enum;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/DoubleProperty.java;<<<<<<< MINE
=======
    public DoubleProperty _enum(Double value) {
        if (this._enum == null) {
            this._enum = new ArrayList<Double>();
        }
        if (!_enum.contains(value)) {
            _enum.add(value);
        }
        return this;
    }

    public DoubleProperty _enum(List<Double> value) {
        this._enum = value;
        return this;
    }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/properties/DoubleProperty.java;<<<<<<< MINE
=======
    public List<Double> getEnum() {
        return _enum;
    }

    public void setEnum(List<Double> _enum) {
        this._enum = _enum;
    }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-models/src/main/java/io/swagger/models/ComposedModel.java;<<<<<<< MINE
=======
    
    public Object clone() {
        ComposedModel cloned = new ComposedModel();
        super.cloneTo(cloned);
        cloned.allOf = this.allOf;
        cloned.parent = this.parent;
        cloned.child = this.child;
        cloned.interfaces = this.interfaces;
        cloned.description = this.description;
        cloned.example = this.example;

        return cloned;
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jersey2-jaxrs/src/main/java/io/swagger/jersey/SwaggerJersey2Jaxrs.java;<<<<<<< MINE
=======

import io.swagger.converter.ModelConverters;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jersey2-jaxrs/src/main/java/io/swagger/jersey/SwaggerJersey2Jaxrs.java;<<<<<<< MINE
=======
import io.swagger.models.properties.Property;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jersey2-jaxrs/src/main/java/io/swagger/jersey/SwaggerJersey2Jaxrs.java;<<<<<<< MINE
=======
import java.util.Arrays;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jersey2-jaxrs/src/main/java/io/swagger/jersey/SwaggerJersey2Jaxrs.java;<<<<<<< MINE
=======
                } else {
                    final FormParameter fp = new FormParameter().name(fd.value());
                    final Property schema = ModelConverters.getInstance().readAsProperty(type);
                    if (schema != null) {
                        fp.setProperty(schema);
                    }
                    parameters.add(fp);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jersey2-jaxrs/src/main/java/io/swagger/jersey/SwaggerJersey2Jaxrs.java;<<<<<<< MINE
=======

    @Override
    protected boolean shouldIgnoreClass(Class<?> cls) {
        for (Class<?> item : Arrays.asList(org.glassfish.jersey.media.multipart.FormDataContentDisposition.class,
                org.glassfish.jersey.media.multipart.FormDataBodyPart.class)) {
            if (item.isAssignableFrom(cls)) {
                return true;
            }
        }
        return false;
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/SwaggerJersey2JaxrsTest.java;<<<<<<< MINE
=======
import io.swagger.resources.ResourceWithFormData;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/SwaggerJersey2JaxrsTest.java;<<<<<<< MINE
=======
    @Test(description = "FormDataBodyPart should be ignored when generating the Swagger document")
    public void testFormDataBodyPart() {
        final Swagger swagger = new Reader(new Swagger()).read(ResourceWithFormData.class);
        final List<Parameter> parameters = swagger.getPath("/test/document/{documentName}.json").getPost().getParameters();
        assertEquals(parameters.size(), 3);
        assertEquals(parameters.get(0).getName(), "documentName");
        assertEquals(parameters.get(1).getName(), "input");
        assertEquals(parameters.get(2).getName(), "id");
    }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/resources/ResourceWithFormData.java;<<<<<<< MINE
=======
package io.swagger.resources;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

import org.glassfish.jersey.media.multipart.FormDataContentDisposition;
import org.glassfish.jersey.media.multipart.FormDataBodyPart;
import org.glassfish.jersey.media.multipart.FormDataParam;

import java.io.InputStream;

import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;

@Path("test")
@Api(value = "test", description = "test routes", produces = "application/json")
public class ResourceWithFormData {

    @POST
    @Path("/document/{documentName}.json")
    @ApiOperation(value = "uploadAttachAndParseUserDocument", notes = "Uploads, parses, and attaches the document to the user's job application.", position = 509)
    public String uploadAttachAndParseUserDocument(@PathParam("documentName") final String documentName,
                                                   @FormDataParam("document") final FormDataContentDisposition detail,
                                                   @FormDataParam("document2") final FormDataBodyPart bodyPart,
                                                   @FormDataParam("input") final InputStream input,
                                                   @FormDataParam("id") final Integer id) throws Exception {
        return "";
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ExternalDocs.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ExternalDocs.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ExternalDocs.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Contact.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Contact.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Contact.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiResponse.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiResponse.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiResponse.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiResponse.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiResponse.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiResponse.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiResponse.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiResponse.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiResponse.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParams.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParams.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParams.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiModel.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiModel.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiModel.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiModel.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiModel.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiModel.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiResponses.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiResponses.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiResponses.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiResponses.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ExtensionProperty.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ExtensionProperty.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ExtensionProperty.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Api.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Api.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Api.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Api.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Api.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Api.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Api.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Api.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Api.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Api.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Api.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Api.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Api.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Api.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Authorization.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Authorization.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Authorization.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Authorization.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Authorization.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Authorization.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/License.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/License.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/License.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiParam.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiParam.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiParam.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiParam.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiParam.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiParam.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiParam.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiParam.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiParam.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiParam.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/SwaggerDefinition.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/SwaggerDefinition.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/SwaggerDefinition.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/SwaggerDefinition.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/SwaggerDefinition.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/SwaggerDefinition.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/SwaggerDefinition.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/SwaggerDefinition.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Info.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Info.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Info.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Extension.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Extension.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Extension.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Tag.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Tag.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Tag.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ResponseHeader.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ResponseHeader.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ResponseHeader.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ResponseHeader.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/AuthorizationScope.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/AuthorizationScope.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/AuthorizationScope.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/AuthorizationScope.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/AuthorizationScope.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/AuthorizationScope.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_8378133_798bf6a/rev_8378133-798bf6a/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java;<<<<<<< MINE
                    if(apiOperation != null || config.isScanAllResources() || httpMethod != null || methodPath != null) { 
=======
                    if(apiOperation != null || config.isScanAllResources() || httpMethod != null || methodPath != null) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_6de2d16_6f801c0/rev_6de2d16-6f801c0/modules/swagger-models/src/main/java/io/swagger/models/Operation.java;<<<<<<< MINE

    public Operation vendorExtensions(Map<String, Object> vendorExtensions) {
        this.vendorExtensions.putAll( vendorExtensions );
        return this;
    }

    @Override
    public String toString() {
        return super.toString() + "[" + operationId + "]";
    }
=======

	@Override
	public String toString() {
		return super.toString() + "[" + operationId + "]";
	}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_d2ba90b_788343b/rev_d2ba90b-788343b/modules/swagger-core/src/main/java/io/swagger/jackson/ModelResolver.java;<<<<<<< MINE
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonIdentityReference;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.introspect.Annotated;
=======
import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.*;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_d2ba90b_788343b/rev_d2ba90b-788343b/modules/swagger-core/src/main/java/io/swagger/jackson/ModelResolver.java;<<<<<<< MINE
=======
import com.google.common.collect.Iterables;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_d2ba90b_788343b/rev_d2ba90b-788343b/modules/swagger-core/src/main/java/io/swagger/jackson/ModelResolver.java;<<<<<<< MINE
=======
import io.swagger.util.ReflectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.validation.constraints.*;
import javax.xml.bind.annotation.XmlRootElement;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_d2ba90b_788343b/rev_d2ba90b-788343b/modules/swagger-core/src/main/java/io/swagger/jackson/ModelResolver.java;<<<<<<< MINE
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.validation.constraints.DecimalMax;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
=======
import java.util.*;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_4698800_8db0f6a/rev_4698800-8db0f6a/modules/swagger-core/src/main/java/io/swagger/jackson/ModelResolver.java;<<<<<<< MINE
                if(mp != null && mp.readOnly()) {
                  isReadOnly = mp.readOnly();
=======
                if (mp != null && mp.readOnly()) {
                    isReadOnly = mp.readOnly();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_4698800_8db0f6a/rev_4698800-8db0f6a/modules/swagger-core/src/main/java/io/swagger/jackson/ModelResolver.java;<<<<<<< MINE

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_4698800_8db0f6a/rev_4698800-8db0f6a/modules/swagger-core/src/main/java/io/swagger/jackson/ModelResolver.java;<<<<<<< MINE
    
=======

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_ba73b01_b51406c/rev_ba73b01-b51406c/modules/swagger-core/src/test/java/io/swagger/util/JsonDeserializationTest.java;<<<<<<< MINE
import io.swagger.models.properties.ArrayProperty;
import io.swagger.models.properties.MapProperty;
import io.swagger.models.properties.Property;
=======
import io.swagger.models.properties.ArrayProperty;
import io.swagger.models.properties.Property;
import io.swagger.models.properties.StringProperty;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_24eb6a9_4e7a777/rev_24eb6a9-4e7a777/modules/swagger-core/src/main/java/io/swagger/util/ParameterProcessor.java;<<<<<<< MINE

        public String getType() {
            return type;
        }

        public String getFormat() {
            return format;
        }
=======

        public Double getDecimalMin() {
            return decimalMin;
        }

        public boolean isMinExclusive() {
            return minExclusive;
        }

        public Integer getMinLength() {
            return minLength;
        }

        public Integer getMaxLength() {
            return maxLength;
        }

        public String getPattern() {
            return pattern;
        }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_07ebc65_40c19ae/rev_07ebc65-40c19ae/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParams.java;<<<<<<< MINE
@Target({ElementType.METHOD,ElementType.ANNOTATION_TYPE})
=======
@Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE})
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_0e26b71_5437741/rev_0e26b71-5437741/modules/swagger-models/src/main/java/io/swagger/models/ExternalDocs.java;<<<<<<< MINE
    private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
=======
    private final Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_0e26b71_5437741/rev_0e26b71-5437741/modules/swagger-models/src/main/java/io/swagger/models/AbstractModel.java;<<<<<<< MINE
    private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
=======
    private final Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_0e26b71_5437741/rev_0e26b71-5437741/modules/swagger-models/src/main/java/io/swagger/models/Path.java;<<<<<<< MINE
    private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
=======
    private final Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_0e26b71_5437741/rev_0e26b71-5437741/modules/swagger-models/src/main/java/io/swagger/models/parameters/AbstractParameter.java;<<<<<<< MINE
    private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
=======
    private final Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_0e26b71_5437741/rev_0e26b71-5437741/modules/swagger-models/src/main/java/io/swagger/models/License.java;<<<<<<< MINE
    private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
=======
    private final Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_0e26b71_5437741/rev_0e26b71-5437741/modules/swagger-models/src/main/java/io/swagger/models/auth/AbstractSecuritySchemeDefinition.java;<<<<<<< MINE
    private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
=======
    private final Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_0e26b71_5437741/rev_0e26b71-5437741/modules/swagger-models/src/main/java/io/swagger/models/properties/AbstractProperty.java;<<<<<<< MINE
    private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
=======
    private final Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_0e26b71_5437741/rev_0e26b71-5437741/modules/swagger-models/src/main/java/io/swagger/models/Operation.java;<<<<<<< MINE
    private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
=======
    private final Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_0e26b71_5437741/rev_0e26b71-5437741/modules/swagger-models/src/main/java/io/swagger/models/Tag.java;<<<<<<< MINE
    private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
=======
    private final Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_0e26b71_5437741/rev_0e26b71-5437741/modules/swagger-models/src/main/java/io/swagger/models/Response.java;<<<<<<< MINE
    private Map<String, Object> vendorExtensions = new HashMap<String, Object>();
=======
    private final Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_84c80ba_f95e775/rev_84c80ba-f95e775/modules/swagger-core/src/main/java/io/swagger/util/PropertyDeserializer.java;<<<<<<< MINE
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.TextNode;
=======
import com.google.common.collect.Maps;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_d6f87d1_9a6cf32/rev_d6f87d1-9a6cf32/modules/swagger-core/src/main/java/io/swagger/jackson/ModelResolver.java;<<<<<<< MINE
import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.*;
=======
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonIdentityReference;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.SerializationFeature;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_d6f87d1_9a6cf32/rev_d6f87d1-9a6cf32/modules/swagger-core/src/main/java/io/swagger/jackson/ModelResolver.java;<<<<<<< MINE
import io.swagger.models.*;
import io.swagger.models.properties.*;
=======
import io.swagger.models.ComposedModel;
import io.swagger.models.Model;
import io.swagger.models.ModelImpl;
import io.swagger.models.RefModel;
import io.swagger.models.Xml;
import io.swagger.models.properties.AbstractNumericProperty;
import io.swagger.models.properties.ArrayProperty;
import io.swagger.models.properties.IntegerProperty;
import io.swagger.models.properties.MapProperty;
import io.swagger.models.properties.Property;
import io.swagger.models.properties.PropertyBuilder;
import io.swagger.models.properties.RefProperty;
import io.swagger.models.properties.StringProperty;
import io.swagger.models.properties.UUIDProperty;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_d6f87d1_9a6cf32/rev_d6f87d1-9a6cf32/modules/swagger-core/src/main/java/io/swagger/jackson/ModelResolver.java;<<<<<<< MINE
import javax.validation.constraints.*;
=======
import javax.validation.constraints.DecimalMax;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_d6f87d1_9a6cf32/rev_d6f87d1-9a6cf32/modules/swagger-core/src/main/java/io/swagger/jackson/ModelResolver.java;<<<<<<< MINE
import java.util.*;
=======
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_e661e1a_9a6cf32/rev_e661e1a-9a6cf32/modules/swagger-core/src/main/java/io/swagger/util/ReflectionUtils.java;<<<<<<< MINE
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.google.common.collect.Sets;
=======
import java.lang.annotation.Annotation;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_e661e1a_9a6cf32/rev_e661e1a-9a6cf32/modules/swagger-core/src/main/java/io/swagger/util/ReflectionUtils.java;<<<<<<< MINE
import java.lang.annotation.Annotation;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
=======
import com.fasterxml.jackson.databind.type.TypeFactory;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_e661e1a_9a6cf32/rev_e661e1a-9a6cf32/modules/swagger-core/src/main/java/io/swagger/util/ReflectionUtils.java;<<<<<<< MINE
    
=======

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_e661e1a_9a6cf32/rev_e661e1a-9a6cf32/modules/swagger-core/src/main/java/io/swagger/util/ReflectionUtils.java;<<<<<<< MINE
        Annotation[][] methodAnnotations = method.getParameterAnnotations();
        Method overriddenmethod = getOverriddenMethod(method);
=======
        Annotation[][] methodAnnotations = method.getParameterAnnotations();
        Method overriddenmethod = getOverriddenMethod(method);

        if (overriddenmethod != null) {
            Annotation[][] overriddenAnnotations = overriddenmethod
                    .getParameterAnnotations();

            for (int i = 0; i < methodAnnotations.length; i++) {
                List<Type> types = new ArrayList<Type>();
                for (int j = 0; j < methodAnnotations[i].length; j++) {
                    types.add(methodAnnotations[i][j].annotationType());
                }
                for (int j = 0; j < overriddenAnnotations[i].length; j++) {
                    if (!types.contains(overriddenAnnotations[i][j]
                            .annotationType())) {
                        methodAnnotations[i] = ArrayUtils.add(
                                methodAnnotations[i],
                                overriddenAnnotations[i][j]);
                    }
                }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_e661e1a_9a6cf32/rev_e661e1a-9a6cf32/modules/swagger-core/src/main/java/io/swagger/util/ReflectionUtils.java;<<<<<<< MINE
        if (overriddenmethod != null) {
            Annotation[][] overriddenAnnotations = overriddenmethod
                    .getParameterAnnotations();

            for (int i = 0; i < methodAnnotations.length; i++) {
                List<Type> types = new ArrayList<Type>();
                for (int j = 0; j < methodAnnotations[i].length; j++) {
                    types.add(methodAnnotations[i][j].annotationType());
                }
                for (int j = 0; j < overriddenAnnotations[i].length; j++) {
                    if (!types.contains(overriddenAnnotations[i][j]
                            .annotationType())) {
                        methodAnnotations[i] = ArrayUtils.add(
                                methodAnnotations[i],
                                overriddenAnnotations[i][j]);
                    }
                }

            }
        }
        return methodAnnotations;
=======
            }
        }
        return methodAnnotations;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_e661e1a_9a6cf32/rev_e661e1a-9a6cf32/modules/swagger-core/src/main/java/io/swagger/util/ReflectionUtils.java;<<<<<<< MINE
    
=======

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_e661e1a_9a6cf32/rev_e661e1a-9a6cf32/modules/swagger-core/src/test/java/io/swagger/reflection/IParent.java;<<<<<<< MINE
public interface IParent<T extends Number> extends IGrandparent<T> {
=======
@IndirectAnnotation
public interface IParent<T extends Number> {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/bitcoinj/revisions/rev_29d996b_e990bcd/rev_29d996b-e990bcd/src/com/google/bitcoin/core/Peer.java;<<<<<<< MINE
            throw new  RuntimeException("Peer does not have block chain");
=======
            throw new RuntimeException("Peer does not have block chain");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/bitcoinj/revisions/rev_29d996b_e990bcd/rev_29d996b-e990bcd/src/com/google/bitcoin/core/Peer.java;<<<<<<< MINE
        return blocksToGet;
=======
        if (blocksToGet < 0) {
            // This peer has fewer blocks than we do. It isn't usable.
            // TODO: We can't do the right thing here until Mirons patch lands. For now just return a zero latch.
            return new CountDownLatch(0);
        }
        chainCompletionLatch = new CountDownLatch(blocksToGet);
        if (blocksToGet > 0) {
            // When we just want as many blocks as possible, we can set the target hash to zero.
            blockChainDownload(Sha256Hash.ZERO_HASH);
        }
        return chainCompletionLatch;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c/tests/com/google/bitcoin/core/AlertMessageTest.java;<<<<<<< MINE
=======
/*
 * Copyright 2011 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.bitcoin.core;

import org.bouncycastle.util.encoders.Hex;
import org.junit.Before;
import org.junit.Test;

import java.math.BigInteger;

import static junit.framework.Assert.assertEquals;
import static junit.framework.Assert.assertTrue;

public class AlertMessageTest {
    private static final byte[] TEST_KEY_PRIV = Hex.decode("6421e091445ade4b24658e96aa60959ce800d8ea9e7bd8613335aa65ba8d840b");
    private NetworkParameters params;

    @Before
    public void setUp() throws Exception {
        ECKey key = new ECKey(new BigInteger(1, TEST_KEY_PRIV));
        params = NetworkParameters.unitTests();
        params.alertSigningKey = key.getPubKey();
    }

    @Test
    public void deserialize() throws Exception {
        // A CAlert taken from the reference implementation.
        // TODO: This does not check the subVer or set fields. Support proper version matching.
        final byte[] payload = Hex.decode("5c010000004544eb4e000000004192ec4e00000000eb030000e9030000000000000048ee00000088130000002f43416c6572742073797374656d20746573743a2020202020202020207665722e302e352e3120617661696c61626c6500473045022100ec799908c008b272d5e5cd5a824abaaac53d210cc1fa517d8e22a701ecdb9e7002206fa1e7e7c251d5ba0d7c1fe428fc1870662f2927531d1cad8d4581b45bc4f8a7");
        AlertMessage alert = new AlertMessage(params, payload);
        assertEquals(1324041285, alert.getRelayUntil().getTime() / 1000);
        assertEquals(1324126785, alert.getExpiration().getTime() / 1000);
        assertEquals(1003, alert.getId());
        assertEquals(1001, alert.getCancel());
        assertEquals(0, alert.getMinVer());
        assertEquals(61000, alert.getMaxVer());
        assertEquals(5000, alert.getPriority());
        assertEquals("CAlert system test:         ver.0.5.1 available", alert.getStatusBar());
        assertTrue(alert.isSignatureValid());
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c/src/com/google/bitcoin/core/BitcoinSerializer.java;<<<<<<< MINE
=======
        } else if (command.equals("alert")) {
            log.info("alert payload " + Utils.bytesToHexString(payloadBytes));
            return new AlertMessage(params, payloadBytes);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c/src/com/google/bitcoin/core/AlertMessage.java;<<<<<<< MINE
/*
 * Copyright 2011 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.bitcoin.core;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

/**
 * Alerts are signed messages that are broadcast on the peer-to-peer network if they match a hard-coded signing key.
 * The private keys are held by a small group of core Bitcoin developers, and alerts may be broadcast in the event of
 * an available upgrade or a serious network problem. Alerts have an expiration time, data that specifies what
 * set of software versions it matches and the ability to cancel them by broadcasting another type of alert.<p>
 *
 * The right course of action on receiving an alert is usually to either ensure a human will see it (display on screen,
 * log, email), or if you decide to use alerts for notifications that are specific to your app in some way, to parse it.
 * For example, you could treat it as an upgrade notification specific to your app. Satoshi designed alerts to ensure
 * that software upgrades could be distributed independently of a hard-coded website, in order to allow everything to
 * be purely peer-to-peer. You don't have to use this of course, and indeed it often makes more sense not to.<p>
 *     
 * Before doing anything with an alert, you should check {@link AlertMessage#isSignatureValid()}.
 */
public class AlertMessage extends Message {
    private byte[] content;
    private byte[] signature;

    // See the getters for documentation of what each field means.
    private long version = 1;
    private Date relayUntil;
    private Date expiration;
    private long id;
    private long cancel;
    private Set<Long> cancelSet;
    private long minVer, maxVer;
    private Set<String> matchingSubVers;
    private long priority;
    private String comment, statusBar, reserved;

    // Chosen arbitrarily to avoid memory blowups.
    private static final long MAX_SET_SIZE = 100;

    public AlertMessage(NetworkParameters params, byte[] payloadBytes) throws ProtocolException {
        super(params, payloadBytes, 0);
    }

    @Override
    void parse() throws ProtocolException {
        // Alerts are formatted in two levels. The top level contains two byte arrays: a signature, and a serialized
        // data structure containing the actual alert data.
        int startPos = cursor;
        content = readByteArray();
        signature = readByteArray();
        // Now we need to parse out the contents of the embedded structure. Rewind back to the start of the message.
        cursor = startPos;
        readVarInt();  // Skip the length field on the content array.
        // We're inside the embedded structure.
        version = readUint32();
        // Read the timestamps. Bitcoin uses seconds since the epoch.
        relayUntil = new Date(readUint64().longValue() * 1000);
        expiration = new Date(readUint64().longValue() * 1000);
        id = readUint32();
        cancel = readUint32();
        // Sets are serialized as <len><item><item><item>....
        long cancelSetSize = readVarInt();
        if (cancelSetSize < 0 || cancelSetSize > MAX_SET_SIZE) {
            throw new ProtocolException("Bad cancel set size: " + cancelSetSize);
        }
        // Using a hashset here is very inefficient given that this will normally be only one item. But Java doesn't
        // make it easy to do better. What we really want is just an array-backed set.
        cancelSet = new HashSet<Long>((int)cancelSetSize);
        for (long i = 0; i < cancelSetSize; i++) {
            cancelSet.add(readUint32());
        }
        minVer = readUint32();
        maxVer = readUint32();
        // Read the subver matching set.
        long subverSetSize = readVarInt();
        if (subverSetSize < 0 || subverSetSize > MAX_SET_SIZE) {
            throw new ProtocolException("Bad subver set size: " + subverSetSize);
        }
        matchingSubVers = new HashSet<String>((int)subverSetSize);
        for (long i = 0; i < subverSetSize; i++) {
            matchingSubVers.add(readStr());
        }
        priority = readUint32();
        comment = readStr();
        statusBar = readStr();
        reserved = readStr();

        length = cursor - offset;
    }

    /**
     * Returns true if the digital signature attached to the message verifies. Don't do anything with the alert if it
     * doesn't verify, because that would allow arbitrary attackers to spam your users.
     */
    public boolean isSignatureValid() {
        return ECKey.verify(Utils.doubleDigest(content), signature, params.alertSigningKey);
    }

    @Override
    protected void parseLite() throws ProtocolException {
        // Do nothing, lazy parsing isn't useful for alerts.
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //  Field accessors.

    /**
     * The time at which the alert should stop being broadcast across the network. Note that you can still receive
     * the alert after this time from other nodes if the alert still applies to them or to you.
     */
    public Date getRelayUntil() {
        return relayUntil;
    }

    public void setRelayUntil(Date relayUntil) {
        this.relayUntil = relayUntil;
    }

    /**
     * The time at which the alert ceases to be relevant. It should not be presented to the user or app administrator
     * after this time.
     */
    public Date getExpiration() {
        return expiration;
    }

    public void setExpiration(Date expiration) {
        this.expiration = expiration;
    }

    /**
     * The numeric identifier of this alert. Each alert should have a unique ID, but the signer can choose any number.
     * If an alert is broadcast with a cancel field higher than this ID, this alert is considered cancelled.
     * @return uint32
     */
    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    /**
     * A marker that results in any alerts with an ID lower than this value to be considered cancelled.
     * @return uint32
     */
    public long getCancel() {
        return cancel;
    }

    public void setCancel(long cancel) {
        this.cancel = cancel;
    }

    /**
     * The inclusive lower bound on software versions that are considered for the purposes of this alert. The Satoshi
     * client compares this against a protocol version field, but as long as the subVer field is used to restrict it your
     * alerts could use any version numbers.
     * @return uint32
     */
    public long getMinVer() {
        return minVer;
    }

    public void setMinVer(long minVer) {
        this.minVer = minVer;
    }

    /**
     * The inclusive upper bound on software versions considered for the purposes of this alert. The Satoshi
     * client compares this against a protocol version field, but as long as the subVer field is used to restrict it your
     * alerts could use any version numbers.
     * @return
     */
    public long getMaxVer() {
        return maxVer;
    }

    public void setMaxVer(long maxVer) {
        this.maxVer = maxVer;
    }

    /**
     * Provides an integer ordering amongst simultaneously active alerts.
     * @return uint32
     */
    public long getPriority() {
        return priority;
    }

    public void setPriority(long priority) {
        this.priority = priority;
    }

    /**
     * This field is unused. It is presumably intended for the author of the alert to provide a justification for it
     * visible to protocol developers but not users.
     */
    public String getComment() {
        return comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    /**
     * A string that is intended to display in the status bar of the official GUI client. It contains the user-visible
     * message. English only.
     */
    public String getStatusBar() {
        return statusBar;
    }

    public void setStatusBar(String statusBar) {
        this.statusBar = statusBar;
    }

    /**
     * This field is never used.
     */
    public String getReserved() {
        return reserved;
    }

    public void setReserved(String reserved) {
        this.reserved = reserved;
    }
}=======
/*
 * Copyright 2011 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.bitcoin.core;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

/**
 * Alerts are signed messages that are broadcast on the peer-to-peer network if they match a hard-coded signing key.
 * The private keys are held by a small group of core Bitcoin developers, and alerts may be broadcast in the event of
 * an available upgrade or a serious network problem. Alerts have an expiration time, data that specifies what
 * set of software versions it matches and the ability to cancel them by broadcasting another type of alert.<p>
 *
 * The right course of action on receiving an alert is usually to either ensure a human will see it (display on screen,
 * log, email), or if you decide to use alerts for notifications that are specific to your app in some way, to parse it.
 * For example, you could treat it as an upgrade notification specific to your app. Satoshi designed alerts to ensure
 * that software upgrades could be distributed independently of a hard-coded website, in order to allow everything to
 * be purely peer-to-peer. You don't have to use this of course, and indeed it often makes more sense not to.<p>
 *     
 * Before doing anything with an alert, you should check {@link AlertMessage#isSignatureValid()}.
 */
public class AlertMessage extends Message {
    private byte[] content;
    private byte[] signature;

    // See the getters for documentation of what each field means.
    private long version = 1;
    private Date relayUntil;
    private Date expiration;
    private long id;
    private long cancel;
    private Set<Long> cancelSet;
    private long minVer, maxVer;
    private Set<String> matchingSubVers;
    private long priority;
    private String comment, statusBar, reserved;

    // Chosen arbitrarily to avoid memory blowups.
    private static final long MAX_SET_SIZE = 100;

    public AlertMessage(NetworkParameters params, byte[] payloadBytes) throws ProtocolException {
        super(params, payloadBytes, 0);
    }

    @Override
    void parse() throws ProtocolException {
        // Alerts are formatted in two levels. The top level contains two byte arrays: a signature, and a serialized
        // data structure containing the actual alert data.
        int startPos = cursor;
        content = readByteArray();
        signature = readByteArray();
        // Now we need to parse out the contents of the embedded structure. Rewind back to the start of the message.
        cursor = startPos;
        readVarInt();  // Skip the length field on the content array.
        // We're inside the embedded structure.
        version = readUint32();
        // Read the timestamps. Bitcoin uses seconds since the epoch.
        relayUntil = new Date(readUint64().longValue() * 1000);
        expiration = new Date(readUint64().longValue() * 1000);
        id = readUint32();
        cancel = readUint32();
        // Sets are serialized as <len><item><item><item>....
        long cancelSetSize = readVarInt();
        if (cancelSetSize < 0 || cancelSetSize > MAX_SET_SIZE) {
            throw new ProtocolException("Bad cancel set size: " + cancelSetSize);
        }
        // Using a hashset here is very inefficient given that this will normally be only one item. But Java doesn't
        // make it easy to do better. What we really want is just an array-backed set.
        cancelSet = new HashSet<Long>((int)cancelSetSize);
        for (long i = 0; i < cancelSetSize; i++) {
            cancelSet.add(readUint32());
        }
        minVer = readUint32();
        maxVer = readUint32();
        // Read the subver matching set.
        long subverSetSize = readVarInt();
        if (subverSetSize < 0 || subverSetSize > MAX_SET_SIZE) {
            throw new ProtocolException("Bad subver set size: " + subverSetSize);
        }
        matchingSubVers = new HashSet<String>((int)subverSetSize);
        for (long i = 0; i < subverSetSize; i++) {
            matchingSubVers.add(readStr());
        }
        priority = readUint32();
        comment = readStr();
        statusBar = readStr();
        reserved = readStr();
    }

    /**
     * Returns true if the digital signature attached to the message verifies. Don't do anything with the alert if it
     * doesn't verify, because that would allow arbitrary attackers to spam your users.
     */
    public boolean isSignatureValid() {
        return ECKey.verify(Utils.doubleDigest(content), signature, params.alertSigningKey);
    }

    @Override
    protected void parseLite() throws ProtocolException {
        // Do nothing, lazy parsing isn't useful for alerts.
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //  Field accessors.

    /**
     * The time at which the alert should stop being broadcast across the network. Note that you can still receive
     * the alert after this time from other nodes if the alert still applies to them or to you.
     */
    public Date getRelayUntil() {
        return relayUntil;
    }

    public void setRelayUntil(Date relayUntil) {
        this.relayUntil = relayUntil;
    }

    /**
     * The time at which the alert ceases to be relevant. It should not be presented to the user or app administrator
     * after this time.
     */
    public Date getExpiration() {
        return expiration;
    }

    public void setExpiration(Date expiration) {
        this.expiration = expiration;
    }

    /**
     * The numeric identifier of this alert. Each alert should have a unique ID, but the signer can choose any number.
     * If an alert is broadcast with a cancel field higher than this ID, this alert is considered cancelled.
     * @return uint32
     */
    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    /**
     * A marker that results in any alerts with an ID lower than this value to be considered cancelled.
     * @return uint32
     */
    public long getCancel() {
        return cancel;
    }

    public void setCancel(long cancel) {
        this.cancel = cancel;
    }

    /**
     * The inclusive lower bound on software versions that are considered for the purposes of this alert. The Satoshi
     * client compares this against a protocol version field, but as long as the subVer field is used to restrict it your
     * alerts could use any version numbers.
     * @return uint32
     */
    public long getMinVer() {
        return minVer;
    }

    public void setMinVer(long minVer) {
        this.minVer = minVer;
    }

    /**
     * The inclusive upper bound on software versions considered for the purposes of this alert. The Satoshi
     * client compares this against a protocol version field, but as long as the subVer field is used to restrict it your
     * alerts could use any version numbers.
     * @return
     */
    public long getMaxVer() {
        return maxVer;
    }

    public void setMaxVer(long maxVer) {
        this.maxVer = maxVer;
    }

    /**
     * Provides an integer ordering amongst simultaneously active alerts.
     * @return uint32
     */
    public long getPriority() {
        return priority;
    }

    public void setPriority(long priority) {
        this.priority = priority;
    }

    /**
     * This field is unused. It is presumably intended for the author of the alert to provide a justification for it
     * visible to protocol developers but not users.
     */
    public String getComment() {
        return comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    /**
     * A string that is intended to display in the status bar of the official GUI client. It contains the user-visible
     * message. English only.
     */
    public String getStatusBar() {
        return statusBar;
    }

    public void setStatusBar(String statusBar) {
        this.statusBar = statusBar;
    }

    /**
     * This field is never used.
     */
    public String getReserved() {
        return reserved;
    }

    public void setReserved(String reserved) {
        this.reserved = reserved;
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c/src/com/google/bitcoin/core/NetworkParameters.java;<<<<<<< MINE
=======
    /**
     * The alert signing key originally owned by Satoshi, and now passed on to Gavin along with a few others.
     */
    public static final byte[] SATOSHI_KEY = Hex.decode("04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284");

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c/src/com/google/bitcoin/core/NetworkParameters.java;<<<<<<< MINE
=======
    /**
     * The key used to sign {@link AlertMessage}s. You can use {@link ECKey#verify(byte[], byte[], byte[])} to verify
     * signatures using it.
     */
    public byte[] alertSigningKey;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c/src/com/google/bitcoin/core/NetworkParameters.java;<<<<<<< MINE
=======
        n.alertSigningKey = SATOSHI_KEY;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c/src/com/google/bitcoin/core/NetworkParameters.java;<<<<<<< MINE
=======
        n.alertSigningKey = SATOSHI_KEY;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_4f20749_ae32b4c/rev_4f20749-ae32b4c/src/main/java/org/junit/contrib/truth/subjects/CollectionSubject.java;<<<<<<< MINE
  public And<CollectionSubject<T>> contains(T item) {
=======
  /**
   * Attests that a Collection contains the provided object or fails.
   */
  public CollectionSubject<T> contains(T item) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_4f20749_ae32b4c/rev_4f20749-ae32b4c/src/main/java/org/junit/contrib/truth/subjects/Subject.java;<<<<<<< MINE
  /**
   * A method which wraps the current Subject concrete
   * subtype in a chaining "And" object.
   */
  protected final And<S> nextChain() {
    return chain;
  }
  
  public And<S> is(T other) {
    if (!(getSubject() == other)) {
      fail("is", other);
=======
  public Subject<T> is(Object other) {

    if (getSubject() == null) { 
      if(other != null) {
        fail("is", other);
      }
    } else {
      if (!getSubject().equals(other)) {
        fail("is", other);
      }
    }
    return this;
  }

  public Subject<T> isNull() {
    if (getSubject() != null) {
      failWithoutSubject("is null");
    }
    return this;
  }
  
  public Subject<T> isNotNull() {
    if (getSubject() == null) {
      failWithoutSubject("is not null");
    }
    return this;
  }

  public Subject<T> isEqualTo(Object other) {
    if (getSubject() == null) { 
      if(other != null) {
        fail("is equal to", other);
      }
    } else {
      if (!getSubject().equals(other)) {
        fail("is equal to", other);
      }
    }
    return this;
  }

  public Subject<T> isNotEqualTo(Object other) {
    if (getSubject() == null) { 
      if(other == null) {
        fail("is not equal to", other);
      }
    } else {
      if (getSubject().equals(other)) {
        fail("is not equal to", other);
      }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_4f20749_ae32b4c/rev_4f20749-ae32b4c/src/main/java/org/junit/contrib/truth/subjects/Subject.java;<<<<<<< MINE

  /**
   * A convenience class to allow for chaining in the fluent API
   * style, such that subjects can make propositions in series.  
   * i.e. ASSERT.that(blah).isNotNull().and().contains(b).and().isNotEmpty();
   */
  public static interface And<C> {
    /**
     * Returns the next object in the chain of anded objects.
     */
    C and();
  }
=======
  
  protected void failWithoutSubject(String verb) {
    String message = "Not true that ";
    message += "the subject " + verb;
    failureStrategy.fail(message);
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_4f20749_ae32b4c/rev_4f20749-ae32b4c/src/test/java/org/junit/contrib/truth/IntegerTest.java;<<<<<<< MINE
  @Test public void addition() {
    ASSERT.that(2 + 2).is(4).and().isBetween(3, 5);
=======
  @Test public void simpleEquality() {
    ASSERT.that(2 + 2).isEqualTo(4);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_78dc0b2_e299b19/rev_78dc0b2-e299b19/src/main/java/com/netflix/servo/jmx/DefaultMonitorRegistry.java;<<<<<<< MINE
/*
 * #%L
 * servo
 * %%
 * Copyright (C) 2011 Netflix
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package com.netflix.servo.jmx;

import java.util.Properties;

public class DefaultMonitorRegistry implements MonitorRegistry {

    private static final String REGISTRY_CLASS_PROP =
        "com.netflix.monitoring.registryClass";

    private static MonitorRegistry INSTANCE = new DefaultMonitorRegistry();

    private final MonitorRegistry mRegistry;

    public static MonitorRegistry getInstance() {
        return INSTANCE;
    }

    DefaultMonitorRegistry() {
        this(System.getProperties());
    }

    DefaultMonitorRegistry(Properties props) {
        String className = props.getProperty(REGISTRY_CLASS_PROP);
        if (className != null) {
            try {
                Class<?> c = Class.forName(className);
                mRegistry = (MonitorRegistry) c.newInstance();
            } catch (Throwable t) {
                throw new IllegalArgumentException(
                    "failed to create instance of class " + className, t);
            }
        } else {
            mRegistry = new JmxMonitorRegistry();
        }
    }

    public void registerObject(Object obj) {
        mRegistry.registerObject(obj);
    }

    public void unRegisterObject(Object obj) {
        mRegistry.unRegisterObject(obj);
    }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_d976c7e_8244a00/rev_d976c7e-8244a00/src/main/java/org/junit/contrib/truth/TestVerb.java;<<<<<<< MINE
import org.junit.contrib.truth.subjects.DefaultSubject;
import org.junit.contrib.truth.subjects.IntSubject;
=======
import org.junit.contrib.truth.subjects.IntegerSubject;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_d976c7e_8244a00/rev_d976c7e-8244a00/src/main/java/org/junit/contrib/truth/subjects/IntSubject.java;<<<<<<< MINE
/*
 * Copyright (c) 2011 David Saff
 * Copyright (c) 2011 Christian Gruber
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.junit.contrib.truth.subjects;

import org.junit.contrib.truth.FailureStrategy;

public class IntSubject extends Subject<IntSubject, Integer> {

  private static final String RANGE_BOUNDS_OUT_OF_ORDER_MSG = "Range inclusion parameter lower (%d) should not be greater than upper (%d)";

  public IntSubject(FailureStrategy failureStrategy, int i) {
    super(failureStrategy, i);
  }

  /**
   * Attests that a Subject<Integer> is inclusively within the {@code lower} and
   * {@code upper} bounds provided or fails.
   * 
   * @throws IllegalArgumentException
   *           if the lower bound is greater than the upper.
   */
  public And<IntSubject> isInclusivelyInRange(int lower, int upper) {
    if (lower > upper) {
      throw new IllegalArgumentException(String.format(
          RANGE_BOUNDS_OUT_OF_ORDER_MSG, lower, upper));
    }
    if (!(lower <= getSubject() && getSubject() <= upper)) {
      fail("is inclusively in range", lower, upper);
    }
    return nextChain();
  }

  /**
   * Attests that a Subject<Integer> is exclusively within the {@code lower} and
   * {@code upper} bounds provided or fails.
   * 
   * @throws IllegalArgumentException
   *           if the lower bound is greater than the upper.
   */
  public And<IntSubject> isBetween(int lower, int upper) {
    if (lower > upper) {
      throw new IllegalArgumentException(String.format(
          RANGE_BOUNDS_OUT_OF_ORDER_MSG, lower, upper));
    }
    if (!(lower < getSubject() && getSubject() < upper)) {
      fail("is in between", lower, upper);
    }
    return nextChain();
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_7a765fc_e22534f/rev_7a765fc-e22534f/src/sample/java/com/netflix/servo/sample/SimpleSample.java;<<<<<<< MINE
=======
/*
 * #%L
 * servo
 * %%
 * Copyright (C) 2011 - 2012 Netflix
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package com.netflix.servo.sample;

import com.netflix.servo.DefaultMonitorRegistry;
import com.netflix.servo.InjectableTag;
import com.netflix.servo.MonitorRegistry;
import com.netflix.servo.Tag;
import com.netflix.servo.annotations.DataSourceType;
import com.netflix.servo.annotations.Monitor;
import com.netflix.servo.annotations.MonitorTags;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * User: gorzell
 * Date: 1/6/12
 * Time: 12:45 PM
 */
public class SimpleSample {

    @Monitor(name = "SampleCounter", type = DataSourceType.COUNTER,
            description = "Sample counting monitor", tags = {
            "sample=simple"})
    public final AtomicInteger counter = new AtomicInteger(0);

    @Monitor(name = "SampleGauge", type = DataSourceType.GAUGE,
            description = "Sample gauge monitor", tags = {
            "sample=simple"})
    private long sampleGuage = 0;

    @MonitorTags
    public final List<Tag> tagList = new ArrayList<Tag>(10);

    public SimpleSample() {
    }

    public SimpleSample(Collection<Tag> tags) {
        tagList.addAll(tags);
    }
    
    public synchronized void setSampleGauage(long val){
        sampleGuage = val;
    }
    
    public synchronized long getSampleGuage(){
        return sampleGuage;
    }

    public static void main(String[] args) throws InterruptedException {
        List<Tag> tags = new ArrayList<Tag>(2);
        tags.add(InjectableTag.HOSTNAME);
        tags.add(InjectableTag.IP);
        
        SimpleSample sample = new SimpleSample(tags);

        DefaultMonitorRegistry.getInstance().registerObject(sample);
        
        while(true){
            sample.counter.incrementAndGet();
            sample.setSampleGauage(Math.round(Math.random()*1000));
            Thread.sleep(60000);
        }
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_7a765fc_e22534f/rev_7a765fc-e22534f/src/main/java/com/netflix/servo/publish/BaseMetricObserver.java;<<<<<<< MINE
=======
/*
 * #%L
 * servo
 * %%
 * Copyright (C) 2011 - 2012 Netflix
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package com.netflix.servo.publish;

import com.google.common.base.Preconditions;
import com.netflix.servo.annotations.DataSourceType;
import com.netflix.servo.annotations.Monitor;
import com.netflix.servo.annotations.MonitorId;

import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * User: gorzell
 * Date: 1/3/12
 * Time: 11:33 AM
 */
public abstract class BaseMetricObserver implements MetricObserver {
    @MonitorId
    protected final String name;
    @Monitor(name="UpdateCount", type= DataSourceType.COUNTER,
             description="Total number of times update has been called on "
                        +"the wrapped observer.")
    protected final AtomicInteger updateCount = new AtomicInteger(0);
    @Monitor(name="UpdateFailureCount", type= DataSourceType.COUNTER,
             description="Number of times the update call on the wrapped "
                        +"observer failed with an exception.")
    protected final AtomicInteger failedUpdateCount = new AtomicInteger(0);

    public BaseMetricObserver(String name) {
        this.name = Preconditions.checkNotNull(name);
    }

    public abstract void update(List<Metric> metrics);
    
    public String getName(){
        return this.name;
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_7a765fc_e22534f/rev_7a765fc-e22534f/src/main/java/com/netflix/servo/publish/MemoryMetricObserver.java;<<<<<<< MINE
=======
/*
 * #%L
 * servo
 * %%
 * Copyright (C) 2011 Netflix
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package com.netflix.servo.publish;

import com.google.common.base.Preconditions;

import com.google.common.collect.ImmutableList;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Keeps the last N observations in-memory.
 */
public final class MemoryMetricObserver extends BaseMetricObserver {

    private static final Logger LOGGER =
        LoggerFactory.getLogger(MemoryMetricObserver.class);

    private final List<Metric>[] mObservations;
    private int mNext;

    public MemoryMetricObserver() {
        this("unamed observer", 10);
    }

    @SuppressWarnings("unchecked")
    public MemoryMetricObserver(String name, int num) {
        super(name);
        mObservations = (List<Metric>[]) new List[num];
        mNext = 0;
    }

    public void update(List<Metric> metrics) {
        Preconditions.checkNotNull(metrics);
        mObservations[mNext] = metrics;
        mNext = (mNext + 1) % mObservations.length;
    }

    public List<List<Metric>> getObservations() {
        ImmutableList.Builder<List<Metric>> builder = ImmutableList.builder();
        int pos = mNext;
        for (int i = 0; i < mObservations.length; ++i) {
            if (mObservations[pos] != null) {
                builder.add(mObservations[pos]);
            }
            pos = (pos + 1) % mObservations.length;
        }
        return builder.build();
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_7a765fc_e22534f/rev_7a765fc-e22534f/src/main/java/com/netflix/servo/publish/AsyncMetricObserver.java;<<<<<<< MINE
=======
/*
 * #%L
 * servo
 * %%
 * Copyright (C) 2011 Netflix
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package com.netflix.servo.publish;

import com.google.common.base.Preconditions;
import com.netflix.servo.annotations.DataSourceType;
import com.netflix.servo.annotations.Monitor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * Wraps another observer and asynchronously updates it in the background. The
 * update call will always return immediately. If the queue fills up newer
 * updates will overwrite older updates.
 * <p/>
 * If an exception is thrown when calling update on wrapped observer it will
 * be logged, but otherwise ignored.
 */
public class AsyncMetricObserver extends BaseMetricObserver {

    private static final Logger log = LoggerFactory.getLogger(AsyncMetricObserver.class);

    private final MetricObserver wrappedObserver;

    private final int updateQueueSize;
    private final long expireTime;
    private final BlockingQueue<TimestampedUpdate> updateQueue;

    private final Thread updateProcessingThread;

    @Monitor(name = "UpdateExpiredCount", type = DataSourceType.COUNTER,
            description = "Number of times the update call was skipped because the update was expired")
    protected final AtomicInteger expiredUpdateCount = new AtomicInteger(0);

    public AsyncMetricObserver(String name, MetricObserver observer, int queueSize, long expireTime) {
        super(name);
        this.expireTime = expireTime;
        wrappedObserver = Preconditions.checkNotNull(observer);
        updateQueueSize = queueSize;
        Preconditions.checkArgument(queueSize >= 1,
                "invalid queueSize %d, size must be >= 1", updateQueueSize);

        updateQueue = new LinkedBlockingDeque<TimestampedUpdate>(updateQueueSize);

        String threadName = getClass().getSimpleName() + "-" + this.name;
        updateProcessingThread = new Thread(new UpdateProcessor(), threadName);
        updateProcessingThread.setDaemon(true);
        updateProcessingThread.start();
    }

    public AsyncMetricObserver(String name, MetricObserver observer) {
        this(name, observer, Integer.MAX_VALUE, Long.MAX_VALUE);
    }

    public AsyncMetricObserver(String name, MetricObserver observer, int queueSize) {
        this(name, observer, queueSize, Long.MAX_VALUE);
    }

    public AsyncMetricObserver(String name, MetricObserver observer, long expireTime) {
        this(name, observer, Integer.MAX_VALUE, expireTime);
    }

    public void update(List<Metric> metrics) {
        Preconditions.checkNotNull(metrics);
        TimestampedUpdate update = new TimestampedUpdate(System.currentTimeMillis(), metrics);
        boolean result = updateQueue.offer(update);
        while (!result) {
            updateQueue.remove();
            result = updateQueue.offer(update);
        }
    }

    private void processUpdate() {
        TimestampedUpdate update;
        try {
            update = updateQueue.take();

            long cutoff = System.currentTimeMillis() - expireTime;
            if (update.getTimestamp() < cutoff) {
                expiredUpdateCount.incrementAndGet();
                return;
            }

            wrappedObserver.update(update.getMetrics());
        } catch (InterruptedException ie){
            log.warn("Interrupted while adding to queue, update dropped");
            failedUpdateCount.incrementAndGet();
        } catch (Throwable t) {
            log.warn("update failed for downstream queue", t);
            failedUpdateCount.incrementAndGet();
        } finally {
            updateCount.incrementAndGet();
        }
    }

    private class UpdateProcessor implements Runnable {
        public void run() {
            while (true) {
                processUpdate();
            }
        }
    }

    private class TimestampedUpdate {
        private final long timestamp;
        private final List<Metric> metrics;

        public TimestampedUpdate(long timestamp, List<Metric> metrics) {
            this.timestamp = timestamp;
            this.metrics = metrics;
        }

        long getTimestamp() {
            return timestamp;
        }

        List<Metric> getMetrics() {
            return metrics;
        }
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_7a765fc_e22534f/rev_7a765fc-e22534f/src/main/java/com/netflix/servo/publish/FileMetricObserver.java;<<<<<<< MINE
=======
/*
 * #%L
 * servo
 * %%
 * Copyright (C) 2011 Netflix
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package com.netflix.servo.publish;

import com.google.common.base.Preconditions;
import com.google.common.io.Closeables;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;

import java.text.SimpleDateFormat;

import java.util.Date;
import java.util.List;
import java.util.TimeZone;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Writes observations to a file. The format is a basic text file with tabs
 * separating the fields.
 */
public final class FileMetricObserver extends BaseMetricObserver {

    private static final Logger LOGGER =
        LoggerFactory.getLogger(FileMetricObserver.class);

    private static final String FILE_DATE_FORMAT = "yyyy_dd_MM_HH_mm_ss_SSS";
    private static final String ISO_DATE_FORMAT = "yyyy-dd-MM'T'HH:mm:ss.SSS";

    private final File dir;

    private final SimpleDateFormat fileFormat;
    private final SimpleDateFormat isoFormat;

    public FileMetricObserver(String name, File dir) {
        this(name, dir, String.format("'%s'_%s'.log'", name, FILE_DATE_FORMAT));
    }

    public FileMetricObserver(String name, File dir, String namePattern) {
        super(name);
        this.dir = dir;
        fileFormat = new SimpleDateFormat(namePattern);
        fileFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
        isoFormat = new SimpleDateFormat(ISO_DATE_FORMAT);
        isoFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
    }

    public void update(List<Metric> metrics) {
        Preconditions.checkNotNull(metrics);
        File file = new File(dir, fileFormat.format(new Date()));
        Writer out = null;
        try {
            LOGGER.debug("writing %d metrics to file %s", metrics.size(), file);
            out = new FileWriter(file, true);
            for (Metric m : metrics) {
                String timestamp = isoFormat.format(new Date(m.timestamp()));
                out.append(m.name()).append('\t')
                   .append(m.tags().toString()).append('\t')
                   .append(timestamp).append('\t')
                   .append(m.value().toString()).append('\n');
            }
        } catch (IOException e) {
            LOGGER.error("failed to write update to file " + file, e);
        } finally {
            Closeables.closeQuietly(out);
        }
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_7a765fc_e22534f/rev_7a765fc-e22534f/src/test/java/com/netflix/servo/test/TestMonitor.java;<<<<<<< MINE
=======
/*
 * #%L
 * servo
 * %%
 * Copyright (C) 2011 - 2012 Netflix
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package com.netflix.servo.test;

import com.netflix.servo.Tag;
import com.netflix.servo.annotations.DataSourceType;
import com.netflix.servo.annotations.Monitor;
import com.netflix.servo.annotations.MonitorId;
import com.netflix.servo.annotations.MonitorTags;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * User: gorzell
 * Date: 1/6/12
 * Time: 12:30 PM
 */
public class TestMonitor {
    
    @Monitor(name="TestMonitor", type = DataSourceType.COUNTER,
            description = "Monitor for doing testing", tags = {
            "tag1=foo", "tag2=bar"})
    public final AtomicInteger counter = new AtomicInteger(0);
    
    @MonitorId
    public final String name = "testMonitor";
    
    @MonitorTags
    public final List<Tag> tagList = new ArrayList<Tag>(10);
    
    public TestMonitor(){}
    
    public TestMonitor(Collection<Tag> tags){
        tagList.addAll(tags);
    }

    public void increment(){
        counter.incrementAndGet();
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_05a141c_0767b54/rev_05a141c-0767b54/src/main/java/org/junit/contrib/truth/subjects/IntegerSubject.java;<<<<<<< MINE
  public And<IntegerSubject> isInclusivelyInRange(int lower, int upper) {
    if (lower > upper) {
      throw new IllegalArgumentException(String.format(
          RANGE_BOUNDS_OUT_OF_ORDER_MSG, lower, upper));
    }
=======
  public Subject<Long> isInclusivelyInRange(long lower, long upper) {
    ensureOrderedBoundaries(lower, upper);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_05a141c_0767b54/rev_05a141c-0767b54/src/main/java/org/junit/contrib/truth/subjects/IntegerSubject.java;<<<<<<< MINE
  public And<IntegerSubject> isBetween(int lower, int upper) {
=======
  public Subject<Long> isBetween(long lower, long upper) {
    ensureOrderedBoundaries(lower, upper);
    if (!(lower < getSubject() && getSubject() < upper)) {
      fail("is in between", lower, upper);
    }
    return this;
  }

  /**
   * Guards against inverted lower/upper boundaries, and throws if 
   * they are so inverted.
   */
  private void ensureOrderedBoundaries(long lower, long upper) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_05a141c_0767b54/rev_05a141c-0767b54/src/main/java/org/junit/contrib/truth/subjects/IntegerSubject.java;<<<<<<< MINE
    if (!(lower < getSubject() && getSubject() < upper)) {
      fail("is in between", lower, upper);
    }
    return nextChain();
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_2319e19_08f3409/rev_2319e19-08f3409/src/main/java/com/netflix/servo/InjectableTag.java;<<<<<<< MINE
/*
 * #%L
 * servo
 * %%
 * Copyright (C) 2011 Netflix
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package com.netflix.servo;

import java.net.InetAddress;
import java.net.UnknownHostException;

/**
 * User: gorzell
 * Date: 12/27/11
 * Time: 5:35 PM
 */
public enum InjectableTag implements Tag {
    HOSTNAME("hostname", getHostName()),
    IP("ip", getIp());

    private final String key;
    private final String value;
    private static InetAddress address;

    static {
        try {
            address = InetAddress.getLocalHost();
        } catch (UnknownHostException e) {
            address = null;
        }
    }

    private InjectableTag(String key, String val) {
        this.key = key;
        this.value = val;
    }

    public String getKey(){
        return key;
    }

    public String getValue() {
        return value;
    }

    private static String getHostName() {
        return address != null ? address.getHostName() : "unkownHost";
    }

    private static String getIp() {
        return address != null ? address.getHostAddress() : "unknownHost";
    }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_2319e19_08f3409/rev_2319e19-08f3409/src/main/java/com/netflix/servo/jmx/MetadataMBean.java;<<<<<<< MINE
/*
 * #%L
 * servo
 * %%
 * Copyright (C) 2011 Netflix
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package com.netflix.servo.jmx;

import java.util.Map;

import javax.management.Attribute;
import javax.management.AttributeList;
import javax.management.AttributeNotFoundException;
import javax.management.DynamicMBean;
import javax.management.MBeanException;
import javax.management.MBeanInfo;
import javax.management.ObjectName;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

class MetadataMBean implements DynamicMBean {

    private static final Logger LOGGER =
        LoggerFactory.getLogger(MetadataMBean.class);

    private final ObjectName mName;

    private final MBeanInfo mBeanInfo;

    private final Map<String,MonitoredAttribute> mAttrs;

    MetadataMBean(
            ObjectName name,
            MBeanInfo beanInfo,
            Map<String,MonitoredAttribute> attrs) {
        mName = name;
        mBeanInfo = beanInfo;
        mAttrs = attrs;
    }

    public ObjectName getObjectName() {
        return mName;
    }

    public Object getAttribute(String attribute)
            throws AttributeNotFoundException, MBeanException {
        MonitoredAttribute attr = mAttrs.get(attribute);
        if (attr == null) {
            throw new AttributeNotFoundException(attribute);
        }
        try {
            return attr.metadata();
        } catch (Exception e) {
            throw new MBeanException(e);
        }
    }

    public AttributeList getAttributes(String[] attributes) {
        AttributeList list = new AttributeList();
        for (String a : attributes) {
            try {
                list.add(new Attribute(a, getAttribute(a)));
            } catch (Exception e) {
                LOGGER.warn("getAttribute() failed for " + a, e);
            }
        }
        return list;
    }

    public MBeanInfo getMBeanInfo() {
        return mBeanInfo;
    }

    public Object invoke(
            String actionName, Object[] params, String[] signature) {
        throw new UnsupportedOperationException(
            "invoke(...) is not supported on this mbean");
    }

    public void setAttribute(Attribute attribute) {
        throw new UnsupportedOperationException(
            "setAttribute(...) is not supported on this mbean");
    }

    public AttributeList setAttributes(AttributeList attributes) {
        throw new UnsupportedOperationException(
            "setAttributes(...) is not supported on this mbean");
    }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_2319e19_08f3409/rev_2319e19-08f3409/src/main/java/com/netflix/servo/publish/AsyncMetricObserver.java;<<<<<<< MINE
/*
 * #%L
 * servo
 * %%
 * Copyright (C) 2011 Netflix
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package com.netflix.servo.publish;

import com.google.common.base.Preconditions;
import com.netflix.servo.annotations.DataSourceType;
import com.netflix.servo.annotations.Monitor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * Wraps another observer and asynchronously updates it in the background. The
 * update call will always return immediately. If the queue fills up newer
 * updates will overwrite older updates.
 * <p/>
 * If an exception is thrown when calling update on wrapped observer it will
 * be logged, but otherwise ignored.
 */
public class AsyncMetricObserver extends BaseMetricObserver {

    private static final Logger log = LoggerFactory.getLogger(AsyncMetricObserver.class);

    private final MetricObserver wrappedObserver;

    private final int updateQueueSize;
    private final long expireTime;
    private final BlockingQueue<TimestampedUpdate> updateQueue;

    private final Thread updateProcessingThread;

    @Monitor(name = "UpdateExpiredCount", type = DataSourceType.COUNTER,
            description = "Number of times the update call was skipped because the update was expired")
    protected final AtomicInteger expiredUpdateCount = new AtomicInteger(0);

    public AsyncMetricObserver(String name, MetricObserver observer, int queueSize, long expireTime) {
        super(name);
        this.expireTime = expireTime;
        wrappedObserver = Preconditions.checkNotNull(observer);
        updateQueueSize = queueSize;
        Preconditions.checkArgument(queueSize >= 1,
                "invalid queueSize %d, size must be >= 1", updateQueueSize);

        updateQueue = new LinkedBlockingDeque<TimestampedUpdate>(updateQueueSize);

        String threadName = getClass().getSimpleName() + "-" + this.name;
        updateProcessingThread = new Thread(new UpdateProcessor(), threadName);
        updateProcessingThread.setDaemon(true);
        updateProcessingThread.start();
    }

    public AsyncMetricObserver(String name, MetricObserver observer) {
        this(name, observer, Integer.MAX_VALUE, Long.MAX_VALUE);
    }

    public AsyncMetricObserver(String name, MetricObserver observer, int queueSize) {
        this(name, observer, queueSize, Long.MAX_VALUE);
    }

    public AsyncMetricObserver(String name, MetricObserver observer, long expireTime) {
        this(name, observer, Integer.MAX_VALUE, expireTime);
    }

    public void update(List<Metric> metrics) {
        Preconditions.checkNotNull(metrics);
        TimestampedUpdate update = new TimestampedUpdate(System.currentTimeMillis(), metrics);
        boolean result = updateQueue.offer(update);
        while (!result) {
            updateQueue.remove();
            result = updateQueue.offer(update);
        }
    }

    private void processUpdate() {
        TimestampedUpdate update;
        try {
            update = updateQueue.take();

            long cutoff = System.currentTimeMillis() - expireTime;
            if (update.getTimestamp() < cutoff) {
                expiredUpdateCount.incrementAndGet();
                return;
            }

            wrappedObserver.update(update.getMetrics());
        } catch (InterruptedException ie){
            log.warn("Interrupted while adding to queue, update dropped");
            failedUpdateCount.incrementAndGet();
        } catch (Throwable t) {
            log.warn("update failed for downstream queue", t);
            failedUpdateCount.incrementAndGet();
        } finally {
            updateCount.incrementAndGet();
        }
    }

    private class UpdateProcessor implements Runnable {
        public void run() {
            while (true) {
                processUpdate();
            }
        }
    }

    private static class TimestampedUpdate {
        private final long timestamp;
        private final List<Metric> metrics;

        public TimestampedUpdate(long timestamp, List<Metric> metrics) {
            this.timestamp = timestamp;
            this.metrics = metrics;
        }

        long getTimestamp() {
            return timestamp;
        }

        List<Metric> getMetrics() {
            return metrics;
        }
    }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_2319e19_08f3409/rev_2319e19-08f3409/src/main/java/com/netflix/servo/publish/cloudwatch/CloudWatchMetricObserver.java;<<<<<<< MINE
/*
 * #%L
 * servo
 * %%
 * Copyright (C) 2011 Netflix
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package com.netflix.servo.publish.cloudwatch;

import com.google.common.base.Preconditions;

import com.netflix.servo.publish.BaseMetricObserver;
import com.netflix.servo.publish.Metric;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Writes observations to Amazon's CloudWatch.
 */
public class CloudWatchMetricObserver extends BaseMetricObserver {

    private static final Logger log =
        LoggerFactory.getLogger(CloudWatchMetricObserver.class);

    public CloudWatchMetricObserver(String name) {
        super(name);
    }

    public void update(List<Metric> metrics) {
        Preconditions.checkNotNull(metrics);
    }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_2319e19_08f3409/rev_2319e19-08f3409/src/main/java/com/netflix/servo/aws/AwsInjectableTag.java;<<<<<<< MINE
/*
 * #%L
 * servo
 * %%
 * Copyright (C) 2011 Netflix
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package com.netflix.servo.aws;

import com.google.common.io.Closeables;

import com.netflix.servo.Tag;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;

/**
 * User: gorzell
 * Date: 12/27/11
 * Time: 5:47 PM
 */
public enum AwsInjectableTag implements Tag {
    AUTOSCALE_GROUP("autoScalingGroup", getAutoScaleGroup()),
    INSTANCE_ID("instanceId", getInstanceId());

    private final String key;
    private final String value;

    private AwsInjectableTag(String key, String val) {
        this.key = key;
        this.value = val;
    }

    private static final Logger log = LoggerFactory.getLogger(AwsInjectableTag.class);

    private static final String metaDataUrl = "http://169.254.169.254/latest/meta-data";

    public String getKey() {
        return key;
    }

    public String getValue() {
        return value;
    }

    private static String getAutoScaleGroup() {
        return "";
    }

    private static String getInstanceId() {
        return getUrlValue("/instance-id");
    }

    private static String getUrlValue(String path) {
        BufferedReader reader = null;
        try {
            URL url = new URL(metaDataUrl + path);
            reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line  = null;
            StringBuilder stringBuilder = new StringBuilder();
            String ls = System.getProperty("line.separator");
            while( ( line = reader.readLine() ) != null ) {
                stringBuilder.append( line );
                stringBuilder.append( ls );
            }
            return stringBuilder.toString();
        } catch (Exception e) {
            log.warn("", e);
            return "uknown";
        } finally {
            Closeables.closeQuietly(reader);
        }
    }

}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_de0a389_b6b98e7/rev_de0a389-b6b98e7/src/main/java/org/junit/contrib/truth/subjects/IntegerSubject.java;<<<<<<< MINE
public class IntegerSubject extends Subject<IntegerSubject, Long> {
=======
/**
 * Propositions for Integral numeric subjects
 * 
 * @author David Saff
 * @author Christian Gruber (cgruber@israfil.net)
 */
public class IntegerSubject extends Subject<Long> {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_de0a389_b6b98e7/rev_de0a389-b6b98e7/src/main/java/org/junit/contrib/truth/subjects/Subject.java;<<<<<<< MINE
public class Subject<S extends Subject<S,T>,T> {
  
=======
/**
 * Propositions for arbitrarily typed subjects and for properties
 * of Object
 * 
 * @author David Saff
 * @author Christian Gruber (cgruber@israfil.net)
 */
public class Subject<T> {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_de0a389_b6b98e7/rev_de0a389-b6b98e7/src/main/java/org/junit/contrib/truth/subjects/StringSubject.java;<<<<<<< MINE
public class StringSubject extends Subject<StringSubject, String> {
=======
/**
 * Propositions for String subjects
 * 
 * @author David Saff
 * @author Christian Gruber (cgruber@israfil.net)
 */
public class StringSubject extends Subject<String> {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_fc7c719_f23a28a/rev_fc7c719-f23a28a/servo-core/src/main/java/com/netflix/servo/annotations/DataSourceType.java;<<<<<<< MINE
    /**
     * A gauge is for numeric values that can be sampled without modification.
     * Examples of metrics that should be gauges are things like current
     * temperature, number of open connections, disk usage, etc.
     */
=======
    /**
     * GAUGE does not save the rate of change. The value measured at a point
     * in time is stored. Examples are: CPU, memory, and disk usage
     */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_fc7c719_f23a28a/rev_fc7c719-f23a28a/servo-core/src/main/java/com/netflix/servo/annotations/DataSourceType.java;<<<<<<< MINE

    /**
     * A counter is for numeric values that get incremented when some event
     * occurs. Counters will be sampled and converted into a rate of change
     * per second. Counter values should be monotonically increasing, i.e.,
     * the value should not decrease.
     */
=======

    /**
     * COUNTER will save the rate of change of the value over a step period.
     * This assumes that the value is always increasing (the difference between
     * the current and the previous value is greater than 0).
     */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_fc7c719_f23a28a/rev_fc7c719-f23a28a/servo-core/src/main/java/com/netflix/servo/annotations/DataSourceType.java;<<<<<<< MINE

    /**
     * An informational attribute is for values that might be useful for
     * debugging, but will not be collected as metrics for monitoring purposes.
     * These values are made available in JMX.
     */
=======

    /**
     * Not part of RRD DST, but useful for debugging. This will not be monitoring
     * by the NOC.
     */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_fc7c719_f23a28a/rev_fc7c719-f23a28a/servo-core/src/main/java/com/netflix/servo/aws/AwsInjectableTag.java;<<<<<<< MINE
/*
 * #%L
 * servo
 * %%
 * Copyright (C) 2011 Netflix
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package com.netflix.servo.aws;

import com.google.common.io.Closeables;

import com.netflix.servo.Tag;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;

/**
 * User: gorzell
 * Date: 12/27/11
 * Time: 5:47 PM
 */
public enum AwsInjectableTag implements Tag {
    AUTOSCALE_GROUP("autoScalingGroup", getAutoScaleGroup()),
    INSTANCE_ID("instanceId", getInstanceId());

    private final String key;
    private final String value;

    private AwsInjectableTag(String key, String val) {
        this.key = key;
        this.value = val;
    }

    private static final Logger log = LoggerFactory.getLogger(AwsInjectableTag.class);

    private static final String metaDataUrl = "http://169.254.169.254/latest/meta-data";

    public String getKey() {
        return key;
    }

    public String getValue() {
        return value;
    }

    private static String getAutoScaleGroup() {
        return "";
    }

    private static String getInstanceId() {
        return getUrlValue("/instance-id");
    }

    private static String getUrlValue(String path) {
        BufferedReader reader = null;
        try {
            URL url = new URL(metaDataUrl + path);
            reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line  = null;
            StringBuilder stringBuilder = new StringBuilder();
            String ls = System.getProperty("line.separator");
            while( ( line = reader.readLine() ) != null ) {
                stringBuilder.append( line );
                stringBuilder.append( ls );
            }
            return stringBuilder.toString();
        } catch (Exception e) {
            log.warn("", e);
            return "uknown";
        } finally {
            Closeables.closeQuietly(reader);
        }
    }

}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_456b170_980af43/rev_456b170-980af43/servo-cloudwatch/src/main/java/com/netflix/servo/aws/AwsInjectableTag.java;<<<<<<< MINE

=======
import com.netflix.servo.aws.constants.Dimensions;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_46f8c84_59b6817/rev_46f8c84-59b6817/src/test/java/org/junit/contrib/truth/ExpectTest.java;<<<<<<< MINE
import org.junit.runners.model.FrameworkMethod;
import org.junit.runners.model.Statement;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_46f8c84_59b6817/rev_46f8c84-59b6817/src/test/java/org/junit/contrib/truth/AllTests.java;<<<<<<< MINE
import org.junit.contrib.truth.delegatetest.DelegationTest;
import org.junit.contrib.truth.extensiontest.ExtensionTest;
=======
import org.junit.contrib.truth.extensiontest.ExtensionTest;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_46f8c84_59b6817/rev_46f8c84-59b6817/src/test/java/org/junit/contrib/truth/AllTests.java;<<<<<<< MINE
    SubjectTest.class,
    ExtensionTest.class,
    DelegationTest.class
=======
    SubjectTest.class,
    ExtensionTest.class
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_697c3bb_64c19d6/rev_697c3bb-64c19d6/servo-core/src/sample/java/com/netflix/servo/sample/SimpleSample.java;<<<<<<< MINE
/*
 * #%L
 * servo
 * %%
 * Copyright (C) 2011 - 2012 Netflix
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package com.netflix.servo.sample;

import com.netflix.servo.*;
import com.netflix.servo.BasicTagList;
import com.netflix.servo.DefaultMonitorRegistry;
import com.netflix.servo.InjectableTag;
import com.netflix.servo.Tag;
import com.netflix.servo.TagList;
import com.netflix.servo.annotations.DataSourceType;
import com.netflix.servo.annotations.Monitor;
import com.netflix.servo.annotations.MonitorTags;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * Simple Sample Code for getting a monitor into JMX.
 */
public class SimpleSample {

    @Monitor(name = "SampleCounter", type = DataSourceType.COUNTER,
            description = "Sample counting monitor", tags = {
            "sample=simple"})
    public final AtomicInteger counter = new AtomicInteger(0);

    @Monitor(name = "SampleGauge", type = DataSourceType.GAUGE,
            description = "Sample gauge monitor", tags = {
            "sample=simple"})
    private long sampleGuage = 0;

    @MonitorTags
    public TagList tagList = BasicTagList.EMPTY;

    public SimpleSample() {
    }

    public SimpleSample(Collection<Tag> tags) {
        tagList = new BasicTagList(tags);
    }

    public SimpleSample(TagList tags){
        tagList = tags;
    }

    public synchronized void setSampleGauage(long val){
        sampleGuage = val;
    }

    public synchronized long getSampleGuage(){
        return sampleGuage;
    }

    public static void main(String[] args) throws InterruptedException {
        List<Tag> tags = new ArrayList<Tag>(2);
        tags.add(InjectableTag.HOSTNAME);
        tags.add(InjectableTag.IP);

        SimpleSample sample = new SimpleSample(tags);

        DefaultMonitorRegistry.getInstance().registerObject(sample);

        while(true){
            sample.counter.incrementAndGet();
            sample.setSampleGauage(Math.round(Math.random()*1000));
            Thread.sleep(60000);
        }
    }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_d7a2ff6_db7ed46/rev_d7a2ff6-db7ed46/src/main/java/org/junit/contrib/truth/TestVerb.java;<<<<<<< MINE
import com.google.common.annotations.GwtCompatible;

=======
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_d7a2ff6_db7ed46/rev_d7a2ff6-db7ed46/src/main/java/org/junit/contrib/truth/TestVerb.java;<<<<<<< MINE
import java.util.Collection;
import java.util.List;

@GwtCompatible
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_d7a2ff6_db7ed46/rev_d7a2ff6-db7ed46/src/main/java/org/junit/contrib/truth/subjects/CollectionSubject.java;<<<<<<< MINE
import com.google.common.annotations.GwtCompatible;

import org.junit.contrib.truth.FailureStrategy;

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_d7a2ff6_db7ed46/rev_d7a2ff6-db7ed46/src/main/java/org/junit/contrib/truth/subjects/CollectionSubject.java;<<<<<<< MINE
@GwtCompatible
public class CollectionSubject<S extends CollectionSubject<S, T, C>, T, C extends Collection<T>> extends Subject<S, C> {
=======
import org.junit.contrib.truth.FailureStrategy;

public class CollectionSubject<S extends CollectionSubject<S, T, C>, T, C extends Collection<T>> extends IterableSubject<S, T, C> {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_d7a2ff6_db7ed46/rev_d7a2ff6-db7ed46/src/main/java/org/junit/contrib/truth/subjects/CollectionSubject.java;<<<<<<< MINE
  CollectionSubject(FailureStrategy failureStrategy, C list) {
=======
  // TODO: Arguably this should even be package private
  protected CollectionSubject(FailureStrategy failureStrategy, C list) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_d7a2ff6_db7ed46/rev_d7a2ff6-db7ed46/src/main/java/org/junit/contrib/truth/subjects/ListSubject.java;<<<<<<< MINE
import com.google.common.annotations.GwtCompatible;

import org.junit.contrib.truth.FailureStrategy;

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_d7a2ff6_db7ed46/rev_d7a2ff6-db7ed46/src/main/java/org/junit/contrib/truth/subjects/ListSubject.java;<<<<<<< MINE
@GwtCompatible
=======
import org.junit.contrib.truth.FailureStrategy;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_ce59b53_1084df7/rev_ce59b53-1084df7/servo-core/src/main/java/com/netflix/servo/examples/JvmMetricExample.java;<<<<<<< MINE
=======
import com.netflix.servo.publish.CounterToRateMetricTransform;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_ce59b53_1084df7/rev_ce59b53-1084df7/servo-core/src/main/java/com/netflix/servo/examples/JvmMetricExample.java;<<<<<<< MINE
=======
        // Sampling interval
        long samplingInterval = 10;
        TimeUnit samplingUnit = TimeUnit.SECONDS;

        // Transform used to convert counter metrics into a rate per second
        MetricObserver transform = new CounterToRateMetricTransform(
            observer, 2 * samplingInterval, samplingUnit);

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_ce59b53_1084df7/rev_ce59b53-1084df7/servo-core/src/main/java/com/netflix/servo/examples/JvmMetricExample.java;<<<<<<< MINE
        PollRunnable task = new PollRunnable(poller, filter, observer);
=======
        PollRunnable task = new PollRunnable(poller, filter, transform);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_ce59b53_1084df7/rev_ce59b53-1084df7/servo-core/src/main/java/com/netflix/servo/examples/JvmMetricExample.java;<<<<<<< MINE
        scheduler.addPoller(task, 10, TimeUnit.SECONDS);
=======
        scheduler.addPoller(task, samplingInterval, samplingUnit);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_ce59b53_1084df7/rev_ce59b53-1084df7/servo-core/src/main/java/com/netflix/servo/examples/JvmMetricExample.java;<<<<<<< MINE
            Thread.sleep(1000);
=======
            Thread.sleep(samplingUnit.toMillis(samplingInterval));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_ce59b53_1084df7/rev_ce59b53-1084df7/servo-core/src/main/java/com/netflix/servo/annotations/AnnotatedObject.java;<<<<<<< MINE
import com.google.common.collect.ImmutableList;
import com.netflix.servo.TagList;
=======
import com.google.common.collect.ImmutableList;
import com.netflix.servo.tag.TagList;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_ce59b53_1084df7/rev_ce59b53-1084df7/servo-core/src/main/java/com/netflix/servo/annotations/AnnotatedObject.java;<<<<<<< MINE
        attrs = AnnotationUtils.getMonitoredAttributes(obj);
=======
        List<AnnotatedAttribute> attributes =
            AnnotationUtils.getMonitoredAttributes(obj);
        ImmutableList.Builder<AnnotatedAttribute> builder =
            ImmutableList.builder();
        for (AnnotatedAttribute attr : attributes) {
            builder.add(attr.copy(tags));
        }
        attrs = builder.build();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_ce59b53_1084df7/rev_ce59b53-1084df7/servo-core/src/main/java/com/netflix/servo/publish/CounterToRateMetricTransform.java;<<<<<<< MINE
/*
 * #%L
 * servo
 * %%
 * Copyright (C) 2011 Netflix
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package com.netflix.servo.publish;

import com.google.common.base.Preconditions;
import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;
import com.google.common.collect.Lists;
import com.google.common.io.Closeables;
import com.netflix.servo.Metric;
import com.netflix.servo.MetricConfig;
import com.netflix.servo.Tag;
import com.netflix.servo.TagList;
import com.netflix.servo.annotations.DataSourceType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.concurrent.TimeUnit;

/**
 * Converts counter metrics into a rate per second. The rate is calculated by
 * comparing two samples of given metric and looking at the delta. Since two
 * samples are needed to calculate the rate, no value will be sent to the
 * wrapped observer until a second sample arrives. If a given metric is not
 * updated within a given heartbeat interval, the previous cached value for the
 * counter will be dropped such that if a new sample comes in it will be
 * treated as the first sample for that metric.
 *
 * <p>Counters should be monotonically increasing values. If a counter value
 * decreases from one sample to the next, then we will assume the counter value
 * was reset and send a rate of 0. This is similar to the RRD concept of
 * type DERIVE with a min of 0.
 */
public final class CounterToRateMetricTransform implements MetricObserver {

    private static final Logger LOGGER =
        LoggerFactory.getLogger(CounterToRateMetricTransform.class);

    private final MetricObserver observer;
    private final Cache<MetricConfig,CounterValue> cache;

    /**
     * Creates a new instance with the specified heartbeat interval. The
     * heartbeat should be some multiple of the sampling interval used when
     * collecting the metrics.
     */
    public CounterToRateMetricTransform(
            MetricObserver observer, long heartbeat, TimeUnit unit) {
        this.observer = observer;
        this.cache = CacheBuilder.newBuilder()
            .expireAfterWrite(heartbeat, unit)
            .build();
    }

    /** {@inheritDoc} */
    public String getName() {
        return getClass().getSimpleName() + "-" + observer.getName();
    }

    /** {@inheritDoc} */
    public void update(List<Metric> metrics) {
        Preconditions.checkNotNull(metrics);
        List<Metric> newMetrics = Lists.newArrayList();
        for (Metric m : metrics) {
            if (isCounter(m)) {
                CounterValue current = new CounterValue(m);
                CounterValue prev = cache.getIfPresent(m.getConfig());
                if (prev != null) {
                    Metric rate = new Metric(
                        m.getConfig(),
                        m.getTimestamp(),
                        current.computeRate(prev));
                    newMetrics.add(rate);
                }
                cache.put(m.getConfig(), current);
            } else {
                newMetrics.add(m);
            }
        }
        observer.update(newMetrics);
    }

    /**
     * Clear all cached state of previous counter values.
     */
    public void reset() {
        cache.invalidateAll();
    }

    private boolean isCounter(Metric m) {
        TagList tags = m.getConfig().getTags();
        Tag type = tags.getTag(DataSourceType.KEY);
        String counter = DataSourceType.COUNTER.name();
        return (type != null && counter.equals(type.getValue()));
    }

    private static class CounterValue {
        private final long timestamp;
        private final double value;

        public CounterValue(long timestamp, double value) {
            this.timestamp = timestamp;
            this.value = value;
        }

        public CounterValue(Metric m) {
            this(m.getTimestamp(), m.getValue().doubleValue());
        }

        public double computeRate(CounterValue prev) {
            double duration = (timestamp - prev.timestamp) / 1000.0;
            double delta = value - prev.value;
            return (duration <= 0.0 || delta <= 0.0) ? 0.0 : delta / duration;
        }
    }
}=======
/*
 * #%L
 * servo
 * %%
 * Copyright (C) 2011 Netflix
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package com.netflix.servo.publish;

import com.google.common.base.Preconditions;
import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;
import com.google.common.collect.Lists;
import com.netflix.servo.Metric;
import com.netflix.servo.MetricConfig;
import com.netflix.servo.tag.Tag;
import com.netflix.servo.tag.TagList;
import com.netflix.servo.annotations.DataSourceType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.concurrent.TimeUnit;

/**
 * Converts counter metrics into a rate per second. The rate is calculated by
 * comparing two samples of given metric and looking at the delta. Since two
 * samples are needed to calculate the rate, no value will be sent to the
 * wrapped observer until a second sample arrives. If a given metric is not
 * updated within a given heartbeat interval, the previous cached value for the
 * counter will be dropped such that if a new sample comes in it will be
 * treated as the first sample for that metric.
 *
 * <p>Counters should be monotonically increasing values. If a counter value
 * decreases from one sample to the next, then we will assume the counter value
 * was reset and send a rate of 0. This is similar to the RRD concept of
 * type DERIVE with a min of 0.
 */
public final class CounterToRateMetricTransform implements MetricObserver {

    private static final Logger LOGGER =
        LoggerFactory.getLogger(CounterToRateMetricTransform.class);

    private final MetricObserver observer;
    private final Cache<MetricConfig,CounterValue> cache;

    /**
     * Creates a new instance with the specified heartbeat interval. The
     * heartbeat should be some multiple of the sampling interval used when
     * collecting the metrics.
     */
    public CounterToRateMetricTransform(
            MetricObserver observer, long heartbeat, TimeUnit unit) {
        this.observer = observer;
        this.cache = CacheBuilder.newBuilder()
            .expireAfterWrite(heartbeat, unit)
            .build();
    }

    /** {@inheritDoc} */
    public String getName() {
        return getClass().getSimpleName() + "-" + observer.getName();
    }

    /** {@inheritDoc} */
    public void update(List<Metric> metrics) {
        Preconditions.checkNotNull(metrics);
        List<Metric> newMetrics = Lists.newArrayList();
        for (Metric m : metrics) {
            if (isCounter(m)) {
                CounterValue current = new CounterValue(m);
                CounterValue prev = cache.getIfPresent(m.getConfig());
                if (prev != null) {
                    Metric rate = new Metric(
                        m.getConfig(),
                        m.getTimestamp(),
                        current.computeRate(prev));
                    newMetrics.add(rate);
                }
                cache.put(m.getConfig(), current);
            } else {
                newMetrics.add(m);
            }
        }
        observer.update(newMetrics);
    }

    /**
     * Clear all cached state of previous counter values.
     */
    public void reset() {
        cache.invalidateAll();
    }

    private boolean isCounter(Metric m) {
        TagList tags = m.getConfig().getTags();
        Tag type = tags.getTag(DataSourceType.KEY);
        String counter = DataSourceType.COUNTER.name();
        return (type != null && counter.equals(type.getValue()));
    }

    private static class CounterValue {
        private final long timestamp;
        private final double value;

        public CounterValue(long timestamp, double value) {
            this.timestamp = timestamp;
            this.value = value;
        }

        public CounterValue(Metric m) {
            this(m.getTimestamp(), m.getValue().doubleValue());
        }

        public double computeRate(CounterValue prev) {
            double duration = (timestamp - prev.timestamp) / 1000.0;
            double delta = value - prev.value;
            return (duration <= 0.0 || delta <= 0.0) ? 0.0 : delta / duration;
        }
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_ce59b53_1084df7/rev_ce59b53-1084df7/servo-core/src/test/java/com/netflix/servo/publish/CounterToRateMetricTransformTest.java;<<<<<<< MINE
/*
 * #%L
 * servo
 * %%
 * Copyright (C) 2011 - 2012 Netflix
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package com.netflix.servo.publish;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.Maps;
import com.netflix.servo.BasicTagList;
import com.netflix.servo.Metric;
import com.netflix.servo.TagList;
import com.netflix.servo.annotations.DataSourceType;
import org.testng.annotations.Test;

import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import static com.netflix.servo.BasicTagList.*;
import static org.testng.Assert.*;

public class CounterToRateMetricTransformTest {

    private static final TagList GAUGE =
        BasicTagList.copyOf(DataSourceType.GAUGE);

    private static final TagList COUNTER =
        BasicTagList.copyOf(DataSourceType.COUNTER);

    private List<Metric> mkList(long ts, int value) {
        return ImmutableList.of(
            new Metric("m1", EMPTY, ts, value),
            new Metric("m2", GAUGE, ts, value),
            new Metric("m3", COUNTER, ts, value)
        );
    }

    private Map<String,Double> mkMap(List<List<Metric>> updates) {
        Map<String,Double> map = Maps.newHashMap();
        for (Metric m : updates.get(0)) {
            map.put(m.getConfig().getName(), m.getValue().doubleValue());
        }
        return map;
    }

    @Test
    public void testSimpleRate() throws Exception {
        MemoryMetricObserver mmo = new MemoryMetricObserver("m", 1);
        MetricObserver transform =
            new CounterToRateMetricTransform(mmo, 120, TimeUnit.SECONDS);
        Map<String,Double> metrics = null;

        // First sample
        transform.update(mkList(0, 0));
        metrics = mkMap(mmo.getObservations());
        assertEquals(metrics.size(), 2);
        assertEquals(metrics.get("m3"), null);

        // Delta of 5 in 5 seconds
        transform.update(mkList(5000, 5));
        metrics = mkMap(mmo.getObservations());
        assertEquals(metrics.size(), 3);
        assertEquals(metrics.get("m3"), 1.0, 0.00001);

        // Delta of 15 in 5 seconds
        transform.update(mkList(10000, 20));
        metrics = mkMap(mmo.getObservations());
        assertEquals(metrics.size(), 3);
        assertEquals(metrics.get("m3"), 3.0, 0.00001);

        // No change from previous sample
        transform.update(mkList(15000, 20));
        metrics = mkMap(mmo.getObservations());
        assertEquals(metrics.size(), 3);
        assertEquals(metrics.get("m3"), 0.0, 0.00001);

        // Decrease from previous sample
        transform.update(mkList(20000, 19));
        metrics = mkMap(mmo.getObservations());
        assertEquals(metrics.size(), 3);
        assertEquals(metrics.get("m3"), 0.0, 0.00001);
    }
}=======
/*
 * #%L
 * servo
 * %%
 * Copyright (C) 2011 - 2012 Netflix
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package com.netflix.servo.publish;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.Maps;
import com.netflix.servo.tag.BasicTagList;
import com.netflix.servo.Metric;
import com.netflix.servo.tag.TagList;
import com.netflix.servo.annotations.DataSourceType;
import org.testng.annotations.Test;

import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import static com.netflix.servo.tag.BasicTagList.*;
import static org.testng.Assert.*;

public class CounterToRateMetricTransformTest {

    private static final TagList GAUGE =
        BasicTagList.copyOf(DataSourceType.GAUGE);

    private static final TagList COUNTER =
        BasicTagList.copyOf(DataSourceType.COUNTER);

    private List<Metric> mkList(long ts, int value) {
        return ImmutableList.of(
            new Metric("m1", EMPTY, ts, value),
            new Metric("m2", GAUGE, ts, value),
            new Metric("m3", COUNTER, ts, value)
        );
    }

    private Map<String,Double> mkMap(List<List<Metric>> updates) {
        Map<String,Double> map = Maps.newHashMap();
        for (Metric m : updates.get(0)) {
            map.put(m.getConfig().getName(), m.getValue().doubleValue());
        }
        return map;
    }

    @Test
    public void testSimpleRate() throws Exception {
        MemoryMetricObserver mmo = new MemoryMetricObserver("m", 1);
        MetricObserver transform =
            new CounterToRateMetricTransform(mmo, 120, TimeUnit.SECONDS);
        Map<String,Double> metrics = null;

        // First sample
        transform.update(mkList(0, 0));
        metrics = mkMap(mmo.getObservations());
        assertEquals(metrics.size(), 2);
        assertEquals(metrics.get("m3"), null);

        // Delta of 5 in 5 seconds
        transform.update(mkList(5000, 5));
        metrics = mkMap(mmo.getObservations());
        assertEquals(metrics.size(), 3);
        assertEquals(metrics.get("m3"), 1.0, 0.00001);

        // Delta of 15 in 5 seconds
        transform.update(mkList(10000, 20));
        metrics = mkMap(mmo.getObservations());
        assertEquals(metrics.size(), 3);
        assertEquals(metrics.get("m3"), 3.0, 0.00001);

        // No change from previous sample
        transform.update(mkList(15000, 20));
        metrics = mkMap(mmo.getObservations());
        assertEquals(metrics.size(), 3);
        assertEquals(metrics.get("m3"), 0.0, 0.00001);

        // Decrease from previous sample
        transform.update(mkList(20000, 19));
        metrics = mkMap(mmo.getObservations());
        assertEquals(metrics.size(), 3);
        assertEquals(metrics.get("m3"), 0.0, 0.00001);
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692/servo-core/src/main/java/com/netflix/servo/examples/JvmMetricExample.java;<<<<<<< MINE
 * Example of collecting arbitrary JMX metrics.
=======
 * Example of collecting arbitrary JMX metrics, in this case the standard
 * metrics exposed under java.lang by the JVM.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692/servo-core/src/main/java/com/netflix/servo/examples/package-info.java;<<<<<<< MINE
=======
/*
 * #%L
 * servo-core
 * %%
 * Copyright (C) 2011 - 2012 Netflix
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
/**
 * Examples of how to use servo.
 */
package com.netflix.servo.examples;>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692/servo-core/src/main/java/com/netflix/servo/examples/JmxClientExample.java;<<<<<<< MINE
=======
/*
 * #%L
 * servo-core
 * %%
 * Copyright (C) 2011 - 2012 Netflix
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package com.netflix.servo.examples;

import javax.management.AttributeList;
import javax.management.Attribute;
import javax.management.MBeanAttributeInfo;
import javax.management.MBeanServerConnection;
import javax.management.ObjectName;
import javax.management.openmbean.CompositeData;
import javax.management.remote.JMXConnectorFactory;
import javax.management.remote.JMXServiceURL;
import java.net.MalformedURLException;
import java.util.Set;

/**
 * JMX client that grabs the MonitoredResources.
 */
public class JmxClientExample {

    private static final int INDENT_SPACES = 4;

    private static JMXServiceURL mkJmxUrl(String host, String port)
            throws MalformedURLException {
        String url = String.format(
            "service:jmx:rmi://%1$s:%2$s/jndi/rmi://%1$s:%2$s/jmxrmi",
            host, port);
        return new JMXServiceURL(url);
    }

    private static void println(int indent, String msg) {
        for (int i = 0; i < indent * INDENT_SPACES; ++i) {
            System.out.print(" ");
        }
        System.out.println(msg);
    }

    private static void dumpValue(int indent, String name, Object obj) {
        if (obj instanceof CompositeData) {
            CompositeData cd = (CompositeData) obj;
            println(indent, String.format("%s:", name));
            for (String key : cd.getCompositeType().keySet()) {
                dumpValue(indent + 1, key, cd.get(key));
            }
        } else {
            println(indent, String.format("%s => %s", name, obj));
        }
    }

    private static void dumpObj(MBeanServerConnection con, ObjectName objName)
            throws Exception {
        System.out.println("ObjectName: " + objName.toString());

        MBeanAttributeInfo[] attrs = con.getMBeanInfo(objName).getAttributes();
        if (attrs != null) {
            String attrNames[] = new String[attrs.length];
            for (int i = 0; i < attrNames.length; ++i) {
                attrNames[i] = attrs[i].getName();
            }

            AttributeList list = con.getAttributes(objName, attrNames);
            for (Attribute a : list.asList()) {
                dumpValue(1, a.getName(), a.getValue());
            }
        }
    }

    public static void main(String[] args) throws Exception {
        if (args.length < 2) {
            System.out.println("Usage: JMXClientExample <host> <port>");
            System.exit(1);
        }
        String host = args[0];
        String port = args[1];

        JMXServiceURL url = mkJmxUrl(host, port);

        MBeanServerConnection con = JMXConnectorFactory.connect(
            url, null).getMBeanServerConnection();

        ObjectName pattern = new ObjectName(
            "com.netflix.servo.jmx.MonitoredResource:*");

        Set<ObjectName> objNames = con.queryNames(pattern, null);
        for (ObjectName objName : objNames) {
            dumpObj(con, objName);
        }
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692/servo-core/src/main/java/com/netflix/servo/examples/EchoServerExample.java;<<<<<<< MINE
=======
/*
 * #%L
 * servo-core
 * %%
 * Copyright (C) 2011 - 2012 Netflix
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package com.netflix.servo.examples;

import com.google.common.collect.Maps;
import com.google.common.io.ByteStreams;
import com.google.common.io.Closeables;
import com.google.common.io.CountingInputStream;
import com.google.common.io.CountingOutputStream;
import com.netflix.servo.publish.BasicMetricFilter;
import com.netflix.servo.publish.CounterToRateMetricTransform;
import com.netflix.servo.publish.FileMetricObserver;
import com.netflix.servo.publish.JmxMetricPoller;
import com.netflix.servo.publish.LocalJmxConnector;
import com.netflix.servo.publish.MetricFilter;
import com.netflix.servo.publish.MetricObserver;
import com.netflix.servo.publish.MetricPoller;
import com.netflix.servo.publish.MonitorRegistryMetricPoller;
import com.netflix.servo.publish.PollRunnable;
import com.netflix.servo.publish.PollScheduler;
import com.netflix.servo.publish.PrefixMetricFilter;
import com.netflix.servo.publish.RegexMetricFilter;
import com.netflix.servo.tag.BasicTag;
import com.netflix.servo.tag.BasicTagList;
import com.netflix.servo.tag.TagList;
import com.netflix.servo.util.Counters;
import com.netflix.servo.util.TaggingContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.management.ObjectName;
import java.io.File;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketAddress;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;

/**
 * An really basic echo server that uses the utility methods from
 * {@link com.netflix.servo.util.Counters}.
 */
public class EchoServerExample {

    private static final Logger LOGGER =
        LoggerFactory.getLogger(EchoServerExample.class);

    private final int port;

    public EchoServerExample(int port) {
        this.port = port;
    }

    public void start() throws IOException {
        AcceptTask task = new AcceptTask(port);
        Thread t = new Thread(task, "AcceptTask");
        t.start();
    }

    public void shutdown() {
        // Just an example, a real server should have a way to cleanly
        // shutdown
    }

    public static class AcceptTask implements Runnable {
        private static final String[] COUNTRIES = {"US", "CA", "GB", "IE"};
        private final ServerSocket ss;
        private final Random r = new Random();

        public AcceptTask(int port) throws IOException {
            ss = new ServerSocket(port);
        }

        public TagList getTags(Socket s) {
            String country = COUNTRIES[r.nextInt(COUNTRIES.length)];
            return BasicTagList.copyOf(new BasicTag("Country", country));
        }

        public void run() {
            while (true) {
                try {
                    Socket s = ss.accept();
                    TagList tags = getTags(s);
                    LOGGER.info("received connection from {} with tags {}",
                        s.getRemoteSocketAddress(), tags);

                    Counters.increment("RequestCount", tags);
                    ClientTask task = new ClientTask(tags, s);
                    Thread t = new Thread(task, "ClientTask");
                    t.start();
                } catch (IOException e) {
                    LOGGER.error("failure accepting connection", e);
                }
            }
        }
    }

    public static class ClientTask implements Runnable {
        private final TagList tags;
        private final Socket s;

        public ClientTask(TagList tags, Socket s) {
            this.tags = tags;
            this.s = s;
        }

        private void doWork() throws IOException {
            CountingInputStream input = null;
            CountingOutputStream output = null;
            try {
                input = new CountingInputStream(s.getInputStream());
                output = new CountingOutputStream(s.getOutputStream());
                ByteStreams.copy(input, output);
                Counters.increment("BytesIn", input.getCount());
                Counters.increment("BytesOut", output.getCount());
            } finally {
                Closeables.closeQuietly(input);
                Closeables.closeQuietly(output);
            }
        }

        public void run() {
            // Setup context so all counters increments in this thread will get
            // tagged
            TaggingContext.setTags(tags);

            try {
                doWork();
            } catch (IOException e) {
                SocketAddress a = s.getRemoteSocketAddress();
                LOGGER.error("failure handling connection from " + a, e);
            }
        }
    }

    public static void main(String[] args) throws Exception {
        // Schedule collection of monitor registry metrics every 10 seconds
        PollScheduler scheduler = PollScheduler.getInstance();
        scheduler.start();
        MetricObserver transform = new CounterToRateMetricTransform(
            new FileMetricObserver("serverstat", new File(".")),
            20, TimeUnit.SECONDS);
        PollRunnable task = new PollRunnable(
            new MonitorRegistryMetricPoller(),
            BasicMetricFilter.MATCH_ALL,
            transform);
        scheduler.addPoller(task, 10, TimeUnit.SECONDS);

        // Run server
        int port = 54321;
        if (args.length > 0) {
            port = Integer.valueOf(args[0]);
        }
        EchoServerExample example = new EchoServerExample(port);
        example.start();
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692/servo-core/src/main/java/com/netflix/servo/annotations/AnnotationUtils.java;<<<<<<< MINE
        // TODO: check Monitor annotations
=======
        List<AnnotatedAttribute> attrs = getMonitoredAttributes(obj);
        if (attrs.isEmpty()) {
            throw new IllegalArgumentException(
                "no Monitor annotations on object " + obj);
        }
        String ctype = obj.getClass().getCanonicalName();
        for (AnnotatedAttribute attr : attrs) {
            Monitor m = attr.getAnnotation();
            Object value = null;
            try {
                value = attr.getValue();
            } catch (Exception e) {
                throw new IllegalArgumentException(
                    "failed to get value for " + m + " on " + ctype, e);
            }

            if (m.type() != DataSourceType.INFORMATIONAL) {
                String vtype = (value == null)
                    ? null
                    : value.getClass().getCanonicalName();
                Number n = asNumber(value);
                if (n == null) {
                    throw new IllegalArgumentException(
                        "expected java.lang.Number, but received " + vtype +
                        " for " + m + " on " + ctype);
                }
            }
        }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692/servo-core/src/main/java/com/netflix/servo/annotations/AnnotatedObject.java;<<<<<<< MINE
=======
import static com.netflix.servo.tag.StandardTagKeys.*;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692/servo-core/src/main/java/com/netflix/servo/annotations/AnnotatedObject.java;<<<<<<< MINE
=======
import com.google.common.collect.Lists;
import com.netflix.servo.tag.BasicTag;
import com.netflix.servo.tag.BasicTagList;
import com.netflix.servo.tag.Tag;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692/servo-core/src/main/java/com/netflix/servo/annotations/AnnotatedObject.java;<<<<<<< MINE
=======

        String className = obj.getClass().getCanonicalName();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692/servo-core/src/main/java/com/netflix/servo/annotations/AnnotatedObject.java;<<<<<<< MINE
        tags = AnnotationUtils.getMonitorTags(obj);
=======

        List<Tag> commonTags = Lists.newArrayList();
        commonTags.add(new BasicTag(CLASS_NAME.getKeyName(), className));
        if (id != null) {
            commonTags.add(new BasicTag(MONITOR_ID.getKeyName(), id));
        }
        tags = BasicTagList.concat(
            AnnotationUtils.getMonitorTags(obj),
            new BasicTagList(commonTags));

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692/servo-core/src/main/java/com/netflix/servo/publish/MonitorRegistryMetricPoller.java;<<<<<<< MINE
=======
import com.netflix.servo.tag.BasicTagList;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692/servo-core/src/main/java/com/netflix/servo/publish/MonitorRegistryMetricPoller.java;<<<<<<< MINE
            TagList tags = attr.getTags();
=======
            TagList tags = BasicTagList.concat(attr.getTags(), anno.type());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692/servo-core/src/main/java/com/netflix/servo/util/Counters.java;<<<<<<< MINE
    public static void increment(String name, int delta) {
=======
    public static void increment(String name, long delta) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692/servo-core/src/main/java/com/netflix/servo/util/Counters.java;<<<<<<< MINE
    public static void increment(String name, TagList tags, int delta) {
=======
    public static void increment(String name, TagList tags, long delta) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692/servo-core/src/main/java/com/netflix/servo/util/Counters.java;<<<<<<< MINE
    public static void increment(MetricConfig config, int delta) {
=======
    public static void increment(MetricConfig config, long delta) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692/servo-core/src/main/java/com/netflix/servo/tag/StandardTagKeys.java;<<<<<<< MINE
    /** Hostname for the system reporting the metric. */
    HOST("Host");
=======
    /** Monitor id if one is provided via the annotation. */
    MONITOR_ID("MonitorId");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692/servo-core/src/test/java/com/netflix/servo/annotations/AnnotationUtilsTest.java;<<<<<<< MINE
=======
    public static class StringArrayTagObject {
        @MonitorTags
        private final String[] tags;

        public StringArrayTagObject(String... tags) {
            this.tags = tags;
        }
    }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692/servo-core/src/test/java/com/netflix/servo/annotations/AnnotationUtilsTest.java;<<<<<<< MINE
=======
    public static class StringGaugeObject {

        @Monitor(name="foo", type=DataSourceType.GAUGE)
        String foo = "bar";

        public StringGaugeObject() {
        }
    }

    public static class StringCounterObject {

        @Monitor(name="foo", type=DataSourceType.COUNTER)
        String foo = "bar";

        public StringCounterObject() {
        }
    }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692/servo-core/src/test/java/com/netflix/servo/annotations/AnnotationUtilsTest.java;<<<<<<< MINE
=======

    @Test
    public void testValidateOk() throws Exception {
        AnnotationUtils.validate(new MonitorObject());
    }

    @Test(expectedExceptions = IllegalArgumentException.class)
    public void testValidateNoMonitor() throws Exception {
        AnnotationUtils.validate(new Object());
    }

    @Test(expectedExceptions = IllegalArgumentException.class)
    public void testValidateBadGauge() throws Exception {
        AnnotationUtils.validate(new StringGaugeObject());
    }

    @Test(expectedExceptions = IllegalArgumentException.class)
    public void testValidateBadCounter() throws Exception {
        AnnotationUtils.validate(new StringCounterObject());
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692/servo-core/src/test/java/com/netflix/servo/publish/MonitorRegistryMetricPollerTest.java;<<<<<<< MINE
=======
import com.netflix.servo.annotations.DataSourceType;
import com.netflix.servo.tag.BasicTag;
import com.netflix.servo.tag.BasicTagList;
import com.netflix.servo.tag.TagList;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692/servo-core/src/test/java/com/netflix/servo/publish/MonitorRegistryMetricPollerTest.java;<<<<<<< MINE
        assertEquals(metric.getConfig(), new MetricConfig("Count"));
=======
        TagList tags = BasicTagList.copyOf(
            new BasicTag("MonitorId", "foo"),
            new BasicTag("ClassName", "com.netflix.servo.util.BasicCounter"),
            DataSourceType.COUNTER);
        assertEquals(metric.getConfig(), new MetricConfig("Count", tags));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692/servo-cloudwatch/src/main/java/com/netflix/servo/examples/CloudWatchExample.java;<<<<<<< MINE
=======
/*
 * #%L
 * servo-cloudwatch
 * %%
 * Copyright (C) 2011 - 2012 Netflix
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package com.netflix.servo.examples;

import com.amazonaws.auth.PropertiesCredentials;
import com.netflix.servo.*;
import com.netflix.servo.annotations.DataSourceType;
import com.netflix.servo.annotations.Monitor;
import com.netflix.servo.annotations.MonitorTags;
import com.netflix.servo.publish.BasicMetricFilter;
import com.netflix.servo.publish.MonitorRegistryMetricPoller;
import com.netflix.servo.publish.PollCallable;
import com.netflix.servo.publish.cloudwatch.CloudWatchMetricObserver;
import com.netflix.servo.tag.BasicTagList;
import com.netflix.servo.tag.InjectableTag;
import com.netflix.servo.tag.Tag;
import com.netflix.servo.tag.TagList;

import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * Sample of publishing the SimpleSample to CloudWatch
 */
public class CloudWatchExample {
    
    public static void main(String[] args) throws Exception {
        if(args.length != 1){
            System.err.println("Please specify the path to a properties file with your amazon keys.");
            return;
        }

        CloudWatchMetricObserver observer = new CloudWatchMetricObserver("SampleObserver", "SampleDomain",
                new PropertiesCredentials(new File(args[0])));

        List<Tag> tags = new ArrayList<Tag>(2);
        tags.add(InjectableTag.HOSTNAME);
        tags.add(InjectableTag.IP);

        BasicExample example = new BasicExample("test", tags);

        DefaultMonitorRegistry.getInstance().registerObject(example);

        PollCallable poller = new PollCallable(new MonitorRegistryMetricPoller(), BasicMetricFilter.MATCH_ALL);


        while(true){
            example.counter.incrementAndGet();
            example.setSampleGauge(Math.round(Math.random() * 1000));
            observer.update(poller.call());
            Thread.sleep(60000);
        }
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_fc02737_02699ce/rev_fc02737-02699ce/src/main/java/org/junit/contrib/truth/Expect.java;<<<<<<< MINE
=======
@GwtIncompatible("JUnit4")
@SuppressWarnings("deprecation") 
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_311da4a_e8fe23c/rev_311da4a-e8fe23c/src/main/java/org/junit/contrib/truth/subjects/CollectionSubject.java;<<<<<<< MINE
  @SuppressWarnings("unchecked")
=======
  @SuppressWarnings({ "unchecked", "rawtypes" })
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_311da4a_e8fe23c/rev_311da4a-e8fe23c/src/main/java/org/junit/contrib/truth/subjects/ListSubject.java;<<<<<<< MINE
  @SuppressWarnings("unchecked")
=======
  @SuppressWarnings({ "unchecked", "rawtypes" })
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_311da4a_e8fe23c/rev_311da4a-e8fe23c/src/main/java/org/junit/contrib/truth/subjects/ListSubject.java;<<<<<<< MINE
   * 
=======
   *
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_311da4a_e8fe23c/rev_311da4a-e8fe23c/src/main/java/org/junit/contrib/truth/subjects/ListSubject.java;<<<<<<< MINE
   * 
=======
   *
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_311da4a_e8fe23c/rev_311da4a-e8fe23c/src/main/java/org/junit/contrib/truth/subjects/ListSubject.java;<<<<<<< MINE
   * 
=======
   *
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_311da4a_e8fe23c/rev_311da4a-e8fe23c/src/main/java/org/junit/contrib/truth/subjects/ListSubject.java;<<<<<<< MINE
   * 
=======
   *
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_311da4a_e8fe23c/rev_311da4a-e8fe23c/src/main/java/org/junit/contrib/truth/subjects/IterableSubject.java;<<<<<<< MINE
  @SuppressWarnings("unchecked")
=======
  @SuppressWarnings({ "unchecked", "rawtypes" })
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_acbea65_e8fe23c/rev_acbea65-e8fe23c/src/main/java/org/junit/contrib/truth/subjects/IterableSubject.java;<<<<<<< MINE
  @SuppressWarnings("unchecked")
=======
  @SuppressWarnings({ "unchecked", "rawtypes" })
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_2bb82ca_2bd108d/rev_2bb82ca-2bd108d/src/main/java/org/junit/contrib/truth/subjects/IterableSubject.java;<<<<<<< MINE
  /**
   * Attests that the subject contains one or more objects, or fails
   */
  public And<S> isNotEmpty() {
    if (!getSubject().iterator().hasNext()) {
      fail("isEmpty");
    }
    return nextChain();
  }

  public And<S> hasContentsInOrder(Object... expected) {
    // TODO(kevinb): prettier error message
    List<Object> target = new ArrayList<Object>();
    for (Object t : getSubject()) {
      target.add(t);
=======
  /**
   * Asserts that the items are supplied in the order given by the iterable. For
   * Collections and other things which contain items but may not have guaranteed
   * iteration order, this method should be overridden.
   */
  public And<S> iteratesOverSequence(Object... expectedItems) {
    Iterator<T> actualItems = getSubject().iterator();
    for (Object expected : expectedItems) {
      if (!actualItems.hasNext()) {
        fail("iterates through", Arrays.asList(expectedItems));
      } else {
        Object actual = actualItems.next();
        if (actual == expected || actual != null && actual.equals(expected)) {
          continue;
        } else {
          fail("iterates through", Arrays.asList(expectedItems));
        }
      }
    }
    if (actualItems.hasNext()) {
      fail("iterates through", Arrays.asList(expectedItems));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_2bb82ca_2bd108d/rev_2bb82ca-2bd108d/src/test/java/org/junit/contrib/truth/IterableTest.java;<<<<<<< MINE
import java.util.List;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_2bb82ca_2bd108d/rev_2bb82ca-2bd108d/src/test/java/org/junit/contrib/truth/IterableTest.java;<<<<<<< MINE
  @Test public void iterablehasContentsAnyOrder() {
    ASSERT.that(iterable(1, 2, 3)).hasContentsAnyOrder(2, 3, 1);
  }

  @Test public void iterablehasContentsAnyOrder_Fail() {
    try {
      ASSERT.that(iterable(1, 2, 3)).hasContentsAnyOrder(2, 3, 4);
      fail("Should have thrown.");
    } catch (AssertionError e) {
      ASSERT.that(e.getMessage()).contains("Not true that");
    }
  }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_8b6bb73_2bd108d/rev_8b6bb73-2bd108d/src/main/java/org/junit/contrib/truth/subjects/Subject.java;<<<<<<< MINE
 * 
=======
 *
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_8b6bb73_2bd108d/rev_8b6bb73-2bd108d/src/main/java/org/junit/contrib/truth/subjects/Subject.java;<<<<<<< MINE
 * 
=======
 *
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_8b6bb73_2bd108d/rev_8b6bb73-2bd108d/src/main/java/org/junit/contrib/truth/subjects/Subject.java;<<<<<<< MINE
    
=======

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_8b6bb73_2bd108d/rev_8b6bb73-2bd108d/src/main/java/org/junit/contrib/truth/subjects/Subject.java;<<<<<<< MINE
      @SuppressWarnings("unchecked") 
=======
      @SuppressWarnings("unchecked")
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_8b6bb73_2bd108d/rev_8b6bb73-2bd108d/src/main/java/org/junit/contrib/truth/subjects/Subject.java;<<<<<<< MINE
  
=======

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_8b6bb73_2bd108d/rev_8b6bb73-2bd108d/src/main/java/org/junit/contrib/truth/subjects/Subject.java;<<<<<<< MINE
    if (getSubject() == null) { 
=======
    if (getSubject() == null) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_8b6bb73_2bd108d/rev_8b6bb73-2bd108d/src/main/java/org/junit/contrib/truth/subjects/Subject.java;<<<<<<< MINE
  
=======

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_8b6bb73_2bd108d/rev_8b6bb73-2bd108d/src/main/java/org/junit/contrib/truth/subjects/Subject.java;<<<<<<< MINE
    if (getSubject() == null) { 
=======
    if (getSubject() == null) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_8b6bb73_2bd108d/rev_8b6bb73-2bd108d/src/main/java/org/junit/contrib/truth/subjects/Subject.java;<<<<<<< MINE
    if (getSubject() == null) { 
=======
    if (getSubject() == null) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_8b6bb73_2bd108d/rev_8b6bb73-2bd108d/src/main/java/org/junit/contrib/truth/subjects/Subject.java;<<<<<<< MINE
   * style, such that subjects can make propositions in series.  
=======
   * style, such that subjects can make propositions in series.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_8b6bb73_2bd108d/rev_8b6bb73-2bd108d/src/main/java/org/junit/contrib/truth/subjects/Subject.java;<<<<<<< MINE
  }  
=======
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_9d94784_8f1681d/rev_9d94784-8f1681d/src/main/java/graphql/execution/ExecutionContext.java;<<<<<<< MINE
import java.util.LinkedHashMap;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_9d94784_8f1681d/rev_9d94784-8f1681d/src/main/java/graphql/execution/ExecutionContext.java;<<<<<<< MINE
    private final ExecutionId executionId;
    private final ExecutionStrategy executionStrategy;
=======
    private final ExecutionStrategy queryStrategy;
    private final ExecutionStrategy mutationStrategy;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_9d94784_8f1681d/rev_9d94784-8f1681d/src/main/java/graphql/execution/ExecutionContext.java;<<<<<<< MINE
    public ExecutionContext(GraphQLSchema graphQLSchema, ExecutionId executionId, ExecutionStrategy executionStrategy, Map<String, FragmentDefinition> fragmentsByName, OperationDefinition operationDefinition, Map<String, Object> variables, Object root) {
=======
    public ExecutionContext(GraphQLSchema graphQLSchema, ExecutionStrategy queryStrategy, ExecutionStrategy mutationStrategy, Map<String, FragmentDefinition> fragmentsByName, OperationDefinition operationDefinition, Map<String, Object> variables, Object root) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_9d94784_8f1681d/rev_9d94784-8f1681d/src/main/java/graphql/execution/ExecutionContext.java;<<<<<<< MINE
        this.executionId = executionId;
        this.executionStrategy = executionStrategy;
=======
        this.queryStrategy = queryStrategy;
        this.mutationStrategy = mutationStrategy;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_9d94784_8f1681d/rev_9d94784-8f1681d/src/main/java/graphql/execution/ExecutionContextBuilder.java;<<<<<<< MINE
    public ExecutionContextBuilder executionId(ExecutionId executionId) {
        this.executionId = executionId;
        return this;
    }

    public ExecutionContext build(GraphQLSchema graphQLSchema, ExecutionStrategy executionStrategy, Object root, Document document, String operationName, Map<String, Object> args) {
        // preconditions
        assertNotNull(executionId,"You must provide a query identifier");

=======
    public ExecutionContext build(GraphQLSchema graphQLSchema, ExecutionStrategy queryStrategy, ExecutionStrategy mutationStrategy, Object root, Document document, String operationName, Map<String, Object> args) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_9d94784_8f1681d/rev_9d94784-8f1681d/src/main/java/graphql/execution/ExecutionContextBuilder.java;<<<<<<< MINE
                executionId,
                executionStrategy,
=======
                queryStrategy,
                mutationStrategy,
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_9d94784_8f1681d/rev_9d94784-8f1681d/src/main/java/graphql/execution/Execution.java;<<<<<<< MINE
    private final FieldCollector fieldCollector = new FieldCollector();
    private final ExecutionStrategy strategy;
=======
    private FieldCollector fieldCollector = new FieldCollector();
    private ExecutionStrategy queryStrategy;
    private ExecutionStrategy mutationStrategy;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_9d94784_8f1681d/rev_9d94784-8f1681d/src/main/java/graphql/execution/Execution.java;<<<<<<< MINE
    public Execution(ExecutionStrategy executionStrategy) {
        this.strategy = executionStrategy == null ? new SimpleExecutionStrategy() : executionStrategy;
=======
    public Execution(ExecutionStrategy queryStrategy, ExecutionStrategy mutationStrategy) {
        this.queryStrategy = queryStrategy != null ? queryStrategy : new SimpleExecutionStrategy();
        this.mutationStrategy = mutationStrategy != null ? mutationStrategy : new SimpleExecutionStrategy();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_9d94784_8f1681d/rev_9d94784-8f1681d/src/main/java/graphql/execution/Execution.java;<<<<<<< MINE
        ExecutionContext executionContext = executionContextBuilder
                .executionId(executionId)
                .build(graphQLSchema, strategy, root, document, operationName, args);

=======
        ExecutionContext executionContext = executionContextBuilder.build(graphQLSchema, queryStrategy, mutationStrategy, root, document, operationName, args);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_9d94784_8f1681d/rev_9d94784-8f1681d/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
    private final ExecutionStrategy executionStrategy;
    //
    // later PR changes will allow api consumers to provide their own id provider
    //
    // see https://github.com/graphql-java/graphql-java/pull/276 for the builder pattern
    // needed to make this sustainable.  But for now we will use hard coded approach.
    //
    private final ExecutionIdProvider idProvider = new ExecutionIdProvider() {
        @Override
        public ExecutionId generate(String query, String operationName, Object context) {
            return ExecutionId.generate();
        }
    };
=======
    private final ExecutionStrategy queryStrategy;
    private final ExecutionStrategy mutationStrategy;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_8500eec_9a4585e/rev_8500eec-9a4585e/src/main/java/org/junit/contrib/truth/subjects/Subject.java;<<<<<<< MINE
  private final FailureStrategy failureStrategy;
=======
  protected final FailureStrategy failureStrategy;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_d4097e9_a339c65/rev_d4097e9-a339c65/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
    /**
     * A GraphQL object ready to execute queries
     *
     * @param graphQLSchema     the schema to use
     * @param executionStrategy the execution strategy to use
     *
     * @deprecated use the {@link #newObject(GraphQLSchema)} builder instead.  This will be removed in a future version.
     */
    @SuppressWarnings("DeprecatedIsStillUsed")
    public GraphQL(GraphQLSchema graphQLSchema, ExecutionStrategy executionStrategy) {
=======
    public GraphQL(GraphQLSchema graphQLSchema, ExecutionStrategy queryStrategy) {
        this(graphQLSchema, queryStrategy, null);
    }

    public GraphQL(GraphQLSchema graphQLSchema, ExecutionStrategy queryStrategy, ExecutionStrategy mutationStrategy) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_73068e7_8da4a30/rev_73068e7-8da4a30/servo-core/src/main/java/com/netflix/servo/publish/FileMetricObserver.java;<<<<<<< MINE
            LOGGER.debug("writing %d metrics to file %s", metrics.size(), file);
=======
            LOGGER.debug("writing {} metrics to file {}", metrics.size(), file);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_56eb2a7_b20ae0a/rev_56eb2a7-b20ae0a/src/main/java/graphql/execution/ExecutionContext.java;<<<<<<< MINE
    private final Instrumentation instrumentation;
    private GraphQLSchema graphQLSchema;
    private ExecutionStrategy executionStrategy;
    private Map<String, FragmentDefinition> fragmentsByName = new LinkedHashMap<String, FragmentDefinition>();
    private OperationDefinition operationDefinition;
    private Map<String, Object> variables = new LinkedHashMap<String, Object>();
    private Object root;
    private List<GraphQLError> errors = new ArrayList<GraphQLError>();
=======
    private final GraphQLSchema graphQLSchema;
    private final ExecutionId executionId;
    private final ExecutionStrategy queryStrategy;
    private final ExecutionStrategy mutationStrategy;
    private final Map<String, FragmentDefinition> fragmentsByName;
    private final OperationDefinition operationDefinition;
    private final Map<String, Object> variables;
    private final Object root;
    private final List<GraphQLError> errors = new CopyOnWriteArrayList<GraphQLError>();

    public ExecutionContext(ExecutionId executionId, GraphQLSchema graphQLSchema, ExecutionStrategy queryStrategy, ExecutionStrategy mutationStrategy, Map<String, FragmentDefinition> fragmentsByName, OperationDefinition operationDefinition, Map<String, Object> variables, Object root) {
        this.graphQLSchema = graphQLSchema;
        this.executionId = executionId;
        this.queryStrategy = queryStrategy;
        this.mutationStrategy = mutationStrategy;
        this.fragmentsByName = fragmentsByName;
        this.operationDefinition = operationDefinition;
        this.variables = variables;
        this.root = root;
    }

    public ExecutionId getExecutionId() {
        return executionId;
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_56eb2a7_b20ae0a/rev_56eb2a7-b20ae0a/src/main/java/graphql/execution/ExecutionContextBuilder.java;<<<<<<< MINE
    public ExecutionContextBuilder(ValuesResolver valuesResolver, Instrumentation instrumentation) {
=======
    private ExecutionId executionId;

    public ExecutionContextBuilder(ValuesResolver valuesResolver) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_56eb2a7_b20ae0a/rev_56eb2a7-b20ae0a/src/main/java/graphql/execution/ExecutionContextBuilder.java;<<<<<<< MINE

    public ExecutionContext build(GraphQLSchema graphQLSchema, ExecutionStrategy executionStrategy, Object root, Document document, String operationName, Map<String, Object> args) {
=======
    public ExecutionContextBuilder executionId(ExecutionId executionId) {
        this.executionId = executionId;
        return this;
    }

    public ExecutionContext build(GraphQLSchema graphQLSchema, ExecutionStrategy queryStrategy, ExecutionStrategy mutationStrategy, Object root, Document document, String operationName, Map<String, Object> args) {
        // preconditions
        assertNotNull(executionId,"You must provide a query identifier");

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_56eb2a7_b20ae0a/rev_56eb2a7-b20ae0a/src/main/java/graphql/execution/ExecutionContextBuilder.java;<<<<<<< MINE
        ExecutionContext executionContext = new ExecutionContext(instrumentation);
        executionContext.setGraphQLSchema(graphQLSchema);
        executionContext.setExecutionStrategy(executionStrategy);
        executionContext.setOperationDefinition(operation);
        executionContext.setRoot(root);
        executionContext.setFragmentsByName(fragmentsByName);
        Map<String, Object> variableValues = valuesResolver.getVariableValues(graphQLSchema, operation.getVariableDefinitions(), args);
        executionContext.setVariables(variableValues);
        return executionContext;
=======
        return new ExecutionContext(
                executionId,
                graphQLSchema,
                queryStrategy,
                mutationStrategy,
                fragmentsByName,
                operation,
                variableValues,
                root);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_56eb2a7_b20ae0a/rev_56eb2a7-b20ae0a/src/main/java/graphql/execution/Execution.java;<<<<<<< MINE
    private final FieldCollector fieldCollector = new FieldCollector();
    private final ExecutionStrategy strategy;
    private final Instrumentation instrumentation;

    public Execution(ExecutionStrategy strategy, Instrumentation instrumentation) {
        this.strategy = strategy == null ? new SimpleExecutionStrategy() : strategy;
        this.instrumentation = instrumentation;
=======
    private FieldCollector fieldCollector = new FieldCollector();
    private ExecutionStrategy queryStrategy;
    private ExecutionStrategy mutationStrategy;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_56eb2a7_b20ae0a/rev_56eb2a7-b20ae0a/src/main/java/graphql/execution/Execution.java;<<<<<<< MINE
=======
    public Execution(ExecutionStrategy queryStrategy, ExecutionStrategy mutationStrategy) {
        this.queryStrategy = queryStrategy != null ? queryStrategy : new SimpleExecutionStrategy();
        this.mutationStrategy = mutationStrategy != null ? mutationStrategy : new SimpleExecutionStrategy();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_56eb2a7_b20ae0a/rev_56eb2a7-b20ae0a/src/main/java/graphql/execution/Execution.java;<<<<<<< MINE
    public ExecutionResult execute(GraphQLSchema graphQLSchema, Object root, Document document, String operationName, Map<String, Object> args) {
        ExecutionContextBuilder executionContextBuilder = new ExecutionContextBuilder(new ValuesResolver(),instrumentation);
        ExecutionContext executionContext = executionContextBuilder.build(graphQLSchema, strategy, root, document, operationName, args);
=======
    public ExecutionResult execute(ExecutionId executionId, GraphQLSchema graphQLSchema, Object root, Document document, String operationName, Map<String, Object> args) {
        ExecutionContextBuilder executionContextBuilder = new ExecutionContextBuilder(new ValuesResolver());
        ExecutionContext executionContext = executionContextBuilder
                .executionId(executionId)
                .build(graphQLSchema, queryStrategy, mutationStrategy, root, document, operationName, args);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_56eb2a7_b20ae0a/rev_56eb2a7-b20ae0a/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
import java.util.Arrays;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_56eb2a7_b20ae0a/rev_56eb2a7-b20ae0a/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
    private final ExecutionStrategy executionStrategy;
    private final Instrumentation instrumentation;
=======
    private final ExecutionStrategy queryStrategy;
    private final ExecutionStrategy mutationStrategy;
    //
    // later PR changes will allow api consumers to provide their own id provider
    //
    // see https://github.com/graphql-java/graphql-java/pull/276 for the builder pattern
    // needed to make this sustainable.  But for now we will use a hard coded approach.
    //
    private final ExecutionIdProvider idProvider = new ExecutionIdProvider() {
        @Override
        public ExecutionId provide(String query, String operationName, Object context) {
            return ExecutionId.generate();
        }
    };
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_56eb2a7_b20ae0a/rev_56eb2a7-b20ae0a/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
    public GraphQL(GraphQLSchema graphQLSchema, ExecutionStrategy executionStrategy) {
        this(graphQLSchema, executionStrategy, NoOpInstrumentation.INSTANCE);
    }

    public GraphQL(GraphQLSchema graphQLSchema, ExecutionStrategy executionStrategy, Instrumentation instrumentation) {
=======
    public GraphQL(GraphQLSchema graphQLSchema, ExecutionStrategy queryStrategy) {
        this(graphQLSchema, queryStrategy, null);
    }

    public GraphQL(GraphQLSchema graphQLSchema, ExecutionStrategy queryStrategy, ExecutionStrategy mutationStrategy) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_56eb2a7_b20ae0a/rev_56eb2a7-b20ae0a/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
        this.executionStrategy = executionStrategy;
        this.instrumentation = instrumentation;
=======
        this.queryStrategy = queryStrategy;
        this.mutationStrategy = mutationStrategy;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_56eb2a7_b20ae0a/rev_56eb2a7-b20ae0a/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
=======
        ExecutionId executionId = idProvider.provide(requestString, operationName, context);

        Execution execution = new Execution(queryStrategy, mutationStrategy);
        return execution.execute(executionId, graphQLSchema, context, document, operationName, arguments);
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_c9212bb_b20ae0a/rev_c9212bb-b20ae0a/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
import java.util.Arrays;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_c9212bb_b20ae0a/rev_c9212bb-b20ae0a/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
            return new ExecutionResultImpl(Arrays.asList(invalidSyntaxError));
=======
            return new ExecutionResultImpl(Collections.singletonList(invalidSyntaxError));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_c9212bb_b20ae0a/rev_c9212bb-b20ae0a/src/main/java/graphql/Assert.java;<<<<<<< MINE
    public static void assertNotNull(Object object, String errorMessage) {
        if (object != null) return;
=======
    public static <T> T assertNotNull(T object, String errorMessage) {
        if (object != null) return object;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_c9212bb_b20ae0a/rev_c9212bb-b20ae0a/src/main/java/graphql/Assert.java;<<<<<<< MINE
    public static void assertNotEmpty(Collection<?> c, String errorMessage) {
=======
    public static <T> Collection<T> assertNotEmpty(Collection<T> c, String errorMessage) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_c9212bb_b20ae0a/rev_c9212bb-b20ae0a/src/main/java/graphql/Assert.java;<<<<<<< MINE
        return;
=======
        return c;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_50fd10b_f493a19/rev_50fd10b-f493a19/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
import graphql.execution.instrumentation.Instrumentation;
import graphql.execution.instrumentation.InstrumentationContext;
import graphql.execution.instrumentation.NoOpInstrumentation;
import graphql.execution.instrumentation.parameters.ExecutionParameters;
import graphql.execution.instrumentation.parameters.ValidationParameters;
=======
import graphql.execution.SimpleExecutionStrategy;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_a48f27d_5e9f899/rev_a48f27d-5e9f899/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
    private final GraphQLSchema graphQLSchema;
    private final ExecutionStrategy queryStrategy;
    private final ExecutionStrategy mutationStrategy;
    private final Instrumentation instrumentation;

    //
    // later PR changes will allow api consumers to provide their own id provider
    //
    // see https://github.com/graphql-java/graphql-java/pull/276 for the builder pattern
    // needed to make this sustainable.  But for now we will use a hard coded approach.
    //
    private final ExecutionIdProvider idProvider = new ExecutionIdProvider() {
=======
    private static final ExecutionIdProvider DEFAULT_EXECUTION_ID_PROVIDER = new ExecutionIdProvider() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_a48f27d_5e9f899/rev_a48f27d-5e9f899/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
    @SuppressWarnings("DeprecatedIsStillUsed")
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_a48f27d_5e9f899/rev_a48f27d-5e9f899/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
        this(graphQLSchema,queryStrategy,mutationStrategy,NoOpInstrumentation.INSTANCE);
    }

    private GraphQL(GraphQLSchema graphQLSchema, ExecutionStrategy queryStrategy, ExecutionStrategy mutationStrategy, Instrumentation instrumentation) {
        this.graphQLSchema = graphQLSchema;
        this.queryStrategy = queryStrategy;
=======
        this(graphQLSchema,queryStrategy,mutationStrategy, DEFAULT_EXECUTION_ID_PROVIDER);
    }

    private GraphQL(GraphQLSchema graphQLSchema, ExecutionStrategy queryStrategy, ExecutionStrategy mutationStrategy, ExecutionIdProvider idProvider) {
        this.graphQLSchema = assertNotNull(graphQLSchema,"queryStrategy must be non null");
        this.queryStrategy = assertNotNull(queryStrategy, "queryStrategy must be non null");
        this.idProvider = assertNotNull(idProvider, "idProvider must be non null");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_a48f27d_5e9f899/rev_a48f27d-5e9f899/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
        private Instrumentation instrumentation = NoOpInstrumentation.INSTANCE;
=======
        private ExecutionIdProvider idProvider = DEFAULT_EXECUTION_ID_PROVIDER;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_a48f27d_5e9f899/rev_a48f27d-5e9f899/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
        public Builder instrumentation(Instrumentation instrumentation) {
            this.instrumentation = assertNotNull(instrumentation, "Instrumentation must be non null");
            return this;
        }

=======
        public Builder executionIdProvider(ExecutionIdProvider executionIdProvider) {
            this.idProvider = assertNotNull(executionIdProvider, "ExecutionIdProvider must be non null");
            return this;
        }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_e4004d3_f7c259f/rev_e4004d3-f7c259f/src/main/java/graphql/Scalars.java;<<<<<<< MINE
    private static boolean isWholeNumber(Object input) {
        return input instanceof Long
                || input instanceof Integer
                || input instanceof Short
                || input instanceof Byte;
    }

    // true if its a number or string that we will attempt to convert to a number via toNumber()
    private static boolean isNumberIsh(Object input) {
        return input instanceof Number || input instanceof String;
    }

    private static Number toNumber(Object input) {
        if (input instanceof Number) {
            return (Number) input;
        }
        if (input instanceof String) {
            // we go to double and then let each scalar type decide what precision they want from it.  This
            // will allow lenient behavior in string input as well as Number input... eg "42.3" as a string to a Long
            // scalar is the same as new Double(42.3) to a Long scalar.
            //
            // each type will use Java Narrow casting to turn this into the desired type (Long, Integer, Short etc...)
            //
            // See http://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html#jls-5.1.3
            //
            return Double.parseDouble((String) input);
        }
        // we never expect this and if we do, the code is wired wrong
        throw new AssertException("Unexpected case - this call should be protected by a previous call to isNumberIsh()");
    }


    public static GraphQLScalarType GraphQLInt = new GraphQLScalarType("Int", "Built-in Int", new Coercing<Integer>() {
=======
    public static GraphQLScalarType GraphQLInt = new GraphQLScalarType("Int", "Built-in Int", new Coercing<Integer, Integer>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_e4004d3_f7c259f/rev_e4004d3-f7c259f/src/main/java/graphql/Scalars.java;<<<<<<< MINE
    public static GraphQLScalarType GraphQLLong = new GraphQLScalarType("Long", "Long type", new Coercing<Long>() {
=======

    public static GraphQLScalarType GraphQLLong = new GraphQLScalarType("Long", "Long type", new Coercing<Long, Long>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_e4004d3_f7c259f/rev_e4004d3-f7c259f/src/main/java/graphql/Scalars.java;<<<<<<< MINE
    public static GraphQLScalarType GraphQLShort = new GraphQLScalarType("Short", "Built-in Short as Int", new Coercing<Short>() {
=======
    public static GraphQLScalarType GraphQLFloat = new GraphQLScalarType("Float", "Built-in Float", new Coercing<Double, Double>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_e4004d3_f7c259f/rev_e4004d3-f7c259f/src/main/java/graphql/Scalars.java;<<<<<<< MINE
    public static GraphQLScalarType GraphQLByte = new GraphQLScalarType("Byte", "Built-in Byte as Int", new Coercing<Byte>() {
=======
    public static GraphQLScalarType GraphQLString = new GraphQLScalarType("String", "Built-in String", new Coercing<String, String>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_e4004d3_f7c259f/rev_e4004d3-f7c259f/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Byte serialize(Object input) {
            if (input instanceof Byte) {
                return (Byte) input;
            } else if (isNumberIsh(input)) {
                return toNumber(input).byteValue();
=======
        public String serialize(Object input) {
            return input == null ? null : input.toString();
        }

        @Override
        public String parseValue(Object input) {
            return serialize(input);
        }

        @Override
        public String parseLiteral(Object input) {
            if (!(input instanceof StringValue)) return null;
            return ((StringValue) input).getValue();
        }
    });


    public static GraphQLScalarType GraphQLBoolean = new GraphQLScalarType("Boolean", "Built-in Boolean", new Coercing<Boolean, Boolean>() {
        @Override
        public Boolean serialize(Object input) {
            if (input instanceof Boolean) {
                return (Boolean) input;
            } else if (input instanceof Integer) {
                return (Integer) input > 0;
            } else if (input instanceof String) {
                return Boolean.parseBoolean((String) input);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_e4004d3_f7c259f/rev_e4004d3-f7c259f/src/main/java/graphql/Scalars.java;<<<<<<< MINE
    public static GraphQLScalarType GraphQLFloat = new GraphQLScalarType("Float", "Built-in Float", new Coercing<Double>() {
=======
    public static GraphQLScalarType GraphQLID = new GraphQLScalarType("ID", "Built-in ID", new Coercing<Object, Object>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_e4004d3_f7c259f/rev_e4004d3-f7c259f/src/main/java/graphql/Scalars.java;<<<<<<< MINE

    public static GraphQLScalarType GraphQLString = new GraphQLScalarType("String", "Built-in String", new Coercing<String>() {
        @Override
        public String serialize(Object input) {
            return input == null ? null : input.toString();
        }

        @Override
        public String parseValue(Object input) {
            return serialize(input);
        }

        @Override
        public String parseLiteral(Object input) {
            if (!(input instanceof StringValue)) return null;
            return ((StringValue) input).getValue();
        }
    });


    public static GraphQLScalarType GraphQLBoolean = new GraphQLScalarType("Boolean", "Built-in Boolean", new Coercing<Boolean>() {
=======
    public static GraphQLScalarType GraphQLByte = new GraphQLScalarType("Byte", "Built-in Byte as Int", new Coercing<Byte, Byte>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_e4004d3_f7c259f/rev_e4004d3-f7c259f/src/main/java/graphql/Scalars.java;<<<<<<< MINE

    public static GraphQLScalarType GraphQLID = new GraphQLScalarType("ID", "Built-in ID", new Coercing<Object>() {
=======
    public static GraphQLScalarType GraphQLShort = new GraphQLScalarType("Short", "Built-in Short as Int", new Coercing<Short, Short>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_e4004d3_f7c259f/rev_e4004d3-f7c259f/src/main/java/graphql/Scalars.java;<<<<<<< MINE

    public static GraphQLScalarType GraphQLChar = new GraphQLScalarType("Char", "Built-in Char as Character", new Coercing<Character>() {
=======
    public static GraphQLScalarType GraphQLChar = new GraphQLScalarType("Char", "Built-in Char as Character", new Coercing<Character, Character>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_022e37b_f1a5ce4/rev_022e37b-f1a5ce4/core/src/main/java/org/truth0/subjects/Subject.java;<<<<<<< MINE
import java.lang.reflect.Field;
=======
import com.google.common.annotations.GwtCompatible;
import com.google.common.annotations.GwtIncompatible;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_022e37b_f1a5ce4/rev_022e37b-f1a5ce4/core/src/main/java/org/truth0/subjects/Subject.java;<<<<<<< MINE
import com.google.common.annotations.GwtCompatible;
import com.google.common.annotations.GwtIncompatible;
=======
import java.lang.reflect.Field;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
=======
    private static final Logger log = LoggerFactory.getLogger(GraphQL.class);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
    private final GraphQLSchema graphQLSchema;
    private final ExecutionStrategy queryStrategy;
    private final ExecutionStrategy mutationStrategy;
    //
    // later PR changes will allow api consumers to provide their own id provider
    //
    // see https://github.com/graphql-java/graphql-java/pull/276 for the builder pattern
    // needed to make this sustainable.  But for now we will use a hard coded approach.
    //
    private final ExecutionIdProvider idProvider = new ExecutionIdProvider() {
=======
    private static final ExecutionIdProvider DEFAULT_EXECUTION_ID_PROVIDER = new ExecutionIdProvider() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
    private static final Logger log = LoggerFactory.getLogger(GraphQL.class);
=======
    private final GraphQLSchema graphQLSchema;
    private final ExecutionStrategy queryStrategy;
    private final ExecutionStrategy mutationStrategy;
    private final ExecutionIdProvider idProvider;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
    @SuppressWarnings("DeprecatedIsStillUsed")
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
        this.graphQLSchema = graphQLSchema;
        this.queryStrategy = queryStrategy;
=======
        this(graphQLSchema,queryStrategy,mutationStrategy, DEFAULT_EXECUTION_ID_PROVIDER);
    }

    private GraphQL(GraphQLSchema graphQLSchema, ExecutionStrategy queryStrategy, ExecutionStrategy mutationStrategy, ExecutionIdProvider idProvider) {
        this.graphQLSchema = assertNotNull(graphQLSchema,"queryStrategy must be non null");
        this.queryStrategy = assertNotNull(queryStrategy, "queryStrategy must be non null");
        this.idProvider = assertNotNull(idProvider, "idProvider must be non null");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
=======
        private ExecutionIdProvider idProvider = DEFAULT_EXECUTION_ID_PROVIDER;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
=======
        public Builder executionIdProvider(ExecutionIdProvider executionIdProvider) {
            this.idProvider = assertNotNull(executionIdProvider, "ExecutionIdProvider must be non null");
            return this;
        }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
            //noinspection deprecation
            return new GraphQL(graphQLSchema, queryExecutionStrategy, mutationExecutionStrategy);
=======
            return new GraphQL(graphQLSchema, queryExecutionStrategy, mutationExecutionStrategy, idProvider);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
import graphql.schema.*;
=======
import graphql.schema.DataFetcher;
import graphql.schema.DataFetchingEnvironment;
import graphql.schema.GraphQLArgument;
import graphql.schema.GraphQLDirective;
import graphql.schema.GraphQLEnumType;
import graphql.schema.GraphQLEnumValueDefinition;
import graphql.schema.GraphQLFieldDefinition;
import graphql.schema.GraphQLFieldsContainer;
import graphql.schema.GraphQLInputObjectField;
import graphql.schema.GraphQLInputObjectType;
import graphql.schema.GraphQLInterfaceType;
import graphql.schema.GraphQLList;
import graphql.schema.GraphQLNonNull;
import graphql.schema.GraphQLObjectType;
import graphql.schema.GraphQLScalarType;
import graphql.schema.GraphQLSchema;
import graphql.schema.GraphQLTypeReference;
import graphql.schema.GraphQLUnionType;
import graphql.schema.SchemaUtil;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
=======
import static graphql.schema.GraphQLList.list;
import static graphql.schema.GraphQLNonNull.nonNull;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(GraphQLString)))
=======
                    .type(nonNull(GraphQLString)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(new GraphQLTypeReference("__Type"))))
=======
                    .type(nonNull(new GraphQLTypeReference("__Type"))))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                                GraphQLArgument inputField = (GraphQLArgument) environment.getSource();
=======
                                GraphQLArgument inputField = environment.getSource();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                                GraphQLInputObjectField inputField = (GraphQLInputObjectField) environment.getSource();
=======
                                GraphQLInputObjectField inputField = environment.getSource();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(GraphQLString)))
=======
                    .type(nonNull(GraphQLString)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__InputValue))))
=======
                    .type(nonNull(list(nonNull(__InputValue))))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(new GraphQLTypeReference("__Type"))))
=======
                    .type(nonNull(new GraphQLTypeReference("__Type"))))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(GraphQLBoolean))
=======
                    .type(nonNull(GraphQLBoolean))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(GraphQLString)))
=======
                    .type(nonNull(GraphQLString)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(GraphQLBoolean))
=======
                    .type(nonNull(GraphQLBoolean))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                            GraphQLEnumValueDefinition enumValue = (GraphQLEnumValueDefinition) environment.getSource();
=======
                            GraphQLEnumValueDefinition enumValue = environment.getSource();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(__TypeKind))
=======
                    .type(nonNull(__TypeKind))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLList(new GraphQLNonNull(__Field)))
=======
                    .type(list(nonNull(__Field)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLList(new GraphQLNonNull(new GraphQLTypeReference("__Type"))))
=======
                    .type(list(nonNull(new GraphQLTypeReference("__Type"))))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLList(new GraphQLNonNull(new GraphQLTypeReference("__Type"))))
=======
                    .type(list(nonNull(new GraphQLTypeReference("__Type"))))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLList(new GraphQLNonNull(__EnumValue)))
=======
                    .type(list(nonNull(__EnumValue)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLList(new GraphQLNonNull(__InputValue)))
=======
                    .type(list(nonNull(__InputValue)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLList(new GraphQLNonNull(__DirectiveLocation)))
=======
                    .type(list(nonNull(__DirectiveLocation)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                            GraphQLDirective directive = (GraphQLDirective) environment.getSource();
=======
                            GraphQLDirective directive = environment.getSource();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__InputValue))))
=======
                    .type(nonNull(list(nonNull(__InputValue))))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                            GraphQLDirective directive = (GraphQLDirective) environment.getSource();
=======
                            GraphQLDirective directive = environment.getSource();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                            GraphQLDirective directive = (GraphQLDirective) environment.getSource();
=======
                            GraphQLDirective directive = environment.getSource();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                            GraphQLDirective directive = (GraphQLDirective) environment.getSource();
=======
                            GraphQLDirective directive = environment.getSource();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                                    && directive.validLocations().contains(DirectiveLocation.FRAGMENT_SPREAD));
=======
                                            && directive.validLocations().contains(DirectiveLocation.FRAGMENT_SPREAD));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                            GraphQLDirective directive = (GraphQLDirective) environment.getSource();
=======
                            GraphQLDirective directive = environment.getSource();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__Type))))
=======
                    .type(nonNull(list(nonNull(__Type))))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                            GraphQLSchema schema = (GraphQLSchema) environment.getSource();
=======
                            GraphQLSchema schema = environment.getSource();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(__Type))
=======
                    .type(nonNull(__Type))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                            GraphQLSchema schema = (GraphQLSchema) environment.getSource();
=======
                            GraphQLSchema schema = environment.getSource();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                            GraphQLSchema schema = (GraphQLSchema) environment.getSource();
=======
                            GraphQLSchema schema = environment.getSource();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__Directive))))
=======
                    .type(nonNull(list(nonNull(__Directive))))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
            .type(new GraphQLNonNull(__Schema))
=======
            .type(nonNull(__Schema))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(GraphQLString)))
=======
                    .type(nonNull(GraphQLString)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
            .type(new GraphQLNonNull(GraphQLString))
=======
            .type(nonNull(GraphQLString))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/schema/GraphQLNonNull.java;<<<<<<< MINE
=======
    /**
     * A factory method for creating non null types so that when used with static imports allows
     * more readable code such as
     * {@code .type(nonNull(GraphQLString)) }
     *
     * @param wrappedType the type to wrap as being non null
     * @return a GraphQLNonNull of that wrapped type
     */
    public static GraphQLNonNull nonNull(GraphQLType wrappedType) {
        return new GraphQLNonNull(wrappedType);
    }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/schema/Coercing.java;<<<<<<< MINE
public interface Coercing<T> {
=======
public interface Coercing<I, O> {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/schema/Coercing.java;<<<<<<< MINE
    T serialize(Object input);
=======
    O serialize(Object input);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/schema/Coercing.java;<<<<<<< MINE
    T parseValue(Object input);
=======
    I parseValue(Object input);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/schema/Coercing.java;<<<<<<< MINE
    T parseLiteral(Object input);
=======
    I parseLiteral(Object input);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/schema/GraphQLList.java;<<<<<<< MINE
=======
    /**
     * A factory method for creating list types so that when used with static imports allows
     * more readable code such as
     * {@code .type(list(GraphQLString)) }
     *
     * @param wrappedType the type to wrap as being a list
     *
     * @return a GraphQLList of that wrapped type
     */
    public static GraphQLList list(GraphQLType wrappedType) {
        return new GraphQLList(wrappedType);
    }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
    public static GraphQLScalarType GraphQLInt = new GraphQLScalarType("Int", "Built-in Int", new Coercing<Integer>() {
=======
    private static boolean isWholeNumber(Object input) {
        return input instanceof Long
                || input instanceof Integer
                || input instanceof Short
                || input instanceof Byte;
    }

    // true if its a number or string that we will attempt to convert to a number via toNumber()
    private static boolean isNumberIsh(Object input) {
        return input instanceof Number || input instanceof String;
    }

    private static Number toNumber(Object input) {
        if (input instanceof Number) {
            return (Number) input;
        }
        if (input instanceof String) {
            // we go to double and then let each scalar type decide what precision they want from it.  This
            // will allow lenient behavior in string input as well as Number input... eg "42.3" as a string to a Long
            // scalar is the same as new Double(42.3) to a Long scalar.
            //
            // each type will use Java Narrow casting to turn this into the desired type (Long, Integer, Short etc...)
            //
            // See http://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html#jls-5.1.3
            //
            return Double.parseDouble((String) input);
        }
        // we never expect this and if we do, the code is wired wrong
        throw new AssertException("Unexpected case - this call should be protected by a previous call to isNumberIsh()");
    }


    public static GraphQLScalarType GraphQLInt = new GraphQLScalarType("Int", "Built-in Int", new Coercing<Integer, Integer>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
            if (input instanceof String) {
                return Integer.parseInt((String) input);
            } else if (input instanceof Integer) {
=======
            if (input instanceof Integer) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
=======
            } else if (isNumberIsh(input)) {
                return toNumber(input).intValue();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE

    public static GraphQLScalarType GraphQLLong = new GraphQLScalarType("Long", "Long type", new Coercing<Long>() {
=======
    public static GraphQLScalarType GraphQLLong = new GraphQLScalarType("Long", "Long type", new Coercing<Long, Long>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
            if (input instanceof String) {
                return Long.parseLong((String) input);
            } else if (input instanceof Long) {
=======
            if (input instanceof Long) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
            } else if (input instanceof Integer) {
                return ((Integer) input).longValue();
=======
            } else if (isNumberIsh(input)) {
                return toNumber(input).longValue();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
    public static GraphQLScalarType GraphQLFloat = new GraphQLScalarType("Float", "Built-in Float", new Coercing<Double>() {
=======
    public static GraphQLScalarType GraphQLShort = new GraphQLScalarType("Short", "Built-in Short as Int", new Coercing<Short, Short>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Double serialize(Object input) {
            if (input instanceof String) {
                return Double.parseDouble((String) input);
            } else if (input instanceof Double) {
                return (Double) input;
            } else if (input instanceof Float) {
                return (double) (Float) input;
            } else if (input instanceof Integer) {
                return (double) (Integer) input;
=======
        public Short serialize(Object input) {
            if (input instanceof Short) {
                return (Short) input;
            } else if (isNumberIsh(input)) {
                return toNumber(input).shortValue();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Double parseValue(Object input) {
=======
        public Short parseValue(Object input) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Double parseLiteral(Object input) {
            if (input instanceof IntValue) {
                return ((IntValue) input).getValue().doubleValue();
            } else if (input instanceof FloatValue) {
                return ((FloatValue) input).getValue().doubleValue();
            } else {
                return null;
=======
        public Short parseLiteral(Object input) {
            if (!(input instanceof IntValue)) return null;
            BigInteger value = ((IntValue) input).getValue();
            if (value.compareTo(SHORT_MIN) < 0 || value.compareTo(SHORT_MAX) > 0) {
                throw new GraphQLException("Int literal is too big or too small for a short, would cause overflow");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
=======
            return value.shortValue();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
    public static GraphQLScalarType GraphQLString = new GraphQLScalarType("String", "Built-in String", new Coercing<String>() {
=======
    public static GraphQLScalarType GraphQLByte = new GraphQLScalarType("Byte", "Built-in Byte as Int", new Coercing<Byte, Byte>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public String serialize(Object input) {
            return input == null ? null : input.toString();
        }

        @Override
        public String parseValue(Object input) {
            return serialize(input);
        }

        @Override
        public String parseLiteral(Object input) {
            if (!(input instanceof StringValue)) return null;
            return ((StringValue) input).getValue();
        }
    });


    public static GraphQLScalarType GraphQLBoolean = new GraphQLScalarType("Boolean", "Built-in Boolean", new Coercing<Boolean>() {
        @Override
        public Boolean serialize(Object input) {
            if (input instanceof Boolean) {
                return (Boolean) input;
            } else if (input instanceof Integer) {
                return (Integer) input > 0;
            } else if (input instanceof String) {
                return Boolean.parseBoolean((String) input);
=======
        public Byte serialize(Object input) {
            if (input instanceof Byte) {
                return (Byte) input;
            } else if (isNumberIsh(input)) {
                return toNumber(input).byteValue();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Boolean parseValue(Object input) {
=======
        public Byte parseValue(Object input) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Boolean parseLiteral(Object input) {
            if (!(input instanceof BooleanValue)) return null;
            return ((BooleanValue) input).isValue();
=======
        public Byte parseLiteral(Object input) {
            if (!(input instanceof IntValue)) return null;
            BigInteger value = ((IntValue) input).getValue();
            if (value.compareTo(BYTE_MIN) < 0 || value.compareTo(BYTE_MAX) > 0) {
                throw new GraphQLException("Int literal is too big or too small for a byte, would cause overflow");
            }
            return value.byteValue();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
    public static GraphQLScalarType GraphQLID = new GraphQLScalarType("ID", "Built-in ID", new Coercing<Object>() {
=======
    public static GraphQLScalarType GraphQLFloat = new GraphQLScalarType("Float", "Built-in Float", new Coercing<Double, Double>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Object serialize(Object input) {
            if (input instanceof String) {
                return input;
            }
            if (input instanceof Integer) {
                return String.valueOf(input);
=======
        public Double serialize(Object input) {
            if (input instanceof Double) {
                return (Double) input;
            } else if (isNumberIsh(input)) {
                return toNumber(input).doubleValue();
            } else {
                return null;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE

            return null;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Object parseValue(Object input) {
=======
        public Double parseValue(Object input) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Object parseLiteral(Object input) {
            if (input instanceof StringValue) {
                return ((StringValue) input).getValue();
            }
=======
        public Double parseLiteral(Object input) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
                return ((IntValue) input).getValue().toString();
=======
                return ((IntValue) input).getValue().doubleValue();
            } else if (input instanceof FloatValue) {
                return ((FloatValue) input).getValue().doubleValue();
            } else {
                return null;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
            return null;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
    public static GraphQLScalarType GraphQLBigInteger = new GraphQLScalarType("BigInteger", "Built-in java.math.BigInteger", new Coercing<BigInteger>() {
=======
    public static GraphQLScalarType GraphQLBigInteger = new GraphQLScalarType("BigInteger", "Built-in java.math.BigInteger", new Coercing<BigInteger, BigInteger>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
            } else if (input instanceof Integer) {
                return BigInteger.valueOf((Integer) input);
            } else if (input instanceof Long) {
                return BigInteger.valueOf((Long) input);
=======
            } else if (isNumberIsh(input)) {
                return BigInteger.valueOf(toNumber(input).longValue());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
    public static GraphQLScalarType GraphQLBigDecimal = new GraphQLScalarType("BigDecimal", "Built-in java.math.BigDecimal", new Coercing<BigDecimal>() {
=======
    public static GraphQLScalarType GraphQLBigDecimal = new GraphQLScalarType("BigDecimal", "Built-in java.math.BigDecimal", new Coercing<BigDecimal, BigDecimal>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
            } else if (input instanceof Float) {
                return BigDecimal.valueOf((Float) input);
            } else if (input instanceof Double) {
                return BigDecimal.valueOf((Double) input);
            } else if (input instanceof Integer) {
                return BigDecimal.valueOf((Integer) input);
            } else if (input instanceof Long) {
                return BigDecimal.valueOf((Long) input);
=======
            } else if (isWholeNumber(input)) {
                return BigDecimal.valueOf(toNumber(input).longValue());
            } else if (input instanceof Number) {
                return BigDecimal.valueOf(toNumber(input).doubleValue());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
    public static GraphQLScalarType GraphQLByte = new GraphQLScalarType("Byte", "Built-in Byte as Int", new Coercing<Byte>() {
=======

    public static GraphQLScalarType GraphQLString = new GraphQLScalarType("String", "Built-in String", new Coercing<String,String>() {
        @Override
        public String serialize(Object input) {
            return input == null ? null : input.toString();
        }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Byte serialize(Object input) {
            if (input instanceof String) {
                return Byte.parseByte((String) input);
            } else if (input instanceof Byte) {
                return (Byte) input;
=======
        public String parseValue(Object input) {
            return serialize(input);
        }

        @Override
        public String parseLiteral(Object input) {
            if (!(input instanceof StringValue)) return null;
            return ((StringValue) input).getValue();
        }
    });


    public static GraphQLScalarType GraphQLBoolean = new GraphQLScalarType("Boolean", "Built-in Boolean", new Coercing<Boolean,Boolean>() {
        @Override
        public Boolean serialize(Object input) {
            if (input instanceof Boolean) {
                return (Boolean) input;
            } else if (input instanceof Integer) {
                return (Integer) input > 0;
            } else if (input instanceof String) {
                return Boolean.parseBoolean((String) input);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Byte parseValue(Object input) {
=======
        public Boolean parseValue(Object input) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Byte parseLiteral(Object input) {
            if (!(input instanceof IntValue)) return null;
            BigInteger value = ((IntValue) input).getValue();
            if (value.compareTo(BYTE_MIN) < 0 || value.compareTo(BYTE_MAX) > 0) {
                throw new GraphQLException("Int literal is too big or too small for a byte, would cause overflow");
            }
            return value.byteValue();
=======
        public Boolean parseLiteral(Object input) {
            if (!(input instanceof BooleanValue)) return null;
            return ((BooleanValue) input).isValue();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
    public static GraphQLScalarType GraphQLShort = new GraphQLScalarType("Short", "Built-in Short as Int", new Coercing<Short>() {
=======

    public static GraphQLScalarType GraphQLID = new GraphQLScalarType("ID", "Built-in ID", new Coercing<Object,Object>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Short serialize(Object input) {
=======
        public Object serialize(Object input) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
                return Short.parseShort((String) input);
            } else if (input instanceof Short) {
                return (Short) input;
            } else {
                return null;
=======
                return input;
            }
            if (input instanceof Integer) {
                return String.valueOf(input);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
=======

            return null;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Short parseValue(Object input) {
=======
        public Object parseValue(Object input) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Short parseLiteral(Object input) {
            if (!(input instanceof IntValue)) return null;
            BigInteger value = ((IntValue) input).getValue();
            if (value.compareTo(SHORT_MIN) < 0 || value.compareTo(SHORT_MAX) > 0) {
                throw new GraphQLException("Int literal is too big or too small for a short, would cause overflow");
=======
        public Object parseLiteral(Object input) {
            if (input instanceof StringValue) {
                return ((StringValue) input).getValue();
            }
            if (input instanceof IntValue) {
                return ((IntValue) input).getValue().toString();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
            return value.shortValue();
=======
            return null;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
    public static GraphQLScalarType GraphQLChar = new GraphQLScalarType("Char", "Built-in Char as Character", new Coercing<Character>() {
=======

    public static GraphQLScalarType GraphQLChar = new GraphQLScalarType("Char", "Built-in Char as Character", new Coercing<Character,Character>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/relay/DefaultConnectionCursor.java;<<<<<<< MINE
=======
package graphql.relay;

public class DefaultConnectionCursor implements ConnectionCursor {

    private final String value;

    public DefaultConnectionCursor(String value) {
        if (value == null || value.isEmpty()) {
            throw new IllegalArgumentException("connection value cannot be null or empty");
        }
        this.value = value;
    }

    @Override
    public String getValue() {
        return value;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DefaultConnectionCursor that = (DefaultConnectionCursor) o;
        if (value != null ? !value.equals(that.value) : that.value != null) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        return value != null ? value.hashCode() : 0;
    }

    @Override
    public String toString() {
        return value;
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/relay/DefaultEdge.java;<<<<<<< MINE
=======
package graphql.relay;

public class DefaultEdge implements Edge {

    public DefaultEdge(Object node, DefaultConnectionCursor cursor) {
        this.node = node;
        this.cursor = cursor;
    }

    private Object node;
    private ConnectionCursor cursor;

    @Override
    public Object getNode() {
        return node;
    }

    public void setNode(Object node) {
        this.node = node;
    }

    @Override
    public ConnectionCursor getCursor() {
        return cursor;
    }

    public void setCursor(ConnectionCursor cursor) {
        this.cursor = cursor;
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("DefaultEdge{");
        sb.append("node=").append(node);
        sb.append(", cursor=").append(cursor);
        sb.append('}');
        return sb.toString();
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/relay/DefaultPageInfo.java;<<<<<<< MINE
=======
package graphql.relay;

public class DefaultPageInfo implements PageInfo {

    private ConnectionCursor startCursor;
    private ConnectionCursor endCursor;
    private boolean hasPreviousPage;
    private boolean hasNextPage;

    @Override
    public ConnectionCursor getStartCursor() {
        return startCursor;
    }

    public void setStartCursor(ConnectionCursor startCursor) {
        this.startCursor = startCursor;
    }

    @Override
    public ConnectionCursor getEndCursor() {
        return endCursor;
    }

    public void setEndCursor(ConnectionCursor endCursor) {
        this.endCursor = endCursor;
    }

    @Override
    public boolean isHasPreviousPage() {
        return hasPreviousPage;
    }

    public void setHasPreviousPage(boolean hasPreviousPage) {
        this.hasPreviousPage = hasPreviousPage;
    }

    @Override
    public boolean isHasNextPage() {
        return hasNextPage;
    }

    public void setHasNextPage(boolean hasNextPage) {
        this.hasNextPage = hasNextPage;
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("DefaultPageInfo{");
        sb.append("startCursor=").append(startCursor);
        sb.append(", endCursor=").append(endCursor);
        sb.append(", hasPreviousPage=").append(hasPreviousPage);
        sb.append(", hasNextPage=").append(hasNextPage);
        sb.append('}');
        return sb.toString();
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/relay/DefaultConnection.java;<<<<<<< MINE
=======
package graphql.relay;

import java.util.ArrayList;
import java.util.List;

public class DefaultConnection implements Connection {

    private List<Edge> edges = new ArrayList<Edge>();

    private PageInfo pageInfo;

    @Override
    public List<Edge> getEdges() {
        return edges;
    }

    public void setEdges(List<Edge> edges) {
        this.edges = edges;
    }

    @Override
    public PageInfo getPageInfo() {
        return pageInfo;
    }

    public void setPageInfo(PageInfo pageInfo) {
        this.pageInfo = pageInfo;
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("DefaultConnection{");
        sb.append("edges=").append(edges);
        sb.append(", pageInfo=").append(pageInfo);
        sb.append('}');
        return sb.toString();
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/relay/ConnectionCursor.java;<<<<<<< MINE
=======
/**
 * represents a connection cursor in relay.
 */
public interface ConnectionCursor {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/relay/ConnectionCursor.java;<<<<<<< MINE
public class ConnectionCursor {
=======
    String getValue();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/relay/ConnectionCursor.java;<<<<<<< MINE
    private final String value;

    public ConnectionCursor(String value) {
        this.value = value;
    }

    public String getValue() {
        return value;
    }

    @Override
    public boolean equals(Object o) {


        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        ConnectionCursor that = (ConnectionCursor) o;

        if (value != null ? !value.equals(that.value) : that.value != null) return false;

        return true;
    }

    @Override
    public int hashCode() {
        return value != null ? value.hashCode() : 0;
    }

    @Override
    public String toString() {
        return value;
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/relay/PageInfo.java;<<<<<<< MINE
=======
/**
 * represents a page in relay.
 */
public interface PageInfo {

    ConnectionCursor getStartCursor();

    ConnectionCursor getEndCursor();

    boolean isHasPreviousPage();

    boolean isHasNextPage();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/relay/PageInfo.java;<<<<<<< MINE
public class PageInfo {
    private ConnectionCursor startCursor;
    private ConnectionCursor endCursor;
    private boolean hasPreviousPage;
    private boolean hasNextPage;

    public ConnectionCursor getStartCursor() {
        return startCursor;
    }

    public void setStartCursor(ConnectionCursor startCursor) {
        this.startCursor = startCursor;
    }

    public ConnectionCursor getEndCursor() {
        return endCursor;
    }

    public void setEndCursor(ConnectionCursor endCursor) {
        this.endCursor = endCursor;
    }

    public boolean isHasPreviousPage() {
        return hasPreviousPage;
    }

    public void setHasPreviousPage(boolean hasPreviousPage) {
        this.hasPreviousPage = hasPreviousPage;
    }

    public boolean isHasNextPage() {
        return hasNextPage;
    }

    public void setHasNextPage(boolean hasNextPage) {
        this.hasNextPage = hasNextPage;
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/relay/SimpleListConnection.java;<<<<<<< MINE
            edges.add(new Edge(object, new ConnectionCursor(createCursor(ix++))));
=======
            edges.add(new DefaultEdge(object, new DefaultConnectionCursor(createCursor(ix++))));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/relay/SimpleListConnection.java;<<<<<<< MINE
        ConnectionCursor firstPresliceCursor = edges.get(0).cursor;
        ConnectionCursor lastPresliceCursor = edges.get(edges.size() - 1).cursor;
=======
        ConnectionCursor firstPresliceCursor = edges.get(0).getCursor();
        ConnectionCursor lastPresliceCursor = edges.get(edges.size() - 1).getCursor();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/relay/SimpleListConnection.java;<<<<<<< MINE
        PageInfo pageInfo = new PageInfo();
=======
        DefaultPageInfo pageInfo = new DefaultPageInfo();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/relay/SimpleListConnection.java;<<<<<<< MINE
        Connection connection = new Connection();
=======
        DefaultConnection connection = new DefaultConnection();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/relay/SimpleListConnection.java;<<<<<<< MINE
        Connection connection = new Connection();
        connection.setPageInfo(new PageInfo());
=======
        DefaultConnection connection = new DefaultConnection();
        connection.setPageInfo(new DefaultPageInfo());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/relay/SimpleListConnection.java;<<<<<<< MINE
        return new ConnectionCursor(cursor);
=======
        return new DefaultConnectionCursor(cursor);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/relay/Connection.java;<<<<<<< MINE

import java.util.ArrayList;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/relay/Connection.java;<<<<<<< MINE
public class Connection {
    private List<Edge> edges = new ArrayList<Edge>();

    private PageInfo pageInfo;

    public List<Edge> getEdges() {
        return edges;
    }
=======
/**
 * represents a connection in relay.
 */
public interface Connection {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/relay/Connection.java;<<<<<<< MINE
    public void setEdges(List<Edge> edges) {
        this.edges = edges;
    }
=======
    List<Edge> getEdges();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/relay/Connection.java;<<<<<<< MINE
    public PageInfo getPageInfo() {
        return pageInfo;
    }
=======
    PageInfo getPageInfo();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/relay/Connection.java;<<<<<<< MINE
    public void setPageInfo(PageInfo pageInfo) {
        this.pageInfo = pageInfo;
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/relay/Edge.java;<<<<<<< MINE
=======
/**
 * represents an edge in relay.
 */
public interface Edge {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/relay/Edge.java;<<<<<<< MINE
public class Edge {
=======
    Object getNode();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/relay/Edge.java;<<<<<<< MINE
    public Edge(Object node, ConnectionCursor cursor) {
        this.node = node;
        this.cursor = cursor;
    }
=======
    ConnectionCursor getCursor();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/relay/Edge.java;<<<<<<< MINE
    Object node;
    ConnectionCursor cursor;

    public Object getNode() {
        return node;
    }

    public void setNode(Object node) {
        this.node = node;
    }

    public ConnectionCursor getCursor() {
        return cursor;
    }

    public void setCursor(ConnectionCursor cursor) {
        this.cursor = cursor;
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/test/groovy/readme/ReadmeExamples.java;<<<<<<< MINE
=======
import static graphql.schema.GraphQLArgument.newArgument;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/test/groovy/readme/ReadmeExamples.java;<<<<<<< MINE
=======
import static graphql.schema.GraphQLList.list;
import static graphql.schema.GraphQLNonNull.nonNull;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/test/groovy/readme/ReadmeExamples.java;<<<<<<< MINE
        new GraphQLList(GraphQLString); // a list of Strings
=======
        GraphQLList.list(GraphQLString); // a list of Strings
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/test/groovy/readme/ReadmeExamples.java;<<<<<<< MINE
        new GraphQLNonNull(GraphQLString); // a non null String
=======
        GraphQLNonNull.nonNull(GraphQLString); // a non null String

        // with static imports its even shorter
        newArgument()
                .name("example")
                .type(nonNull(list(GraphQLString)));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/test/groovy/graphql/StarWarsSchema.java;<<<<<<< MINE
=======
import static graphql.schema.GraphQLList.list;
import static graphql.schema.GraphQLNonNull.nonNull;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/test/groovy/graphql/StarWarsSchema.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(GraphQLString)))
=======
                    .type(nonNull(GraphQLString)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/test/groovy/graphql/StarWarsSchema.java;<<<<<<< MINE
                    .type(new GraphQLList(new GraphQLTypeReference("Character"))))
=======
                    .type(list(new GraphQLTypeReference("Character"))))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/test/groovy/graphql/StarWarsSchema.java;<<<<<<< MINE
                    .type(new GraphQLList(episodeEnum)))
=======
                    .type(list(episodeEnum)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/test/groovy/graphql/StarWarsSchema.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(GraphQLString)))
=======
                    .type(nonNull(GraphQLString)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/test/groovy/graphql/StarWarsSchema.java;<<<<<<< MINE
                    .type(new GraphQLList(characterInterface))
=======
                    .type(list(characterInterface))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/test/groovy/graphql/StarWarsSchema.java;<<<<<<< MINE
                    .type(new GraphQLList(episodeEnum)))
=======
                    .type(list(episodeEnum)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/test/groovy/graphql/StarWarsSchema.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(GraphQLString)))
=======
                    .type(nonNull(GraphQLString)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/test/groovy/graphql/StarWarsSchema.java;<<<<<<< MINE
                    .type(new GraphQLList(characterInterface))
=======
                    .type(list(characterInterface))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/test/groovy/graphql/StarWarsSchema.java;<<<<<<< MINE
                    .type(new GraphQLList(episodeEnum)))
=======
                    .type(list(episodeEnum)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/test/groovy/graphql/StarWarsSchema.java;<<<<<<< MINE
                            .type(new GraphQLNonNull(GraphQLString)))
=======
                            .type(nonNull(GraphQLString)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/test/groovy/graphql/StarWarsSchema.java;<<<<<<< MINE
                            .type(new GraphQLNonNull(GraphQLString)))
=======
                            .type(nonNull(GraphQLString)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/main/java/com/netflix/servo/examples/EchoServerExample.java;<<<<<<< MINE
=======
    public static final int DEFAULT_PORT = 54321;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/main/java/com/netflix/servo/examples/EchoServerExample.java;<<<<<<< MINE
        final int defaultPort = 54321;
        int port = defaultPort;
=======
        int port = DEFAULT_PORT;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/main/java/com/netflix/servo/DefaultMonitorRegistry.java;<<<<<<< MINE
            MonitorRegistry r = null;
=======
            MonitorRegistry r;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/main/java/com/netflix/servo/monitor/Monitors.java;<<<<<<< MINE
        Monitor<T> m = null;
=======
        Monitor<T> m;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/main/java/com/netflix/servo/monitor/DefaultPublishingPolicy.java;<<<<<<< MINE
    private static DefaultPublishingPolicy INSTANCE = new DefaultPublishingPolicy();
=======
    private static final DefaultPublishingPolicy INSTANCE = new DefaultPublishingPolicy();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/main/java/com/netflix/servo/monitor/MinGauge.java;<<<<<<< MINE
    private AtomicLong min = new AtomicLong(Long.MAX_VALUE);
=======
    private final AtomicLong min = new AtomicLong(Long.MAX_VALUE);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/main/java/com/netflix/servo/monitor/MaxGauge.java;<<<<<<< MINE
    private AtomicLong max = new AtomicLong(0L);
=======
    private final AtomicLong max = new AtomicLong(0L);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/main/java/com/netflix/servo/monitor/BasicStopwatch.java;<<<<<<< MINE
    private Timer timer;
    private AtomicLong startTime = new AtomicLong(0L);
    private AtomicLong endTime = new AtomicLong(0L);
=======
    private final Timer timer;
    private final AtomicLong startTime = new AtomicLong(0L);
    private final AtomicLong endTime = new AtomicLong(0L);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/main/java/com/netflix/servo/monitor/BasicStopwatch.java;<<<<<<< MINE
        startTime = new AtomicLong(0L);
        endTime = new AtomicLong(0L);
=======
        startTime.set(0L);
        endTime.set(0L);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/main/java/com/netflix/servo/monitor/AnnotatedStringMonitor.java;<<<<<<< MINE
        Object v = null;
=======
        Object v;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/main/java/com/netflix/servo/jmx/JmxMonitorRegistry.java;<<<<<<< MINE

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/main/java/com/netflix/servo/jmx/JmxMonitorRegistry.java;<<<<<<< MINE
=======
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/main/java/com/netflix/servo/jmx/JmxMonitorRegistry.java;<<<<<<< MINE
=======
import javax.management.DynamicMBean;
import javax.management.MBeanServer;
import javax.management.ObjectName;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/main/java/com/netflix/servo/jmx/JmxMonitorRegistry.java;<<<<<<< MINE

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/main/java/com/netflix/servo/jmx/JmxMonitorRegistry.java;<<<<<<< MINE

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/main/java/com/netflix/servo/jmx/JmxMonitorRegistry.java;<<<<<<< MINE
import javax.management.DynamicMBean;
import javax.management.MBeanServer;
import javax.management.ObjectName;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/main/java/com/netflix/servo/jmx/JmxMonitorRegistry.java;<<<<<<< MINE
        monitors = (new MapMaker()).<MonitorConfig, Monitor<?>>makeMap();
=======
        monitors = (new MapMaker()).makeMap();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/main/java/com/netflix/servo/publish/PrefixMetricFilter.java;<<<<<<< MINE
        String value = null;
=======
        String value;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/main/java/com/netflix/servo/publish/RegexMetricFilter.java;<<<<<<< MINE
        String value = null;
=======
        String value;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/main/java/com/netflix/servo/publish/JmxMetricPoller.java;<<<<<<< MINE
        Map<String, String> props = (Map<String, String>) name.getKeyPropertyList();
=======
        Map<String, String> props = name.getKeyPropertyList();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/main/java/com/netflix/servo/util/ThreadCpuStats.java;<<<<<<< MINE
        private AtomicLongArray totals = new AtomicLongArray(BUFFER_SIZE);
=======
        private final AtomicLongArray totals = new AtomicLongArray(BUFFER_SIZE);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/main/java/com/netflix/servo/tag/BasicTagList.java;<<<<<<< MINE
            builder.add(BasicTag.parseTag(tag));
=======
            builder.add(Tags.parseTag(tag));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/main/java/com/netflix/servo/tag/SortedTagList.java;<<<<<<< MINE
import java.util.HashMap;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/main/java/com/netflix/servo/tag/SortedTagList.java;<<<<<<< MINE
=======
import java.util.LinkedHashMap;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/main/java/com/netflix/servo/tag/SortedTagList.java;<<<<<<< MINE
        Map<String, String> stringMap = new HashMap<String, String>(size());
=======
        Map<String, String> stringMap = new LinkedHashMap<String, String>(size);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/main/java/com/netflix/servo/tag/StandardTagKeys.java;<<<<<<< MINE
    private String keyName;
=======
    private final String keyName;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/monitor/PublishingPolicyTest.java;<<<<<<< MINE
        static OtherPolicy INSTANCE = new OtherPolicy();
=======
        static final OtherPolicy INSTANCE = new OtherPolicy();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/monitor/AbstractMonitorTest.java;<<<<<<< MINE
        assertTrue(newInstance("1234567890").toString().indexOf("1234567890") != -1);
        assertTrue(newInstance("47").toString().indexOf("47") != -1);
=======
        assertTrue(newInstance("1234567890").toString().contains("1234567890"));
        assertTrue(newInstance("47").toString().contains("47"));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/monitor/MonitorConfigTest.java;<<<<<<< MINE
package com.netflix.servo;
=======
package com.netflix.servo.monitor;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/monitor/MonitorConfigTest.java;<<<<<<< MINE
import com.netflix.servo.monitor.MonitorConfig;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/monitor/MonitorConfigTest.java;<<<<<<< MINE
        assertFalse(m1.equals(null));
        assertFalse(m1.equals(m2.toString()));
=======
        assertNotNull(m1);
        assertFalse(m1.toString().equals(m2.toString()));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/publish/MonitorRegistryMetricPollerTest.java;<<<<<<< MINE
        for (int i = 0; i < pollers.length; ++i) {
            pollers[i].shutdown();
=======
        for (MonitorRegistryMetricPoller poller : pollers) {
            poller.shutdown();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/publish/MonitorRegistryMetricPollerTest.java;<<<<<<< MINE
        for (int i = 0; i < infos.length; ++i) {
            if (infos[i] != null && infos[i].getThreadName().startsWith(prefix)) {
=======
        for (ThreadInfo info : infos) {
            if (info != null && info.getThreadName().startsWith(prefix)) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/MetricTest.java;<<<<<<< MINE
        assertFalse(m1.equals(null));
        assertFalse(m1.equals(m2.toString()));
=======
        assertNotNull(m1);
        assertFalse(m1.toString().equals(m2.toString()));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/tag/BasicTagTest.java;<<<<<<< MINE
        BasicTag t = BasicTag.parseTag(goodString);
=======
        Tag t = Tags.parseTag(goodString);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/tag/BasicTagTest.java;<<<<<<< MINE
        BasicTag.parseTag(badString);
=======
        Tags.parseTag(badString);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/tag/BasicTagTest.java;<<<<<<< MINE
        BasicTag.parseTag(badString);
=======
        Tags.parseTag(badString);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/tag/BasicTagTest.java;<<<<<<< MINE
        BasicTag.parseTag(badString);
=======
        Tags.parseTag(badString);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/tag/BasicTagListTest.java;<<<<<<< MINE
        assertFalse(t1.equals(null));
        assertFalse(t1.equals(t2.toString()));
=======
        assertNotNull(t1);
        assertFalse(t1.toString().equals(t2.toString()));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/tag/SortedTagListTest.java;<<<<<<< MINE
import java.util.Iterator;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/tag/SortedTagListTest.java;<<<<<<< MINE
=======
import static org.testng.Assert.assertEquals;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/tag/SortedTagListTest.java;<<<<<<< MINE
        for(Iterator<Tag> t = testListFromStrings.iterator(); t.hasNext();){
            assertTrue(t.next().equals(tagArray[i]));
=======
        for (Tag testListFromString : testListFromStrings) {
            assertEquals(testListFromString, tagArray[i]);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/tag/SortedTagListTest.java;<<<<<<< MINE
        for(Iterator<Tag> t = testListFromTags.iterator(); t.hasNext();){
            assertTrue(t.next().equals(tagArray[i]));
=======
        for (Tag testListFromTag : testListFromTags) {
            assertEquals(testListFromTag, tagArray[i]);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/tag/SortedTagListTest.java;<<<<<<< MINE
        for(Iterator<Tag> t = testListFromCollection.iterator(); t.hasNext();){
            assertTrue(t.next().equals(tagArray[i]));
=======
        for (Tag aTestListFromCollection : testListFromCollection) {
            assertEquals(aTestListFromCollection, tagArray[i]);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/tag/SortedTagListTest.java;<<<<<<< MINE
        for(String s : stringMap.keySet()){
            s.equals(tagArray[i].getKey());
=======
        for (String s : stringMap.keySet()){
            assertEquals(s, tagArray[i].getKey());
            i++;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/tag/SortedTagListTest.java;<<<<<<< MINE
        for(String s : stringMap.values()){
            s.equals(tagArray[i].getValue());
=======
        for (String s : stringMap.values()){
            assertEquals(s, tagArray[i].getValue());
            i++;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_198b8cc_f863c8f/rev_198b8cc-f863c8f/src/main/java/graphql/execution/Execution.java;<<<<<<< MINE
=======
import graphql.ExecutionResultImpl;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_198b8cc_f863c8f/rev_198b8cc-f863c8f/src/main/java/graphql/execution/Execution.java;<<<<<<< MINE
import static graphql.execution.ExecutionParameters.newParameters;
import static graphql.execution.TypeInfo.newTypeInfo;

=======
import static graphql.language.OperationDefinition.Operation.MUTATION;
import static graphql.language.OperationDefinition.Operation.QUERY;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_849169c_9f894b9/rev_849169c-9f894b9/core/src/main/java/com/google/common/truth/IterableSubject.java;<<<<<<< MINE
          // If the previous branch doesn't throw, then the subject was empty, so return false
          return false;
=======
          // If the previous branch doesn't throw, then the subject was empty, so return true
          return true;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_0072285_3e63dc1/rev_0072285-3e63dc1/src/main/java/graphql/schema/idl/errors/NotAnOutputTypeError.java;<<<<<<< MINE
package graphql.schema.idl.errors;

import graphql.language.TypeDefinition;

import static java.lang.String.format;

public class NotAnOutputTypeError extends BaseError {

    public NotAnOutputTypeError(TypeDefinition typeDefinition) {
        super(typeDefinition, format("expected OutputType, but found %s type %s", typeDefinition.getName(), lineCol(typeDefinition)));
    }
}=======
package graphql.schema.idl.errors;

import graphql.language.TypeDefinition;

import static java.lang.String.format;

public class NotAnOutputTypeError extends BaseError {

    public NotAnOutputTypeError(TypeDefinition typeDefinition) {
        super(typeDefinition, format("expected OutputType, but found %s type", typeDefinition.getName()));
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_0072285_3e63dc1/rev_0072285-3e63dc1/src/main/java/graphql/schema/idl/errors/NotAnInputTypeError.java;<<<<<<< MINE
package graphql.schema.idl.errors;

import graphql.language.TypeDefinition;

import static java.lang.String.format;

public class NotAnInputTypeError extends BaseError {

    public NotAnInputTypeError(TypeDefinition typeDefinition) {
        super(typeDefinition, format("expected InputType, but found %s type %s", typeDefinition.getName(), lineCol(typeDefinition)));
    }
}=======
package graphql.schema.idl.errors;

import graphql.language.TypeDefinition;

import static java.lang.String.format;

public class NotAnInputTypeError extends BaseError {

    public NotAnInputTypeError(TypeDefinition typeDefinition) {
        super(typeDefinition, format("expected InputType, but found %s type", typeDefinition.getName()));
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_1636dc9_a4367c6/rev_1636dc9-a4367c6/src/main/java/graphql/execution/ExecutionParameters.java;<<<<<<< MINE
=======
package graphql.execution;

import graphql.Assert;
import graphql.language.Field;

import java.util.List;
import java.util.Map;
import java.util.function.Consumer;

import static graphql.Assert.assertNotNull;

/**
 * The parameters that are passed to execution strategies
 */
public class ExecutionParameters {
    private final TypeInfo typeInfo;
    private final Object source;
    private final Map<String, Object> arguments;
    private final Map<String, List<Field>> fields;
    private final NonNullableFieldValidator nonNullableFieldValidator;

    private ExecutionParameters(TypeInfo typeInfo, Object source, Map<String, List<Field>> fields, Map<String, Object> arguments, NonNullableFieldValidator nonNullableFieldValidator) {
        this.typeInfo = assertNotNull(typeInfo, "typeInfo is null");
        this.fields = assertNotNull(fields, "fields is null");
        this.source = source;
        this.arguments = arguments;
        this.nonNullableFieldValidator = nonNullableFieldValidator;
    }

    public TypeInfo typeInfo() {
        return typeInfo;
    }

    public Object source() {
        return source;
    }

    public Map<String, List<Field>> fields() {
        return fields;
    }

    public Map<String, Object> arguments() {
        return arguments;
    }

    public NonNullableFieldValidator nonNullFieldValidator() {
        return nonNullableFieldValidator;
    }

    public ExecutionParameters transform(Consumer<Builder> builderConsumer) {
        Builder builder = newParameters(this);
        builderConsumer.accept(builder);
        return builder.build();
    }

    public static Builder newParameters() {
        return new Builder();
    }

    public static Builder newParameters(ExecutionParameters oldParameters) {
        return new Builder(oldParameters);
    }

    @Override
    public String toString() {
        return String.format("ExecutionParameters { typeInfo=%s, source=%s, fields=%s }",
                typeInfo, source, fields);
    }

    public static class Builder {
        TypeInfo typeInfo;
        Object source;
        Map<String, List<Field>> fields;
        Map<String, Object> arguments;
        NonNullableFieldValidator nonNullableFieldValidator;

        private Builder() {
        }

        private Builder(ExecutionParameters oldParameters) {
            this.typeInfo = oldParameters.typeInfo;
            this.source = oldParameters.source;
            this.fields = oldParameters.fields;
            this.arguments = oldParameters.arguments;
            this.nonNullableFieldValidator = oldParameters.nonNullableFieldValidator;
        }

        public Builder typeInfo(TypeInfo type) {
            this.typeInfo = type;
            return this;
        }

        public Builder typeInfo(TypeInfo.Builder type) {
            this.typeInfo = type.build();
            return this;
        }

        public Builder fields(Map<String, List<Field>> fields) {
            this.fields = fields;
            return this;
        }

        public Builder source(Object source) {
            this.source = source;
            return this;
        }

        public Builder arguments(Map<String, Object> arguments) {
            this.arguments = arguments;
            return this;
        }
        
        public Builder nonNullFieldValidator(NonNullableFieldValidator nonNullableFieldValidator) {
            this.nonNullableFieldValidator = Assert.assertNotNull(nonNullableFieldValidator,"requires a NonNullValidator");
            return this;
        }

        public ExecutionParameters build() {
            return new ExecutionParameters(typeInfo, source, fields, arguments, nonNullableFieldValidator);
        }
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_fe24dfe_0fdbf32/rev_fe24dfe-0fdbf32/src/main/java/graphql/execution/preparsed/PreparsedDocumentProvider.java;<<<<<<< MINE
 * Interface that allows clients to hook in Document caching and/or whitelisting of queries
=======
 * Interface that allows clients to hook in Document caching and/or the whitelisting of queries
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_fe24dfe_0fdbf32/rev_fe24dfe-0fdbf32/src/main/java/graphql/execution/preparsed/PreparsedDocumentProvider.java;<<<<<<< MINE
     * Get existing instance of a preparsed query
=======
     * This is called to get a "cached" pre-parsed query and if its not present, then the computeFunction
     * can be called to parse the query
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_fe24dfe_0fdbf32/rev_fe24dfe-0fdbf32/src/main/java/graphql/execution/preparsed/PreparsedDocumentProvider.java;<<<<<<< MINE
     * @param query The graphql query
     * @return Null of missing or an instance of {@link PreparsedDocumentEntry}
=======
     * @param query           The graphql query
     * @param computeFunction If the query has not be pre-parsed, this function can be called to parse it
     *
     * @return an instance of {@link PreparsedDocumentEntry}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_fe24dfe_0fdbf32/rev_fe24dfe-0fdbf32/src/main/java/graphql/execution/preparsed/PreparsedDocumentProvider.java;<<<<<<< MINE
    PreparsedDocumentEntry get(String query, Function<String, PreparsedDocumentEntry> compute);
=======
    PreparsedDocumentEntry get(String query, Function<String, PreparsedDocumentEntry> computeFunction);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_76a9a85_f82768d/rev_76a9a85-f82768d/servo-aws/src/main/java/com/netflix/servo/aws/AwsPropertyKeys.java;<<<<<<< MINE
 * Constant key values for setting aws related properties.
=======
 * Enum key values for setting aws related properties.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_76a9a85_f82768d/rev_76a9a85-f82768d/servo-aws/src/main/java/com/netflix/servo/aws/AwsPropertyKeys.java;<<<<<<< MINE
public class AwsPropertyKeys {
=======
public enum AwsPropertyKeys {
	
	AWS_CREDENTIALS_FILE("com.netflix.servo.aws.credentialsFile"), 
	AWS_AUTO_SCALING_END_POINT("com.netflix.servo.aws.endpoint.autoscaling"), 
	AWS_CLOUD_WATCH_END_POINT("com.netflix.servo.aws.endpoint.cloudwatch");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_76a9a85_f82768d/rev_76a9a85-f82768d/servo-aws/src/main/java/com/netflix/servo/aws/AwsPropertyKeys.java;<<<<<<< MINE
    public static final String awsCredentialsFile = "com.netflix.servo.aws.credentialsFile";
    public static final String awsAutoScalingEndpoint = "com.netflix.servo.aws.endpoint.autoscaling";
    public static final String awsCloudWatchEndpoint = "com.netflix.servo.aws.endpoint.cloudwatch";
=======
	private String bundle;
	
	/**
	 * Constructor responsible to instantiate the type of bundle
	 */
	private AwsPropertyKeys(String bundle) {
       this.bundle = bundle;
    }
	
	public String getBundle() {
		return bundle;
	}
	
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_76a9a85_f82768d/rev_76a9a85-f82768d/servo-aws/src/main/java/com/netflix/servo/aws/AwsServiceClients.java;<<<<<<< MINE
    client.setEndpoint( System.getProperty( AwsPropertyKeys.awsCloudWatchEndpoint, "monitoring.amazonaws.com" ) );
=======
    client.setEndpoint( System.getProperty( AwsPropertyKeys.AWS_CLOUD_WATCH_END_POINT.getBundle(), "monitoring.amazonaws.com" ) );
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_76a9a85_f82768d/rev_76a9a85-f82768d/servo-aws/src/main/java/com/netflix/servo/aws/AwsServiceClients.java;<<<<<<< MINE
    client.setEndpoint( System.getProperty( AwsPropertyKeys.awsAutoScalingEndpoint, "autoscaling.amazonaws.com" ) );
=======
    client.setEndpoint( System.getProperty( AwsPropertyKeys.AWS_AUTO_SCALING_END_POINT.getBundle(), "autoscaling.amazonaws.com" ) );
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/xodus/revisions/rev_bad3ed8_210f741/rev_bad3ed8-210f741/entity-store/src/main/java/jetbrains/exodus/entitystore/EntityIterableCacheAdapter.java;<<<<<<< MINE
    @NotNull
    private final PersistentEntityStoreConfig config;
=======
    private final int maxSizeOfDirectValue;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/xodus/revisions/rev_a9019b9_0ac52d6/rev_a9019b9-0ac52d6/openAPI/src/main/java/jetbrains/exodus/env/EnvironmentConfig.java;<<<<<<< MINE
    public static final String GC_USE_EXCLUSIVE_TRANSACTION = "exodus.gc.useExclusiveTransaction";

=======
    /**
     * If a file is successfully cleaned then delete after this number of milliseconds.
     */
    public static final String GC_FILES_DELETION_DELAY = "exodus.gc.filesDeletionDelay"; // in milliseconds

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/xodus/revisions/rev_a9019b9_0ac52d6/rev_a9019b9-0ac52d6/openAPI/src/main/java/jetbrains/exodus/env/EnvironmentConfig.java;<<<<<<< MINE
    public boolean getGcUseExclusiveTransaction() {
        return (Boolean) getSetting(GC_USE_EXCLUSIVE_TRANSACTION);
    }

    public EnvironmentConfig setGcUseExclusiveTransaction(final boolean useExclusiveTransaction) {
        return setSetting(GC_USE_EXCLUSIVE_TRANSACTION, useExclusiveTransaction);
    }

=======
    public int getGcFilesDeletionDelay() {
        return (Integer) getSetting(GC_FILES_DELETION_DELAY);
    }

    public EnvironmentConfig setGcFilesDeletionDelay(final int delay) {
        if (delay < 0) {
            throw new InvalidSettingException("Invalid GC files deletion delay: " + delay);
        }
        return setSetting(GC_FILES_DELETION_DELAY, delay);
    }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/xodus/revisions/rev_a9019b9_0ac52d6/rev_a9019b9-0ac52d6/environment/src/main/java/jetbrains/exodus/env/management/EnvironmentConfigMBean.java;<<<<<<< MINE
    boolean getGcUseExclusiveTransaction();

    void setGcUseExclusiveTransaction(boolean useExclusiveTransaction);

=======
    int getGcFilesDeletionDelay();

    void setGcFilesDeletionDelay(int delay);

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/xodus/revisions/rev_a9019b9_0ac52d6/rev_a9019b9-0ac52d6/environment/src/main/java/jetbrains/exodus/env/management/EnvironmentConfig.java;<<<<<<< MINE
    public boolean getGcUseExclusiveTransaction() {
        return config.getGcUseExclusiveTransaction();
    }

    @Override
    public void setGcUseExclusiveTransaction(boolean useExclusiveTransaction) {
        config.setGcUseExclusiveTransaction(useExclusiveTransaction);
    }

    @Override
=======
    public int getGcFilesDeletionDelay() {
        return config.getGcFilesDeletionDelay();
    }

    @Override
    public void setGcFilesDeletionDelay(int delay) {
        config.setGcFilesDeletionDelay(delay);
    }

    @Override
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/main/java/com/squareup/injector/internal/Keys.java;<<<<<<< MINE
=======
  /** Returns true if {@code name} is the name of a platform-provided class. */
  public static boolean isPlatformType(String name) {
    return name.startsWith("java.") || name.startsWith("javax.") || name.startsWith("android.");
  }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/main/java/com/squareup/injector/internal/AtInjectBinding.java;<<<<<<< MINE
=======
  private final Class<?> supertype;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/main/java/com/squareup/injector/internal/AtInjectBinding.java;<<<<<<< MINE
  // TODO: delegate to supertype members injector (which may be generated)
=======
  private Binding<? super T> supertypeBinding;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/main/java/com/squareup/injector/internal/AtInjectBinding.java;<<<<<<< MINE
      Constructor<T> constructor, Field[] fields) {
=======
      Constructor<T> constructor, Field[] fields, Class<?> supertype) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/main/java/com/squareup/injector/internal/AtInjectBinding.java;<<<<<<< MINE
=======
    this.supertype = supertype;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/main/java/com/squareup/injector/internal/AtInjectBinding.java;<<<<<<< MINE
=======

    // Supertype binding.
    if (supertype != null && !Keys.isPlatformType(supertype.getName())) {
      supertypeBinding = (Binding<? super T>) linker.requestBinding(
          Keys.getMembersKey(supertype), membersKey);
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/main/java/com/squareup/injector/internal/AtInjectBinding.java;<<<<<<< MINE
=======
      if (supertypeBinding != null) {
        supertypeBinding.injectMembers(t);
      }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/main/java/com/squareup/injector/internal/AtInjectBinding.java;<<<<<<< MINE
        injectedFields.toArray(new Field[injectedFields.size()]));
=======
        injectedFields.toArray(new Field[injectedFields.size()]), type.getSuperclass());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/main/java/com/squareup/codegen/InjectProcessor.java;<<<<<<< MINE
      writer.field(CodeGen.parameterizedType(Binding.class, CodeGen.typeToString(supertype)),
          "supertype", PRIVATE);
=======
      writer.field(CodeGen.parameterizedType(Binding.class,
          CodeGen.rawTypeToString(supertype, '.')), "supertype", PRIVATE);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/main/java/com/squareup/codegen/InjectProcessor.java;<<<<<<< MINE
        ? JavaWriter.stringLiteral(GeneratorKeys.get(type))
=======
        ? JavaWriter.stringLiteral(GeneratorKeys.get(type.asType()))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/main/java/com/squareup/codegen/InjectProcessor.java;<<<<<<< MINE
    String membersKey = JavaWriter.stringLiteral(GeneratorKeys.getMembersKey(type.asType()));
=======
    String membersKey = JavaWriter.stringLiteral(GeneratorKeys.rawMembersKey(type.asType()));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/main/java/com/squareup/codegen/InjectProcessor.java;<<<<<<< MINE
          CodeGen.parameterizedType(Binding.class, CodeGen.typeToString(supertype)),
          JavaWriter.stringLiteral(GeneratorKeys.getMembersKey(supertype)),
=======
          CodeGen.parameterizedType(Binding.class, CodeGen.rawTypeToString(supertype, '.')),
          JavaWriter.stringLiteral(GeneratorKeys.rawMembersKey(supertype)),
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/main/java/com/squareup/codegen/CodeGen.java;<<<<<<< MINE
=======
import com.squareup.injector.internal.Keys;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/main/java/com/squareup/codegen/CodeGen.java;<<<<<<< MINE
    String supertypeName = supertype.toString();
    if (supertypeName.startsWith("android.")
        || supertypeName.startsWith("java.")
        || supertypeName.startsWith("javax.")) {
      return null;
    } else {
      return supertype;
    }
=======
    return Keys.isPlatformType(supertype.toString()) ? null : supertype;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/main/java/com/squareup/codegen/CodeGen.java;<<<<<<< MINE
=======
  /** Returns a string for the raw type of {@code type}. Primitive types are always boxed. */
  public static String rawTypeToString(TypeMirror type, char innerClassSeparator) {
    if (!(type instanceof DeclaredType)) {
      throw new IllegalArgumentException("Unexpected type: " + type);
    }
    StringBuilder result = new StringBuilder();
    DeclaredType declaredType = (DeclaredType) type;
    rawTypeToString(result, (TypeElement) declaredType.asElement(), innerClassSeparator);
    return result.toString();
  }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/main/java/com/squareup/codegen/CodeGen.java;<<<<<<< MINE
  private static void rawTypeToString(StringBuilder result, TypeElement type,
=======
  static void rawTypeToString(StringBuilder result, TypeElement type,
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/main/java/com/squareup/codegen/GeneratorKeys.java;<<<<<<< MINE
  public static String get(TypeElement type) {
    return get(type.asType());
  }


  public static String getMembersKey(TypeMirror type) {
    return "members/" + get(type);
=======
  /**
   * Returns the members injector key for the raw type of {@code type}.
   * Parameterized types are not currently supported for members injection in
   * generated code.
   */
  public static String rawMembersKey(TypeMirror type) {
    return "members/" + CodeGen.rawTypeToString(type, '$');
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/main/java/com/squareup/codegen/GeneratorKeys.java;<<<<<<< MINE
=======
  /** Returns the provider key for {@code type}. */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/main/java/com/squareup/codegen/GeneratorKeys.java;<<<<<<< MINE
=======
  /** Returns the provided key for {@code method}. */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/main/java/com/squareup/codegen/GeneratorKeys.java;<<<<<<< MINE
=======
  /** Returns the provider key for {@code parameter}. */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/test/java/com/squareup/injector/InjectionTest.java;<<<<<<< MINE
  @Test public void noJitBindingsForAbstractClasses() {
=======
  @Test public void noProvideBindingsForAbstractClasses() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/test/java/com/squareup/injector/InjectionTest.java;<<<<<<< MINE
=======
  static class ExtendsParameterizedType extends AbstractList<Integer> {
    @Inject String string;
    @Override public Integer get(int i) {
      return i;
    }
    @Override public int size() {
      return 5;
    }
  }

  /**
   * We've had bugs where we look for the wrong keys when a class extends a
   * parameterized class. Explicitly test that we can inject such classes.
   */
  @Test public void extendsParameterizedType() {
    class TestEntryPoint {
      @Inject ExtendsParameterizedType extendsParameterizedType;
    }

    @Module(entryPoints = TestEntryPoint.class)
    class TestModule {
      @Provides String provideString() {
        return "injected";
      }
    }

    TestEntryPoint entryPoint = new TestEntryPoint();
    ObjectGraph.get(new TestModule()).inject(entryPoint);
    assertThat(entryPoint.extendsParameterizedType.string).isEqualTo("injected");
  }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8760480_a77e513/rev_8760480-a77e513/src/main/java/rx/netty/protocol/http/HttpProtocolHandlerAdapter.java;<<<<<<< MINE
/**
 * Copyright 2013 Netflix, Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package rx.netty.protocol.http;

import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelPipeline;

public class HttpProtocolHandlerAdapter<T> implements HttpProtocolHandler<T> {

    @Override
    public void configure(ChannelPipeline pipeline) {
    }

    @Override
    public void onChannelConnectOperationCompleted(ChannelFuture connectFuture) {
    }

    @Override
    public void onChannelWriteOperationCompleted(ChannelFuture requestWrittenFuture) {
    }

    @Override
    public void onChannelCloseOperationCompleted(ChannelFuture channelCloseFuture) {
    }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8760480_a77e513/rev_8760480-a77e513/src/main/java/rx/netty/protocol/http/RequestWriter.java;<<<<<<< MINE
/**
 * Copyright 2013 Netflix, Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package rx.netty.protocol.http;

import io.netty.channel.Channel;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelFutureListener;
import io.netty.channel.ChannelPipeline;
import io.netty.channel.ChannelPromise;
import io.netty.handler.codec.http.HttpObjectAggregator;
import io.netty.handler.codec.http.HttpRequest;
import io.netty.util.concurrent.DefaultPromise;
import io.netty.util.concurrent.Future;

/**
 * This class is responsible for sending a request object to the server and then setting up
 * proper listeners when sending request is successful
 * 
 * @param <T>
 *            The type of response content
 * @param <R>
 *            The type of the request
 */
class RequestWriter<T, R extends HttpRequest> {
    private final Channel channel;
    private final HttpProtocolHandler<T> handler;

    RequestWriter(Channel channel, HttpProtocolHandler<T> handler) {
        this.channel = channel;
        this.handler = handler;
    }

    Future<T> execute(R request, final RequestCompletionPromise requestCompletionPromise) {
        ChannelPromise promise = channel.newPromise();
        channel.writeAndFlush(request, promise).addListener(new ChannelFutureListener() {
            @Override
            public void operationComplete(ChannelFuture future) throws Exception {
                if (!future.isSuccess()) {
                    requestCompletionPromise.tryFailure(future.cause());
                }
            }
        }).addListener(new ChannelFutureListener() {
            @Override
            public void operationComplete(ChannelFuture future) throws Exception {
                handler.onChannelWriteOperationCompleted(future);
            }
        });
        return new RequestWrittenPromise(channel, promise);
    }

    Channel getChannel() {
        return channel;
    }

    public boolean isActive() {
        return channel.isActive();
    }

    private class RequestWrittenPromise extends DefaultPromise<T> {

        private final ChannelPromise sendRequestPromise;

        public RequestWrittenPromise(Channel channel, ChannelPromise sendRequestPromise) {
            super(channel.eventLoop());
            this.sendRequestPromise = sendRequestPromise;
        }

        @Override
        public boolean cancel(boolean mayInterruptIfRunning) {
            if (sendRequestPromise.isCancellable()) {
                sendRequestPromise.cancel(mayInterruptIfRunning);
            }
            return super.cancel(mayInterruptIfRunning);
        }
    }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8760480_a77e513/rev_8760480-a77e513/src/main/java/rx/netty/protocol/http/HttpProtocolHandler.java;<<<<<<< MINE
/**
 * Copyright 2013 Netflix, Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package rx.netty.protocol.http;

import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelPipeline;
import io.netty.handler.codec.http.FullHttpResponse;
import rx.netty.protocol.tcp.ProtocolHandler;


/**
 *
 */
public interface HttpProtocolHandler<T> extends ProtocolHandler<Void, T> {

    public static final HttpProtocolHandler<Message> SSE_HANDLER = new HttpProtocolHandlerAdapter<Message>() {
        @Override
        public void configure(ChannelPipeline pipeline) {
            pipeline.addAfter("http-response-decoder", SSEHandler.NAME, new SSEHandler());
        }        
    };

    public static final HttpProtocolHandler<FullHttpResponse> FULL_HTTP_RESPONSE_HANDLER = new FullHttpResponseHandler();
    
    public void configure(ChannelPipeline pipeline);
    
    public void onChannelConnectOperationCompleted(ChannelFuture connectFuture);
    
    public void onChannelWriteOperationCompleted(ChannelFuture requestWrittenFuture);
    
    public void onChannelCloseOperationCompleted(ChannelFuture channelCloseFuture);
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8760480_a77e513/rev_8760480-a77e513/src/main/java/rx/netty/protocol/http/ObservableHttpClient.java;<<<<<<< MINE
/**
 * Copyright 2013 Netflix, Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package rx.netty.protocol.http;

import io.netty.bootstrap.Bootstrap;
import io.netty.buffer.PooledByteBufAllocator;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelFutureListener;
import io.netty.channel.ChannelHandler;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelOption;
import io.netty.channel.ChannelPipeline;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.SimpleChannelInboundHandler;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioSocketChannel;
import io.netty.handler.codec.http.FullHttpResponse;
import io.netty.handler.codec.http.HttpClientCodec;
import io.netty.handler.codec.http.HttpContent;
import io.netty.handler.codec.http.HttpHeaders;
import io.netty.handler.codec.http.HttpObject;
import io.netty.handler.codec.http.HttpRequest;
import io.netty.handler.codec.http.HttpResponse;
import io.netty.handler.codec.http.LastHttpContent;
import io.netty.util.concurrent.EventExecutor;
import io.netty.util.concurrent.Future;
import io.netty.util.concurrent.GenericFutureListener;

import java.util.HashSet;
import java.util.Set;

import rx.Observable;
import rx.Observer;
import rx.Subscription;
import rx.subjects.PublishSubject;
import rx.subscriptions.Subscriptions;
import rx.util.functions.Action0;
import rx.util.functions.Action1;
import rx.util.functions.Func1;

public class ObservableHttpClient {
    
    private EventLoopGroup eventLoopGroup;

    // Chunk size in bytes
    private final int maxChunkSize;

    // Maximum initial line length in characters
    private final int maxInitialLineLength;

    // Maximum header size in bytes
    private final int maxHeaderSize;

    // Whether use compression when sending request
    private final boolean useCompression;

    // Flag on whether the client should follow HTTP redirects
    private final boolean followRedirects;

    // use agent string
    private final String userAgent;

    private final Set<ChannelSetting> channelSettings;

    private final EventExecutor eventExecutor;

    public ObservableHttpClient(
            EventLoopGroup eventLoopGroup,
            int maxChunkSize,
            int maxInitialLineLength,
            int maxHeaderSize,
            boolean useCompression,
            boolean followRedirects,
            String userAgent,
            Set<ChannelSetting> channelOptions,
            EventExecutor eventExecutor) {
        this.eventLoopGroup = eventLoopGroup;
        this.maxChunkSize = maxChunkSize;
        this.maxInitialLineLength = maxInitialLineLength;
        this.maxHeaderSize = maxHeaderSize;
        this.useCompression = useCompression;
        this.followRedirects = followRedirects;
        this.userAgent = userAgent;
        if (eventExecutor == null) {
            this.eventExecutor = eventLoopGroup.next();
        } else {
            this.eventExecutor = eventExecutor;
        }

        this.channelSettings = new HashSet<ChannelSetting>();
        for (ChannelSetting setting : channelOptions) {
            this.channelSettings.add(setting);
        }
    }

    private <T> ConnectionPromise<T, HttpRequest> makeConnection(Bootstrap bootstrap, UriInfo uriInfo, final HttpProtocolHandler<T> handler, final Observer<? super ObservableHttpResponse<T>> observer) {
        final ConnectionPromise<T, HttpRequest> connectionPromise = new ConnectionPromise<T, HttpRequest>(eventExecutor, handler);
        bootstrap.connect(uriInfo.getHost(), uriInfo.getPort())
        .addListener(new ChannelFutureListener() {
            @Override
            public void operationComplete(ChannelFuture future) throws Exception {
                if (future.isSuccess()) {
                    connectionPromise.onConnect(future.channel());
                } else {
                    connectionPromise.tryFailure(future.cause());
                    observer.onError(future.cause());
                }
            }
        }).addListener(new ChannelFutureListener() {
            @Override
            public void operationComplete(ChannelFuture future) throws Exception {
                handler.onChannelConnectOperationCompleted(future);
            }
        });
        return connectionPromise;
    }

    public Observable<ObservableHttpResponse<Message>> stream(final ValidatedFullHttpRequest request) {
        return execute(request, HttpProtocolHandlerAdapter.SSE_HANDLER);
    }

    public Observable<ObservableHttpResponse<FullHttpResponse>> request(final ValidatedFullHttpRequest request) {
        return execute(request, HttpProtocolHandlerAdapter.FULL_HTTP_RESPONSE_HANDLER);
    }

    public <T> Observable<ObservableHttpResponse<T>> execute(final ValidatedFullHttpRequest request, final HttpProtocolHandler<T> handler) {
        tryUpdateUserAgent(request);

        final ObservableHttpClient self = this;
        return Observable.create(new Observable.OnSubscribeFunc<ObservableHttpResponse<T>>() {
            @Override
            public Subscription onSubscribe(Observer<? super ObservableHttpResponse<T>> observer) {
                UriInfo uriInfo = request.getUriInfo();
                Bootstrap bootstrap = createBootstrap(handler, observer);
                final ConnectionPromise<T, HttpRequest> connectionPromise = makeConnection(bootstrap, uriInfo, handler, observer);

                RequestCompletionPromise<T, HttpRequest> requestCompletionPromise = new RequestCompletionPromise<T, HttpRequest>(self.eventExecutor, connectionPromise);

                GenericFutureListener<Future<RequestWriter<T, HttpRequest>>> listener = new ConnectionListener<T, HttpRequest>(connectionPromise, request, requestCompletionPromise);
                connectionPromise.addListener(listener);

                return Subscriptions.create(new Action0() {

                    @Override
                    public void call() {
                        try {
                            if (connectionPromise.channel() != null) {
                                connectionPromise.channel().close().sync()
                                        .addListener(new ChannelFutureListener() {                                            
                                            @Override
                                            public void operationComplete(ChannelFuture future) throws Exception {
                                                handler.onChannelCloseOperationCompleted(future);    
                                            }
                                        });
                            }
                        } catch (InterruptedException e) {
                            Thread.currentThread().interrupt();
                            throw new RuntimeException("Failed to unsubscribe");
                        }
                    }
                });
            }
        });
    }

    private void tryUpdateUserAgent(ValidatedFullHttpRequest request) {
        if (userAgent != null && request.headers().get(HttpHeaders.Names.USER_AGENT) == null) {
            request.headers().set(HttpHeaders.Names.USER_AGENT, userAgent);
        }
    }

    private static class HttpObservableTracker<T> extends SimpleChannelInboundHandler<HttpObject> {
        protected Observer<? super ObservableHttpResponse<T>> observer;
        
        protected PublishSubject<T> subject;

        public HttpObservableTracker(HttpProtocolHandler<T> handler, Observer<? super ObservableHttpResponse<T>> observer) {
            this.observer = observer;
        }

        @Override
        protected void channelRead0(ChannelHandlerContext ctx, HttpObject msg)
                throws Exception {
            if (msg instanceof HttpResponse) {
                HttpResponse response = (HttpResponse) msg;
                subject = PublishSubject.<T> create();
                final ObservableHttpResponse<T> httpResponse = new ObservableHttpResponse<T>(response, subject);
                ChannelPipeline pipeLine = ctx.channel().pipeline();
                ChannelHandler observerHandler = pipeLine.get("content-handler");
                if (observerHandler == null) {
                    pipeLine.addLast("content-handler", new HttpMessageObserver<T>(observer, httpResponse));
                } else {
                    pipeLine.replace(observerHandler, "content-handler", new HttpMessageObserver<T>(observer, httpResponse));
                }
                observer.onNext(httpResponse);
            }
            if (msg instanceof HttpContent) {
                ((HttpContent) msg).content().retain();
            }
            ctx.fireChannelRead(msg);
            if (msg instanceof LastHttpContent) {
                subject.onCompleted();
                observer.onCompleted();    
            }
        }

        @Override
        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)
                throws Exception {
            if (subject != null) {
                subject.onError(cause);
            }
            observer.onError(cause);
        }
    }

    private <T> Bootstrap createBootstrap(final HttpProtocolHandler<T> handler, final Observer<? super ObservableHttpResponse<T>> observer) {

        Bootstrap bootstrap = new Bootstrap();
        bootstrap
                .group(this.eventLoopGroup)
                .handler(new ChannelInitializer<SocketChannel>() {
                    @Override
                    protected void initChannel(SocketChannel ch) throws Exception {
                        ch.pipeline()
                                //.addLast("log", new LoggingHandler(LogLevel.INFO))
                                .addLast("http-codec", new HttpClientCodec(maxInitialLineLength, maxHeaderSize, maxChunkSize))
                                .addLast("http-response-decoder", new HttpObservableTracker<T>(handler, observer))
                                // we need to add this to catch any exception before channel read happens and 
                                // deliver the exception to the observer
                                .addLast("content-handler", new HttpMessageObserver<T>(observer, null));
                    }
                })
                .option(ChannelOption.TCP_NODELAY, true)
                .channel(NioSocketChannel.class);

        for (ChannelSetting setting : channelSettings) {
            bootstrap.option(setting.getOption(), setting.getValue());
        }

        return bootstrap;
    }

    public static void main(String[] args) throws Exception {
        EventLoopGroup group = new NioEventLoopGroup();
        ObservableHttpClient client = new HttpClientBuilder().build(group);

        ValidatedFullHttpRequest request = ValidatedFullHttpRequest.get("http://ec2-54-202-113-170.us-west-2.compute.amazonaws.com:7001/turbine.stream?cluster=api-prod");

        request.getUriInfo().getUri().getRawPath();
        Observable<ObservableHttpResponse<Message>> response = client.execute(request, HttpProtocolHandlerAdapter.SSE_HANDLER);

        response.flatMap(new Func1<ObservableHttpResponse<Message>, Observable<Message>>() {
            @Override
            public Observable<Message> call(ObservableHttpResponse<Message> observableHttpResponse) {
                return observableHttpResponse.content();
            }
        }).subscribe(new Action1<Message>() {
            @Override
            public void call(Message message
                    ) {
                System.out.println(message);
            }
        });

        //group.shutdownGracefully();
    }

    /**
     * A class that captures a unique channel option value. This is class is necessary
     * because we can't declare a generic variable in a non-parametric class. That is,
     * we can't simply declare {@code Map<ChannelOption<T>, T> channelSettings} without
     * declaring the parameter {@code T}.
     * 
     * Note this is a special class. It is intended to be used in a collection, and its
     * uniqueness is associated only to the option (so to keep the semantics of {@link io.netty.util.UniqueName},
     * which {@link io.netty.channel.ChannelOption} extends).
     */
    private static final class ChannelSetting<T> {
        private final ChannelOption<T> option;
        private final T value;

        public ChannelSetting(ChannelOption<T> option, T value) {
            this.option = option;
            this.value = value;
        }

        public ChannelOption<T> getOption() {
            return option;
        }

        public T getValue() {
            return value;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o)
                return true;
            if (o == null || getClass() != o.getClass())
                return false;

            ChannelSetting that = (ChannelSetting) o;

            if (option != null ? !option.equals(that.option) : that.option != null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            return option != null ? option.hashCode() : 0;
        }
    }

    public static HttpClientBuilder newBuilder() {
        return new HttpClientBuilder();
    }

    public static class HttpClientBuilder {
        // Chunk size in bytes
        private int maxChunkSize = 64 * 1024;

        // Maximum initial line length in characters
        private int maxInitialLineLength = 2048;

        // Maximum header size in bytes
        private int maxHeaderSize = 16 * 1024;

        // Whether use compression when sending request
        private boolean useCompression = false;

        // Flag on whether the client should follow HTTP redirects
        private boolean followRedirects = false;

        // Use Agent string sent with each request
        private String userAgent = "RxNetty Client";

        private EventExecutor eventExecutor;

        private Set<ChannelSetting> channelOptions = new HashSet<ChannelSetting>();

        public HttpClientBuilder maxChunkSize(int maxChunkSize) {
            this.maxChunkSize = maxChunkSize;
            return this;
        }

        public HttpClientBuilder maxInitialLineLength(int maxInitialLineLength) {
            this.maxInitialLineLength = maxInitialLineLength;
            return this;
        }

        public HttpClientBuilder maxHeaderSize(int maxHeaderSize) {
            this.maxHeaderSize = maxHeaderSize;
            return this;
        }

        public HttpClientBuilder useCompression(boolean useCompression) {
            this.useCompression = useCompression;
            return this;
        }

        public HttpClientBuilder followRedirects(boolean followRedirects) {
            this.followRedirects = followRedirects;
            return this;
        }

        public HttpClientBuilder setUserAgent(String userAgent) {
            this.userAgent = userAgent;
            return this;
        }

        public <T> HttpClientBuilder withChannelOption(ChannelOption<T> option, T value) {
            this.channelOptions.add(new ChannelSetting<T>(option, value));

            return this;
        }

        public HttpClientBuilder withEventExecutor(EventExecutor executor) {
            this.eventExecutor = executor;

            return this;
        }

        public ObservableHttpClient build(EventLoopGroup group) {
            return new ObservableHttpClient(group, maxChunkSize, maxInitialLineLength, maxHeaderSize, useCompression, followRedirects, userAgent, channelOptions, eventExecutor);
        }
    }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8760480_a77e513/rev_8760480-a77e513/src/main/java/rx/netty/protocol/http/HttpMessageObserver.java;<<<<<<< MINE
/**
 * Copyright 2013 Netflix, Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package rx.netty.protocol.http;

import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelInboundHandlerAdapter;
import rx.Observer;

/**
 * An inbound handler that observes incoming HTTP messages.
 */
public class HttpMessageObserver<T> extends ChannelInboundHandlerAdapter {

    private final Observer<? super ObservableHttpResponse<T>> observer;
    private volatile ObservableHttpResponse<T> response;

    public HttpMessageObserver(Observer<? super ObservableHttpResponse<T>> observer, ObservableHttpResponse<T> response) {
        if (observer == null) {
            throw new IllegalArgumentException("observer is null");
        }
        this.observer = observer;
        this.response = response;
    }

    // suppressing because Netty uses Object but we have typed HandlerObserver to I and expect only I
    @SuppressWarnings("unchecked")
    @Override
    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
        if (response != null) {
            response.contentObserver().onNext((T) msg);
        }
    }

    @Override
    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
        if (response != null) {
            response.contentObserver().onError(cause);
        } else {
            observer.onError(cause);
        }
    }

    @Override
    public void channelUnregistered(ChannelHandlerContext ctx) throws Exception {
        super.channelUnregistered(ctx);
        response.contentObserver().onCompleted();
    }

    @Override
    public void userEventTriggered(ChannelHandlerContext ctx, Object evt)
            throws Exception {
        if (evt == ObservableHttpResponse.Events.End) {
            response.contentObserver().onCompleted();    
            observer.onCompleted();
        }
    }
    
    
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8760480_a77e513/rev_8760480-a77e513/src/main/java/rx/netty/protocol/http/ConnectionPromise.java;<<<<<<< MINE
/**
 * Copyright 2013 Netflix, Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package rx.netty.protocol.http;

import io.netty.channel.Channel;
import io.netty.handler.codec.http.HttpRequest;
import io.netty.util.concurrent.DefaultPromise;
import io.netty.util.concurrent.EventExecutor;
import io.netty.util.concurrent.Promise;

/**
 * A {@link Promise} that gets set when a connection is established.
 * 
 * @param <T>
 *            The type of response messages.
 * @param <R>
 *            The request type
 */
class ConnectionPromise<T, R extends HttpRequest> extends DefaultPromise<RequestWriter<T, R>> {
    private EventExecutor executor;
    private Channel channel;
    private HttpProtocolHandler<T> handler;

    ConnectionPromise(EventExecutor executor, HttpProtocolHandler<T> handler) {
        this.executor = executor;
        this.handler = handler;
    }

    @Override
    protected EventExecutor executor() {
        return this.executor;
    }

    public Channel channel() {
        return channel;
    }

    void onConnect(Channel channel) {
        this.executor = channel.eventLoop();
        this.channel = channel;
        handler.configure(channel.pipeline());
        trySuccess(new RequestWriter<T, R>(channel, handler));
    }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8760480_a77e513/rev_8760480-a77e513/src/test/java/rx/netty/protocol/http/EmbeddedResources.java;<<<<<<< MINE
/**
 *
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package rx.netty.protocol.http;

import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.StreamingOutput;

import org.junit.Ignore;

@Ignore
@Path("/test")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public class EmbeddedResources {

    public static final List<String> smallStreamContent = new ArrayList<String>();

    public static final List<String> largeStreamContent = new ArrayList<String>();

    static {
        for (int i = 0; i < 3; i++) {
            smallStreamContent.add("line " + i);
        }
        for (int i = 0; i < 1000; i++) {
            largeStreamContent.add("line " + i);
        }
    }
    
    @GET
    @Path("/singleEntity")
    public Response getSingleEntity() throws IOException {
        return Response.ok("Hello world").build();
    }
    
    @GET
    @Path("/stream")
    @Produces("text/event-stream")
    public StreamingOutput getStream() {
        return new StreamingOutput() {
            @Override
            public void write(OutputStream output) throws IOException,
                    WebApplicationException {
                for (String line: smallStreamContent) {
                    String eventLine = "data:" + line + "\n\n";
                    output.write(eventLine.getBytes("UTF-8"));
                }
            }
        };
    }

    @GET
    @Path("/largeStream")
    @Produces("text/event-stream")
    public StreamingOutput getLargeStream() {
        return new StreamingOutput() {
            @Override
            public void write(OutputStream output) throws IOException,
                    WebApplicationException {
                for (String line: largeStreamContent) {
                    String eventLine = "data:" + line + "\n\n";
                    output.write(eventLine.getBytes("UTF-8"));
                }
            }
        };
    }
    
    @GET
    @Path("/timeout")
    public Response simulateTimeout(@QueryParam("timeout") int timeout) {
        try {
            Thread.sleep(timeout);
        } catch (Exception e) {
        }
        return Response.ok().build();
    }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8760480_a77e513/rev_8760480-a77e513/src/test/java/rx/netty/protocol/http/HttpClientTest.java;<<<<<<< MINE
/**
 * Copyright 2014 Netflix, Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package rx.netty.protocol.http;

import static org.junit.Assert.*;

import io.netty.buffer.ByteBuf;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelOption;
import io.netty.channel.ChannelPipeline;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.handler.codec.MessageToMessageDecoder;
import io.netty.handler.codec.http.FullHttpResponse;
import io.netty.handler.codec.http.HttpObjectAggregator;

import java.net.URI;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicReference;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import rx.Observable;
import rx.Observer;
import rx.netty.protocol.http.ObservableHttpClient.HttpClientBuilder;
import rx.util.functions.Action1;
import rx.util.functions.Func1;

import com.google.mockwebserver.MockResponse;
import com.google.mockwebserver.MockWebServer;
import com.sun.jersey.api.container.httpserver.HttpServerFactory;
import com.sun.jersey.api.core.PackagesResourceConfig;
import com.sun.net.httpserver.HttpServer;

public class HttpClientTest {
    private static HttpServer server = null;
    private static String SERVICE_URI;

    private static int port;
    private static ObservableHttpClient client;

    private static class SingleEntityHandler extends HttpProtocolHandlerAdapter<String> {

        @Override
        public void configure(ChannelPipeline pipeline) {
            pipeline.addAfter("http-response-decoder", "http-aggregator", new HttpObjectAggregator(Integer.MAX_VALUE));
            pipeline.addAfter("http-aggregator", "entity-decoder", new StringEntityDecoder());
        }
    }
    
    private static class StringEntityDecoder extends MessageToMessageDecoder<FullHttpResponse> {

        @Override
        protected void decode(ChannelHandlerContext ctx, FullHttpResponse msg,
                List<Object> out) throws Exception {
            ByteBuf buf = msg.content();
            String content = buf.toString(Charset.defaultCharset());
            out.add(content);
        }
        
    }

    @BeforeClass
    public static void init() {
        PackagesResourceConfig resourceConfig = new PackagesResourceConfig("rx.netty.protocol.http");
        port = (new Random()).nextInt(1000) + 4000;
        SERVICE_URI = "http://localhost:" + port + "/";
        try{
            server = HttpServerFactory.create(SERVICE_URI, resourceConfig);
            server.start();
        } catch(Exception e) {
            e.printStackTrace();
            fail("Unable to start server");
        }
        EventLoopGroup group = new NioEventLoopGroup();
        client = new HttpClientBuilder().build(group);
    }

    @AfterClass
    public static void shutDown() {
        server.stop(0);
    }
    
    
    @Test
    public void testChunkedStreaming() throws Exception {
        ValidatedFullHttpRequest request = ValidatedFullHttpRequest.get(SERVICE_URI + "test/stream");

        Observable<ObservableHttpResponse<Message>> response = client.execute(request, HttpProtocolHandlerAdapter.SSE_HANDLER);
        
        final List<String> result = new ArrayList<String>();

        response.flatMap(new Func1<ObservableHttpResponse<Message>, Observable<Message>>() {
            @Override
            public Observable<Message> call(ObservableHttpResponse<Message> observableHttpResponse) {
                return observableHttpResponse.content();
            }
        }).toBlockingObservable().forEach(new Action1<Message>() {
            @Override
            public void call(Message message
                    ) {
                // System.out.println(message);
                result.add(message.getEventData());
            }
        });
        assertEquals(EmbeddedResources.smallStreamContent, result);
    }
    
    @Test
    public void testMultipleChunks() throws Exception {
        ValidatedFullHttpRequest request = ValidatedFullHttpRequest.get(SERVICE_URI + "test/largeStream");

        Observable<ObservableHttpResponse<Message>> response = client.execute(request, HttpProtocolHandlerAdapter.SSE_HANDLER);
        
        final List<String> result = new ArrayList<String>();

        response.flatMap(new Func1<ObservableHttpResponse<Message>, Observable<Message>>() {
            @Override
            public Observable<Message> call(ObservableHttpResponse<Message> observableHttpResponse) {
                return observableHttpResponse.content();
            }
        }).toBlockingObservable().forEach(new Action1<Message>() {
            @Override
            public void call(Message message
                    ) {
                // System.out.println(message);
                result.add(message.getEventData());
            }
        });
        // Thread.sleep(5000);
        assertEquals(EmbeddedResources.largeStreamContent, result);
        
    }

    @Test
    public void testSingleEntity() throws Exception {
        ValidatedFullHttpRequest request = ValidatedFullHttpRequest.get(SERVICE_URI + "test/singleEntity");
        final List<String> result = new ArrayList<String>();

        Observable<ObservableHttpResponse<String>> response = client.execute(request, new SingleEntityHandler());
        response.flatMap(new Func1<ObservableHttpResponse<String>, Observable<String>>() {

            @Override
            public Observable<String> call(ObservableHttpResponse<String> t1) {
                return t1.content();
            }
        }).toBlockingObservable().forEach(new Action1<String>() {

            @Override
            public void call(String t1) {
                result.add(t1);
            }
        });
        assertEquals(1, result.size());
        assertEquals("Hello world", result.get(0));
    }
    
    @Test
    public void testFullHttpResponse() throws Exception {
        ValidatedFullHttpRequest request = ValidatedFullHttpRequest.get(SERVICE_URI + "test/singleEntity");
        final List<String> result = new ArrayList<String>();

        Observable<ObservableHttpResponse<FullHttpResponse>> response = client.request(request);
        
        response.flatMap(new Func1<ObservableHttpResponse<FullHttpResponse>, Observable<FullHttpResponse>>() {
            @Override
            public Observable<FullHttpResponse> call(
                    ObservableHttpResponse<FullHttpResponse> t1) {
                return t1.content();
            }
        }).toBlockingObservable().forEach(new Action1<FullHttpResponse>() {

            @Override
            public void call(FullHttpResponse t1) {
                result.add(t1.content().toString(Charset.defaultCharset()));
            }
            
        });
        assertEquals(1, result.size());
        assertEquals("Hello world", result.get(0));
    }
    
    @Test
    public void testNonChunkingStream() throws Exception {
        MockWebServer server = new MockWebServer();
        String content = "";
        for (String s: EmbeddedResources.largeStreamContent) {
            content += "data:" + s + "\n\n";
        }
        server.enqueue(new MockResponse().setResponseCode(200).setHeader("Content-type", "text/event-stream")
                .setBody(content)
                .removeHeader("Content-Length"));
        server.play();
        
        // TODO: this does not work for UriInfo: https://github.com/Netflix/RxNetty/issues/12
        // URI url = server.getUrl("/").toURI();

        URI url = new URI("http://localhost:" + server.getPort() + "/"); 
        
        System.err.println("Using URI: " + url);
        ValidatedFullHttpRequest request = ValidatedFullHttpRequest.get(url);
        Observable<ObservableHttpResponse<Message>> response = client.execute(request, HttpProtocolHandlerAdapter.SSE_HANDLER);
        
        final List<String> result = new ArrayList<String>();

        response.flatMap(new Func1<ObservableHttpResponse<Message>, Observable<Message>>() {
            @Override
            public Observable<Message> call(ObservableHttpResponse<Message> observableHttpResponse) {
                return observableHttpResponse.content();
            }
        }).subscribe(new Action1<Message>() {
            @Override
            public void call(Message message
                    ) {
                result.add(message.getEventData());
            }
        }, new Action1<Throwable>() {
            @Override
            public void call(Throwable t1) {
                t1.printStackTrace();
            }
        });
        Thread.sleep(2000);
        assertEquals(EmbeddedResources.largeStreamContent, result);
        server.shutdown();
    }
    
    @Test
    public void testConnectException() throws Exception {
        ValidatedFullHttpRequest request = ValidatedFullHttpRequest.get("http://www.google.com:81/");
        ObservableHttpClient timeoutClient = ObservableHttpClient.newBuilder()
        .withChannelOption(ChannelOption.CONNECT_TIMEOUT_MILLIS, 10)
        .build(new NioEventLoopGroup());
        Observable<ObservableHttpResponse<FullHttpResponse>> response = timeoutClient.request(request);
        final CountDownLatch latch = new CountDownLatch(1);
        final AtomicReference<Throwable> ex = new AtomicReference<Throwable>();
        response.subscribe(new Action1<ObservableHttpResponse<FullHttpResponse>>() {
            @Override
            public void call(ObservableHttpResponse<FullHttpResponse> t1) {
                latch.countDown();
            }
            
        }, new Action1<Throwable>() {
            @Override
            public void call(Throwable t1) {
                ex.set(t1);
                latch.countDown();
            }
        });
        latch.await(2, TimeUnit.SECONDS);
        assertTrue(ex.get() instanceof io.netty.channel.ConnectTimeoutException);
    }
    
    @Test
    public void testConnectException2() throws Exception {
        ValidatedFullHttpRequest request = ValidatedFullHttpRequest.get("http://www.google.com:81/");
        ObservableHttpClient timeoutClient = ObservableHttpClient.newBuilder()
        .withChannelOption(ChannelOption.CONNECT_TIMEOUT_MILLIS, 10)
        .build(new NioEventLoopGroup());
        Observable<ObservableHttpResponse<FullHttpResponse>> response = timeoutClient.request(request);
        final CountDownLatch latch = new CountDownLatch(1);
        final AtomicReference<Throwable> ex = new AtomicReference<Throwable>();
        response.flatMap(new Func1<ObservableHttpResponse<FullHttpResponse>, Observable<FullHttpResponse>>() {
            @Override
            public Observable<FullHttpResponse> call(
                    ObservableHttpResponse<FullHttpResponse> t1) {
                return t1.content();
            }
        }).subscribe(new Action1<FullHttpResponse>() {
            @Override
            public void call(FullHttpResponse t1) {
                latch.countDown();
            }
            
        }, new Action1<Throwable>() {
            @Override
            public void call(Throwable t1) {
                ex.set(t1);
                latch.countDown();
            }
        });
        latch.await(100000, TimeUnit.SECONDS);
        assertTrue(ex.get() instanceof io.netty.channel.ConnectTimeoutException);
    }

    
    @Test
    public void testTimeout() throws Exception {
        ValidatedFullHttpRequest request = ValidatedFullHttpRequest.get(SERVICE_URI + "test/timeout?timeout=10000");
        Observable<ObservableHttpResponse<FullHttpResponse>> response = client.execute(request, new FullHttpResponseHandler(10));
        final CountDownLatch latch = new CountDownLatch(1);
        final AtomicReference<Throwable> exception = new AtomicReference<Throwable>();
        response.flatMap(new Func1<ObservableHttpResponse<FullHttpResponse>, Observable<FullHttpResponse>>() {
            @Override
            public Observable<FullHttpResponse> call(
                    ObservableHttpResponse<FullHttpResponse> t1) {
                return t1.content();
            }
        }).subscribe(new Observer<FullHttpResponse>() {
            @Override
            public void onCompleted() {
                latch.countDown();
            }

            @Override
            public void onError(Throwable e) {
                exception.set(e);
                latch.countDown();
            }

            @Override
            public void onNext(FullHttpResponse args) {
                latch.countDown();
            }
        });
        if (!latch.await(2, TimeUnit.SECONDS)) {
            fail("Observer is not called without timeout");
        } else {
            assertTrue(exception.get() instanceof io.netty.handler.timeout.ReadTimeoutException);
        }
    }
    
    @Test
    public void testNoReadTimeout() throws Exception {
        ValidatedFullHttpRequest request = ValidatedFullHttpRequest.get(SERVICE_URI + "test/singleEntity");
        // Set a read timeout of 2 seconds
        Observable<ObservableHttpResponse<FullHttpResponse>> response = client.execute(request, new FullHttpResponseHandler(2000));
        
        final AtomicReference<Throwable> exceptionHolder = new AtomicReference<Throwable>();
        final AtomicReference<FullHttpResponse> responseHolder = new AtomicReference<FullHttpResponse>(); 
        response.flatMap(new Func1<ObservableHttpResponse<FullHttpResponse>, Observable<FullHttpResponse>>() {
            @Override
            public Observable<FullHttpResponse> call(
                    ObservableHttpResponse<FullHttpResponse> t1) {
                return t1.content();
            }
        }).subscribe(new Observer<FullHttpResponse>() {
            @Override
            public void onCompleted() {
            }

            @Override
            public void onError(Throwable e) {
                exceptionHolder.set(e);
            }

            @Override
            public void onNext(FullHttpResponse args) {
                responseHolder.set(args);
            }
        });
        Thread.sleep(3000);
        assertNull(exceptionHolder.get());
        assertEquals(200, responseHolder.get().getStatus().code());
    }

}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/xodus/revisions/rev_b1b59d5_956e4bc/rev_b1b59d5-956e4bc/environment/src/main/java/jetbrains/exodus/log/CompoundByteIteratorBase.java;<<<<<<< MINE
=======
/**
 * Copyright 2010 - 2016 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.exodus.log;

import jetbrains.exodus.ByteIterable;
import jetbrains.exodus.ByteIterator;
import jetbrains.exodus.ExodusException;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

abstract class CompoundByteIteratorBase implements ByteIterator {

    @Nullable
    private ByteIterator current;

    CompoundByteIteratorBase(@NotNull ByteIterator current) {
        this.current = current;
    }

    CompoundByteIteratorBase() {
        this(ByteIterable.EMPTY_ITERATOR);
    }

    @Override
    public boolean hasNext() {
        if (current == null) {
            return false;
        }
        if (current.hasNext()) {
            return true;
        }
        current = nextIterator();
        return hasNext();
    }

    @Override
    public long skip(final long length) {
        long skipped = 0;
        while (current != null) {
            skipped += current.skip(length - skipped);
            if (skipped >= length || !hasNext()) {
                break;
            }
        }
        return skipped;
    }

    @Override
    public byte next() {
        if (!hasNext()) {
            onFail("CompoundByteIterator: no more bytes available");
        }
        //noinspection ConstantConditions
        return current.next();
    }

    @NotNull
    protected ByteIterator getCurrent() {
        if (current == null) {
            throw new ExodusException("Can't get current ByteIterator, hasNext() == false");
        }
        return current;
    }

    /**
     * @return null to finish.
     */
    protected abstract ByteIterator nextIterator();

    protected void onFail(@NotNull final String message) throws ExodusException {
        throw new ExodusException(message);
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/volley/revisions/rev_f746ab4_2b1e41c/rev_f746ab4-2b1e41c/src/com/android/volley/VolleyLog.java;<<<<<<< MINE
    public static final boolean DEBUG = Log.isLoggable(TAG, Log.VERBOSE);
=======
    public static boolean DEBUG = Log.isLoggable(TAG, Log.VERBOSE);

    /**
     * Customize the log tag for your application, so that other apps
     * using Volley don't mix their logs with yours.
     * <br />
     * Enable the log property for your tag before starting your app:
     * <br />
     * {@code adb shell setprop log.tag.&lt;tag&gt;}
     */
    public static void setTag(String tag) {
        d("Changing log tag to %s", tag);
        TAG = tag;

        // Reinitialize the DEBUG "constant"
        DEBUG = Log.isLoggable(TAG, Log.VERBOSE);
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/volley/revisions/rev_b4448a3_f746ab4/rev_b4448a3-f746ab4/src/com/android/volley/VolleyLog.java;<<<<<<< MINE
    public static final boolean DEBUG = Log.isLoggable(TAG, Log.VERBOSE);
=======
    public static boolean DEBUG = Log.isLoggable(TAG, Log.VERBOSE);

    /**
     * Customize the log tag for your application, so that other apps
     * using Volley don't mix their logs with yours.
     * <br />
     * Enable the log property for your tag before starting your app:
     * <br />
     * {@code adb shell setprop log.tag.&lt;tag&gt;}
     */
    public static void setTag(String tag) {
        d("Changing log tag to %s", tag);
        TAG = tag;

        // Reinitialize the DEBUG "constant"
        DEBUG = Log.isLoggable(TAG, Log.VERBOSE);
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/volley/revisions/rev_2b1e41c_cc6ed2d/rev_2b1e41c-cc6ed2d/src/com/android/volley/VolleyLog.java;<<<<<<< MINE
    public static final boolean DEBUG = Log.isLoggable(TAG, Log.VERBOSE);
=======
    public static boolean DEBUG = Log.isLoggable(TAG, Log.VERBOSE);

    /**
     * Customize the log tag for your application, so that other apps
     * using Volley don't mix their logs with yours.
     * <br />
     * Enable the log property for your tag before starting your app:
     * <br />
     * {@code adb shell setprop log.tag.&lt;tag&gt;}
     */
    public static void setTag(String tag) {
        d("Changing log tag to %s", tag);
        TAG = tag;

        // Reinitialize the DEBUG "constant"
        DEBUG = Log.isLoggable(TAG, Log.VERBOSE);
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/xodus/revisions/rev_e08ae6e_5b08af2/rev_e08ae6e-5b08af2/openAPI/src/main/java/jetbrains/exodus/util/SharedRandomAccessFile.java;<<<<<<< MINE
=======
/**
 * Copyright 2010 - 2016 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.exodus.util;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.concurrent.atomic.AtomicInteger;

public class SharedRandomAccessFile extends RandomAccessFile {

    private final File file;
    private final AtomicInteger clients;

    public SharedRandomAccessFile(File file, String mode) throws FileNotFoundException {
        super(file, mode);
        this.file = file;
        clients = new AtomicInteger();
    }

    public File getFile() {
        return file;
    }

    /**
     * Employs the file and returns resulting number of its clients.
     *
     * @return number of clients of the file.
     */
    public int employ() {
        return clients.incrementAndGet();
    }

    public void close() throws IOException {
        if (clients.getAndDecrement() == 0) {
            super.close();
        }
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/xodus/revisions/rev_5de5636_3b99a1e/rev_5de5636-3b99a1e/openAPI/src/main/java/jetbrains/exodus/util/DeferredIO.java;<<<<<<< MINE
=======
/**
 * Copyright 2010 - 2016 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.exodus.util;

import jetbrains.exodus.core.execution.JobProcessorAdapter;
import jetbrains.exodus.core.execution.ThreadJobProcessorPool;

public class DeferredIO {

    private static volatile JobProcessorAdapter deferredIOProcessor = null;

    private DeferredIO() {
    }

    public static JobProcessorAdapter getJobProcessor() {
        if (deferredIOProcessor == null) {
            synchronized (DeferredIO.class) {
                if (deferredIOProcessor == null) {
                    deferredIOProcessor = ThreadJobProcessorPool.getOrCreateJobProcessor("Exodus shared deferred I/O job processor");
                }
            }
        }
        return deferredIOProcessor;
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/xodus/revisions/rev_c717e96_c0d7fbd/rev_c717e96-c0d7fbd/environment/src/main/java/jetbrains/exodus/env/StoreImpl.java;<<<<<<< MINE
    public ITree openImmutableTree(@NotNull final MetaTree metaTree) {
=======
    ITree openImmutableTree(@NotNull final MetaTree metaTree) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/xodus/revisions/rev_6212f9c_b8030b1/rev_6212f9c-b8030b1/openAPI/src/main/java/jetbrains/exodus/ByteIterator.java;<<<<<<< MINE
/**
 * Iterator of {@link ByteIterable}. Enumerates bytes without boxing.
 */
public interface ByteIterator {
=======
import jetbrains.exodus.bindings.LongBinding;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/xodus/revisions/rev_6212f9c_b8030b1/rev_6212f9c-b8030b1/openAPI/src/main/java/jetbrains/exodus/ByteIterator.java;<<<<<<< MINE
    /**
     * @return {@code true} if the iterator has more bytes
     */
    boolean hasNext();
=======
public abstract class ByteIterator {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/xodus/revisions/rev_6212f9c_b8030b1/rev_6212f9c-b8030b1/openAPI/src/main/java/jetbrains/exodus/ByteIterator.java;<<<<<<< MINE
    /**
     * @return next byte
     */
    byte next();
=======
    public abstract boolean hasNext();

    public abstract byte next();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/xodus/revisions/rev_6212f9c_b8030b1/rev_6212f9c-b8030b1/openAPI/src/main/java/jetbrains/exodus/ByteIterator.java;<<<<<<< MINE
    long skip(long bytes);
=======
    public abstract long skip(long length);

    public long nextLong(final int length) {
        return LongBinding.entryToUnsignedLong(this, length);
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/xodus/revisions/rev_6212f9c_b8030b1/rev_6212f9c-b8030b1/environment/src/main/java/jetbrains/exodus/log/CompoundByteIteratorBase.java;<<<<<<< MINE
=======
/**
 * Copyright 2010 - 2016 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.exodus.log;

import jetbrains.exodus.ByteIterable;
import jetbrains.exodus.ByteIterator;
import jetbrains.exodus.ExodusException;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

abstract class CompoundByteIteratorBase extends ByteIterator {

    @Nullable
    private ByteIterator current;

    CompoundByteIteratorBase(@NotNull ByteIterator current) {
        this.current = current;
    }

    CompoundByteIteratorBase() {
        this(ByteIterable.EMPTY_ITERATOR);
    }

    @Override
    public boolean hasNext() {
        if (current == null) {
            return false;
        }
        if (current.hasNext()) {
            return true;
        }
        current = nextIterator();
        return hasNext();
    }

    @Override
    public long skip(final long length) {
        long skipped = 0;
        while (current != null) {
            skipped += current.skip(length - skipped);
            if (skipped >= length || !hasNext()) {
                break;
            }
        }
        return skipped;
    }

    @Override
    public byte next() {
        if (!hasNext()) {
            onFail("CompoundByteIterator: no more bytes available");
        }
        //noinspection ConstantConditions
        return current.next();
    }

    @NotNull
    protected ByteIterator getCurrent() {
        if (current == null) {
            throw new ExodusException("Can't get current ByteIterator, hasNext() == false");
        }
        return current;
    }

    /**
     * @return null to finish.
     */
    protected abstract ByteIterator nextIterator();

    protected void onFail(@NotNull final String message) throws ExodusException {
        throw new ExodusException(message);
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/xodus/revisions/rev_6212f9c_b8030b1/rev_6212f9c-b8030b1/environment/src/main/java/jetbrains/exodus/log/ByteIteratorWithAddress.java;<<<<<<< MINE
    ByteIteratorWithAddress EMPTY = new ByteIteratorWithAddress() {

        @Override
        public boolean hasNext() {
            return false;
        }

        @Override
        public byte next() {
            return (byte) 0;
        }

        @Override
        public long getAddress() {
            return Loggable.NULL_ADDRESS;
        }

        @Override
        public long skip(long bytes) {
            return 0;
        }
    };

    long getAddress();
=======
    public abstract long getAddress();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/xodus/revisions/rev_1030bb3_eae9845/rev_1030bb3-eae9845/environment/src/main/java/jetbrains/exodus/io/Block.java;<<<<<<< MINE
=======

    long lastModified();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/xodus/revisions/rev_1030bb3_eae9845/rev_1030bb3-eae9845/environment/src/main/java/jetbrains/exodus/io/inMemory/MemoryDataReader.java;<<<<<<< MINE
=======

        @Override
        public long lastModified() {
            return 0;
        }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/xodus/revisions/rev_bfa7297_28d83f7/rev_bfa7297-28d83f7/openAPI/src/main/java/jetbrains/exodus/entitystore/EntityIterableHandle.java;<<<<<<< MINE
=======
/**
 * Copyright 2010 - 2016 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.exodus.entitystore;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

public interface EntityIterableHandle {

    @NotNull
    EntityIterableType getType();

    Object getIdentity();

    boolean isMatchedEntityAdded(@NotNull EntityId added);

    boolean isMatchedEntityDeleted(@NotNull EntityId deleted);

    boolean isMatchedLinkAdded(@NotNull EntityId source, @NotNull EntityId target, int linkId);

    boolean isMatchedLinkDeleted(@NotNull EntityId source, @NotNull EntityId target, int linkId);

    boolean isMatchedPropertyChanged(int entityType, int propertyId,
                                     @Nullable Comparable oldValue, @Nullable Comparable newValue);

    @NotNull
    int[] getLinkIds();

    boolean hasLinkId(int id);

    boolean hasEntityTypeId(int entityTypeId);

    boolean isExpired();
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/xodus/revisions/rev_0a19e10_a5d1b68/rev_0a19e10-a5d1b68/entity-store/src/test/java/jetbrains/exodus/entitystore/iterate/EntityIterableTests.java;<<<<<<< MINE
=======
    public void testSingleEntityIterable2() {
        final PersistentStoreTransaction txn = getStoreTransaction();
        final int count = 1;
        createNUsers(txn, count);
        txn.flush();
        EntityIterable users = txn.getSingletonIterable(txn.getAll("User").getFirst());
        users = users.union(users);
        Assert.assertFalse(((EntityIterableBase) users).canBeCached());
        Assert.assertEquals(-1L, users.getRoughCount());
        getEntityStore().getAsyncProcessor().waitForJobs(100);
        Assert.assertEquals(1L, users.getRoughCount());
    }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/xodus/revisions/rev_1f4b98b_56ea0e3/rev_1f4b98b-56ea0e3/entity-store/src/main/java/jetbrains/exodus/entitystore/iterate/PropertyValueIterable.java;<<<<<<< MINE
=======
import jetbrains.exodus.bindings.ComparableSet;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/xodus/revisions/rev_1f4b98b_56ea0e3/rev_1f4b98b-56ea0e3/entity-store/src/main/java/jetbrains/exodus/entitystore/iterate/PropertyValueIterable.java;<<<<<<< MINE
=======
                if (value instanceof ComparableSet) {
                    return ((ComparableSet) value).containsItem(PropertyValueIterable.this.value);
                }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty/src/test/java/io/reactivex/netty/client/ConnectionPoolTest.java;<<<<<<< MINE
        connection.close();
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/MetricsTest.java;<<<<<<< MINE
=======
import rx.observables.MathObservable;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/MetricsTest.java;<<<<<<< MINE
		Observable.sumInteger(rc.getObservable()).toBlockingObservable().forEach(new Action1<Integer>(){
=======
		MathObservable.sumInteger(rc.getObservable()).toBlockingObservable().forEach(new Action1<Integer>(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/MetricsTest.java;<<<<<<< MINE
		Observable.sumInteger(oc).toBlockingObservable().forEach(new Action1<Integer>(){
=======
		MathObservable.sumInteger(oc).toBlockingObservable().forEach(new Action1<Integer>(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/MetricsTest.java;<<<<<<< MINE
		Observable.sumInteger(ro1.getObservable()).toBlockingObservable().forEach(new Action1<Integer>(){
=======
		MathObservable.sumInteger(ro1.getObservable()).toBlockingObservable().forEach(new Action1<Integer>(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/MetricsTest.java;<<<<<<< MINE
		Observable.sumInteger(ro2.getObservable()).toBlockingObservable().forEach(new Action1<Integer>(){
=======
		MathObservable.sumInteger(ro2.getObservable()).toBlockingObservable().forEach(new Action1<Integer>(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/MetricsTest.java;<<<<<<< MINE
			Observable.sumInteger(ro1.getObservable()).toBlockingObservable().forEach(new Action1<Integer>(){
=======
			MathObservable.sumInteger(ro1.getObservable()).toBlockingObservable().forEach(new Action1<Integer>(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/MetricsTest.java;<<<<<<< MINE
			Observable.sumInteger(ro2.getObservable()).toBlockingObservable().forEach(new Action1<Integer>(){
=======
			MathObservable.sumInteger(ro2.getObservable()).toBlockingObservable().forEach(new Action1<Integer>(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/MetricsTest.java;<<<<<<< MINE
			Observable.sumInteger(rc.getObservable()).toBlockingObservable().forEach(new Action1<Integer>(){
=======
			MathObservable.sumInteger(rc.getObservable()).toBlockingObservable().forEach(new Action1<Integer>(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/RemoteObservableTest.java;<<<<<<< MINE
=======
import rx.observables.MathObservable;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/RemoteObservableTest.java;<<<<<<< MINE
=======
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/RemoteObservableTest.java;<<<<<<< MINE
		Observable.sumInteger(oc).toBlockingObservable().forEach(new Action1<Integer>(){
=======
		MathObservable.sumInteger(oc).toBlockingObservable().forEach(new Action1<Integer>(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/RemoteObservableTest.java;<<<<<<< MINE
		Observable.sumInteger(oc).toBlockingObservable().forEach(new Action1<Integer>(){
=======
        MathObservable.sumInteger(oc).toBlockingObservable().forEach(new Action1<Integer>(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/RemoteObservableTest.java;<<<<<<< MINE
		Observable.sumInteger(oc).toBlockingObservable().forEach(new Action1<Integer>(){
=======
        MathObservable.sumInteger(oc).toBlockingObservable().forEach(new Action1<Integer>(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/RemoteObservableTest.java;<<<<<<< MINE
			public void run(){
=======
			@Override
            public void run(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/RemoteObservableTest.java;<<<<<<< MINE
		Observable.sumInteger(merged).toBlockingObservable().forEach(new Action1<Integer>(){
=======
		MathObservable.sumInteger(merged).toBlockingObservable().forEach(new Action1<Integer>(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/RemoteObservableTest.java;<<<<<<< MINE
		Observable.sumInteger(oc2).toBlockingObservable().forEach(new Action1<Integer>(){
=======
		MathObservable.sumInteger(oc2).toBlockingObservable().forEach(new Action1<Integer>(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/RemoteObservableTest.java;<<<<<<< MINE
		Observable.sumInteger(oc).toBlockingObservable().forEach(new Action1<Integer>(){
=======
		MathObservable.sumInteger(oc).toBlockingObservable().forEach(new Action1<Integer>(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/RemoteObservableTest.java;<<<<<<< MINE
		
		Assert.assertEquals(false, sub.isUnsubscribed());
=======

        assertFalse(sub.isUnsubscribed());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/RemoteObservableTest.java;<<<<<<< MINE
		Assert.assertEquals(true, sub.isUnsubscribed());
=======
        assertTrue(sub.isUnsubscribed());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/RemoteObservableTest.java;<<<<<<< MINE
		Assert.assertEquals(false, subscription.isUnsubscribed());
=======
        assertFalse(subscription.isUnsubscribed());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/RemoteObservableTest.java;<<<<<<< MINE
		Assert.assertEquals(true, subscription.isUnsubscribed());
=======
        assertTrue(subscription.isUnsubscribed());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/RemoteObservableTest.java;<<<<<<< MINE
		Observable.sumInteger(oc).toBlockingObservable().forEach(new Action1<Integer>(){
=======
		MathObservable.sumInteger(oc).toBlockingObservable().forEach(new Action1<Integer>(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/xodus/revisions/rev_f4c3310_e47d8bc/rev_f4c3310-e47d8bc/openAPI/src/main/java/jetbrains/exodus/entitystore/StoreTransaction.java;<<<<<<< MINE
=======
    @Deprecated
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/xodus/revisions/rev_f4c3310_e47d8bc/rev_f4c3310-e47d8bc/openAPI/src/main/java/jetbrains/exodus/entitystore/ComparableGetter.java;<<<<<<< MINE
=======
/**
 * Copyright 2010 - 2017 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.exodus.entitystore;

public interface ComparableGetter {

    Comparable select(final Entity entity);
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/xodus/revisions/rev_41b74a4_68b45ff/rev_41b74a4-68b45ff/openAPI/src/main/java/jetbrains/exodus/entitystore/StoreTransaction.java;<<<<<<< MINE
=======
    @Deprecated
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/xodus/revisions/rev_41b74a4_68b45ff/rev_41b74a4-68b45ff/openAPI/src/main/java/jetbrains/exodus/entitystore/ComparableGetter.java;<<<<<<< MINE
=======
/**
 * Copyright 2010 - 2017 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.exodus.entitystore;

public interface ComparableGetter {

    Comparable select(final Entity entity);
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/client/PoolInsightProvider.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/client/CompositePoolStats.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/client/CompositePoolLimitDeterminationStrategy.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/client/PooledConnection.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/client/PoolStatsProvider.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/client/ClientChannelFactoryImpl.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/client/PoolStats.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/client/ClientConnectionHandler.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/client/ConnectionReuseEvent.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/client/PoolLimitDeterminationStrategy.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/client/PoolExhaustedException.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/client/ClientChannelFactory.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/client/PoolStatsImpl.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/client/ConnectionPoolImpl.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/client/RxClientThreadFactory.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/client/ConnectionPool.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/client/PoolConfig.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/client/MaxConnectionsBasedStrategy.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/server/ErrorHandler.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/server/RxServerThreadFactory.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/server/AbstractServerBuilder.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/protocol/http/client/HttpClientChannelFactory.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/protocol/http/client/FollowRedirectHttpClientImpl.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/protocol/http/CookiesHolder.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/protocol/http/server/HttpConnectionHandler.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/protocol/http/server/DefaultErrorResponseGenerator.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/protocol/http/server/ErrorResponseGenerator.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/protocol/http/server/UriInfoHolder.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/channel/RxDefaultThreadFactory.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/channel/ChannelWriter.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/channel/NewRxConnectionEvent.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/channel/DefaultChannelWriter.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/channel/DefaultChannelWriter.java;<<<<<<< MINE
        return unflushedWritesListener.listenForNextCompletion().take(1).flatMap(new Func1<ChannelFuture, Observable<Void>>() {
            @Override
            public Observable<Void> call(ChannelFuture future) {
                return Observable.empty();
            }
        });
=======
        return unflushedWritesListener.listenForNextCompletion().take(1).flatMap(
                new Func1<ChannelFuture, Observable<Void>>() {
                    @Override
                    public Observable<Void> call(ChannelFuture future) {
                        return Observable.empty();
                    }
                });
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/channel/ObservableConnectionFactory.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/channel/RxEventLoopProvider.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/channel/UnpooledConnectionFactory.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/channel/SingleNioLoopProvider.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/pipeline/DefaultErrorHandler.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/pipeline/ByteArrayPipelineConfigurator.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/test/java/io/reactivex/netty/client/PoolLimitStrategyTest.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/test/java/io/reactivex/netty/client/ConnectionPoolTest.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/test/java/io/reactivex/netty/client/CompositeStatsTest.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/test/java/io/reactivex/netty/client/TrackableStateChangeListener.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/test/java/io/reactivex/netty/ChannelCloseListener.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/test/java/io/reactivex/netty/NoOpChannelHandlerContext.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/test/java/io/reactivex/netty/protocol/http/client/HttpClientPoolTest.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/test/java/io/reactivex/netty/protocol/http/client/CookieTest.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/test/java/io/reactivex/netty/protocol/http/server/UriTest.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/test/java/io/reactivex/netty/protocol/http/server/HttpErrorHandlerTest.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/test/java/io/reactivex/netty/protocol/http/server/UnexpectedErrorsTest.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/test/java/io/reactivex/netty/protocol/http/server/CookieTest.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/ingress/InetAddressWhiteListIngressPolicy.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/ingress/IngressPolicies.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/ingress/IngressPolicy.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/RemoteRxServer.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/codec/Codecs.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/codec/Encoder.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/codec/Decoder.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/codec/Codec.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/ConnectParams.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/RemoteObservableConfiguration.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/RemoteRxEvent.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/ConnectConfiguration.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/filter/ServerSideFilters.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/MutableReference.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/slotting/SlotAssignment.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/slotting/SlottingStrategies.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/slotting/SlotValuePair.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/slotting/SlottingStrategy.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/slotting/NoSlotting.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/slotting/HashCodeSlotting.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/ClientConfig.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/SubscribeInfo.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/RemoteObservable.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/ServerMetrics.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/RemoteObservableConnectionHandler.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/RemoteRxNumerusEvent.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/RxEventPipelineConfigurator.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/RemoteRxConnection.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/RemoteObservableException.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/PortSelectorWithinRange.java;<<<<<<< MINE
package io.reactivex.netty; 
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.reactivex.netty;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/RemoteUnsubscribe.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/main/java/io/reactivex/netty/ConnectionMetrics.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/test/java/io/reactivex/netty/MetricsTest.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty-remote-observable/src/test/java/io/reactivex/netty/RemoteObservableTest.java;<<<<<<< MINE
=======
/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_57f1dad_0e84393/rev_57f1dad-0e84393/rx-netty/src/main/java/io/reactivex/netty/client/AbstractClientBuilder.java;<<<<<<< MINE
    public B withName(String name) {
        this.name = name;
        return returnBuilder();
    }

    public B withMetricEventsListenerFactory(MetricEventsListenerFactory eventListenersFactory) {
        this.eventListenersFactory = eventListenersFactory;
        return returnBuilder();
    }

=======
    /**
     * Overrides all the connection pool settings done previous to this call and disables connection pooling for this
     * client, unless enabled again after this call returns.
     *
     * @return This builder.
     */
    public B withNoConnectionPooling() {
        poolBuilder = null;
        return returnBuilder();
    }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_52f2378_825850e/rev_52f2378-825850e/rx-netty/src/main/java/io/reactivex/netty/protocol/http/server/HttpServerResponse.java;<<<<<<< MINE
    public Observable<Void> close() {
=======
    @Override
    public Observable<Void> _close() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_52f2378_825850e/rev_52f2378-825850e/rx-netty/src/main/java/io/reactivex/netty/channel/DefaultChannelWriter.java;<<<<<<< MINE
=======
import java.util.concurrent.atomic.AtomicBoolean;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_52f2378_825850e/rev_52f2378-825850e/rx-netty/src/main/java/io/reactivex/netty/channel/DefaultChannelWriter.java;<<<<<<< MINE
=======
    protected static final Observable<Void> CONNECTION_ALREADY_CLOSED =
            Observable.error(new IllegalStateException("Connection is already closed."));
    protected final AtomicBoolean closeIssued = new AtomicBoolean();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_52f2378_825850e/rev_52f2378-825850e/rx-netty/src/main/java/io/reactivex/netty/channel/DefaultChannelWriter.java;<<<<<<< MINE
=======

    public boolean isCloseIssued() {
        return closeIssued.get();
    }

    public Observable<Void> close() {
        if (closeIssued.compareAndSet(false, true)) {
            return _close();
        } else {
            return CONNECTION_ALREADY_CLOSED;
        }
    }

    protected Observable<Void> _close() {
        return Observable.empty();
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_52f2378_825850e/rev_52f2378-825850e/rx-netty/src/main/java/io/reactivex/netty/channel/ObservableConnection.java;<<<<<<< MINE
import java.util.concurrent.atomic.AtomicBoolean;

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_52f2378_825850e/rev_52f2378-825850e/rx-netty/src/main/java/io/reactivex/netty/channel/ObservableConnection.java;<<<<<<< MINE
    protected static final Observable<Void> CONNECTION_ALREADY_CLOSED =
            Observable.error(new IllegalStateException("Connection is already closed."));
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_52f2378_825850e/rev_52f2378-825850e/rx-netty/src/main/java/io/reactivex/netty/channel/ObservableConnection.java;<<<<<<< MINE
    protected final AtomicBoolean closeIssued = new AtomicBoolean();
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_52f2378_825850e/rev_52f2378-825850e/rx-netty/src/main/java/io/reactivex/netty/channel/ObservableConnection.java;<<<<<<< MINE
    public boolean isCloseIssued() {
        return closeIssued.get();
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_52f2378_825850e/rev_52f2378-825850e/rx-netty/src/main/java/io/reactivex/netty/channel/ObservableConnection.java;<<<<<<< MINE
     * @return Observable signifying the close on the connection. Returns {@link Observable#error(Throwable)} if the
=======
     * @return Observable signifying the close on the connection. Returns {@link rx.Observable#error(Throwable)} if the
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_52f2378_825850e/rev_52f2378-825850e/rx-netty/src/main/java/io/reactivex/netty/channel/ObservableConnection.java;<<<<<<< MINE
=======
    @Override
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_52f2378_825850e/rev_52f2378-825850e/rx-netty/src/main/java/io/reactivex/netty/channel/ObservableConnection.java;<<<<<<< MINE
        if (closeIssued.compareAndSet(false, true)) {
            PublishSubject<I> thisSubject = inputSubject;
            cleanupConnection();
            Observable<Void> toReturn = _closeChannel();
            thisSubject.onCompleted(); // This is just to make sure we make the subject as completed after we finish
                                       // closing the channel, results in more deterministic behavior for clients.
            return toReturn;
        } else {
            return CONNECTION_ALREADY_CLOSED;
        }
=======
        return super.close();
    }

    @Override
    protected Observable<Void> _close() {
        PublishSubject<I> thisSubject = inputSubject;
        cleanupConnection();
        Observable<Void> toReturn = _closeChannel();
        thisSubject.onCompleted(); // This is just to make sure we make the subject as completed after we finish
        // closing the channel, results in more deterministic behavior for clients.
        return toReturn;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_52f2378_825850e/rev_52f2378-825850e/rx-netty/src/test/java/io/reactivex/netty/protocol/http/server/UnexpectedErrorsTest.java;<<<<<<< MINE
import java.util.concurrent.ExecutionException;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_52f2378_825850e/rev_52f2378-825850e/rx-netty/src/test/java/io/reactivex/netty/protocol/http/server/UnexpectedErrorsTest.java;<<<<<<< MINE
    private static void blockTillConnected(int serverPort) throws InterruptedException, ExecutionException {
=======
    private static void blockTillConnected(int serverPort) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_52f2378_825850e/rev_52f2378-825850e/rx-netty/src/test/java/io/reactivex/netty/protocol/http/server/UnexpectedErrorsTest.java;<<<<<<< MINE
                }).toBlocking().toFuture().get();
=======
                }).toBlocking().singleOrDefault(null);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_9a0e62f_5841056/rev_9a0e62f-5841056/rx-netty/src/main/java/io/reactivex/netty/client/AbstractClientBuilder.java;<<<<<<< MINE
    protected MetricEventsListenerFactory eventListenersFactory;
    protected MetricEventsSubject<ClientMetricsEvent<?>> eventsSubject;
=======
    private SSLEngineFactory sslEngineFactory;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_9a0e62f_5841056/rev_9a0e62f-5841056/rx-netty/src/main/java/io/reactivex/netty/server/AbstractServerBuilder.java;<<<<<<< MINE
    protected MetricEventsListenerFactory eventListenersFactory;
=======
    private SSLEngineFactory sslEngineFactory;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_9a0e62f_5841056/rev_9a0e62f-5841056/rx-netty/src/main/java/io/reactivex/netty/protocol/udp/client/UdpClientBuilder.java;<<<<<<< MINE
import io.reactivex.netty.metrics.MetricEventsListener;
import io.reactivex.netty.metrics.MetricEventsListenerFactory;
=======
import io.reactivex.netty.pipeline.ssl.SSLEngineFactory;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_9a0e62f_5841056/rev_9a0e62f-5841056/rx-netty/src/main/java/io/reactivex/netty/protocol/udp/server/UdpServerBuilder.java;<<<<<<< MINE
import io.reactivex.netty.metrics.MetricEventsListener;
import io.reactivex.netty.metrics.MetricEventsListenerFactory;
=======
import io.reactivex.netty.pipeline.ssl.SSLEngineFactory;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_9a0e62f_5841056/rev_9a0e62f-5841056/rx-netty/src/main/java/io/reactivex/netty/pipeline/PipelineConfigurators.java;<<<<<<< MINE
import io.reactivex.netty.metrics.MetricEventsSubject;
=======
import io.reactivex.netty.pipeline.ssl.SSLEngineFactory;
import io.reactivex.netty.pipeline.ssl.SslPipelineConfigurator;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_08cfb63_7918160/rev_08cfb63-7918160/rx-netty/src/main/java/io/reactivex/netty/protocol/http/client/HttpClientRequest.java;<<<<<<< MINE
    public HttpClientRequest<T> withRawContent(T content, ContentTransformer<T> transformer) {
        return withRawContentSource(new SingletonRawSource<T>(content, transformer));
=======
    public <S> HttpClientRequest<T> withRawContent(S content, ContentTransformer<S> transformer) {
        return withRawContentSource(new SingletonRawSource<S>(content, transformer));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/core/src/test/java/dagger/internal/KeysTest.java;<<<<<<< MINE
=======
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/core/src/test/java/dagger/internal/KeysTest.java;<<<<<<< MINE
=======
@RunWith(JUnit4.class)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/core/src/test/java/dagger/MembersInjectorTest.java;<<<<<<< MINE
=======
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/core/src/test/java/dagger/MembersInjectorTest.java;<<<<<<< MINE
=======
@RunWith(JUnit4.class)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/core/src/test/java/dagger/InjectStaticsTest.java;<<<<<<< MINE
=======
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/core/src/test/java/dagger/InjectStaticsTest.java;<<<<<<< MINE
=======
@RunWith(JUnit4.class)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/core/src/test/java/dagger/SetBindingTest.java;<<<<<<< MINE
=======
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/core/src/test/java/dagger/SetBindingTest.java;<<<<<<< MINE
=======
@RunWith(JUnit4.class)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/core/src/test/java/dagger/LazyInjectionTest.java;<<<<<<< MINE
=======
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/core/src/test/java/dagger/LazyInjectionTest.java;<<<<<<< MINE
=======
@RunWith(JUnit4.class)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/core/src/test/java/dagger/InjectionTest.java;<<<<<<< MINE
=======
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/core/src/test/java/dagger/InjectionTest.java;<<<<<<< MINE
=======
@RunWith(JUnit4.class)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/core/src/test/java/dagger/InjectionTest.java;<<<<<<< MINE
  @Test public void noConstructorInjectionsForClassesWithTypeParameters() {
    class Parameterized<T> {
=======
  static class Parameterized<T> {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/core/src/test/java/dagger/InjectionTest.java;<<<<<<< MINE
=======
  @Test public void noConstructorInjectionsForClassesWithTypeParameters() {

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/core/src/test/java/dagger/ProblemDetectorTest.java;<<<<<<< MINE
=======
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/core/src/test/java/dagger/ProblemDetectorTest.java;<<<<<<< MINE
=======
@RunWith(JUnit4.class)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/core/src/test/java/dagger/ModuleIncludesTest.java;<<<<<<< MINE
=======
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/core/src/test/java/dagger/ModuleIncludesTest.java;<<<<<<< MINE
=======
@RunWith(JUnit4.class)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/core/src/test/java/dagger/ModuleIncludesTest.java;<<<<<<< MINE
    class TestEntryPoint {
      @Inject String s;
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/core/src/test/java/dagger/ModuleIncludesTest.java;<<<<<<< MINE
    class TestEntryPoint {
      @Inject String s;
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/core/src/test/java/dagger/ModuleIncludesTest.java;<<<<<<< MINE
    class TestEntryPoint {
      @Inject String s;
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/core/src/test/java/dagger/InjectionOfLazyTest.java;<<<<<<< MINE
=======
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/core/src/test/java/dagger/InjectionOfLazyTest.java;<<<<<<< MINE
=======
@RunWith(JUnit4.class)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/core/src/test/java/dagger/ExtensionTest.java;<<<<<<< MINE
=======
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/core/src/test/java/dagger/ExtensionTest.java;<<<<<<< MINE
=======
@RunWith(JUnit4.class)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/androidmanifest/src/test/java/dagger/androidmanifest/ModuleGeneratorTest.java;<<<<<<< MINE
=======
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/androidmanifest/src/test/java/dagger/androidmanifest/ModuleGeneratorTest.java;<<<<<<< MINE
=======
@RunWith(JUnit4.class)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/compiler/src/test/java/dagger/internal/codegen/DotWriterTest.java;<<<<<<< MINE
=======
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/compiler/src/test/java/dagger/internal/codegen/DotWriterTest.java;<<<<<<< MINE
=======
@RunWith(JUnit4.class)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/compiler/src/test/java/dagger/internal/codegen/GraphVisualizerTest.java;<<<<<<< MINE
=======
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_9f9d8ca_91e8564/rev_9f9d8ca-91e8564/compiler/src/test/java/dagger/internal/codegen/GraphVisualizerTest.java;<<<<<<< MINE
=======
@RunWith(JUnit4.class)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_d9d306a_4f8a41d/rev_d9d306a-4f8a41d/rxnetty/src/main/java/io/reactivex/netty/protocol/http/UnicastContentSubject.java;<<<<<<< MINE
 * Copyright 2014 Netflix, Inc.
=======
 * Copyright 2015 Netflix, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_d9d306a_4f8a41d/rev_d9d306a-4f8a41d/rxnetty/src/main/java/io/reactivex/netty/protocol/http/UnicastContentSubject.java;<<<<<<< MINE
        /** Following Observers are associated with the states:
         * UNSUBSCRIBED => {@link BufferedObserver}
         * SUBSCRIBED => actual observer
         * DISPOSED => {@link Subscribers#empty()}
         */
        private volatile Observer<? super T> observerRef = new BufferedObserver();
=======
        private final BufferUntilSubscriber<T> bufferedSubject = BufferUntilSubscriber.create();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_d9d306a_4f8a41d/rev_d9d306a-4f8a41d/rxnetty/src/main/java/io/reactivex/netty/protocol/http/UnicastContentSubject.java;<<<<<<< MINE
    private static final class ByteBufAwareBuffer<T> {

        private final ConcurrentLinkedQueue<Object> actual = new ConcurrentLinkedQueue<Object>();
        private final NotificationLite<T> nl = NotificationLite.instance();

        private void add(Object toAdd) {
            ReferenceCountUtil.retain(toAdd); // Released when the notification is sent.
            actual.add(toAdd);
        }

        public void sendAllNotifications(Observer<? super T> observer) {
            Object notification; // Can be onComplete notification, onError notification or just the actual "T".
            while ((notification = actual.poll()) != null) {
                try {
                    nl.accept(observer, notification);
                } finally {
                    ReferenceCountUtil.release(notification); // If it is the actual T for onNext and is a ByteBuf, it will be released.
                }
            }
        }
    }

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/client/ServerPool.java;<<<<<<< MINE
=======
/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.reactivex.netty.client;

import io.reactivex.netty.metrics.MetricEventsListener;
import io.reactivex.netty.metrics.MetricsEvent;
import rx.Observable;
import rx.annotations.Experimental;

import java.net.SocketAddress;
import java.util.NoSuchElementException;

/**
 * A pool of servers that returns a "best-suited" {@link Server} every time {@link #next()} is invoked.
 *
 * Typical use of this pool is to implement a load-balancer for distributing load over a pool of target servers.
 *
 * @author Nitesh Kant
 */
@Experimental
public interface ServerPool<M extends MetricsEvent<?>> {

    /**
     * Returns a {@link Server} instance upon each invocation.
     *
     * @return A server.
     *
     * @throws NoSuchElementException If there is no server available in the pool.
     */
    Server<M> next();

    /**
     * A contract for a server returned by {@link ServerPool}.
     *
     * @param <M>
     */
    interface Server<M extends MetricsEvent<?>> extends MetricEventsListener<M> {

        /**
         * The address for this server.
         *
         * @return The socket address for this server.
         */
        SocketAddress getAddress();

        /**
         * An {@link Observable} representing the lifecycle of this server. A terminal event on this {@link Observable}
         * would indicate removal of the server from the pool. This would be an opportunity for the client using this
         * {@link ServerPool} to cleanup resources associated to this server.
         *
         * @return An {@link Observable} representing the lifecycle of this server.
         */
        Observable<Void> getLifecycle();
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/client/PoolConfig.java;<<<<<<< MINE
=======

    /*visible for testing*/Observable<Long> getIdleConnCleanupTicker() {
        return idleConnCleanupTicker;
    }

    /*visible for testing*/PoolLimitDeterminationStrategy getLimitDeterminationStrategy() {
        return limitDeterminationStrategy;
    }

    /*visible for testing*/IdleConnectionsHolder<W, R> getIdleConnectionsHolder() {
        return idleConnectionsHolder;
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/internal/HttpTrailerSubscriberEvent.java;<<<<<<< MINE
=======
/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.reactivex.netty.protocol.http.internal;

import io.reactivex.netty.protocol.http.TrailingHeaders;
import rx.Subscriber;

public class HttpTrailerSubscriberEvent {

    private final Subscriber<? super TrailingHeaders> subscriber;

    public HttpTrailerSubscriberEvent(Subscriber<? super TrailingHeaders> subscriber) {
        this.subscriber = subscriber;
    }

    public Subscriber<? super TrailingHeaders> getSubscriber() {
        return subscriber;
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/internal/OperatorTrailer.java;<<<<<<< MINE
=======
/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.reactivex.netty.protocol.http.internal;

import io.reactivex.netty.protocol.http.TrailingHeaders;
import rx.Observable;
import rx.Observable.Operator;
import rx.Subscriber;
import rx.exceptions.Exceptions;
import rx.exceptions.OnErrorThrowable;
import rx.functions.Func0;
import rx.functions.Func2;

@SuppressWarnings({"rawtypes", "unchecked"})
public class OperatorTrailer<T extends TrailingHeaders> implements Operator {

    private final Func0<T> trailerFactory;
    private final Func2 trailerMutator;

    public OperatorTrailer(Func0<T> trailerFactory, Func2 trailerMutator) {
        this.trailerFactory = trailerFactory;
        this.trailerMutator = trailerMutator;
    }

    @Override
    public Object call(Object child) {
        final Subscriber subscriber = (Subscriber) child;
        return new Subscriber(subscriber) {

            private T trailer = trailerFactory.call();

            @SuppressWarnings("unchecked")
            @Override
            public void onCompleted() {
                subscriber.onNext(trailer);
                subscriber.onCompleted();
            }

            @Override
            public void onError(Throwable e) {
                subscriber.onError(e);
            }

            @SuppressWarnings("unchecked")
            @Override
            public void onNext(Object i) {
                try {
                    trailer = (T) trailerMutator.call(trailer, i);
                    subscriber.onNext(i);
                } catch (Throwable e) {
                    Exceptions.throwIfFatal(e);
                    onError(OnErrorThrowable.addValueAsLastCause(e, i));
                }
            }
        };
    }

    @SuppressWarnings("unchecked")
    public static <T extends TrailingHeaders> Observable liftFrom(Observable source,
                                                                   Func0<T> trailerFactory, Func2 trailerMutator) {
        return source.lift(new OperatorTrailer<T>(trailerFactory, trailerMutator));
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse.java;<<<<<<< MINE
=======
/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.reactivex.netty.protocol.http.serverNew;

import io.netty.handler.codec.http.Cookie;
import io.netty.handler.codec.http.HttpHeaders;
import io.netty.handler.codec.http.HttpMessage;
import io.netty.handler.codec.http.HttpResponseStatus;
import io.reactivex.netty.protocol.http.TrailingHeaders;
import rx.Observable;
import rx.functions.Func0;
import rx.functions.Func1;
import rx.functions.Func2;

import java.text.ParseException;
import java.util.Date;
import java.util.List;
import java.util.Set;

/**
 * An HTTP server response.
 *
 * <h2>Thread safety</h2>
 *
 * This object is <b>not</b> thread safe and should not be accessed from multiple threads.
 *
 * @param <C> The type of objects written as the content of the response.
 */
public abstract class HttpServerResponse<C> {

    /**
     * Returns the status of this response. If the status is not explicitly set, the default value is
     * {@link HttpResponseStatus#OK}
     *
     * @return The status of this response.
     */
    public abstract HttpResponseStatus getStatus();

    /**
     * Checks if there is a header with the passed name in this response.
     *
     * @param name Name of the header.
     *
     * @return {@code true} if there is a header with the passed name in this response.
     */
    public abstract boolean containsHeader(CharSequence name);

    /**
     * Checks if there is a header with the passed name and value in this response.
     *
     * @param name Name of the header.
     * @param value Value of the header.
     * @param ignoreCaseValue {@code true} then the value comparision is done ignoring case.
     *
     * @return {@code true} if there is a header with the passed name and value in this response.
     */
    public abstract boolean containsHeader(CharSequence name, CharSequence value, boolean ignoreCaseValue);

    /**
     * Returns the value of a header with the specified name.  If there are more than one values for the specified name,
     * the first value is returned.
     *
     * @param name The name of the header to search
     * @return The first header value or {@code null} if there is no such header
     */
    public abstract String getHeader(CharSequence name);

    /**
     * Returns the value of a header with the specified name.  If there are more than one values for the specified name,
     * the first value is returned.
     *
     * @param name The name of the header to search
     * @param defaultValue Default if the header does not exist.
     *
     * @return The first header value or {@code defaultValue} if there is no such header
     */
    public abstract String getHeader(CharSequence name, String defaultValue);

    /**
     * Returns the values of headers with the specified name
     *
     * @param name The name of the headers to search
     *
     * @return A {@link java.util.List} of header values which will be empty if no values are found
     */
    public abstract List<String> getAllHeaderValues(CharSequence name);

    /**
     * Returns the date header value with the specified header name.  If there are more than one header value for the
     * specified header name, the first value is returned.
     * The value is parsed as per the
     * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a> using the format:
     * <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
     *
     * @param name The name of the header to search
     *
     * @return the header value
     *
     * @throws ParseException if there is no such header or the header value is not a formatted date
     */
    public abstract Date getDateHeader(CharSequence name) throws ParseException;

    /**
     * Returns the date header value with the specified header name.  If there are more than one header value for the
     * specified header name, the first value is returned.
     * The value is parsed as per the
     * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a> using the format:
     * <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
     *
     * @param name The name of the header to search
     * @param defaultValue Default value if there is no header with this name.
     *
     * @return the header value or {@code defaultValue} if there is no header with this name.
     */
    public abstract Date getDateHeader(CharSequence name, Date defaultValue);

    /**
     * Returns the integer header value with the specified header name.  If there are more than one header value for
     * the specified header name, the first value is returned.
     *
     * @param name The name of the header to search
     *
     * @return the header value
     *
     * @throws NumberFormatException if there is no such header or the header value is not a number
     */
    public abstract int getIntHeader(CharSequence name);

    /**
     * Returns the integer header value with the specified header name.  If there are more than one header value for
     * the specified header name, the first value is returned.
     *
     * @param name The name of the header to search
     * @param defaultValue Default if the header does not exist.
     *
     * @return the header value or the {@code defaultValue} if there is no such header or the header value is not a
     * number
     */
    public abstract int getIntHeader(CharSequence name, int defaultValue);

    /**
     * Returns a new {@link Set} that contains the names of all headers in this response.  Note that modifying the
     * returned {@link Set} will not affect the state of this response.
     */
    public abstract Set<String> getHeaderNames();

    /**
     * Adds an HTTP header with the passed {@code name} and {@code value} to this response.
     *
     * @param name Name of the header.
     * @param value Value for the header.
     *
     * @return {@code this}
     */
    public abstract HttpServerResponse<C> addHeader(CharSequence name, Object value);

    /**
     * Adds the passed {@code cookie} to this response.
     *
     * @param cookie Cookie to add.
     *
     * @return {@code this}
     */
    public abstract HttpServerResponse<C> addCookie(Cookie cookie);

    /**
     * Adds the passed header as a date value to this response. The date is formatted using netty's
     * {@link HttpHeaders#addDateHeader(HttpMessage, CharSequence, Date)} which formats the date as per the
     * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a> into the format:
     * <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
     *
     * @param name Name of the header.
     * @param value Value of the header.
     *
     * @return {@code this}
     */
    public abstract HttpServerResponse<C> addDateHeader(CharSequence name, Date value);

    /**
     * Adds multiple date values for the passed header name to this response. The date values are formatted using netty's
     * {@link HttpHeaders#addDateHeader(HttpMessage, CharSequence, Date)} which formats the date as per the
     * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a> into the format:
     *
     * <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
     *
     * @param name Name of the header.
     * @param values Values for the header.
     *
     * @return {@code this}
     */
    public abstract HttpServerResponse<C> addDateHeader(CharSequence name, Iterable<Date> values);

    /**
     * Adds an HTTP header with the passed {@code name} and {@code values} to this response.
     *
     * @param name Name of the header.
     * @param values Values for the header.
     *
     * @return {@code this}
     */
    public abstract HttpServerResponse<C> addHeader(CharSequence name, Iterable<Object> values);

    /**
     * Overwrites the current value, if any, of the passed header to the passed date value for this response. The date is
     * formatted using netty's {@link HttpHeaders#addDateHeader(HttpMessage, CharSequence, Date)} which formats the date
     * as per the <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a> into
     * the format:
     * <p/>
     * <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
     *
     * @param name Name of the header.
     * @param value Value of the header.
     *
     * @return {@code this}
     */
    public abstract HttpServerResponse<C> setDateHeader(CharSequence name, Date value);

    /**
     * Overwrites the current value, if any, of the passed header to the passed value for this response.
     *
     * @param name Name of the header.
     * @param value Value of the header.
     *
     * @return {@code this}
     */
    public abstract HttpServerResponse<C> setHeader(CharSequence name, Object value);

    /**
     * Overwrites the current value, if any, of the passed header to the passed date values for this response. The date
     * is formatted using netty's {@link HttpHeaders#addDateHeader(HttpMessage, CharSequence, Date)} which formats the
     * date as per the <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a>
     * into the format:
     * <p/>
     * <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
     *
     * @param name Name of the header.
     * @param values Values of the header.
     *
     * @return {@code this}
     */
    public abstract HttpServerResponse<C> setDateHeader(CharSequence name, Iterable<Date> values);

    /**
     * Overwrites the current value, if any, of the passed header to the passed values for this response.
     *
     * @param name Name of the header.
     * @param values Values of the header.
     *
     * @return {@code this}
     */
    public abstract HttpServerResponse<C> setHeader(CharSequence name, Iterable<Object> values);

    /**
     * Removes the passed header from this response.
     *
     * @param name Name of the header.
     *
     * @return {@code this}
     */
    public abstract HttpServerResponse<C> removeHeader(CharSequence name);

    /**
     * Sets the status for the response.
     *
     * @param status Status to set.
     *
     * @return {@code this}
     */
    public abstract HttpServerResponse<C> setStatus(HttpResponseStatus status);

    /**
     * Writes the headers for the response on the underlying channel.
     *
     * Any modification to the headers after this point, will not be written on the channel and any subsequent calls to
     * this method will result in error.
     *
     * @return A {@link ContentWriter} to optionally write content. If this method has already been
     * called, then the returned {@link ContentWriter} will always throw an error when subscribed.
     */
    public abstract ContentWriter<C> sendHeaders();

    /**
     * A facility to optionally write content to the response.
     *
     * <h2>Thread safety</h2>
     *
     * This object is not thread-safe and can not be accessed from multiple threads.
     */
    public static abstract class ContentWriter<C> extends Observable<Void> {

        protected ContentWriter(OnSubscribe<Void> f) {
            super(f);
        }

        /**
         * On subscription of the returned {@link Observable}, writes the passed message stream on the underneath channel.
         *
         * <h2>Flush</h2>
         *
         * The writes are flushed when the passed stream completes.
         *
         * @param msgs Stream of messages to write.
         *
         * @return {@link Observable} representing the result of this write. Every subscription to this {@link Observable}
         * will replay the write on the channel.
         */
        public abstract ContentWriter<C> write(Observable<C> msgs);

        /**
         * Uses the passed {@link Observable} as the source of content for this request. This method provides a way to
         * write trailing headers.
         *
         * A new instance of {@link TrailingHeaders} will be created using the passed {@code trailerFactory} and the passed
         * {@code trailerMutator} will be invoked for every item emitted from the content source, giving a chance to modify
         * the trailing headers instance.
         *
         * <h2>Multiple invocations</h2>
         *
         * This method can <em>not</em> be invoked multiple times for the same response as on completion of the passed
         * source, it writes the trailing headers and trailing headers can only be written once for an HTTP response.
         * So, any subsequent invocation of this method will always emit an error when subscribed.
         *
         * <h2>Flush</h2>
         *
         * The writes are flushed when the passed stream completes.
         *
         * @param contentSource Content source for the response.
         * @param trailerFactory A factory function to create a new {@link TrailingHeaders} per subscription of the content.
         * @param trailerMutator A function to mutate the trailing header on each item emitted from the content source.
         *
         * @return An new instance of {@link Observable} which can be subscribed to execute the request.
         */
        public abstract <T extends TrailingHeaders> Observable<Void> write(Observable<C> contentSource,
                                                                           Func0<T> trailerFactory,
                                                                           Func2<T, C, T> trailerMutator);

        /**
         * Uses the passed {@link Observable} as the source of content for this request. This method provides a way to
         * write trailing headers.
         *
         * A new instance of {@link TrailingHeaders} will be created using the passed {@code trailerFactory} and the passed
         * {@code trailerMutator} will be invoked for every item emitted from the content source, giving a chance to modify
         * the trailing headers instance.
         *
         * <h2>Multiple invocations</h2>
         *
         * This method can <em>not</em> be invoked multiple times for the same response as on completion of the passed
         * source, it writes the trailing headers and trailing headers can only be written once for an HTTP response.
         * So, any subsequent invocation of this method will always emit an error when subscribed.
         *
         * @param contentSource Content source for the response.
         * @param trailerFactory A factory function to create a new {@link TrailingHeaders} per subscription of the content.
         * @param trailerMutator A function to mutate the trailing header on each item emitted from the content source.
         * @param flushSelector A {@link Func1} which is invoked for every item emitted from {@code msgs}. Channel is
         * flushed, iff this function returns, {@code true}.
         *
         * @return An new instance of {@link Observable} which can be subscribed to execute the request.
         */
        public abstract <T extends TrailingHeaders> Observable<Void> write(Observable<C> contentSource,
                                                                           Func0<T> trailerFactory,
                                                                           Func2<T, C, T> trailerMutator,
                                                                           Func1<C, Boolean> flushSelector);

        /**
         * On subscription of the returned {@link Observable}, writes the passed message stream on the underneath channel
         * and flushes the channel, everytime, {@code flushSelector} returns {@code true} . Any writes issued before
         * subscribing, will also be flushed. However, the returned {@link Observable} will not capture the result of those
         * writes, i.e. if the other writes, fail and this write does not, the returned {@link Observable} will not fail.
         *
         * @param msgs Message stream to write.
         * @param flushSelector A {@link Func1} which is invoked for every item emitted from {@code msgs}.
         * Channel is flushed, iff this function returns, {@code true}.
         *
         * @return An {@link Observable} representing the result of this and all writes done prior to the flush. Every
         * subscription to this {@link Observable} will write the passed messages and flush all pending writes, when the
         * {@code flushSelector} returns {@code true}
         */
        public abstract ContentWriter<C> write(Observable<C> msgs, Func1<C, Boolean> flushSelector);

        /**
         * On subscription of the returned {@link Observable}, writes the passed message stream on the underneath channel
         * and flushes the channel, on every write. Any writes issued before subscribing, will also be flushed. However, the
         * returned {@link Observable} will not capture the result of those writes, i.e. if the other writes, fail and this
         * write does not, the returned {@link Observable} will not fail.
         *
         * @param msgs Message stream to write.
         *
         * @return An {@link Observable} representing the result of this and all writes done prior to the flush. Every
         * subscription to this {@link Observable} will write the passed messages and flush all pending writes, on every
         * write.
         */
        public abstract ContentWriter<C> writeAndFlushOnEach(Observable<C> msgs);

        /**
         * On subscription of the returned {@link Observable}, writes the passed message stream on the underneath channel.
         *
         * <h2>Flush</h2>
         *
         * The writes are flushed when the passed stream completes.
         *
         * @param msgs Stream of messages to write.
         *
         * @return {@link Observable} representing the result of this write. Every subscription to this {@link Observable}
         * will replay the write on the channel.
         */
        public abstract ContentWriter<C> writeString(Observable<String> msgs);

        /**
         * Uses the passed {@link Observable} as the source of content for this request. This method provides a way to
         * write trailing headers.
         *
         * A new instance of {@link TrailingHeaders} will be created using the passed {@code trailerFactory} and the passed
         * {@code trailerMutator} will be invoked for every item emitted from the content source, giving a chance to modify
         * the trailing headers instance.
         *
         * <h2>Multiple invocations</h2>
         *
         * This method can <em>not</em> be invoked multiple times for the same response as on completion of the passed
         * source, it writes the trailing headers and trailing headers can only be written once for an HTTP response.
         * So, any subsequent invocation of this method will always emit an error when subscribed.
         *
         * <h2>Flush</h2>
         *
         * The writes are flushed when the passed stream completes.
         *
         * @param contentSource Content source for the response.
         * @param trailerFactory A factory function to create a new {@link TrailingHeaders} per subscription of the content.
         * @param trailerMutator A function to mutate the trailing header on each item emitted from the content source.
         *
         * @return An new instance of {@link Observable} which can be subscribed to execute the request.
         */
        public abstract <T extends TrailingHeaders> Observable<Void> writeString(Observable<String> contentSource,
                                                                                 Func0<T> trailerFactory,
                                                                                 Func2<T, String, T> trailerMutator);

        /**
         * Uses the passed {@link Observable} as the source of content for this request. This method provides a way to
         * write trailing headers.
         *
         * A new instance of {@link TrailingHeaders} will be created using the passed {@code trailerFactory} and the passed
         * {@code trailerMutator} will be invoked for every item emitted from the content source, giving a chance to modify
         * the trailing headers instance.
         *
         * <h2>Multiple invocations</h2>
         *
         * This method can <em>not</em> be invoked multiple times for the same response as on completion of the passed
         * source, it writes the trailing headers and trailing headers can only be written once for an HTTP response.
         * So, any subsequent invocation of this method will always emit an error when subscribed.
         *
         * @param contentSource Content source for the response.
         * @param trailerFactory A factory function to create a new {@link TrailingHeaders} per subscription of the content.
         * @param trailerMutator A function to mutate the trailing header on each item emitted from the content source.
         * @param flushSelector A {@link Func1} which is invoked for every item emitted from {@code msgs}. Channel is
         * flushed, iff this function returns, {@code true}.
         *
         * @return An new instance of {@link Observable} which can be subscribed to execute the request.
         */
        public abstract <T extends TrailingHeaders> Observable<Void> writeString(Observable<String> contentSource,
                                                                                 Func0<T> trailerFactory,
                                                                                 Func2<T, String, T> trailerMutator,
                                                                                 Func1<String, Boolean> flushSelector);

        /**
         * On subscription of the returned {@link Observable}, writes the passed message stream on the underneath channel
         * and flushes the channel, everytime, {@code flushSelector} returns {@code true} . Any writes issued before
         * subscribing, will also be flushed. However, the returned {@link Observable} will not capture the result of those
         * writes, i.e. if the other writes, fail and this write does not, the returned {@link Observable} will not fail.
         *
         * @param msgs Message stream to write.
         * @param flushSelector A {@link Func1} which is invoked for every item emitted from {@code msgs}.
         * Channel is flushed, iff this function returns, {@code true}.
         *
         * @return An {@link Observable} representing the result of this and all writes done prior to the flush. Every
         * subscription to this {@link Observable} will write the passed messages and flush all pending writes, when the
         * {@code flushSelector} returns {@code true}
         */
        public abstract ContentWriter<C> writeString(Observable<String> msgs, Func1<String, Boolean> flushSelector);

        /**
         * On subscription of the returned {@link Observable}, writes the passed message stream on the underneath channel
         * and flushes the channel, on every write. Any writes issued before subscribing, will also be flushed. However, the
         * returned {@link Observable} will not capture the result of those writes, i.e. if the other writes, fail and this
         * write does not, the returned {@link Observable} will not fail.
         *
         * @param msgs Message stream to write.
         *
         * @return An {@link Observable} representing the result of this and all writes done prior to the flush. Every
         * subscription to this {@link Observable} will write the passed messages and flush all pending writes, on every
         * write.
         */
        public abstract ContentWriter<C> writeStringAndFlushOnEach(Observable<String> msgs);

        /**
         * On subscription of the returned {@link Observable}, writes the passed message stream on the underneath channel.
         *
         * <h2>Flush</h2>
         *
         * The writes are flushed when the passed stream completes.
         *
         * @param msgs Stream of messages to write.
         *
         * @return {@link Observable} representing the result of this write. Every subscription to this {@link Observable}
         * will replay the write on the channel.
         */
        public abstract ContentWriter<C> writeBytes(Observable<byte[]> msgs);

        /**
         * Uses the passed {@link Observable} as the source of content for this request. This method provides a way to
         * write trailing headers.
         *
         * A new instance of {@link TrailingHeaders} will be created using the passed {@code trailerFactory} and the passed
         * {@code trailerMutator} will be invoked for every item emitted from the content source, giving a chance to modify
         * the trailing headers instance.
         *
         * <h2>Multiple invocations</h2>
         *
         * This method can <em>not</em> be invoked multiple times for the same response as on completion of the passed
         * source, it writes the trailing headers and trailing headers can only be written once for an HTTP response.
         * So, any subsequent invocation of this method will always emit an error when subscribed.
         *
         * <h2>Flush</h2>
         *
         * The writes are flushed when the passed stream completes.
         *
         * @param contentSource Content source for the response.
         * @param trailerFactory A factory function to create a new {@link TrailingHeaders} per subscription of the content.
         * @param trailerMutator A function to mutate the trailing header on each item emitted from the content source.
         *
         * @return An new instance of {@link Observable} which can be subscribed to execute the request.
         */
        public abstract <T extends TrailingHeaders> Observable<Void> writeBytes(Observable<byte[]> contentSource,
                                                                                Func0<T> trailerFactory,
                                                                                Func2<T, byte[], T> trailerMutator);

        /**
         * Uses the passed {@link Observable} as the source of content for this request. This method provides a way to
         * write trailing headers.
         *
         * A new instance of {@link TrailingHeaders} will be created using the passed {@code trailerFactory} and the passed
         * {@code trailerMutator} will be invoked for every item emitted from the content source, giving a chance to modify
         * the trailing headers instance.
         *
         * <h2>Multiple invocations</h2>
         *
         * This method can <em>not</em> be invoked multiple times for the same response as on completion of the passed
         * source, it writes the trailing headers and trailing headers can only be written once for an HTTP response.
         * So, any subsequent invocation of this method will always emit an error when subscribed.
         *
         * @param contentSource Content source for the response.
         * @param trailerFactory A factory function to create a new {@link TrailingHeaders} per subscription of the content.
         * @param trailerMutator A function to mutate the trailing header on each item emitted from the content source.
         * @param flushSelector A {@link Func1} which is invoked for every item emitted from {@code msgs}. Channel is
         * flushed, iff this function returns, {@code true}.
         *
         * @return An new instance of {@link Observable} which can be subscribed to execute the request.
         */
        public abstract <T extends TrailingHeaders> Observable<Void> writeBytes(Observable<byte[]> contentSource,
                                                                                Func0<T> trailerFactory,
                                                                                Func2<T, byte[], T> trailerMutator,
                                                                                Func1<byte[], Boolean> flushSelector);

        /**
         * On subscription of the returned {@link Observable}, writes the passed message stream on the underneath channel
         * and flushes the channel, everytime, {@code flushSelector} returns {@code true} . Any writes issued before
         * subscribing, will also be flushed. However, the returned {@link Observable} will not capture the result of those
         * writes, i.e. if the other writes, fail and this write does not, the returned {@link Observable} will not fail.
         *
         * @param msgs Message stream to write.
         * @param flushSelector A {@link Func1} which is invoked for every item emitted from {@code msgs}.
         * Channel is flushed, iff this function returns, {@code true}.
         *
         * @return An {@link Observable} representing the result of this and all writes done prior to the flush. Every
         * subscription to this {@link Observable} will write the passed messages and flush all pending writes, when the
         * {@code flushSelector} returns {@code true}
         */
        public abstract ContentWriter<C> writeBytes(Observable<byte[]> msgs, Func1<byte[], Boolean> flushSelector);

        /**
         * On subscription of the returned {@link Observable}, writes the passed message stream on the underneath channel
         * and flushes the channel, on every write. Any writes issued before subscribing, will also be flushed. However, the
         * returned {@link Observable} will not capture the result of those writes, i.e. if the other writes, fail and this
         * write does not, the returned {@link Observable} will not fail.
         *
         * @param msgs Message stream to write.
         *
         * @return An {@link Observable} representing the result of this and all writes done prior to the flush. Every
         * subscription to this {@link Observable} will write the passed messages and flush all pending writes, on every
         * write.
         */
        public abstract ContentWriter<C> writeBytesAndFlushOnEach(Observable<byte[]> msgs);
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest.java;<<<<<<< MINE
=======
/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.reactivex.netty.protocol.http.serverNew;

import io.netty.handler.codec.http.Cookie;
import io.netty.handler.codec.http.HttpHeaders;
import io.netty.handler.codec.http.HttpMessage;
import io.netty.handler.codec.http.HttpMethod;
import io.netty.handler.codec.http.HttpVersion;
import rx.Observable;
import rx.Subscriber;

import java.text.ParseException;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

/**
 * HTTP server request
 *
 * <h2>Thread safety</h2>
 *
 * This object is not thread-safe and must not be used by multiple threads.
 *
 * <h2>Mutability</h2>
 *
 * Headers and trailing headers can be mutated for this response.
 *
 * <h2>Content consumption</h2>
 *
 * Unless the channel is set to auto-read, it is required for a {@link RequestHandler} to either subscribe to
 * {@link #getContent()} or {@link #discardContent()} after receiving this request. Failure to do so would mean
 * that no further data will be read from the connection and hence no futher requests on the same connection would be
 * passed to the {@link RequestHandler}
 */
public abstract class HttpServerRequest<T> {

    /**
     * Returns the HTTP method for this request.
     *
     * @return The HTTP method for this request.
     */
    public abstract HttpMethod getHttpMethod();

    /**
     * Returns the HTTP version for this request.
     *
     * @return The HTTP version for this request.
     */
    public abstract HttpVersion getHttpVersion();

    /**
     * Returns the raw URI for the request, including path and query parameters. The URI is not decoded.
     *
     * @return The raw URI for the request.
     */
    public abstract String getUri();

    /**
     * Returns the decoded URI path for this request.
     *
     * @return The decoded URI path for this request.
     */
    public abstract String getDecodedPath();

    /**
     * Returns an immutable map of cookie names and cookies contained in this request.
     *
     * @return An immutable map of cookie names and cookies contained in this request.
     */
    public abstract Map<String, Set<Cookie>> getCookies();

    /**
     * Returns an immutable map of query parameter names and values contained in this request. The names and values for
     * the query parameters will be decoded.
     *
     * @return An immutable map of query parameter names and values contained in this request.
     */
    public abstract Map<String, List<String>> getQueryParameters();

    /**
     * Checks if there is a header with the passed name in this request.
     *
     * @param name Name of the header.
     *
     * @return {@code true} if there is a header with the passed name in this request.
     */
    public abstract boolean containsHeader(CharSequence name);

    /**
     * Checks if there is a header with the passed name and value in this request.
     *
     * @param name Name of the header.
     * @param value Value of the header.
     * @param ignoreCaseValue {@code true} then the value comparision is done ignoring case.
     *
     * @return {@code true} if there is a header with the passed name and value in this request.
     */
    public abstract boolean containsHeader(CharSequence name, CharSequence value, boolean ignoreCaseValue);

    /**
     * Returns an iterator over the header entries. Multiple values for the same header appear as separate entries in
     * the returned iterator.
     *
     * @return An iterator over the header entries
     */
    public abstract Iterator<Entry<String, String>> headerIterator();

    /**
     * Returns the value of a header with the specified name.  If there are more than one values for the specified name,
     * the first value is returned.
     *
     * @param name The name of the header to search
     * @return The first header value or {@code null} if there is no such header
     */
    public abstract String getHeader(CharSequence name);

    /**
     * Returns the value of a header with the specified name.  If there are more than one values for the specified name,
     * the first value is returned.
     *
     * @param name The name of the header to search
     * @param defaultValue Default if the header does not exist.
     *
     * @return The first header value or {@code defaultValue} if there is no such header
     */
    public abstract String getHeader(CharSequence name, String defaultValue);

    /**
     * Returns the values of headers with the specified name
     *
     * @param name The name of the headers to search
     *
     * @return A {@link java.util.List} of header values which will be empty if no values are found
     */
    public abstract List<String> getAllHeaderValues(CharSequence name);

    /**
     * Returns the length of the content.
     *
     * @return the content length
     *
     * @throws NumberFormatException if the message does not have the {@code "Content-Length"} header or its value is
     * not a number.
     */
    public abstract long getContentLength();

    /**
     * Returns the length of the content.
     *
     * @param defaultValue Default value if the message does not have a {@code "Content-Length"} header or its value is
     * not a number
     *
     * @return the content length or {@code defaultValue} if this message does not have the {@code "Content-Length"}
     * header or its value is not a number
     */
    public abstract long getContentLength(long defaultValue);

    /**
     * Returns the date header value with the specified header name.  If there are more than one header value for the
     * specified header name, the first value is returned.
     * The value is parsed as per the
     * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a> using the format:
     * <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
     *
     * @param name The name of the header to search
     *
     * @return the header value
     *
     * @throws java.text.ParseException if there is no such header or the header value is not a formatted date
     */
    public abstract Date getDateHeader(CharSequence name) throws ParseException;

    /**
     * Returns the date header value with the specified header name.  If there are more than one header value for the
     * specified header name, the first value is returned.
     * The value is parsed as per the
     * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a> using the format:
     * <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
     *
     * @param name The name of the header to search
     * @param defaultValue Default value if there is no header with this name.
     *
     * @return the header value or {@code defaultValue} if there is no header with this name.
     */
    public abstract Date getDateHeader(CharSequence name, Date defaultValue);

    /**
     * Returns the value of the {@code "Host"} header.
     */
    public abstract String getHostHeader();

    /**
     * Returns the value of the {@code "Host"} header.
     *
     * @param defaultValue Default if the header does not exist.
     *
     * @return The value of the {@code "Host"} header or {@code defaultValue} if there is no such header.
     */
    public abstract String getHostHeader(String defaultValue);

    /**
     * Returns the integer header value with the specified header name.  If there are more than one header value for
     * the specified header name, the first value is returned.
     *
     * @param name The name of the header to search
     *
     * @return the header value
     *
     * @throws NumberFormatException if there is no such header or the header value is not a number
     */
    public abstract int getIntHeader(CharSequence name);

    /**
     * Returns the integer header value with the specified header name.  If there are more than one header value for
     * the specified header name, the first value is returned.
     *
     * @param name The name of the header to search
     * @param defaultValue Default if the header does not exist.
     *
     * @return the header value or the {@code defaultValue} if there is no such header or the header value is not a
     * number
     */
    public abstract int getIntHeader(CharSequence name, int defaultValue);

    /**
     * Returns {@code true} if and only if this request contains the {@code "Expect: 100-continue"} header.
     */
    public abstract boolean is100ContinueExpected();

    /**
     * Returns {@code true} if and only if this request has the content-length header set.
     */
    public abstract boolean isContentLengthSet();

    /**
     * Returns {@code true} if and only if the connection can remain open and thus 'kept alive'.  This methods respects
     * the value of the {@code "Connection"} header first and then the return value of
     * {@link HttpVersion#isKeepAliveDefault()}.
     */
    public abstract boolean isKeepAlive();

    /**
     * Checks to see if the transfer encoding of this request is chunked
     *
     * @return True if transfer encoding is chunked, otherwise false
     */
    public abstract boolean isTransferEncodingChunked();

    /**
     * Returns a new {@link Set} that contains the names of all headers in this request.  Note that modifying the
     * returned {@link Set} will not affect the state of this request.
     */
    public abstract Set<String> getHeaderNames();

    /**
     * Adds an HTTP header with the passed {@code name} and {@code value} to this request.
     *
     * @param name Name of the header.
     * @param value Value for the header.
     *
     * @return {@code this}
     */
    public abstract HttpServerRequest<T> addHeader(CharSequence name, Object value);

    /**
     * Adds the passed {@code cookie} to this request.
     *
     * @param cookie Cookie to add.
     *
     * @return {@code this}
     */
    public abstract HttpServerRequest<T> addCookie(Cookie cookie);

    /**
     * Adds the passed header as a date value to this request. The date is formatted using netty's
     * {@link HttpHeaders#addDateHeader(HttpMessage, CharSequence, Date)} which formats the date as per the
     * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a> into the format:
     * <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
     *
     * @param name Name of the header.
     * @param value Value of the header.
     *
     * @return {@code this}
     */
    public abstract HttpServerRequest<T> addDateHeader(CharSequence name, Date value);

    /**
     * Adds multiple date values for the passed header name to this request. The date values are formatted using netty's
     * {@link HttpHeaders#addDateHeader(HttpMessage, CharSequence, Date)} which formats the date as per the
     * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a> into the format:
     *
     * <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
     *
     * @param name Name of the header.
     * @param values Values for the header.
     *
     * @return {@code this}
     */
    public abstract HttpServerRequest<T> addDateHeader(CharSequence name, Iterable<Date> values);

    /**
     * Adds an HTTP header with the passed {@code name} and {@code values} to this request.
     *
     * @param name Name of the header.
     * @param values Values for the header.
     *
     * @return {@code this}
     */
    public abstract HttpServerRequest<T> addHeader(CharSequence name, Iterable<Object> values);

    /**
     * Overwrites the current value, if any, of the passed header to the passed date value for this request. The date is
     * formatted using netty's {@link HttpHeaders#addDateHeader(HttpMessage, CharSequence, Date)} which formats the date
     * as per the <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a> into
     * the format:
     * <p/>
     * <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
     *
     * @param name Name of the header.
     * @param value Value of the header.
     *
     * @return {@code this}
     */
    public abstract HttpServerRequest<T> setDateHeader(CharSequence name, Date value);

    /**
     * Overwrites the current value, if any, of the passed header to the passed value for this request.
     *
     * @param name Name of the header.
     * @param value Value of the header.
     *
     * @return {@code this}
     */
    public abstract HttpServerRequest<T> setHeader(CharSequence name, Object value);

    /**
     * Overwrites the current value, if any, of the passed header to the passed date values for this request. The date
     * is formatted using netty's {@link HttpHeaders#addDateHeader(HttpMessage, CharSequence, Date)} which formats the
     * date as per the <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a>
     * into the format:
     * <p/>
     * <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
     *
     * @param name Name of the header.
     * @param values Values of the header.
     *
     * @return {@code this}
     */
    public abstract HttpServerRequest<T> setDateHeader(CharSequence name, Iterable<Date> values);

    /**
     * Overwrites the current value, if any, of the passed header to the passed values for this request.
     *
     * @param name Name of the header.
     * @param values Values of the header.
     *
     * @return {@code this}
     */
    public abstract HttpServerRequest<T> setHeader(CharSequence name, Iterable<Object> values);

    /**
     * Removes the passed header from this request.
     *
     * @param name Name of the header.
     *
     * @return {@code this}
     */
    public abstract HttpServerRequest<T> removeHeader(CharSequence name);

    /**
     * Returns the content as a stream. There can only be one {@link Subscriber} to the returned {@link Observable}, any
     * subsequent subscriptions will get an error.
     *
     * Unless the channel is set to auto-read, a {@link RequestHandler} processing a request <em>must</em> make sure
     * that it either discards or subscribes to the content. Failure to do so, will stall the connection and no other
     * requests will arrive on that connection as nothing is read from the connection.
     *
     * @return Stream of content.
     */
    public abstract Observable<T> getContent();

    /**
     * Subscribes to the content and discards.
     *
     * Unless the channel is set to auto-read, aA {@link RequestHandler} processing a request <em>must</em> make sure
     * that it either discards or subscribes to the content. Failure to do so, will stall the connection and no other
     * requests will arrive on that connection as nothing is read from the connection.
     *
     * @return An {@link Observable}, subscription to which will discard the content.
     */
    public abstract Observable<Void> discardContent();

    public String toString() {
        StringBuilder builder = new StringBuilder();
        builder.append(getHttpMethod())
               .append(' ')
               .append(getUri())
               .append(' ')
               .append(getHttpVersion().text())
               .append('\n');

        Iterator<Entry<String, String>> headers = headerIterator();
        while (headers.hasNext()) {
            Entry<String, String> next = headers.next();
            builder.append(next.getKey())
                   .append(": ")
                   .append(next.getValue())
                   .append('\n');
        }
        builder.append('\n');

        return builder.toString();
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServer.java;<<<<<<< MINE
/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.reactivex.netty.protocol.http.serverNew;

import io.netty.buffer.ByteBuf;
import io.netty.channel.ChannelHandler;
import io.netty.channel.ChannelOption;
import io.netty.channel.ChannelPipeline;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.ServerChannel;
import io.netty.handler.logging.LogLevel;
import io.netty.util.concurrent.EventExecutorGroup;
import io.reactivex.netty.metrics.MetricEventsPublisher;
import io.reactivex.netty.protocol.http.server.HttpServerMetricsEvent;
import io.reactivex.netty.protocol.tcp.server.TcpServer;
import rx.functions.Action1;
import rx.functions.Func0;

import java.util.concurrent.TimeUnit;

/**
 * An HTTP server.
 *
 * @param <I> The type of objects received as content from a request in this server.
 * @param <O> The type of objects written as content from a response in this server.
 */
public abstract class HttpServer<I, O> implements MetricEventsPublisher<HttpServerMetricsEvent<?>> {

    /**
     * Creates a new server instance, inheriting all configurations from this server and adding a {@link ChannelOption}
     * for the server socket created by the newly created server instance.
     *
     * @param option Option to add.
     * @param value Value for the option.
     *
     * @return A new {@link HttpServer} instance.
     */
    public abstract <T> HttpServer<I, O> channelOption(ChannelOption<T> option, T value);

    /**
     * Creates a new server instance, inheriting all configurations from this server and adding a {@link ChannelOption}
     * for the client socket created by the newly created server instance.
     *
     * @param option Option to add.
     * @param value Value for the option.
     *
     * @return A new {@link HttpServer} instance.
     */
    public abstract <T> HttpServer<I, O> clientChannelOption(ChannelOption<T> option, T value);

    /**
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this
     * server. The specified handler is added at the first position of the pipeline as specified by {@link
     * ChannelPipeline#addFirst(String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
     *
     * @param name Name of the handler.
     * @param handlerFactory Factory to create handler instance to add.
     *
     * @return A new {@link HttpServer} instance.
     */
    public abstract <II, OO> HttpServer<II, OO> addChannelHandlerFirst(String name,
                                                                       Func0<ChannelHandler> handlerFactory);

    /**
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this server. The
     * specified handler is added at the first position of the pipeline as specified by {@link
     * ChannelPipeline#addFirst(EventExecutorGroup, String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
     *
     * @param group The {@link EventExecutorGroup} which will be used to execute the {@link ChannelHandler} methods
     * @param name The name of the handler to append
     * @param handlerFactory Factory to create handler instance to add.
     *
     * @return A new {@link HttpServer} instance.
     */
    public abstract <II, OO> HttpServer<II, OO> addChannelHandlerFirst(EventExecutorGroup group, String name,
                                                                       Func0<ChannelHandler> handlerFactory);

    /**
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this server. The
     * specified handler is added at the last position of the pipeline as specified by
     * {@link ChannelPipeline#addLast(String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
     *
     * @param name Name of the handler.
     * @param handlerFactory Factory to create handler instance to add.
     *
     * @return A new {@link HttpServer} instance.
     */
    public abstract <II, OO> HttpServer<II, OO> addChannelHandlerLast(String name,
                                                                      Func0<ChannelHandler> handlerFactory);

    /**
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this server. The
     * specified handler is added at the last position of the pipeline as specified by {@link
     * ChannelPipeline#addLast(EventExecutorGroup, String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
     *
     * @param group the {@link EventExecutorGroup} which will be used to execute the {@link ChannelHandler} methods
     * @param name the name of the handler to append
     * @param handlerFactory Factory to create handler instance to add.
     *
     * @return A new {@link HttpServer} instance.
     */
    public abstract <II, OO> HttpServer<II, OO> addChannelHandlerLast(EventExecutorGroup group, String name,
                                                                      Func0<ChannelHandler> handlerFactory);

    /**
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this server. The
     * specified handler is added before an existing handler with the passed {@code baseName} in the pipeline as
     * specified by {@link ChannelPipeline#addBefore(String, String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
     *
     * @param baseName the name of the existing handler
     * @param name Name of the handler.
     * @param handlerFactory Factory to create handler instance to add.
     *
     * @return A new {@link HttpServer} instance.
     */
    public abstract <II, OO> HttpServer<II, OO> addChannelHandlerBefore(String baseName, String name,
                                                                        Func0<ChannelHandler> handlerFactory);

    /**
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this server. The
     * specified handler is added before an existing handler with the passed {@code baseName} in the pipeline as
     * specified by {@link ChannelPipeline#addBefore(EventExecutorGroup, String, String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
     *
     * @param group the {@link EventExecutorGroup} which will be used to execute the {@link ChannelHandler} methods
     * @param baseName the name of the existing handler
     * @param name the name of the handler to append
     * @param handlerFactory Factory to create handler instance to add.
     *
     * @return A new {@link HttpServer} instance.
     */
    public abstract <II, OO> HttpServer<II, OO> addChannelHandlerBefore(EventExecutorGroup group, String baseName,
                                                                        String name,
                                                                        Func0<ChannelHandler> handlerFactory);

    /**
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this server. The
     * specified handler is added after an existing handler with the passed {@code baseName} in the pipeline as
     * specified by {@link ChannelPipeline#addAfter(String, String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
     *
     * @param baseName the name of the existing handler
     * @param name Name of the handler.
     * @param handlerFactory Factory to create handler instance to add.
     *
     * @return A new {@link HttpServer} instance.
     */
    public abstract <II, OO> HttpServer<II, OO> addChannelHandlerAfter(String baseName, String name,
                                                                       Func0<ChannelHandler> handlerFactory);

    /**
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this server. The
     * specified handler is added after an existing handler with the passed {@code baseName} in the pipeline as
     * specified by {@link ChannelPipeline#addAfter(EventExecutorGroup, String, String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
     *
     * @param group the {@link EventExecutorGroup} which will be used to execute the {@link ChannelHandler} methods
     * @param baseName the name of the existing handler
     * @param name the name of the handler to append
     * @param handlerFactory Factory to create handler instance to add.
     *
     * @return A new {@link HttpServer} instance.
     */
    public abstract <II, OO> HttpServer<II, OO> addChannelHandlerAfter(EventExecutorGroup group, String baseName,
                                                                       String name,
                                                                       Func0<ChannelHandler> handlerFactory);

    /**
     * Creates a new client instances, inheriting all configurations from this client and using the passed action to
     * configure all the connections created by the newly created client instance.
     *
     * @param pipelineConfigurator Action to configure {@link ChannelPipeline}.
     *
     * @return A new {@link HttpServer} instance.
     */
    public abstract <II, OO> HttpServer<II, OO> pipelineConfigurator(Action1<ChannelPipeline> pipelineConfigurator);

    /**
     * Creates a new client instances, inheriting all configurations from this client and enabling wire logging at the
     * passed level for the newly created client instance.
     *
     * @param wireLoggingLevel Logging level at which the wire logs will be logged. The wire logging will only be done
     * if logging is enabled at this level for {@link io.netty.handler.logging.LoggingHandler}
     *
     * @return A new {@link HttpServer} instance.
     */
    public abstract HttpServer<I, O> enableWireLogging(LogLevel wireLoggingLevel);

    /**
     * Returns the port at which this server is running.
     * <p/>
     * For servers using ephemeral ports, this would return the actual port used, only after the server is started.
     *
     * @return The port at which this server is running.
     */
    public abstract int getServerPort();

    /**
     * Starts this server and waits till the server is shutdown. This will block the caller thread till the time the
     * server is shutdown. If blocking the caller is not required, use {@link #start(RequestHandler)}
     *
     * @param requestHandler Connection handler that will handle any new client connections to this server.
     */
    public abstract void startAndWait(RequestHandler<I, O> requestHandler);

    /**
     * Starts this server.
     *
     * @param requestHandler Connection handler that will handle any new client connections to this server.
     *
     * @return This server.
     */
    public abstract HttpServer<I, O> start(RequestHandler<I, O> requestHandler);

    /**
     * Shutdown this server and waits till the server socket is closed.
     */
    public abstract void shutdown();

    /**
     * Waits for the shutdown of this server.
     * <p/>
     * <b>This does not actually shutdown the server.</b> It just waits for some other action to shutdown.
     */
    public abstract void waitTillShutdown();

    /**
     * Waits for the shutdown of this server, waiting a maximum of the passed duration.
     * <p/>
     * <b>This does not actually shutdown the server.</b> It just waits for some other action to shutdown.
     *
     * @param duration Duration to wait for shutdown.
     * @param timeUnit Timeunit for the duration to wait for shutdown.
     */
    public abstract void waitTillShutdown(long duration, TimeUnit timeUnit);

    /**
     * Creates a new server using an ephemeral port. The port used can be found by {@link #getServerPort()}
     *
     * @return A new {@link HttpServer}
     */
    public static HttpServer<ByteBuf, ByteBuf> newServer() {
        return _newServer(TcpServer.newServer(0));
    }

    /**
     * Creates a new server using the passed port.
     *
     * @param port Port for the server. {@code 0} to use ephemeral port.
     * @return A new {@link HttpServer}
     */
    public static HttpServer<ByteBuf, ByteBuf> newServer(int port) {
        return _newServer(TcpServer.newServer(port));
    }

    /**
     * Creates a new server using the passed port.
     *
     * @param port Port for the server. {@code 0} to use ephemeral port.
     * @param eventLoopGroup Eventloop group to be used for server as well as client sockets.
     * @param channelClass The class to be used for server channel.
     *
     * @return A new {@link HttpServer}
     */
    public static HttpServer<ByteBuf, ByteBuf> newServer(int port, EventLoopGroup eventLoopGroup,
                                                         Class<? extends ServerChannel> channelClass) {
        return _newServer(TcpServer.newServer(port, eventLoopGroup, eventLoopGroup, channelClass));
    }

    /**
     * Creates a new server using the passed port.
     *
     * @param port Port for the server. {@code 0} to use ephemeral port.
     * @param serverGroup Eventloop group to be used for server sockets.
     * @param clientGroup Eventloop group to be used for client sockets.
     * @param channelClass The class to be used for server channel.
     *
     * @return A new {@link HttpServer}
     */
    public static HttpServer<ByteBuf, ByteBuf> newServer(int port, EventLoopGroup serverGroup,
                                                         EventLoopGroup clientGroup,
                                                         Class<? extends ServerChannel> channelClass) {
        return _newServer(TcpServer.newServer(port, serverGroup, clientGroup, channelClass));
    }

    private static HttpServer<ByteBuf, ByteBuf> _newServer(TcpServer<ByteBuf, ByteBuf> tcpServer) {
        return HttpServerImpl.create(tcpServer);
    }
}=======
/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.reactivex.netty.protocol.http.serverNew;

import io.netty.buffer.ByteBuf;
import io.netty.channel.ChannelHandler;
import io.netty.channel.ChannelOption;
import io.netty.channel.ChannelPipeline;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.ServerChannel;
import io.netty.handler.logging.LogLevel;
import io.netty.util.concurrent.EventExecutorGroup;
import io.reactivex.netty.metrics.MetricEventsPublisher;
import io.reactivex.netty.pipeline.ssl.SSLEngineFactory;
import io.reactivex.netty.protocol.http.server.HttpServerMetricsEvent;
import io.reactivex.netty.protocol.tcp.server.TcpServer;
import rx.functions.Action1;
import rx.functions.Func0;

import java.util.concurrent.TimeUnit;

/**
 * An HTTP server.
 *
 * @param <I> The type of objects received as content from a request in this server.
 * @param <O> The type of objects written as content from a response in this server.
 */
public abstract class HttpServer<I, O> implements MetricEventsPublisher<HttpServerMetricsEvent<?>> {

    /**
     * Creates a new server instance, inheriting all configurations from this server and adding a {@link ChannelOption}
     * for the server socket created by the newly created server instance.
     *
     * @param option Option to add.
     * @param value Value for the option.
     *
     * @return A new {@link HttpServer} instance.
     */
    public abstract <T> HttpServer<I, O> channelOption(ChannelOption<T> option, T value);

    /**
     * Creates a new server instance, inheriting all configurations from this server and adding a {@link ChannelOption}
     * for the client socket created by the newly created server instance.
     *
     * @param option Option to add.
     * @param value Value for the option.
     *
     * @return A new {@link HttpServer} instance.
     */
    public abstract <T> HttpServer<I, O> clientChannelOption(ChannelOption<T> option, T value);

    /**
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this
     * server. The specified handler is added at the first position of the pipeline as specified by {@link
     * ChannelPipeline#addFirst(String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
     *
     * @param name Name of the handler.
     * @param handlerFactory Factory to create handler instance to add.
     *
     * @return A new {@link HttpServer} instance.
     */
    public abstract <II, OO> HttpServer<II, OO> addChannelHandlerFirst(String name,
                                                                       Func0<ChannelHandler> handlerFactory);

    /**
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this server. The
     * specified handler is added at the first position of the pipeline as specified by {@link
     * ChannelPipeline#addFirst(EventExecutorGroup, String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
     *
     * @param group The {@link EventExecutorGroup} which will be used to execute the {@link ChannelHandler} methods
     * @param name The name of the handler to append
     * @param handlerFactory Factory to create handler instance to add.
     *
     * @return A new {@link HttpServer} instance.
     */
    public abstract <II, OO> HttpServer<II, OO> addChannelHandlerFirst(EventExecutorGroup group, String name,
                                                                       Func0<ChannelHandler> handlerFactory);

    /**
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this server. The
     * specified handler is added at the last position of the pipeline as specified by
     * {@link ChannelPipeline#addLast(String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
     *
     * @param name Name of the handler.
     * @param handlerFactory Factory to create handler instance to add.
     *
     * @return A new {@link HttpServer} instance.
     */
    public abstract <II, OO> HttpServer<II, OO> addChannelHandlerLast(String name,
                                                                      Func0<ChannelHandler> handlerFactory);

    /**
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this server. The
     * specified handler is added at the last position of the pipeline as specified by {@link
     * ChannelPipeline#addLast(EventExecutorGroup, String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
     *
     * @param group the {@link EventExecutorGroup} which will be used to execute the {@link ChannelHandler} methods
     * @param name the name of the handler to append
     * @param handlerFactory Factory to create handler instance to add.
     *
     * @return A new {@link HttpServer} instance.
     */
    public abstract <II, OO> HttpServer<II, OO> addChannelHandlerLast(EventExecutorGroup group, String name,
                                                                      Func0<ChannelHandler> handlerFactory);

    /**
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this server. The
     * specified handler is added before an existing handler with the passed {@code baseName} in the pipeline as
     * specified by {@link ChannelPipeline#addBefore(String, String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
     *
     * @param baseName the name of the existing handler
     * @param name Name of the handler.
     * @param handlerFactory Factory to create handler instance to add.
     *
     * @return A new {@link HttpServer} instance.
     */
    public abstract <II, OO> HttpServer<II, OO> addChannelHandlerBefore(String baseName, String name,
                                                                        Func0<ChannelHandler> handlerFactory);

    /**
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this server. The
     * specified handler is added before an existing handler with the passed {@code baseName} in the pipeline as
     * specified by {@link ChannelPipeline#addBefore(EventExecutorGroup, String, String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
     *
     * @param group the {@link EventExecutorGroup} which will be used to execute the {@link ChannelHandler} methods
     * @param baseName the name of the existing handler
     * @param name the name of the handler to append
     * @param handlerFactory Factory to create handler instance to add.
     *
     * @return A new {@link HttpServer} instance.
     */
    public abstract <II, OO> HttpServer<II, OO> addChannelHandlerBefore(EventExecutorGroup group, String baseName,
                                                                        String name,
                                                                        Func0<ChannelHandler> handlerFactory);

    /**
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this server. The
     * specified handler is added after an existing handler with the passed {@code baseName} in the pipeline as
     * specified by {@link ChannelPipeline#addAfter(String, String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
     *
     * @param baseName the name of the existing handler
     * @param name Name of the handler.
     * @param handlerFactory Factory to create handler instance to add.
     *
     * @return A new {@link HttpServer} instance.
     */
    public abstract <II, OO> HttpServer<II, OO> addChannelHandlerAfter(String baseName, String name,
                                                                       Func0<ChannelHandler> handlerFactory);

    /**
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this server. The
     * specified handler is added after an existing handler with the passed {@code baseName} in the pipeline as
     * specified by {@link ChannelPipeline#addAfter(EventExecutorGroup, String, String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
     *
     * @param group the {@link EventExecutorGroup} which will be used to execute the {@link ChannelHandler} methods
     * @param baseName the name of the existing handler
     * @param name the name of the handler to append
     * @param handlerFactory Factory to create handler instance to add.
     *
     * @return A new {@link HttpServer} instance.
     */
    public abstract <II, OO> HttpServer<II, OO> addChannelHandlerAfter(EventExecutorGroup group, String baseName,
                                                                       String name,
                                                                       Func0<ChannelHandler> handlerFactory);

    /**
     * Creates a new client instances, inheriting all configurations from this client and using the passed action to
     * configure all the connections created by the newly created client instance.
     *
     * @param pipelineConfigurator Action to configure {@link ChannelPipeline}.
     *
     * @return A new {@link HttpServer} instance.
     */
    public abstract <II, OO> HttpServer<II, OO> pipelineConfigurator(Action1<ChannelPipeline> pipelineConfigurator);

    /**
     * Creates a new client instances, inheriting all configurations from this client and using the passed {@code
     * sslEngineFactory} for all secured connections created by the newly created client instance.
     *
     * @param sslEngineFactory {@link io.reactivex.netty.pipeline.ssl.SSLEngineFactory} for all secured connections
     * created by the newly created client instance.
     *
     * @return A new {@link HttpServer} instance.
     */
    public abstract HttpServer<I, O> sslEngineFactory(SSLEngineFactory sslEngineFactory);

    /**
     * Creates a new client instances, inheriting all configurations from this client and enabling wire logging at the
     * passed level for the newly created client instance.
     *
     * @param wireLoggingLevel Logging level at which the wire logs will be logged. The wire logging will only be done
     * if logging is enabled at this level for {@link io.netty.handler.logging.LoggingHandler}
     *
     * @return A new {@link HttpServer} instance.
     */
    public abstract HttpServer<I, O> enableWireLogging(LogLevel wireLoggingLevel);

    /**
     * Returns the port at which this server is running.
     * <p/>
     * For servers using ephemeral ports, this would return the actual port used, only after the server is started.
     *
     * @return The port at which this server is running.
     */
    public abstract int getServerPort();

    /**
     * Starts this server and waits till the server is shutdown. This will block the caller thread till the time the
     * server is shutdown. If blocking the caller is not required, use {@link #start(RequestHandler)}
     *
     * @param requestHandler Connection handler that will handle any new client connections to this server.
     */
    public abstract void startAndWait(RequestHandler<I, O> requestHandler);

    /**
     * Starts this server.
     *
     * @param requestHandler Connection handler that will handle any new client connections to this server.
     *
     * @return This server.
     */
    public abstract HttpServer<I, O> start(RequestHandler<I, O> requestHandler);

    /**
     * Shutdown this server and waits till the server socket is closed.
     */
    public abstract void shutdown();

    /**
     * Waits for the shutdown of this server.
     * <p/>
     * <b>This does not actually shutdown the server.</b> It just waits for some other action to shutdown.
     */
    public abstract void waitTillShutdown();

    /**
     * Waits for the shutdown of this server, waiting a maximum of the passed duration.
     * <p/>
     * <b>This does not actually shutdown the server.</b> It just waits for some other action to shutdown.
     *
     * @param duration Duration to wait for shutdown.
     * @param timeUnit Timeunit for the duration to wait for shutdown.
     */
    public abstract void waitTillShutdown(long duration, TimeUnit timeUnit);

    /**
     * Creates a new server using an ephemeral port. The port used can be found by {@link #getServerPort()}
     *
     * @return A new {@link HttpServer}
     */
    public static HttpServer<ByteBuf, ByteBuf> newServer() {
        return _newServer(TcpServer.newServer(0));
    }

    /**
     * Creates a new server using the passed port.
     *
     * @param port Port for the server. {@code 0} to use ephemeral port.
     * @return A new {@link HttpServer}
     */
    public static HttpServer<ByteBuf, ByteBuf> newServer(int port) {
        return _newServer(TcpServer.newServer(port));
    }

    /**
     * Creates a new server using the passed port.
     *
     * @param port Port for the server. {@code 0} to use ephemeral port.
     * @param eventLoopGroup Eventloop group to be used for server as well as client sockets.
     * @param channelClass The class to be used for server channel.
     *
     * @return A new {@link HttpServer}
     */
    public static HttpServer<ByteBuf, ByteBuf> newServer(int port, EventLoopGroup eventLoopGroup,
                                                         Class<? extends ServerChannel> channelClass) {
        return _newServer(TcpServer.newServer(port, eventLoopGroup, eventLoopGroup, channelClass));
    }

    /**
     * Creates a new server using the passed port.
     *
     * @param port Port for the server. {@code 0} to use ephemeral port.
     * @param serverGroup Eventloop group to be used for server sockets.
     * @param clientGroup Eventloop group to be used for client sockets.
     * @param channelClass The class to be used for server channel.
     *
     * @return A new {@link HttpServer}
     */
    public static HttpServer<ByteBuf, ByteBuf> newServer(int port, EventLoopGroup serverGroup,
                                                         EventLoopGroup clientGroup,
                                                         Class<? extends ServerChannel> channelClass) {
        return _newServer(TcpServer.newServer(port, serverGroup, clientGroup, channelClass));
    }

    private static HttpServer<ByteBuf, ByteBuf> _newServer(TcpServer<ByteBuf, ByteBuf> tcpServer) {
        return HttpServerImpl.create(tcpServer);
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/RequestHandler.java;<<<<<<< MINE
=======
/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.reactivex.netty.protocol.http.serverNew;

import rx.Observable;

/**
 * A handler for an {@link HttpServerRequest} to produce a {@link HttpServerResponse}
 *
 * @param <I> The type of objects received as content from the request.
 * @param <O> The type of objects written as content from the response.
 */
public interface RequestHandler<I, O> {

    /**
     * Provides a request and response pair to process.
     *
     * @param request Http request to process.
     * @param response Http response to populate after processing the request.
     *
     * @return An {@link Observable} that represents the processing of the request. Subscribing to this should start
     * the request processing and unsubscribing should cancel the processing.
     */
    Observable<Void> handle(HttpServerRequest<I> request, HttpServerResponse<O> response);
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl.java;<<<<<<< MINE
=======
/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.reactivex.netty.protocol.http.serverNew;

import io.netty.channel.Channel;
import io.netty.handler.codec.http.ClientCookieEncoder;
import io.netty.handler.codec.http.Cookie;
import io.netty.handler.codec.http.HttpHeaders;
import io.netty.handler.codec.http.HttpHeaders.Names;
import io.netty.handler.codec.http.HttpMethod;
import io.netty.handler.codec.http.HttpRequest;
import io.netty.handler.codec.http.HttpVersion;
import io.reactivex.netty.protocol.http.CookiesHolder;
import io.reactivex.netty.protocol.http.internal.HttpContentSubscriberEvent;
import io.reactivex.netty.protocol.http.server.UriInfoHolder;
import rx.Observable;
import rx.Observable.OnSubscribe;
import rx.Subscriber;

import java.text.ParseException;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class HttpServerRequestImpl<T> extends HttpServerRequest<T> {

    private final Channel nettyChannel;
    private final HttpRequest nettyRequest;
    private final CookiesHolder cookiesHolder;
    private final UriInfoHolder uriInfoHolder;

    public HttpServerRequestImpl(HttpRequest nettyRequest, Channel nettyChannel) {
        this.nettyRequest = nettyRequest;
        this.nettyChannel = nettyChannel;
        uriInfoHolder = new UriInfoHolder(this.nettyRequest.uri());
        cookiesHolder = CookiesHolder.newServerRequestHolder(nettyRequest.headers());
    }

    @Override
    public HttpMethod getHttpMethod() {
        return nettyRequest.method();
    }

    @Override
    public HttpVersion getHttpVersion() {
        return nettyRequest.protocolVersion();
    }

    @Override
    public String getUri() {
        return uriInfoHolder.getRawUriString();
    }

    @Override
    public String getDecodedPath() {
        return uriInfoHolder.getPath();
    }

    @Override
    public Map<String, Set<Cookie>> getCookies() {
        return cookiesHolder.getAllCookies();
    }

    @Override
    public Map<String, List<String>> getQueryParameters() {
        return uriInfoHolder.getQueryParameters();
    }

    @Override
    public boolean containsHeader(CharSequence name) {
        return nettyRequest.headers().contains(name);
    }

    @Override
    public boolean containsHeader(CharSequence name, CharSequence value, boolean ignoreCaseValue) {
        return nettyRequest.headers().contains(name, value, ignoreCaseValue);
    }

    @Override
    public Iterator<Entry<String, String>> headerIterator() {
        return nettyRequest.headers().iterator();
    }

    @Override
    public String getHeader(CharSequence name) {
        return nettyRequest.headers().get(name);
    }

    @Override
    public String getHeader(CharSequence name, String defaultValue) {
        return HttpHeaders.getHeader(nettyRequest, name, defaultValue);
    }

    @Override
    public List<String> getAllHeaderValues(CharSequence name) {
        return nettyRequest.headers().getAll(name);
    }

    @Override
    public long getContentLength() {
        return HttpHeaders.getContentLength(nettyRequest);
    }

    @Override
    public long getContentLength(long defaultValue) {
        return HttpHeaders.getContentLength(nettyRequest, defaultValue);
    }

    @Override
    public Date getDateHeader(CharSequence name) throws ParseException {
        return HttpHeaders.getDateHeader(nettyRequest, name);
    }

    @Override
    public Date getDateHeader(CharSequence name, Date defaultValue) {
        return HttpHeaders.getDateHeader(nettyRequest, name, defaultValue);
    }

    @Override
    public String getHostHeader() {
        return HttpHeaders.getHost(nettyRequest);
    }

    @Override
    public String getHostHeader(String defaultValue) {
        return HttpHeaders.getHost(nettyRequest, defaultValue);
    }

    @Override
    public int getIntHeader(CharSequence name) {
        return HttpHeaders.getIntHeader(nettyRequest, name);
    }

    @Override
    public int getIntHeader(CharSequence name, int defaultValue) {
        return HttpHeaders.getIntHeader(nettyRequest, name, defaultValue);
    }

    @Override
    public boolean is100ContinueExpected() {
        return HttpHeaders.is100ContinueExpected(nettyRequest);
    }

    @Override
    public boolean isContentLengthSet() {
        return HttpHeaders.isContentLengthSet(nettyRequest);
    }

    @Override
    public boolean isKeepAlive() {
        return HttpHeaders.isKeepAlive(nettyRequest);
    }

    @Override
    public boolean isTransferEncodingChunked() {
        return HttpHeaders.isTransferEncodingChunked(nettyRequest);
    }

    @Override
    public Set<String> getHeaderNames() {
        return nettyRequest.headers().names();
    }

    @Override
    public HttpServerRequest<T> addHeader(CharSequence name, Object value) {
        nettyRequest.headers().add(name, value);
        return this;
    }

    @Override
    public HttpServerRequest<T> addCookie(Cookie cookie) {
        nettyRequest.headers().add(Names.COOKIE,
                                   ClientCookieEncoder.encode(cookie) /*Since this is a request object, cookies are
                                   as if coming from a client*/);
        return this;

    }

    @Override
    public HttpServerRequest<T> addDateHeader(CharSequence name, Date value) {
        HttpHeaders.addDateHeader(nettyRequest, name, value);
        return this;
    }

    @Override
    public HttpServerRequest<T> addDateHeader(CharSequence name, Iterable<Date> values) {
        for (Date value : values) {
            HttpHeaders.addDateHeader(nettyRequest, name, value);
        }
        return this;
    }

    @Override
    public HttpServerRequest<T> addHeader(CharSequence name, Iterable<Object> values) {
        nettyRequest.headers().add(name, values);
        return this;
    }

    @Override
    public HttpServerRequest<T> setDateHeader(CharSequence name, Date value) {
        HttpHeaders.setDateHeader(nettyRequest, name, value);
        return this;
    }

    @Override
    public HttpServerRequest<T> setHeader(CharSequence name, Object value) {
        nettyRequest.headers().set(name, value);
        return this;
    }

    @Override
    public HttpServerRequest<T> setDateHeader(CharSequence name, Iterable<Date> values) {
        for (Date value : values) {
            HttpHeaders.setDateHeader(nettyRequest, name, value);
        }
        return this;
    }

    @Override
    public HttpServerRequest<T> setHeader(CharSequence name, Iterable<Object> values) {
        nettyRequest.headers().add(name, values);
        return this;
    }

    @Override
    public HttpServerRequest<T> removeHeader(CharSequence name) {
        nettyRequest.headers().remove(name);
        return this;
    }

    @Override
    public Observable<T> getContent() {
        return Observable.create(new OnSubscribe<T>() {
            @Override
            public void call(Subscriber<? super T> subscriber) {
                nettyChannel.pipeline()
                            .fireUserEventTriggered(new HttpContentSubscriberEvent<T>(subscriber));
            }
        });
    }

    @Override
    public Observable<Void> discardContent() {
        return Observable.create(new OnSubscribe<Void>() {
            @Override
            public void call(Subscriber<? super Void> subscriber) {
                nettyChannel.pipeline()
                            .fireUserEventTriggered(HttpContentSubscriberEvent.discardAllInput());
                subscriber.onCompleted();
            }
        });
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/TrailingHeaders.java;<<<<<<< MINE
=======
/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.reactivex.netty.protocol.http;

import io.netty.handler.codec.http.DefaultLastHttpContent;
import io.netty.handler.codec.http.LastHttpContent;

import java.util.List;

/**
 * A mutable stateful entity containing trailing headers.
 *
 * <b>This class is not thread safe</b>
 */
public class TrailingHeaders {

    private final LastHttpContent lastHttpContent;

    public TrailingHeaders() {
        lastHttpContent = new DefaultLastHttpContent();
    }

    public TrailingHeaders(LastHttpContent lastHttpContent) {
        this.lastHttpContent = lastHttpContent;
    }

    /**
     * Adds an HTTP trailing header with the passed {@code name} and {@code value} to this request.
     *
     * @param name Name of the header.
     * @param value Value for the header.
     *
     * @return {@code this}.
     */
    public TrailingHeaders addHeader(CharSequence name, Object value) {
        lastHttpContent.trailingHeaders().add(name, value);
        return this;
    }

    /**
     * Adds an HTTP trailing header with the passed {@code name} and {@code values} to this request.
     *
     * @param name Name of the header.
     * @param values Values for the header.
     *
     * @return {@code this}.
     */
    public TrailingHeaders addHeader(CharSequence name, Iterable<Object> values) {
        lastHttpContent.trailingHeaders().add(name, values);
        return this;
    }

    /**
     * Overwrites the current value, if any, of the passed trailing header to the passed value for this request.
     *
     * @param name Name of the header.
     * @param value Value of the header.
     *
     * @return {@code this}.
     */
    public TrailingHeaders setHeader(CharSequence name, Object value) {
        lastHttpContent.trailingHeaders().set(name, value);
        return this;
    }

    /**
     * Overwrites the current value, if any, of the passed trailing header to the passed values for this request.
     *
     * @param name Name of the header.
     * @param values Values of the header.
     *
     * @return {@code this}.
     */
    public TrailingHeaders setHeader(CharSequence name, Iterable<Object> values) {
        lastHttpContent.trailingHeaders().set(name, values);
        return this;
    }

    /**
     * Returns the value of a header with the specified name.  If there are more than one values for the specified name,
     * the first value is returned.
     *
     * @param name The name of the header to search
     *
     * @return The first header value or {@code null} if there is no such header
     */
    public String getHeader(CharSequence name) {
        return lastHttpContent.trailingHeaders().get(name);
    }

    /**
     * Returns the values of headers with the specified name
     *
     * @param name The name of the headers to search
     *
     * @return A {@link List} of header values which will be empty if no values are found
     */
    public List<String> getAllHeaderValues(CharSequence name) {
        return lastHttpContent.trailingHeaders().getAll(name);
    }

}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
=======
import io.netty.buffer.ByteBuf;
import io.netty.channel.Channel;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
=======
import io.netty.handler.codec.http.HttpMethod;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
=======
import io.reactivex.netty.client.ClientMetricsEvent;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
import io.reactivex.netty.client.ServerPool;
import io.reactivex.netty.metrics.MetricEventsPublisher;
import io.reactivex.netty.protocol.http.client.HttpClientMetricsEvent;
import io.reactivex.netty.protocol.tcp.client.TcpClient;
import rx.Observable;
=======
import io.reactivex.netty.client.ServerPool;
import io.reactivex.netty.metrics.MetricEventsPublisher;
import io.reactivex.netty.pipeline.ssl.SSLEngineFactory;
import io.reactivex.netty.protocol.http.client.HttpClientMetricsEvent;
import io.reactivex.netty.protocol.tcp.client.TcpClient;
import rx.Observable;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
=======
import rx.functions.Func0;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
import java.util.concurrent.ScheduledExecutorService;
=======
import java.net.InetSocketAddress;
import java.net.SocketAddress;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
public abstract class HttpClient<I, O> {
=======
public abstract class HttpClient<I, O> implements MetricEventsPublisher<HttpClientMetricsEvent<?>> {

    public static final String HTTP_CLIENT_NO_NAME = "TcpClient-no-name";
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
=======
     * Creates a request for the passed HTTP method and URI.
     *
     * @param uri The URI for the request. The URI can be relative or absolute. If the URI is relative
     *            (missing host and port information), the target host and port are inferred from the {@link HttpClient}
     *            that created the request. If the URI is absolute, the host and port are used from the URI.
     *
     * @return New {@link HttpClientRequest}.
     */
    public abstract HttpClientRequest<I, O> createRequest(HttpMethod method, String uri);
    /**
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
     * @param handler Handler instance to add.
=======
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
    public abstract <II, OO> HttpClient<II, OO> addChannelHandlerFirst(String name, ChannelHandler handler);
=======
    public abstract <II, OO> HttpClient<II, OO> addChannelHandlerFirst(String name, Func0<ChannelHandler> handlerFactory);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
     * @param handler  the handler to append
=======
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
                                                                       ChannelHandler handler);
=======
                                                                       Func0<ChannelHandler> handlerFactory);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
     * @param handler Handler instance to add.
=======
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
    public abstract <II, OO> HttpClient<II, OO>  addChannelHandlerLast(String name, ChannelHandler handler);
=======
    public abstract <II, OO> HttpClient<II, OO>  addChannelHandlerLast(String name, Func0<ChannelHandler> handlerFactory);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
     * @param handler  the handler to append
=======
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
                                                                      ChannelHandler handler);
=======
                                                                      Func0<ChannelHandler> handlerFactory);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
     * @param handler Handler instance to add.
=======
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
                                                                        ChannelHandler handler);
=======
                                                                        Func0<ChannelHandler> handlerFactory);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
     * @param handler  the handler to append
=======
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
                                                                        String name, ChannelHandler handler);
=======
                                                                        String name, Func0<ChannelHandler> handlerFactory);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
     * @param handler Handler instance to add.
=======
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
                                                                               ChannelHandler handler);
=======
                                                                        Func0<ChannelHandler> handlerFactory);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
     * @param group   the {@link EventExecutorGroup} which will be used to execute the {@link ChannelHandler}
=======
     * @param group   the {@link io.netty.util.concurrent.EventExecutorGroup} which will be used to execute the {@link io.netty.channel.ChannelHandler}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
     * @param handler  the handler to append
=======
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
                                                                       String name, ChannelHandler handler);

    /**
     * Removes the {@link ChannelHandler} with the passed {@code name} from the {@link ChannelPipeline} for all
     * connections created by this client.
     *
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be more
     * convenient.</em>
     *
     * @param name Name of the handler.
     *
     * @return A new {@link HttpClient} instance.
     */
    public abstract <II, OO> HttpClient<II, OO> removeHandler(String name);
=======
                                                                       String name, Func0<ChannelHandler> handlerFactory);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
     * eventLoopGroup for all the connections created by the newly created client instance.
     *
     * @param eventLoopGroup {@link EventLoopGroup} to use.
     *
     * @return A new {@link HttpClient} instance.
     */
    public abstract HttpClient<I, O> eventLoop(EventLoopGroup eventLoopGroup);

    /**
     * Creates a new client instances, inheriting all configurations from this client and using the passed
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
    public abstract HttpClient<I, O> withIdleConnectionsTimeoutMillis(long idleConnectionsTimeoutMillis);
=======
    public abstract HttpClient<I, O> idleConnectionsTimeoutMillis(long idleConnectionsTimeoutMillis);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
    public abstract HttpClient<I, O> withConnectionPoolLimitStrategy(PoolLimitDeterminationStrategy limitDeterminationStrategy);
=======
    public abstract HttpClient<I, O> connectionPoolLimitStrategy(
            PoolLimitDeterminationStrategy limitDeterminationStrategy);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
     * @param poolIdleCleanupScheduler Scheduled to schedule idle connections cleanup.
=======
     * @param idleConnectionCleanupTimer Timer to trigger idle connections cleanup.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
    public abstract HttpClient<I, O> withPoolIdleCleanupScheduler(ScheduledExecutorService poolIdleCleanupScheduler);
=======
    public abstract HttpClient<I, O> idleConnectionCleanupTimer(Observable<Long> idleConnectionCleanupTimer);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
    public abstract HttpClient<I, O> withNoIdleConnectionCleanup();
=======
    public abstract HttpClient<I, O> noIdleConnectionCleanup();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
    public abstract HttpClient<I, O> withNoConnectionPooling();
=======
    public abstract HttpClient<I, O> noConnectionPooling();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
     * @param wireLogginLevel Logging level at which the wire logs will be logged. The wire logging will only be done if
=======
     * @param wireLoggingLevel Logging level at which the wire logs will be logged. The wire logging will only be done if
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
    public abstract HttpClient<I, O> enableWireLogging(LogLevel wireLogginLevel);
=======
    public abstract HttpClient<I, O> enableWireLogging(LogLevel wireLoggingLevel);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
    public static HttpClient<ByteBuf, ByteBuf> newClient(ServerPool<ClientMetricsEvent<?>> serverPool) {
        return newClient(HTTP_CLIENT_NO_NAME, serverPool);
    }

    public static HttpClient<ByteBuf, ByteBuf> newClient(String host, int port) {
        return newClient(HTTP_CLIENT_NO_NAME, host, port);
    }

    public static HttpClient<ByteBuf, ByteBuf> newClient(String name, String host, int port) {
        return _newClient(TcpClient.newClient(name, new InetSocketAddress(host, port)));
    }

    public static HttpClient<ByteBuf, ByteBuf> newClient(String name, ServerPool<ClientMetricsEvent<?>> serverPool) {
        return _newClient(TcpClient.newClient(name, serverPool));
    }

    public static HttpClient<ByteBuf, ByteBuf> newClient(EventLoopGroup eventLoopGroup,
                                                        Class<? extends Channel> channelClass, String host, int port) {
        return newClient(eventLoopGroup, channelClass, HTTP_CLIENT_NO_NAME, host, port);
    }

    public static HttpClient<ByteBuf, ByteBuf> newClient(EventLoopGroup eventLoopGroup,
                                                        Class<? extends Channel> channelClass, String name, String host,
                                                        int port) {
        return _newClient(TcpClient.newClient(eventLoopGroup, channelClass, name, new InetSocketAddress(host, port)));
    }

    public static HttpClient<ByteBuf, ByteBuf> newClient(EventLoopGroup eventLoopGroup,
                                                        Class<? extends Channel> channelClass,
                                                        ServerPool<ClientMetricsEvent<?>> serverPool) {
        return newClient(eventLoopGroup, channelClass, HTTP_CLIENT_NO_NAME, serverPool);
    }

    public static HttpClient<ByteBuf, ByteBuf> newClient(EventLoopGroup eventLoopGroup,
                                                        Class<? extends Channel> channelClass, String name,
                                                        ServerPool<ClientMetricsEvent<?>> serverPool) {
        return _newClient(TcpClient.newClient(eventLoopGroup, channelClass, name, serverPool));
    }

    public static HttpClient<ByteBuf, ByteBuf> newClient(SocketAddress remoteAddress) {
        return newClient(HTTP_CLIENT_NO_NAME, remoteAddress);
    }

    public static HttpClient<ByteBuf, ByteBuf> newClient(String name, SocketAddress remoteAddress) {
        return _newClient(TcpClient.newClient(name, remoteAddress));
    }

    public static HttpClient<ByteBuf, ByteBuf> newClient(EventLoopGroup eventLoopGroup,
                                                        Class<? extends Channel> channelClass,
                                                        SocketAddress remoteAddress) {
        return newClient(eventLoopGroup, channelClass, HTTP_CLIENT_NO_NAME, remoteAddress);
    }

    public static HttpClient<ByteBuf, ByteBuf> newClient(EventLoopGroup eventLoopGroup,
                                                        Class<? extends Channel> channelClass, String name,
                                                        SocketAddress remoteAddress) {
        return _newClient(TcpClient.newClient(eventLoopGroup, channelClass, name, remoteAddress));
    }

    private static HttpClient<ByteBuf, ByteBuf> _newClient(TcpClient<ByteBuf, ByteBuf> tcpClient) {
        return HttpClientImpl.create(tcpClient);
    }
=======
    /**
     * Creates a new client instances, inheriting all configurations from this client and using the passed
     * {@code sslEngineFactory} for all secured connections created by the newly created client instance.
     *
     * @param sslEngineFactory {@link SSLEngineFactory} for all secured connections created by the newly created client
     *                                                 instance.
     *
     * @return A new {@link HttpClient} instance.
     */
    public abstract HttpClient<I, O> sslEngineFactory(SSLEngineFactory sslEngineFactory);

    public static HttpClient<ByteBuf, ByteBuf> newClient(ServerPool<ClientMetricsEvent<?>> serverPool) {
        return newClient(HTTP_CLIENT_NO_NAME, serverPool);
    }

    public static HttpClient<ByteBuf, ByteBuf> newClient(String host, int port) {
        return newClient(HTTP_CLIENT_NO_NAME, host, port);
    }

    public static HttpClient<ByteBuf, ByteBuf> newClient(String name, String host, int port) {
        return _newClient(TcpClient.newClient(name, new InetSocketAddress(host, port)));
    }

    public static HttpClient<ByteBuf, ByteBuf> newClient(String name, ServerPool<ClientMetricsEvent<?>> serverPool) {
        return _newClient(TcpClient.newClient(name, serverPool));
    }

    public static HttpClient<ByteBuf, ByteBuf> newClient(EventLoopGroup eventLoopGroup,
                                                        Class<? extends Channel> channelClass, String host, int port) {
        return newClient(eventLoopGroup, channelClass, HTTP_CLIENT_NO_NAME, host, port);
    }

    public static HttpClient<ByteBuf, ByteBuf> newClient(EventLoopGroup eventLoopGroup,
                                                        Class<? extends Channel> channelClass, String name, String host,
                                                        int port) {
        return _newClient(TcpClient.newClient(eventLoopGroup, channelClass, name, new InetSocketAddress(host, port)));
    }

    public static HttpClient<ByteBuf, ByteBuf> newClient(EventLoopGroup eventLoopGroup,
                                                        Class<? extends Channel> channelClass,
                                                        ServerPool<ClientMetricsEvent<?>> serverPool) {
        return newClient(eventLoopGroup, channelClass, HTTP_CLIENT_NO_NAME, serverPool);
    }

    public static HttpClient<ByteBuf, ByteBuf> newClient(EventLoopGroup eventLoopGroup,
                                                        Class<? extends Channel> channelClass, String name,
                                                        ServerPool<ClientMetricsEvent<?>> serverPool) {
        return _newClient(TcpClient.newClient(eventLoopGroup, channelClass, name, serverPool));
    }

    public static HttpClient<ByteBuf, ByteBuf> newClient(SocketAddress remoteAddress) {
        return newClient(HTTP_CLIENT_NO_NAME, remoteAddress);
    }

    public static HttpClient<ByteBuf, ByteBuf> newClient(String name, SocketAddress remoteAddress) {
        return _newClient(TcpClient.newClient(name, remoteAddress));
    }

    public static HttpClient<ByteBuf, ByteBuf> newClient(EventLoopGroup eventLoopGroup,
                                                        Class<? extends Channel> channelClass,
                                                        SocketAddress remoteAddress) {
        return newClient(eventLoopGroup, channelClass, HTTP_CLIENT_NO_NAME, remoteAddress);
    }

    public static HttpClient<ByteBuf, ByteBuf> newClient(EventLoopGroup eventLoopGroup,
                                                        Class<? extends Channel> channelClass, String name,
                                                        SocketAddress remoteAddress) {
        return _newClient(TcpClient.newClient(eventLoopGroup, channelClass, name, remoteAddress));
    }

    private static HttpClient<ByteBuf, ByteBuf> _newClient(TcpClient<ByteBuf, ByteBuf> tcpClient) {
        return HttpClientImpl.create(tcpClient);
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse.java;<<<<<<< MINE
=======
/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.reactivex.netty.protocol.http.clientNew;

import io.netty.handler.codec.http.Cookie;
import io.netty.handler.codec.http.HttpHeaders;
import io.netty.handler.codec.http.HttpMessage;
import io.netty.handler.codec.http.HttpResponseStatus;
import io.netty.handler.codec.http.HttpVersion;
import rx.Observable;
import rx.Subscriber;

import java.text.ParseException;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

/**
 * HTTP response for {@link HttpClient}
 *
 * <h2>Thread safety</h2>
 *
 * This object is not thread-safe and must not be used by multiple threads.
 *
 * <h2>Mutability</h2>
 *
 * Headers and trailing headers can be mutated for this response.
 */
public abstract class HttpClientResponse<T> {

    /**
     * Returns the HTTP version for this response.
     *
     * @return The HTTP version for this response.
     */
    public abstract HttpVersion getHttpVersion();

    /**
     * Returns the HTTP status for this response.
     *
     * @return The HTTP status for this response.
     */
    public abstract HttpResponseStatus getStatus();

    /**
     * Returns an immutable map of cookie names and cookies contained in this response.
     *
     * @return An immutable map of cookie names and cookies contained in this response.
     */
    public abstract Map<String, Set<Cookie>> getCookies();

    /**
     * Checks if there is a header with the passed name in this response.
     *
     * @param name Name of the header.
     *
     * @return {@code true} if there is a header with the passed name in this response.
     */
    public abstract boolean containsHeader(CharSequence name);

    /**
     * Checks if there is a header with the passed name and value in this response.
     *
     * @param name Name of the header.
     * @param value Value of the header.
     * @param ignoreCaseValue {@code true} then the value comparision is done ignoring case.
     *
     * @return {@code true} if there is a header with the passed name and value in this response.
     */
    public abstract boolean containsHeader(CharSequence name, CharSequence value, boolean ignoreCaseValue);

    /**
     * Returns an iterator over the header entries. Multiple values for the same header appear as separate entries in
     * the returned iterator.
     *
     * @return An iterator over the header entries
     */
    public abstract Iterator<Entry<String, String>> headerIterator();

    /**
     * Returns the value of a header with the specified name.  If there are more than one values for the specified name,
     * the first value is returned.
     *
     * @param name The name of the header to search
     * @return The first header value or {@code null} if there is no such header
     */
    public abstract String getHeader(CharSequence name);

    /**
     * Returns the value of a header with the specified name.  If there are more than one values for the specified name,
     * the first value is returned.
     *
     * @param name The name of the header to search
     * @param defaultValue Default if the header does not exist.
     *
     * @return The first header value or {@code defaultValue} if there is no such header
     */
    public abstract String getHeader(CharSequence name, String defaultValue);

    /**
     * Returns the values of headers with the specified name
     *
     * @param name The name of the headers to search
     *
     * @return A {@link List} of header values which will be empty if no values are found
     */
    public abstract List<String> getAllHeaderValues(CharSequence name);

    /**
     * Returns the length of the content.
     *
     * @return the content length
     *
     * @throws NumberFormatException if the message does not have the {@code "Content-Length"} header or its value is
     * not a number.
     */
    public abstract long getContentLength();

    /**
     * Returns the length of the content.
     *
     * @param defaultValue Default value if the message does not have a {@code "Content-Length"} header or its value is
     * not a number
     *
     * @return the content length or {@code defaultValue} if this message does not have the {@code "Content-Length"}
     * header or its value is not a number
     */
    public abstract long getContentLength(long defaultValue);

    /**
     * Returns the date header value with the specified header name.  If there are more than one header value for the
     * specified header name, the first value is returned.
     * The value is parsed as per the
     * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a> using the format:
     * <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
     *
     * @param name The name of the header to search
     *
     * @return the header value
     *
     * @throws ParseException if there is no such header or the header value is not a formatted date
     */
    public abstract Date getDateHeader(CharSequence name) throws ParseException;

    /**
     * Returns the date header value with the specified header name.  If there are more than one header value for the
     * specified header name, the first value is returned.
     * The value is parsed as per the
     * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a> using the format:
     * <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
     *
     * @param name The name of the header to search
     * @param defaultValue Default value if there is no header with this name.
     *
     * @return the header value or {@code defaultValue} if there is no header with this name.
     */
    public abstract Date getDateHeader(CharSequence name, Date defaultValue);

    /**
     * Returns the value of the {@code "Host"} header.
     */
    public abstract String getHostHeader();

    /**
     * Returns the value of the {@code "Host"} header.
     *
     * @param defaultValue Default if the header does not exist.
     *
     * @return The value of the {@code "Host"} header or {@code defaultValue} if there is no such header.
     */
    public abstract String getHost(String defaultValue);

    /**
     * Returns the integer header value with the specified header name.  If there are more than one header value for
     * the specified header name, the first value is returned.
     *
     * @param name The name of the header to search
     *
     * @return the header value
     *
     * @throws NumberFormatException if there is no such header or the header value is not a number
     */
    public abstract int getIntHeader(CharSequence name);

    /**
     * Returns the integer header value with the specified header name.  If there are more than one header value for
     * the specified header name, the first value is returned.
     *
     * @param name The name of the header to search
     * @param defaultValue Default if the header does not exist.
     *
     * @return the header value or the {@code defaultValue} if there is no such header or the header value is not a
     * number
     */
    public abstract int getIntHeader(CharSequence name, int defaultValue);

    /**
     * Returns {@code true} if and only if this response has the content-length header set.
     */
    public abstract boolean isContentLengthSet();

    /**
     * Returns {@code true} if and only if the connection can remain open and thus 'kept alive'.  This methods respects
     * the value of the {@code "Connection"} header first and then the return value of
     * {@link HttpVersion#isKeepAliveDefault()}.
     */
    public abstract boolean isKeepAlive();

    /**
     * Checks to see if the transfer encoding of this response is chunked
     *
     * @return True if transfer encoding is chunked, otherwise false
     */
    public abstract boolean isTransferEncodingChunked();

    /**
     * Returns a new {@link Set} that contains the names of all headers in this response.  Note that modifying the
     * returned {@link Set} will not affect the state of this response.
     */
    public abstract Set<String> getHeaderNames();

    /**
     * Adds an HTTP header with the passed {@code name} and {@code value} to this response.
     *
     * @param name Name of the header.
     * @param value Value for the header.
     *
     * @return {@code this}
     */
    public abstract HttpClientResponse<T> addHeader(CharSequence name, Object value);

    /**
     * Adds the passed {@code cookie} to this response.
     *
     * @param cookie Cookie to add.
     *
     * @return {@code this}
     */
    public abstract HttpClientResponse<T> addCookie(Cookie cookie);

    /**
     * Adds the passed header as a date value to this response. The date is formatted using netty's
     * {@link HttpHeaders#addDateHeader(HttpMessage, CharSequence, Date)} which formats the date as per the
     * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a> into the format:
     * <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
     *
     * @param name Name of the header.
     * @param value Value of the header.
     *
     * @return {@code this}
     */
    public abstract HttpClientResponse<T> addDateHeader(CharSequence name, Date value);

    /**
     * Adds multiple date values for the passed header name to this response. The date values are formatted using netty's
     * {@link HttpHeaders#addDateHeader(HttpMessage, CharSequence, Date)} which formats the date as per the
     * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a> into the format:
     *
     * <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
     *
     * @param name Name of the header.
     * @param values Values for the header.
     *
     * @return {@code this}
     */
    public abstract HttpClientResponse<T> addDateHeader(CharSequence name, Iterable<Date> values);

    /**
     * Adds an HTTP header with the passed {@code name} and {@code values} to this response.
     *
     * @param name Name of the header.
     * @param values Values for the header.
     *
     * @return {@code this}
     */
    public abstract HttpClientResponse<T> addHeader(CharSequence name, Iterable<Object> values);

    /**
     * Overwrites the current value, if any, of the passed header to the passed date value for this response. The date is
     * formatted using netty's {@link HttpHeaders#addDateHeader(HttpMessage, CharSequence, Date)} which formats the date
     * as per the <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a> into
     * the format:
     * <p/>
     * <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
     *
     * @param name Name of the header.
     * @param value Value of the header.
     *
     * @return {@code this}
     */
    public abstract HttpClientResponse<T> setDateHeader(CharSequence name, Date value);

    /**
     * Overwrites the current value, if any, of the passed header to the passed value for this response.
     *
     * @param name Name of the header.
     * @param value Value of the header.
     *
     * @return {@code this}
     */
    public abstract HttpClientResponse<T> setHeader(CharSequence name, Object value);

    /**
     * Overwrites the current value, if any, of the passed header to the passed date values for this response. The date
     * is formatted using netty's {@link HttpHeaders#addDateHeader(HttpMessage, CharSequence, Date)} which formats the
     * date as per the <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a>
     * into the format:
     * <p/>
     * <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
     *
     * @param name Name of the header.
     * @param values Values of the header.
     *
     * @return {@code this}
     */
    public abstract HttpClientResponse<T> setDateHeader(CharSequence name, Iterable<Date> values);

    /**
     * Overwrites the current value, if any, of the passed header to the passed values for this response.
     *
     * @param name Name of the header.
     * @param values Values of the header.
     *
     * @return {@code this}
     */
    public abstract HttpClientResponse<T> setHeader(CharSequence name, Iterable<Object> values);

    /**
     * Removes the passed header from this response.
     *
     * @param name Name of the header.
     *
     * @return {@code this}
     */
    public abstract HttpClientResponse<T> removeHeader(CharSequence name);

    /**
     * Returns the content as a stream. There can only be one {@link Subscriber} to the returned {@link Observable}, any
     * subsequent subscriptions will get an error.
     *
     * @return Stream of content.
     */
    public abstract Observable<T> getContent();

    public String toString() {
        StringBuilder builder = new StringBuilder();
        builder.append(getHttpVersion().text())
               .append(' ')
               .append(getStatus().code())
               .append(' ')
               .append(getStatus().reasonPhrase())
               .append('\n');

        Iterator<Entry<String, String>> headers = headerIterator();
        while (headers.hasNext()) {
            Entry<String, String> next = headers.next();
            builder.append(next.getKey())
                   .append(": ")
                   .append(next.getValue());
        }
        builder.append('\n');

        return builder.toString();
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
=======
import io.netty.handler.logging.LogLevel;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
import io.reactivex.netty.protocol.http.client.HttpClientResponse;
=======
import io.reactivex.netty.protocol.http.TrailingHeaders;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
=======
import rx.annotations.Experimental;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
=======
import rx.functions.Func0;
import rx.functions.Func1;
import rx.functions.Func2;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
=======

 * <h2>Trailing headers</h2>
 *
 * One can write HTTP trailing headers by using
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
 * The request is executed every time {@link HttpClientRequest#subscribe()} is called and is the only way of executing
 * the request.
=======
 * The request is executed every time {@link HttpClientRequest}, or {@link Observable} returned by
 * {@code write*Content} is subscribed and is the only way of executing the request.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
 * @param <I>
 * @param <O>
=======
 * @param <I> The type of objects read from the request content.
 * @param <O> The type of objects read from the response content.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
public abstract class HttpClientRequest<I, O> extends Observable<HttpClientResponse<O>>
        implements HttpClientRequestOperations<I, HttpClientRequest<I, O>> {
=======
public abstract class HttpClientRequest<I, O> extends Observable<HttpClientResponse<O>> {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Uses the passed {@link Observable} as the content source for the newly created and returned
     * {@link HttpClientRequest}.
=======
     * Uses the passed {@link Observable} as the source of content for this request.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return An new instance of {@link Observable} which can be subscribed to execute the request.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    @Override
    public abstract HttpClientRequest<I, O> setContentSource(Observable<I> contentSource);
=======
    public abstract Observable<HttpClientResponse<O>> writeContent(Observable<I> contentSource);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Uses the passed {@code content} as the content for the newly created and returned
     * {@link HttpClientRequest}. This is equivalent to calling
     * {@code
     *      setContentSource(Observable.just(content));
     * }
=======
     * Uses the passed {@link Observable} as the source of content for this request. Every item is written and flushed
     * immediately.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @param content Content for the request.
=======
     * @param contentSource Content source for the request.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return An new instance of {@link Observable} which can be subscribed to execute the request.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    @Override
    public abstract HttpClientRequest<I, O> setContent(I content);
=======
    public abstract Observable<HttpClientResponse<O>> writeContentAndFlushOnEach(Observable<I> contentSource);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Uses the passed {@code content} as the content for the newly created and returned
     * {@link HttpClientRequest}. This is equivalent to calling
     * {@code
     *      setContent(content.getBytes(Charset.defaultCharset()));
     * }
=======
     * Uses the passed {@link Observable} as the source of content for this request.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @param content Content for the request.
=======
     * @param contentSource Content source for the request.
     * @param flushSelector A {@link Func1} which is invoked for every item emitted from {@code msgs}. All pending
     * writes are flushed, iff this function returns, {@code true}.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return An new instance of {@link Observable} which can be subscribed to execute the request.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    @Override
    public abstract HttpClientRequest<I, O> setStringContent(String content);
=======
    public abstract Observable<HttpClientResponse<O>> writeContent(Observable<I> contentSource,
                                                                   Func1<I, Boolean> flushSelector);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Uses the passed {@code content} as the content for the newly created and returned
     * {@link HttpClientRequest}. This is equivalent to calling
     * {@code
     *      setRawContentSource(Observable.just(content), ByteTransformer.DEFAULT_INSTANCE);
     * }
=======
     * Uses the passed {@link Observable} as the source of content for this request. This method provides a way to
     * write trailing headers.
     *
     * A new instance of {@link TrailingHeaders} will be created using the passed {@code trailerFactory} and the passed
     * {@code trailerMutator} will be invoked for every item emitted from the content source, giving a chance to modify
     * the trailing headers instance.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @param content Content for the request.
=======
     * @param contentSource Content source for the request.
     * @param trailerFactory A factory function to create a new {@link TrailingHeaders} per subscription of the content.
     * @param trailerMutator A function to mutate the trailing header on each item emitted from the content source.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return An new instance of {@link Observable} which can be subscribed to execute the request.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    @Override
    public abstract HttpClientRequest<I, O> setBytesContent(byte[] content);
=======
    @Experimental
    public abstract <T extends TrailingHeaders> Observable<HttpClientResponse<O>> writeContent(Observable<I> contentSource,
                                                                                               Func0<T> trailerFactory,
                                                                                               Func2<T, I, T> trailerMutator);

    /**
     * Uses the passed {@link Observable} as the source of content for this request. This method provides a way to
     * write trailing headers.
     *
     * A new instance of {@link TrailingHeaders} will be created using the passed {@code trailerFactory} and the passed
     * {@code trailerMutator} will be invoked for every item emitted from the content source, giving a chance to modify
     * the trailing headers instance.
     *
     * @param contentSource Content source for the request.
     * @param trailerFactory A factory function to create a new {@link TrailingHeaders} per subscription of the content.
     * @param trailerMutator A function to mutate the trailing header on each item emitted from the content source.
     * @param flushSelector A {@link Func1} which is invoked for every item emitted from {@code msgs}. All pending
     * writes are flushed, iff this function returns, {@code true}.
     *
     * @return An new instance of {@link Observable} which can be subscribed to execute the request.
     */
    @Experimental
    public abstract <T extends TrailingHeaders> Observable<HttpClientResponse<O>> writeContent(Observable<I> contentSource,
                                                                                               Func0<T> trailerFactory,
                                                                                               Func2<T, I, T> trailerMutator,
                                                                                               Func1<I, Boolean> flushSelector);

    /**
     * Uses the passed {@link Observable} as the source of content for this request.
     *
     * @param contentSource Content source for the request.
     *
     * @return An new instance of {@link Observable} which can be subscribed to execute the request.
     */
    public abstract Observable<HttpClientResponse<O>> writeStringContent(Observable<String> contentSource);

    /**
     * Uses the passed {@link Observable} as the source of content for this request.
     *
     * @param contentSource Content source for the request.
     * @param flushSelector A {@link Func1} which is invoked for every item emitted from {@code msgs}. All pending
     * writes are flushed, iff this function returns, {@code true}.
     *
     * @return An new instance of {@link Observable} which can be subscribed to execute the request.
     */
    public abstract Observable<HttpClientResponse<O>> writeStringContent(Observable<String> contentSource,
                                                                         Func1<String, Boolean> flushSelector);

    /**
     * Uses the passed {@link Observable} as the source of content for this request. This method provides a way to
     * write trailing headers.
     *
     * A new instance of {@link TrailingHeaders} will be created using the passed {@code trailerFactory} and the passed
     * {@code trailerMutator} will be invoked for every item emitted from the content source, giving a chance to modify
     * the trailing headers instance.
     *
     * @param contentSource Content source for the request.
     * @param trailerFactory A factory function to create a new {@link TrailingHeaders} per subscription of the content.
     * @param trailerMutator A function to mutate the trailing header on each item emitted from the content source.
     *
     * @return An new instance of {@link Observable} which can be subscribed to execute the request.
     */
    @Experimental
    public abstract <T extends TrailingHeaders> Observable<HttpClientResponse<O>> writeStringContent(Observable<String> contentSource,
                                                                                                     Func0<T> trailerFactory,
                                                                                                     Func2<T, String, T> trailerMutator);

    /**
     * Uses the passed {@link Observable} as the source of content for this request. This method provides a way to
     * write trailing headers.
     *
     * A new instance of {@link TrailingHeaders} will be created using the passed {@code trailerFactory} and the passed
     * {@code trailerMutator} will be invoked for every item emitted from the content source, giving a chance to modify
     * the trailing headers instance.
     *
     * @param contentSource Content source for the request.
     * @param trailerFactory A factory function to create a new {@link TrailingHeaders} per subscription of the content.
     * @param trailerMutator A function to mutate the trailing header on each item emitted from the content source.
     * @param flushSelector A {@link Func1} which is invoked for every item emitted from {@code msgs}. All pending
     * writes are flushed, iff this function returns, {@code true}.
     *
     * @return An new instance of {@link Observable} which can be subscribed to execute the request.
     */
    @Experimental
    public abstract <T extends TrailingHeaders> Observable<HttpClientResponse<O>> writeStringContent(Observable<String> contentSource,
                                                                                                     Func0<T> trailerFactory,
                                                                                                     Func2<T, String, T> trailerMutator,
                                                                                                     Func1<String, Boolean> flushSelector);

    /**
     * Uses the passed {@link Observable} as the source of content for this request.
     *
     * @param contentSource Content source for the request.
     *
     * @return An new instance of {@link Observable} which can be subscribed to execute the request.
     */
    public abstract Observable<HttpClientResponse<O>> writeBytesContent(Observable<byte[]> contentSource);

    /**
     * Uses the passed {@link Observable} as the source of content for this request.
     *
     * @param contentSource Content source for the request.
     * @param flushSelector A {@link Func1} which is invoked for every item emitted from {@code msgs}. All pending
     * writes are flushed, iff this function returns, {@code true}.
     *
     * @return An new instance of {@link Observable} which can be subscribed to execute the request.
     */
    public abstract Observable<HttpClientResponse<O>> writeBytesContent(Observable<byte[]> contentSource,
                                                                        Func1<byte[], Boolean> flushSelector);

    /**
     * Uses the passed {@link Observable} as the source of content for this request. This method provides a way to
     * write trailing headers.
     *
     * A new instance of {@link TrailingHeaders} will be created using the passed {@code trailerFactory} and the passed
     * {@code trailerMutator} will be invoked for every item emitted from the content source, giving a chance to modify
     * the trailing headers instance.
     *
     * @param contentSource Content source for the request.
     * @param trailerFactory A factory function to create a new {@link TrailingHeaders} per subscription of the content.
     * @param trailerMutator A function to mutate the trailing header on each item emitted from the content source.
     *
     * @return An new instance of {@link Observable} which can be subscribed to execute the request.
     */
    @Experimental
    public abstract <T extends TrailingHeaders> Observable<HttpClientResponse<O>> writeBytesContent(Observable<byte[]> contentSource,
                                                                                                    Func0<T> trailerFactory,
                                                                                                    Func2<T, byte[], T> trailerMutator);

    /**
     * Uses the passed {@link Observable} as the source of content for this request. This method provides a way to
     * write trailing headers.
     *
     * A new instance of {@link TrailingHeaders} will be created using the passed {@code trailerFactory} and the passed
     * {@code trailerMutator} will be invoked for every item emitted from the content source, giving a chance to modify
     * the trailing headers instance.
     *
     * @param contentSource Content source for the request.
     * @param trailerFactory A factory function to create a new {@link TrailingHeaders} per subscription of the content.
     * @param trailerMutator A function to mutate the trailing header on each item emitted from the content source.
     * @param flushSelector A {@link Func1} which is invoked for every item emitted from {@code msgs}. All pending
     * writes are flushed, iff this function returns, {@code true}.
     *
     * @return An new instance of {@link Observable} which can be subscribed to execute the request.
     */
    @Experimental
    public abstract <T extends TrailingHeaders> Observable<HttpClientResponse<O>> writeBytesContent(Observable<byte[]> contentSource,
                                                                                                    Func0<T> trailerFactory,
                                                                                                    Func2<T, byte[], T> trailerMutator,
                                                                                                    Func1<byte[], Boolean> flushSelector);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    @Override
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    @Override
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    @Override
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    @Override
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    @Override
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Adds the passed header as a date value to this request. The date is formatted using netty's
     * {@link HttpHeaders#addDateHeader(HttpMessage, CharSequence, Date)} which formats the date as per the
     * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a> into the format:
     *
     <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
=======
     * Adds the passed header as a date value to this request. The date is formatted using netty's {@link
     * HttpHeaders#addDateHeader(HttpMessage, CharSequence, Date)} which formats the date as per the <a
     * href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a> into the format:
     * <p/>
     * <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    @Override
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * {@link HttpHeaders#addDateHeader(HttpMessage, CharSequence, Date)} which formats the date as per the
     * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a> into the format:
     *
     <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
=======
     * {@link HttpHeaders#addDateHeader(HttpMessage, CharSequence, Date)} which formats the date as per the <a
     * href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a> into the format:
     * <p/>
     * <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    @Override
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    @Override
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Overwrites the current value, if any, of the passed header to the passed date value for this request.
     * The date is formatted using netty's {@link HttpHeaders#addDateHeader(HttpMessage, CharSequence, Date)} which
     * formats the date as per the
     * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a> into the format:
     *
     <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
=======
     * Overwrites the current value, if any, of the passed header to the passed date value for this request. The date is
     * formatted using netty's {@link HttpHeaders#addDateHeader(HttpMessage, CharSequence, Date)} which formats the date
     * as per the <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a> into
     * the format:
     * <p/>
     * <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    @Override
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    @Override
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Overwrites the current value, if any, of the passed header to the passed date values for this request.
     * The date is formatted using netty's {@link HttpHeaders#addDateHeader(HttpMessage, CharSequence, Date)} which
     * formats the date as per the
     * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a> into the format:
     *
     <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
=======
     * Overwrites the current value, if any, of the passed header to the passed date values for this request. The date
     * is formatted using netty's {@link HttpHeaders#addDateHeader(HttpMessage, CharSequence, Date)} which formats the
     * date as per the <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a>
     * into the format:
     * <p/>
     * <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    @Override
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    @Override
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Sets HTTP Connection header to the appropriate value for HTTP keep-alive.
     * This delegates to {@link HttpHeaders#setKeepAlive(HttpMessage, boolean)}
=======
     * Removes the passed header from this request.
     *
     * @param name Name of the header.
     *
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
     */
    public abstract HttpClientRequest<I, O> removeHeader(CharSequence name);

    /**
     * Sets HTTP Connection header to the appropriate value for HTTP keep-alive. This delegates to {@link
     * HttpHeaders#setKeepAlive(HttpMessage, boolean)}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    @Override
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Sets the HTTP transfer encoding to chunked for this request.
     * This delegates to {@link HttpHeaders#setTransferEncodingChunked(HttpMessage)}
=======
     * Sets the HTTP transfer encoding to chunked for this request. This delegates to {@link
     * HttpHeaders#setTransferEncodingChunked(HttpMessage)}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    @Override
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for the connection used by this request. The specified
     * handler is added at the first position of the pipeline as specified by
     * {@link ChannelPipeline#addFirst(String, ChannelHandler)}
=======
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this request. The
     * specified handler is added at the first position of the pipeline as specified by {@link
     * ChannelPipeline#addFirst(String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @param handler Handler instance to add.
=======
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new {@link HttpClient} instance.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    public abstract <II, OO> HttpClientRequest<II, OO> addChannelHandlerFirst(String name, ChannelHandler handler);
=======
    public abstract <II, OO> HttpClientRequest<II, OO> addChannelHandlerFirst(String name,
                                                                              Func0<ChannelHandler> handlerFactory);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for the connection used by this request. The specified
     * handler is added at the first position of the pipeline as specified by
     * {@link ChannelPipeline#addFirst(EventExecutorGroup, String, ChannelHandler)}
=======
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this request. The
     * specified handler is added at the first position of the pipeline as specified by {@link
     * ChannelPipeline#addFirst(EventExecutorGroup, String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @param group   the {@link EventExecutorGroup} which will be used to execute the {@link ChannelHandler}
     *                 methods
     * @param name     the name of the handler to append
     * @param handler  the handler to append
=======
     * @param group the {@link EventExecutorGroup} which will be used to execute the {@link ChannelHandler} methods
     * @param name the name of the handler to append
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new {@link HttpClientRequest} instance.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
                                                                              ChannelHandler handler);
=======
                                                                              Func0<ChannelHandler> handlerFactory);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for the connection used by this request. The specified
     * handler is added at the last position of the pipeline as specified by
     * {@link ChannelPipeline#addLast(String, ChannelHandler)}
=======
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this request. The
     * specified handler is added at the last position of the pipeline as specified by {@link
     * ChannelPipeline#addLast(String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @param handler Handler instance to add.
=======
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new {@link HttpClientRequest} instance.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    public abstract <II, OO> HttpClientRequest<II, OO>  addChannelHandlerLast(String name, ChannelHandler handler);
=======
    public abstract <II, OO> HttpClientRequest<II, OO> addChannelHandlerLast(String name,
                                                                             Func0<ChannelHandler> handlerFactory);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for the connection used by this request. The specified
     * handler is added at the last position of the pipeline as specified by
     * {@link ChannelPipeline#addLast(EventExecutorGroup, String, ChannelHandler)}
=======
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this request. The
     * specified handler is added at the last position of the pipeline as specified by {@link
     * ChannelPipeline#addLast(EventExecutorGroup, String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @param group   the {@link EventExecutorGroup} which will be used to execute the {@link ChannelHandler}
     *                 methods
     * @param name     the name of the handler to append
     * @param handler  the handler to append
=======
     * @param group the {@link EventExecutorGroup} which will be used to execute the {@link ChannelHandler} methods
     * @param name the name of the handler to append
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new {@link HttpClientRequest} instance.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
                                                                             ChannelHandler handler);
=======
                                                                             Func0<ChannelHandler> handlerFactory);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for the connection used by this request. The specified
     * handler is added before an existing handler with the passed {@code baseName} in the pipeline as specified by
     * {@link ChannelPipeline#addBefore(String, String, ChannelHandler)}
=======
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this request. The
     * specified handler is added before an existing handler with the passed {@code baseName} in the pipeline as
     * specified by {@link ChannelPipeline#addBefore(String, String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @param baseName  the name of the existing handler
=======
     * @param baseName the name of the existing handler
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @param handler Handler instance to add.
=======
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new {@link HttpClientRequest} instance.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
                                                                               ChannelHandler handler);
=======
                                                                               Func0<ChannelHandler> handlerFactory);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for the connection used by this request. The specified
     * handler is added before an existing handler with the passed {@code baseName} in the pipeline as specified by
     * {@link ChannelPipeline#addBefore(EventExecutorGroup, String, String, ChannelHandler)}
=======
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this request. The
     * specified handler is added before an existing handler with the passed {@code baseName} in the pipeline as
     * specified by {@link ChannelPipeline#addBefore(EventExecutorGroup, String, String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @param group   the {@link EventExecutorGroup} which will be used to execute the {@link ChannelHandler}
     *                 methods
     * @param baseName  the name of the existing handler
     * @param name     the name of the handler to append
     * @param handler  the handler to append
=======
     * @param group the {@link EventExecutorGroup} which will be used to execute the {@link ChannelHandler} methods
     * @param baseName the name of the existing handler
     * @param name the name of the handler to append
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new {@link HttpClientRequest} instance.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    public abstract <II, OO> HttpClientRequest<II, OO> addChannelHandlerBefore(EventExecutorGroup group, String baseName,
                                                                               String name, ChannelHandler handler);
=======
    public abstract <II, OO> HttpClientRequest<II, OO> addChannelHandlerBefore(EventExecutorGroup group,
                                                                               String baseName,
                                                                               String name,
                                                                               Func0<ChannelHandler> handlerFactory);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for the connection used by this request. The specified
     * handler is added after an existing handler with the passed {@code baseName} in the pipeline as specified by
     * {@link ChannelPipeline#addAfter(String, String, ChannelHandler)}
=======
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this request. The
     * specified handler is added after an existing handler with the passed {@code baseName} in the pipeline as
     * specified by {@link ChannelPipeline#addAfter(String, String, ChannelHandler)}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @param baseName  the name of the existing handler
=======
     * @param baseName the name of the existing handler
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @param handler Handler instance to add.
=======
     * @param handlerFactory Factory to create handler instance to add.
     *
     * @return A new {@link HttpClientRequest} instance.
     */
    public abstract <II, OO> HttpClientRequest<II, OO> addChannelHandlerAfter(String baseName, String name,
                                                                              Func0<ChannelHandler> handlerFactory);

    /**
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this request. The
     * specified handler is added after an existing handler with the passed {@code baseName} in the pipeline as
     * specified by {@link ChannelPipeline#addAfter(EventExecutorGroup, String, String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
     *
     * @param group the {@link io.netty.util.concurrent.EventExecutorGroup} which will be used to execute the {@link
     * io.netty.channel.ChannelHandler} methods
     * @param baseName the name of the existing handler
     * @param name the name of the handler to append
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new {@link HttpClientRequest} instance.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    public abstract <II, OO> HttpClientRequest<II, OO>  addChannelHandlerAfter(String baseName, String name,
                                                                               ChannelHandler handler);
=======
    public abstract <II, OO> HttpClientRequest<II, OO> addChannelHandlerAfter(EventExecutorGroup group, String baseName,
                                                                              String name,
                                                                              Func0<ChannelHandler> handlerFactory);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for the connection used by this request. The specified
     * handler is added after an existing handler with the passed {@code baseName} in the pipeline as specified by
     * {@link ChannelPipeline#addAfter(EventExecutorGroup, String, String, ChannelHandler)}
=======
     * Creates a new request instance, inheriting all configurations from this request and using the passed action to
     * configure all the connections created by the newly created request instance.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @param group   the {@link EventExecutorGroup} which will be used to execute the {@link ChannelHandler}
     *                 methods
     * @param baseName  the name of the existing handler
     * @param name     the name of the handler to append
     * @param handler  the handler to append
=======
     * @param configurator Action to configure {@link ChannelPipeline}.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new {@link HttpClientRequest} instance.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    public abstract <II, OO> HttpClientRequest<II, OO>  addChannelHandlerAfter(EventExecutorGroup group, String baseName,
                                                                               String name, ChannelHandler handler);
=======
    public abstract <II, OO> HttpClientRequest<II, OO> pipelineConfigurator(Action1<ChannelPipeline> configurator);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Configures an action to configure the {@link ChannelPipeline} for the connection used by this request.
=======
     * Creates a new client instances, inheriting all configurations from this client and enabling wire logging at the
     * passed level for the newly created client instance.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @param configurator Action that will be used to configure the pipeline.
=======
     * @param wireLoggingLevel Logging level at which the wire logs will be logged. The wire logging will only be done if
     *                        logging is enabled at this level for {@link io.netty.handler.logging.LoggingHandler}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new {@link HttpClient} instance.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    public abstract <II, OO> HttpClientRequest<II, OO> withPipelineConfigurator(Action1<ChannelPipeline> configurator);
=======
    public abstract HttpClientRequest<I, O> enableWireLogging(LogLevel wireLoggingLevel);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    @Override
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * for performing multiple mutations to this request. Using {@link HttpClientRequestUpdater} avoids creating multiple
     * intermediate and unused {@link HttpClientRequest} objects for each mutation.
=======
     * for performing multiple mutations to this request. Using {@link HttpClientRequestUpdater} avoids creating
     * multiple intermediate and unused {@link HttpClientRequest} objects for each mutation.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    @Override
    public abstract boolean containsHeaderWithValue(CharSequence name, CharSequence value, boolean caseInsensitiveValueMatch);
=======
    public abstract boolean containsHeaderWithValue(CharSequence name, CharSequence value,
                                                    boolean caseInsensitiveValueMatch);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    @Override
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    @Override
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    @Override
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    @Override
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Returns the URI for this request.
     * The returned URI does <em>not</em> contain the scheme, host and port portion of the URI. In case, it is required,
     * {@link #getAbsoluteUri()} must be used.
=======
     * Returns the URI for this request. The returned URI does <em>not</em> contain the scheme, host and port portion of
     * the URI.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    @Override
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
    /**
     * Returns the absolute URI for this request including the scheme, host and port portion of the URI.
     *
     * @return The absolute URI for this request.
     */
    @Override
    public abstract String getAbsoluteUri();
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl.java;<<<<<<< MINE
=======
/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.reactivex.netty.protocol.http.clientNew;

import io.netty.channel.Channel;
import io.netty.handler.codec.http.ClientCookieEncoder;
import io.netty.handler.codec.http.Cookie;
import io.netty.handler.codec.http.HttpHeaders;
import io.netty.handler.codec.http.HttpResponse;
import io.netty.handler.codec.http.HttpResponseStatus;
import io.netty.handler.codec.http.HttpVersion;
import io.reactivex.netty.protocol.http.CookiesHolder;
import io.reactivex.netty.protocol.http.internal.HttpContentSubscriberEvent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import rx.Observable;
import rx.Observable.OnSubscribe;
import rx.Subscriber;

import java.text.ParseException;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.regex.Pattern;

public final class HttpClientResponseImpl<T> extends HttpClientResponse<T> {

    private static final Logger logger = LoggerFactory.getLogger(HttpClientResponseImpl.class);

    public static final String KEEP_ALIVE_HEADER_NAME = "Keep-Alive";
    private static final Pattern PATTERN_COMMA = Pattern.compile(",");
    private static final Pattern PATTERN_EQUALS = Pattern.compile("=");
    public static final String KEEP_ALIVE_TIMEOUT_HEADER_ATTR = "timeout";

    private final HttpResponse nettyResponse;
    private final CookiesHolder cookiesHolder;
    private final Channel nettyChannel;

    protected HttpClientResponseImpl(HttpResponse nettyResponse, Channel nettyChannel) {
        this.nettyResponse = nettyResponse;
        this.nettyChannel = nettyChannel;
        cookiesHolder = CookiesHolder.newClientResponseHolder(nettyResponse.headers());
    }

    @Override
    public HttpVersion getHttpVersion() {
        return nettyResponse.protocolVersion();
    }

    @Override
    public HttpResponseStatus getStatus() {
        return nettyResponse.status();
    }

    @Override
    public Map<String, Set<Cookie>> getCookies() {
        return cookiesHolder.getAllCookies();
    }

    @Override
    public boolean containsHeader(CharSequence name) {
        return nettyResponse.headers().contains(name);
    }

    @Override
    public boolean containsHeader(CharSequence name, CharSequence value, boolean ignoreCaseValue) {
        return nettyResponse.headers().contains(name, value, ignoreCaseValue);
    }

    @Override
    public Iterator<Entry<String, String>> headerIterator() {
        return nettyResponse.headers().iterator();
    }

    @Override
    public String getHeader(CharSequence name) {
        return nettyResponse.headers().get(name);
    }

    @Override
    public String getHeader(CharSequence name, String defaultValue) {
        return HttpHeaders.getHeader(nettyResponse, name, defaultValue);
    }

    @Override
    public List<String> getAllHeaderValues(CharSequence name) {
        return nettyResponse.headers().getAll(name);
    }

    @Override
    public long getContentLength() {
        return HttpHeaders.getContentLength(nettyResponse);
    }

    @Override
    public long getContentLength(long defaultValue) {
        return HttpHeaders.getContentLength(nettyResponse, defaultValue);
    }

    @Override
    public Date getDateHeader(CharSequence name) throws ParseException {
        return HttpHeaders.getDateHeader(nettyResponse, name);
    }

    @Override
    public Date getDateHeader(CharSequence name, Date defaultValue) {
        return HttpHeaders.getDateHeader(nettyResponse, name, defaultValue);
    }

    @Override
    public String getHostHeader() {
        return HttpHeaders.getHost(nettyResponse);
    }

    @Override
    public String getHost(String defaultValue) {
        return HttpHeaders.getHost(nettyResponse, defaultValue);
    }

    @Override
    public int getIntHeader(CharSequence name) {
        return HttpHeaders.getIntHeader(nettyResponse, name);
    }

    @Override
    public int getIntHeader(CharSequence name, int defaultValue) {
        return HttpHeaders.getIntHeader(nettyResponse, name, defaultValue);
    }

    @Override
    public boolean isContentLengthSet() {
        return HttpHeaders.isContentLengthSet(nettyResponse);
    }

    @Override
    public boolean isKeepAlive() {
        return HttpHeaders.isKeepAlive(nettyResponse);
    }

    @Override
    public boolean isTransferEncodingChunked() {
        return HttpHeaders.isTransferEncodingChunked(nettyResponse);
    }

    @Override
    public Set<String> getHeaderNames() {
        return nettyResponse.headers().names();
    }

    @Override
    public HttpClientResponse<T> addHeader(CharSequence name, Object value) {
        nettyResponse.headers().add(name, value);
        return this;
    }

    @Override
    public HttpClientResponse<T> addCookie(Cookie cookie) {
        nettyResponse.headers().add(HttpHeaders.Names.SET_COOKIE, ClientCookieEncoder.encode(cookie));
        return this;
    }

    @Override
    public HttpClientResponse<T> addDateHeader(CharSequence name, Date value) {
        HttpHeaders.addDateHeader(nettyResponse, name, value);
        return this;
    }

    @Override
    public HttpClientResponse<T> addDateHeader(CharSequence name, Iterable<Date> values) {
        for (Date value : values) {
            HttpHeaders.addDateHeader(nettyResponse, name, value);
        }
        return this;
    }

    @Override
    public HttpClientResponse<T> addHeader(CharSequence name, Iterable<Object> values) {
        nettyResponse.headers().add(name, values);
        return this;
    }

    @Override
    public HttpClientResponse<T> setDateHeader(CharSequence name, Date value) {
        HttpHeaders.setDateHeader(nettyResponse, name, value);
        return this;
    }

    @Override
    public HttpClientResponse<T> setHeader(CharSequence name, Object value) {
        nettyResponse.headers().set(name, value);
        return this;
    }

    @Override
    public HttpClientResponse<T> setDateHeader(CharSequence name, Iterable<Date> values) {
        for (Date value : values) {
            HttpHeaders.setDateHeader(nettyResponse, name, value);
        }
        return this;
    }

    @Override
    public HttpClientResponse<T> setHeader(CharSequence name, Iterable<Object> values) {
        nettyResponse.headers().set(name, values);
        return this;
    }

    @Override
    public HttpClientResponse<T> removeHeader(CharSequence name) {
        nettyResponse.headers().remove(name);
        return this;
    }

    @Override
    public Observable<T> getContent() {
        return Observable.create(new OnSubscribe<T>() {
            @Override
            public void call(Subscriber<? super T> subscriber) {
                nettyChannel.pipeline()
                            .fireUserEventTriggered(new HttpContentSubscriberEvent<T>(subscriber));
            }
        });
    }

    /**
     * Parses the timeout value from the HTTP keep alive header (with name {@link #KEEP_ALIVE_HEADER_NAME}) as described in
     * <a href="http://tools.ietf.org/id/draft-thomson-hybi-http-timeout-01.html">this spec</a>
     *
     * @return The keep alive timeout or {@code null} if this response does not define the appropriate header value.
     */
    public Long getKeepAliveTimeoutSeconds() {
        String keepAliveHeader = nettyResponse.headers().get(KEEP_ALIVE_HEADER_NAME);
        if (null != keepAliveHeader && !keepAliveHeader.isEmpty()) {
            String[] pairs = PATTERN_COMMA.split(keepAliveHeader);
            if (pairs != null) {
                for (String pair: pairs) {
                    String[] nameValue = PATTERN_EQUALS.split(pair.trim());
                    if (nameValue != null && nameValue.length >= 2) {
                        String name = nameValue[0].trim().toLowerCase();
                        String value = nameValue[1].trim();
                        if (KEEP_ALIVE_TIMEOUT_HEADER_ATTR.equals(name)) {
                            try {
                                return Long.valueOf(value);
                            } catch (NumberFormatException e) {
                                logger.info("Invalid HTTP keep alive timeout value. Keep alive header: "
                                            + keepAliveHeader + ", timeout attribute value: " + nameValue[1], e);
                                return null;
                            }
                        }
                    }
                }
            }
        }
        return null;
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/PooledClientConnectionFactoryImpl.java;<<<<<<< MINE
=======
import rx.functions.Action0;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/PooledClientConnectionFactoryImpl.java;<<<<<<< MINE
=======
import static io.reactivex.netty.client.ClientMetricsEvent.*;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/PooledClientConnectionFactoryImpl.java;<<<<<<< MINE
        this(clientState, new FIFOIdleConnectionsHolder<W, R>(clientState.getEventsSubject()),
=======
        this(clientState, new FIFOIdleConnectionsHolder<W, R>(),
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/PooledClientConnectionFactoryImpl.java;<<<<<<< MINE
    public PooledClientConnectionFactoryImpl(ClientState<W, R> clientState,
=======
    protected PooledClientConnectionFactoryImpl(ClientState<W, R> clientState,
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/PooledClientConnectionFactoryImpl.java;<<<<<<< MINE
=======
                                                        .doOnSubscribe(new Action0() {
                                                            @Override
                                                            public void call() {
                                                                metricsEventSubject.onEvent(POOL_ACQUIRE_START);
                                                            }
                                                        })
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/PooledClientConnectionFactoryImpl.java;<<<<<<< MINE
                                           return new PooledConnection<R, W>(PooledClientConnectionFactoryImpl.this,
                                                                             poolConfig, connection);
=======
                                           metricsEventSubject.onEvent(ClientMetricsEvent.POOL_ACQUIRE_SUCCESS,
                                                                       Clock.onEndMillis(startTimeMillis));
                                           return PooledConnection.create(PooledClientConnectionFactoryImpl.this,
                                                                          poolConfig, connection);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/PooledClientConnectionFactoryImpl.java;<<<<<<< MINE
                metricsEventSubject.onEvent(ClientMetricsEvent.POOL_RELEASE_START);
=======
                metricsEventSubject.onEvent(POOL_RELEASE_START);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/PooledClientConnectionFactoryImpl.java;<<<<<<< MINE
                    metricsEventSubject.onEvent(ClientMetricsEvent.POOL_RELEASE_SUCCESS,
                                                Clock.onEndMillis(releaseStartTime));
=======
                    metricsEventSubject.onEvent(POOL_RELEASE_SUCCESS, Clock.onEndMillis(releaseStartTime));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/PooledClientConnectionFactoryImpl.java;<<<<<<< MINE
                    metricsEventSubject.onEvent(ClientMetricsEvent.POOL_RELEASE_SUCCESS,
                                                Clock.onEndMillis(releaseStartTime));
=======
                    metricsEventSubject.onEvent(POOL_RELEASE_SUCCESS, Clock.onEndMillis(releaseStartTime));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/PooledClientConnectionFactoryImpl.java;<<<<<<< MINE
                metricsEventSubject.onEvent(ClientMetricsEvent.POOL_RELEASE_FAILED,
                                            Clock.onEndMillis(releaseStartTime));
=======
                metricsEventSubject.onEvent(POOL_RELEASE_FAILED, Clock.onEndMillis(releaseStartTime));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/PooledClientConnectionFactoryImpl.java;<<<<<<< MINE
                        metricsEventSubject.onEvent(ClientMetricsEvent.POOL_ACQUIRE_SUCCESS,
                                                    Clock.onEndMillis(startTimeMillis));
                        if (!subscriber.isUnsubscribed()) {
                            subscriber.onCompleted();
                        }
                    } else {
                        connectDelegate.connect()
                                       .map(new Func1<Connection<R, W>, PooledConnection<R, W>>() {
                                           @Override
                                           public PooledConnection<R, W> call(Connection<R, W> connection) {
                                               return new PooledConnection<R, W>(PooledClientConnectionFactoryImpl.this,
                                                                                 poolConfig, connection);
                                           }
                                       })
                                       .unsafeSubscribe(subscriber);
=======
                        metricsEventSubject.onEvent(POOL_ACQUIRE_SUCCESS, Clock.onEndMillis(startTimeMillis));
                    }

                    if (!subscriber.isUnsubscribed()) {
                        subscriber.onCompleted();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/PooledClientConnectionFactoryImpl.java;<<<<<<< MINE
                    metricsEventSubject.onEvent(ClientMetricsEvent.POOL_ACQUIRE_FAILED,
                                                Clock.onEndMillis(startTimeMillis), e);
=======
                    metricsEventSubject.onEvent(POOL_ACQUIRE_FAILED, Clock.onEndMillis(startTimeMillis), e);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/PooledClientConnectionFactoryImpl.java;<<<<<<< MINE
                        metricsEventSubject.onEvent(ClientMetricsEvent.POOLED_CONNECTION_REUSE,
                                                    Clock.onEndMillis(startTimeMillis));
=======
                        metricsEventSubject.onEvent(POOLED_CONNECTION_REUSE, Clock.onEndMillis(startTimeMillis));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/ClientConnectionFactory.java;<<<<<<< MINE
import io.netty.channel.ChannelFutureListener;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/ClientConnectionFactory.java;<<<<<<< MINE
import io.reactivex.netty.client.ClientMetricsEvent;
import io.reactivex.netty.metrics.Clock;
import io.reactivex.netty.metrics.MetricEventsSubject;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/ClientConnectionFactory.java;<<<<<<< MINE
        final long startTimeMillis = Clock.newStartTimeMillis();
        final MetricEventsSubject<ClientMetricsEvent<?>> eventsSubject = clientState.getEventsSubject();
        eventsSubject.onEvent(ClientMetricsEvent.CONNECT_START);

        return clientState.getBootstrap().connect(clientState.getRemoteAddress())
                          .addListener(new ChannelFutureListener() {
                              @Override
                              public void operationComplete(ChannelFuture future) throws Exception {
                                  if (!future.isSuccess()) {
                                      clientState.getEventsSubject().onEvent(ClientMetricsEvent.CONNECT_FAILED,
                                                                             Clock.onEndMillis(startTimeMillis),
                                                                             future.cause());
                                  } else {
                                      clientState.getEventsSubject().onEvent(ClientMetricsEvent.CONNECT_SUCCESS,
                                                                             Clock.onEndMillis(startTimeMillis));
                                  }
                              }
                          });
=======
        return clientState.getBootstrap().connect(clientState.getRemoteAddress());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/IdleConnectionsHolder.java;<<<<<<< MINE
import io.reactivex.netty.client.ClientMetricsEvent;
import io.reactivex.netty.metrics.MetricEventsSubject;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/IdleConnectionsHolder.java;<<<<<<< MINE
    private MetricEventsSubject<ClientMetricsEvent<?>> metricEventsSubject;

    IdleConnectionsHolder(MetricEventsSubject<ClientMetricsEvent<?>> metricEventsSubject) {
        this.metricEventsSubject = metricEventsSubject;
    }

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/IdleConnectionsHolder.java;<<<<<<< MINE
        final IdleConnectionsHolder<WW, RR> copy = doCopy(newState);
        copy.metricEventsSubject = newState.getEventsSubject();
        return copy;
=======
        return doCopy(newState);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/IdleConnectionsHolder.java;<<<<<<< MINE
        metricEventsSubject.onEvent(ClientMetricsEvent.POOLED_CONNECTION_EVICTION);
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/server/TcpServer.java;<<<<<<< MINE
import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufAllocator;
=======
import io.netty.buffer.ByteBuf;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/server/TcpServer.java;<<<<<<< MINE
=======
import io.netty.channel.EventLoopGroup;
import io.netty.channel.ServerChannel;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/server/TcpServer.java;<<<<<<< MINE
=======

    /**
     * Creates a new server using the passed port.
     *
     * @param port Port for the server. {@code 0} to use ephemeral port.
     * @return A new {@link TcpServer}
     */
    public static TcpServer<ByteBuf, ByteBuf> newServer(int port) {
        return new TcpServerImpl<ByteBuf, ByteBuf>(port);
    }

    /**
     * Creates a new server using the passed port.
     *
     * @param port Port for the server. {@code 0} to use ephemeral port.
     * @param eventLoopGroup Eventloop group to be used for server as well as client sockets.
     * @param channelClass The class to be used for server channel.
     *
     * @return A new {@link TcpServer}
     */
    public static TcpServer<ByteBuf, ByteBuf> newServer(int port, EventLoopGroup eventLoopGroup,
                                                         Class<? extends ServerChannel> channelClass) {
        return new TcpServerImpl<ByteBuf, ByteBuf>(port, eventLoopGroup, eventLoopGroup, channelClass);
    }

    /**
     * Creates a new server using the passed port.
     *
     * @param port Port for the server. {@code 0} to use ephemeral port.
     * @param serverGroup Eventloop group to be used for server sockets.
     * @param clientGroup Eventloop group to be used for client sockets.
     * @param channelClass The class to be used for server channel.
     *
     * @return A new {@link TcpServer}
     */
    public static TcpServer<ByteBuf, ByteBuf> newServer(int port, EventLoopGroup serverGroup,
                                                         EventLoopGroup clientGroup,
                                                         Class<? extends ServerChannel> channelClass) {
        return new TcpServerImpl<ByteBuf, ByteBuf>(port, serverGroup, clientGroup, channelClass);
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufAllocator;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
import rx.Observable.Operator;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
=======
import rx.subscriptions.Subscriptions;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
    private final FlushObservable flushObservable;
    private final Observable<Void> flushWithWriteObservable;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
=======

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
        flushObservable = FlushObservable.create(eventsSubject, metricEventProvider, nettyChannel);

        /**
         * Errors get connected to the write only as the _writeAndFlush() semantics are to give error only for the write
         * done along with the write*AndFlush() call.
         */
        flushWithWriteObservable = flushObservable.onErrorResumeNext(Observable.<Void>empty());

        flushAndCloseObservable = flushObservable
                // Since concat does not subscribe to the other Observable on error, this makes sure that the close is
                // closed in the case of error too.
                .onErrorResumeNext(new Func1<Throwable, Observable<Void>>() {
                    @Override
                    public Observable<Void> call(Throwable throwable) {
                        // Since, flush has failed, the result should always be an error but close must be invoked.
                        return closeObservable.concatWith(Observable.<Void>error(throwable));
                    }
                })
                .concatWith(closeObservable); // For success paths.
    }

    @Override
    public Observable<Void> write(W msg) {
        return _write(msg);
=======
        flushAndCloseObservable = closeObservable.doOnSubscribe(new Action0() {
            @Override
            public void call() {
                nettyChannel.flush();
            }
        });
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
    public Observable<Void> writeBytes(ByteBuf msg) {
        return _write(msg);
=======
    public Observable<Void> write(Observable<W> msgs, final Func1<W, Boolean> flushSelector) {
        return _write(msgs, flushSelector);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
    public Observable<Void> writeBytes(byte[] msg) {
        return _write(msg);
=======
    public Observable<Void> writeAndFlushOnEach(Observable<W> msgs) {
        return _write(msgs, flushOnEachSelector);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
    public Observable<Void> writeString(String msg) {
        return _write(msg);
=======
    public Observable<Void> writeString(Observable<String> msgs) {
        return _write(msgs);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
    public Observable<Void> writeFileRegion(FileRegion region) {
        return _write(region);
=======
    public Observable<Void> writeString(Observable<String> msgs, Func1<String, Boolean> flushSelector) {
        return _write(msgs, flushSelector);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
    public Observable<Void> flush() {
        return flushObservable;
=======
    public Observable<Void> writeStringAndFlushOnEach(Observable<String> msgs) {
        return writeString(msgs, FLUSH_ON_EACH_STRING);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
    public Observable<Void> writeAndFlush(W msg) {
        return _writeAndFlush(msg);
=======
    public Observable<Void> writeBytes(Observable<byte[]> msgs) {
        return _write(msgs);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
    public Observable<Void> writeAndFlush(final Observable<W> msgs) {
        return _writeAndFlushStream(msgs);
=======
    public Observable<Void> writeBytes(Observable<byte[]> msgs, Func1<byte[], Boolean> flushSelector) {
        return _write(msgs, flushSelector);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
    public Observable<Void> writeAndFlush(Observable<W> msgs, final Func1<W, Boolean> flushSelector) {
        /**
         * This is trading correctness of the flush of pending messages just when the first time flushSelector returns
         * true with simplicity of just being able to do a channel.flush() instead of flatmap of FlushObservable on
         * every flush.
         */
        return flushObservable.concatWith(_write(msgs.lift(new Operator<W, W>() {
            @Override
            public Subscriber<? super W> call(final Subscriber<? super W> subscriber) {
                return new Subscriber<W>(subscriber) {
                    @Override
                    public void onCompleted() {
                        subscriber.onCompleted();
                    }

                    @Override
                    public void onError(Throwable e) {
                        subscriber.onError(e);
                    }

                    @Override
                    public void onNext(W w) {
                        subscriber.onNext(w);
                        if (flushSelector.call(w)) {
                            /**
                             * Since, the return is only going to be the result of all writes, there is no need to track
                             * the result of each flush here. Hence, this just does a channel flush instead of using a
                             * FlushObservable.
                             */
                            nettyChannel.flush();
                        }
                    }
                };
            }
        })));
=======
    public Observable<Void> writeBytesAndFlushOnEach(Observable<byte[]> msgs) {
        return _write(msgs, FLUSH_ON_EACH_BYTES);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
    public Observable<Void> writeAndFlushOnEach(Observable<W> msgs) {
        return writeAndFlush(msgs, flushOnEachSelector);
    }

    @Override
    public Observable<Void> writeBytesAndFlush(ByteBuf msg) {
        return _writeAndFlush(msg);
    }

    @Override
    public Observable<Void> writeBytesAndFlush(byte[] msg) {
        return _writeAndFlush(msg);
=======
    public Observable<Void> writeFileRegion(Observable<FileRegion> msgs) {
        return _write(msgs);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
    public Observable<Void> writeStringAndFlush(String msg) {
        return _writeAndFlush(msg);
=======
    public Observable<Void> writeFileRegion(Observable<FileRegion> msgs, Func1<FileRegion, Boolean> flushSelector) {
        return _write(msgs, flushSelector);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
    public Observable<Void> writeFileRegionAndFlush(FileRegion fileRegion) {
        return _writeAndFlush(fileRegion);
=======
    public Observable<Void> writeFileRegionAndFlushOnEach(Observable<FileRegion> msgs) {
        return writeFileRegion(msgs, FLUSH_ON_EACH_FILE_REGION);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
    public void cancelPendingWrites(boolean mayInterruptIfRunning) {
        flushObservable.cancelPendingFutures(mayInterruptIfRunning);
    }

    @Override
    public ByteBufAllocator getAllocator() {
        return nettyChannel.alloc();
=======
    public void flush() {
        nettyChannel.flush();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
        return flushAndCloseObservable;
=======
        return flush ? flushAndCloseObservable : closeObservable;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
    private Observable<Void> _write(final Object msg) {
=======
    private <X> Observable<Void> _write(final Observable<X> msgs, Func1<X, Boolean> flushSelector) {
        return _write(msgs.lift(new FlushSelectorOperator<X>(flushSelector, nettyChannel)));
    }

    private Observable<Void> _write(final Observable<?> msgs) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
                final ChannelFuture writeFuture = nettyChannel.write(msg);
=======
                final ChannelFuture writeFuture = nettyChannel.write(msgs.doOnCompleted(new Action0() {
                    @Override
                    public void call() {
                        nettyChannel.flush();
                    }
                }));
                subscriber.add(Subscriptions.create(new Action0() {
                    @Override
                    public void call() {
                        writeFuture.cancel(false); // cancel write on unsubscribe.
                    }
                }));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
=======
                        if (subscriber.isUnsubscribed()) {
                            /*short-circuit if subscriber is unsubscribed*/
                            return;
                        }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
                flushObservable.add(writeFuture);
            }
        });
    }

    private Observable<Void> _writeAndFlush(final Object msg) {
        return Observable.create(new OnSubscribe<Void>() {
            @Override
            public void call(final Subscriber<? super Void> subscriber) {
                flushObservable.add(nettyChannel.write(msg)
                                                .addListener(new ChannelFutureListener() {
                                                    @Override
                                                    public void operationComplete(ChannelFuture future)
                                                            throws Exception {
                                                        /**
                                                         * The semantics here are that the error on this write
                                                         * must only propagate to the subscriber.
                                                         * This is why, the subscriber is not directly
                                                         * subscribed to the flushObservable.
                                                         * This code is propagating this write failure and
                                                         * flushWithWriteObservable propagates completion.
                                                         */
                                                        if (!future.isSuccess()) {
                                                            subscriber.onError(future.cause());
                                                        }
                                                    }
                                                }));

                /*
                 * Flushes and connects completion to the subscriber. Error for this write is propagated via the
                 * channel listener above.
                 */
                flushWithWriteObservable.subscribe(subscriber);
            }
        });
    }

    private Observable<Void> _writeAndFlushStream(final Observable<W> msg) {
        return Observable.create(new OnSubscribe<Void>() {
            @Override
            public void call(final Subscriber<? super Void> subscriber) {
                Observable<W> msgStream = msg.doOnTerminate(new Action0() {
                    @Override
                    public void call() {
                        /*
                         * Flushes and connects completion to the subscriber. Error for this write is propagated via the
                         * channel listener below.
                         */
                        flushWithWriteObservable.subscribe(subscriber);
                    }
                });

                flushObservable.add(nettyChannel.write(msgStream)
                                                .addListener(new ChannelFutureListener() {
                                                    @Override
                                                    public void operationComplete(ChannelFuture future)
                                                            throws Exception {
                                                        /**
                                                         * The semantics here are that the error on this write
                                                         * must only propagate to the subscriber.
                                                         * This is why, the subscriber is not directly
                                                         * subscribed to the flushObservable.
                                                         * This code is propagating this write failure and
                                                         * flushWithWriteObservable propagates completion.
                                                         */
                                                        if (!future.isSuccess()) {
                                                            subscriber.onError(future.cause());
                                                        }
                                                    }
                                                }));
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/FlushSelectorOperator.java;<<<<<<< MINE
=======
/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.reactivex.netty.channel;

import io.netty.channel.Channel;
import rx.Observable.Operator;
import rx.Subscriber;
import rx.functions.Func1;

public class FlushSelectorOperator<T> implements Operator<T, T> {

    private final Func1<T, Boolean> flushSelector;
    private final Channel channel;

    public FlushSelectorOperator(Func1<T, Boolean> flushSelector, Channel channel) {
        this.flushSelector = flushSelector;
        this.channel = channel;
    }

    @Override
    public Subscriber<? super T> call(final Subscriber<? super T> subscriber) {

        return new Subscriber<T>(subscriber) {
            @Override
            public void onCompleted() {
                subscriber.onCompleted();
            }

            @Override
            public void onError(Throwable e) {
                subscriber.onError(e);
            }

            @Override
            public void onNext(T next) {
                subscriber.onNext(next);
                /*Call the selector _after_ writing an element*/
                if (flushSelector.call(next)) {
                    channel.flush();
                }
            }
        };
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/CollaboratedReadInputSubscriber.java;<<<<<<< MINE
=======
/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.reactivex.netty.channel;

import io.netty.channel.Channel;
import io.netty.channel.ChannelConfig;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelInboundHandler;
import rx.Producer;
import rx.Subscriber;
import rx.annotations.Beta;
import rx.exceptions.MissingBackpressureException;
import rx.functions.Action0;
import rx.internal.operators.NotificationLite;
import rx.subscriptions.Subscriptions;

/**
 * A subscriber for {@link Connection} input.
 *
 * <h2> Thread safety </h2>
 *
 * This class assumes sequential invocation of:
 * <ul>
 <li>{@link #onCompleted()}</li>
 <li>{@link #onNext(Object)}</li>
 <li>{@link #onError(Throwable)}</li>
 </ul>
 *
 * The following methods can be called concurrently with any other method:
 * <ul>
 <li>{@link #unsubscribe()}</li>
 <li>{@link #request(long)}</li>
 </ul>
 *
 * <h2>Backpressure</h2>
 *
 * This subscriber is backpressure enabled and uses the following strategy:
 * <ul>
 <li>If the requested items from downstream are more than the items emitted, then invoke the original
 {@link Subscriber}</li>
 <li>If the requested items from downstream are less than the items emitted, then throw
 {@link MissingBackpressureException}.</li>
 <li>Whenever supply increases demand, turn off {@link ChannelConfig#isAutoRead()}.</li>
 <li>For every call to {@link Producer#request(long)} if the downstream subscriber requires more data and channel does
 not have {@link ChannelConfig#isAutoRead()} set to {@code true}, then trigger a {@link Channel#read()}</li>
 <li>The data producer of this subscriber (one calling {@link #onNext(Object)}) must make sure to call
 {@link Channel#read()} on receiving {@link ChannelInboundHandler#channelReadComplete(ChannelHandlerContext)} event and
 if {@link #shouldReadMore()} returns {@code true} </li>
 </ul>
 *
 * @author Nitesh Kant
 */
@Beta
public final class CollaboratedReadInputSubscriber<I> extends Subscriber<I> {

    private final Channel channel;

    /**
     * This is to protect agains duplicate terminal notifications, this will not necessarily mean original subsciber is
     * unsubscribed.
     */
    private boolean terminated;
    private final NotificationLite<I> nl = NotificationLite.instance();

    private volatile boolean draining; // Single threaded access

    private final Subscriber<? super I> original;
    private final Runnable fireDrainOnRequestMoreTask;


    private CollaboratedReadInputSubscriber(final Channel channel, Subscriber<? super I> op) {
        super(op);
        this.channel = channel;

        fireDrainOnRequestMoreTask = new Runnable() {
            @Override
            public void run() {
                /*
                 * The below code has to be run on the eventloop as there is a race between if(registered) and fire
                 * event. On unregistration, the pipeline is cleared and hence the event will never propagate to the
                 * handler.
                 */
                if (channel.isRegistered()) {
                    //channel.pipeline().fireUserEventTriggered(DrainInputSubscriberBuffer.INSTANCE);
                } else {
                    //drain();
                }

                /*
                 * Since, this operation has to be after the drain (to check if drain caused was sufficient for the
                 * subscriber), it is done in this task.
                 */
                if (!channel.config().isAutoRead() && shouldReadMore()) {
                    /*If the draining exhausted requested, then don't trigger read.*/
                    channel.read();
                }
            }
        };

        original = op;
        original.add(Subscriptions.create(new Action0() {
            @Override
            public void call() {
                /* When unsubscribed, drain the buffer to discard buffered items */
                channel.eventLoop().execute(fireDrainOnRequestMoreTask);
            }
        }));
    }

    @Override
    public void setProducer(Producer producer) {
        /*
         * Delegate all backpressure request logic to the actual subscriber.
         */
        original.setProducer(producer);
    }

    @Override
    public void onCompleted() {
        if (terminated) {
            return;
        }
        terminated = true;
        original.onCompleted();
    }

    @Override
    public void onError(Throwable e) {
        if (terminated) {
            return;
        }
        terminated = true;
        original.onError(e);
    }

    @Override
    public void onNext(I item) {
/*
        if (terminated) {
            ReferenceCountUtil.release(item); // discard item if no one is subscribed.
        } else if (requested > 0) {
            invokeOnNext(item);
        } else {
            if (channel.config().isAutoRead()) {
                */
/*
                 * If auto-read was on then turn it off on buffer start as there is no reason to read and buffer data.
                 * If, it is desired to not turn off auto-read then the downstream subscriber should request larger
                 * number of items.
                 *//*

                channel.config().setAutoRead(false);
            }
            original.onError(new MissingBackpressureException("Received more data on the channel than demanded by the subscriber."));
        }
*/
    }

    public static <I> CollaboratedReadInputSubscriber<I> create(final Channel channel, Subscriber<? super I> original) {
        final CollaboratedReadInputSubscriber<I> toReturn = new CollaboratedReadInputSubscriber<I>(channel, original);
        toReturn.setProducer(new CRIProducer<I>(toReturn));
        return toReturn;
    }

    public boolean shouldReadMore() {
        return !terminated /*&& REQUEST_UPDATER.get(this) > 0*/;
    }

    /*Visible for testing*/ long getRequested() {
        return 0;
    }

    private void invokeOnNext(I item) {
        original.onNext(item);
        /*if (REQUEST_UPDATER.get(this) != Long.MAX_VALUE) {
            REQUEST_UPDATER.decrementAndGet(this);
        }*/
    }

    private static class CRIProducer<T> implements Producer {

        private final CollaboratedReadInputSubscriber<T> cri;

        private CRIProducer(CollaboratedReadInputSubscriber<T> cri) {
            this.cri = cri;
        }

        @Override
        public void request(long n) {
/*
            if (Long.MAX_VALUE != cri.requested) {
                if (Long.MAX_VALUE == n) {
                    // Now turning off backpressure
                    REQUEST_UPDATER.set(cri, Long.MAX_VALUE);
                } else {
                    // add n to field but check for overflow
                    while (true) {
                        long current = REQUEST_UPDATER.get(cri);
                        long next = current + n;
                        // check for overflow
                        if (next < 0) {
                            next = Long.MAX_VALUE;
                        }
                        if (REQUEST_UPDATER.compareAndSet(cri, current, next)) {
                            break;
                        }
                    }
                }
            }

            */
/*
             * Executing on the eventloop as it needs to check whether the channel is registered or not,
             * which introduces a race-condition.
             *//*

            cri.channel.eventLoop().execute(cri.fireDrainOnRequestMoreTask);
*/
        }
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ClientConnectionToChannelBridge.java;<<<<<<< MINE
=======
import io.netty.channel.ChannelPromise;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ClientConnectionToChannelBridge.java;<<<<<<< MINE
=======
import io.reactivex.netty.metrics.Clock;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ClientConnectionToChannelBridge.java;<<<<<<< MINE
=======
import java.net.SocketAddress;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ClientConnectionToChannelBridge.java;<<<<<<< MINE
=======
    @Override
    public void connect(ChannelHandlerContext ctx, SocketAddress remoteAddress, SocketAddress localAddress,
                        ChannelPromise promise) throws Exception {
        final long startTimeMillis = Clock.newStartTimeMillis();
        promise.addListener(new ChannelFutureListener() {
            @SuppressWarnings("unchecked")
            @Override
            public void operationComplete(ChannelFuture future) throws Exception {
                if (!future.isSuccess()) {
                    eventsSubject.onEvent(ClientMetricsEvent.CONNECT_FAILED, Clock.onEndMillis(startTimeMillis),
                                          future.cause());
                } else {
                    eventsSubject.onEvent(ClientMetricsEvent.CONNECT_SUCCESS, Clock.onEndMillis(startTimeMillis));
                }
            }
        });
        super.connect(ctx, remoteAddress, localAddress, promise);
    }

    @Override
    protected void onNewReadSubscriber(final Channel channel, Subscriber<? super R> subscriber) {
        subscriber.add(Subscriptions.create(new Action0() {
            @Override
            public void call() {
                // Unsubscribe from the input closes the connection as there can only be one subscriber to the
                // input and, if nothing is read, it means, nobody is using the connection.
                // For fire-and-forget usecases, one should explicitly ignore content on the connection which
                // adds a discard all subscriber that never unsubscribes. For this case, then, the close becomes
                // explicit.
                channel.close();
            }
        }));
    }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ClientConnectionToChannelBridge.java;<<<<<<< MINE
=======

    /**
     * An event to indicate release of a {@link PooledConnection}.
     */
    public static final class PooledConnectionReleaseEvent {

        public static final PooledConnectionReleaseEvent INSTANCE = new PooledConnectionReleaseEvent();

        private PooledConnectionReleaseEvent() {
        }
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ServerConnectionToChannelBridge.java;<<<<<<< MINE
=======
                    logger.error("Error processing connection.", e);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufAllocator;
=======
import io.netty.channel.Channel;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * On subscription of the returned {@link Observable}, writes the passed message on the underneath channel.
     *
     * <h2>Flush.</h2>
     *
     * This method does not flush the write and requires an explicit {@link #flush()} call later.
     *
     * @param msg Message to write.
     *
     * @return {@link Observable} representing the result of this write. Every subscription to this {@link Observable}
     * will replay the write on the channel. This {@link Observable} will <b>NOT</b> complete unless {@link #flush()}
     * is called.
=======
     * Flush selector that always returns true.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
    Observable<Void> write(W msg);
=======
    Func1<String, Boolean> FLUSH_ON_EACH_STRING = new Func1<String, Boolean>() {
        @Override
        public Boolean call(String next) {
            return true;
        }
    };

    /**
     * Flush selector that always returns true.
     */
    Func1<byte[], Boolean> FLUSH_ON_EACH_BYTES = new Func1<byte[], Boolean>() {
        @Override
        public Boolean call(byte[] next) {
            return true;
        }
    };

    /**
     * Flush selector that always returns true.
     */
    Func1<FileRegion, Boolean> FLUSH_ON_EACH_FILE_REGION = new Func1<FileRegion, Boolean>() {
        @Override
        public Boolean call(FileRegion next) {
            return true;
        }
    };
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * This method does not flush the write and requires an explicit {@link #flush()} call later.
=======
     * All writes will be flushed on completion of the passed {@code Observable}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * will replay the write on the channel. This {@link Observable} will <b>NOT</b> complete unless {@link #flush()}
     * is called.
=======
     * will replay the write on the channel.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * On subscription of the returned {@link Observable}, writes the passed message on the underneath channel.
=======
     * On subscription of the returned {@link Observable}, writes the passed message stream on the underneath channel
     * and flushes the channel, everytime, {@code flushSelector} returns {@code true} . Any writes issued before
     * subscribing, will also be flushed. However, the returned {@link Observable} will not capture the result of those
     * writes, i.e. if the other writes, fail and this write does not, the returned {@link Observable} will not fail.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * <h2>Flush.</h2>
=======
     * @param msgs Message stream to write.
     * @param flushSelector A {@link Func1} which is invoked for every item emitted from {@code msgs}. Channel is
     * flushed, iff this function returns, {@code true}.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * This method does not flush the write and requires an explicit {@link #flush()} call later.
     *
     * @param msg Message to write.
     *
     * @return {@link Observable} representing the result of this write. Every subscription to this {@link Observable}
     * will replay the write on the channel. This {@link Observable} will <b>NOT</b> complete unless {@link #flush()}
     * is called.
=======
     * @return An {@link Observable} representing the result of this write. Every
     * subscription to this {@link Observable} will write the passed messages and flush all pending writes, when the
     * {@code flushSelector} returns {@code true}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
    Observable<Void> writeBytes(ByteBuf msg);
=======
    Observable<Void> write(Observable<W> msgs, Func1<W, Boolean> flushSelector);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * On subscription of the returned {@link Observable}, writes the passed message on the underneath channel.
     * This is equivalent to calling:
=======
     * On subscription of the returned {@link Observable}, writes the passed message stream on the underneath channel
     * and flushes the channel, on every write. Any writes issued before subscribing, will also be flushed. However, the
     * returned {@link Observable} will not capture the result of those writes, i.e. if the other writes, fail and this
     * write does not, the returned {@link Observable} will not fail.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * <PRE>
     *  writeBytes(getAllocator().buffer(msg.length).writeBytes(msg));
     * </PRE>
=======
     * @param msgs Message stream to write.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * <h2>Flush.</h2>
     *
     * This method does not flush the write and requires an explicit {@link #flush()} call later.
     *
     * @param msg Message to write.
     *
     * @return {@link Observable} representing the result of this write. Every subscription to this {@link Observable}
     * will replay the write on the channel. This {@link Observable} will <b>NOT</b> complete unless {@link #flush()}
     * is called.
=======
     * @return An {@link Observable} representing the result of this write. Every
     * subscription to this {@link Observable} will write the passed messages and flush all pending writes, on every
     * write.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
    Observable<Void> writeBytes(byte[] msg);
=======
    Observable<Void> writeAndFlushOnEach(Observable<W> msgs);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * On subscription of the returned {@link Observable}, writes the passed message on the underneath channel.
     * This is equivalent to calling:
     *
     * <PRE>
     *  writeBytes(getAllocator().buffer(msg.length).writeBytes(msg.getBytes()));
     * </PRE>
=======
     * On subscription of the returned {@link Observable}, writes the passed message stream on the underneath channel.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * This method does not flush the write and requires an explicit {@link #flush()} call later.
=======
     * All writes will be flushed on completion of the passed {@code Observable}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * @param msg Message to write.
=======
     * @param msgs Stream of messages to write.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * will replay the write on the channel. This {@link Observable} will <b>NOT</b> complete unless {@link #flush()}
     * is called.
=======
     * will replay the write on the channel.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
    Observable<Void> writeString(String msg);
=======
    Observable<Void> writeString(Observable<String> msgs);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * On subscription of the returned {@link Observable}, writes the passed {@link FileRegion} on the underneath
     * channel.
=======
     * On subscription of the returned {@link Observable}, writes the passed message stream on the underneath channel
     * and flushes the channel, everytime, {@code flushSelector} returns {@code true} . Any writes issued before
     * subscribing, will also be flushed. However, the returned {@link Observable} will not capture the result of those
     * writes, i.e. if the other writes, fail and this write does not, the returned {@link Observable} will not fail.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * <h2>Flush.</h2>
=======
     * @param msgs Message stream to write.
     * @param flushSelector A {@link Func1} which is invoked for every item emitted from {@code msgs}. Channel is
     * flushed, iff this function returns, {@code true}.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * This method does not flush the write and requires an explicit {@link #flush()} call later.
     *
     * @param region File region to write.
     *
     * @return {@link Observable} representing the result of this write. Every subscription to this {@link Observable}
     * will replay the write on the channel. This {@link Observable} will <b>NOT</b> complete unless {@link #flush()}
     * is called.
=======
     * @return An {@link Observable} representing the result of this write. Every
     * subscription to this {@link Observable} will write the passed messages and flush all pending writes, when the
     * {@code flushSelector} returns {@code true}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
    Observable<Void> writeFileRegion(FileRegion region);
=======
    Observable<Void> writeString(Observable<String> msgs, Func1<String, Boolean> flushSelector);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * On subscription of the returned {@link Observable}, flushes any writes performed on the channel before the
     * subscription.
=======
     * On subscription of the returned {@link Observable}, writes the passed message stream on the underneath channel
     * and flushes the channel, on every write. Any writes issued before subscribing, will also be flushed. However, the
     * returned {@link Observable} will not capture the result of those writes, i.e. if the other writes, fail and this
     * write does not, the returned {@link Observable} will not fail.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * @return An {@link Observable} representing the result of all writes happened prior to the flush. Every
     * subscription to this {@link Observable} will flush all pending writes.
=======
     * @param msgs Message stream to write.
     *
     * @return An {@link Observable} representing the result of this write. Every
     * subscription to this {@link Observable} will write the passed messages and flush all pending writes, on every
     * write.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
    Observable<Void> flush();
=======
    Observable<Void> writeStringAndFlushOnEach(Observable<String> msgs);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * On subscription of the returned {@link Observable}, writes the passed message on the underneath channel and
     * flushes the channel. Any writes issued before subscribing, will also be flushed. However, the returned
     * {@link Observable} will not capture the result of those writes, i.e. if the other writes, fail and this write
     * does not, the returned {@link Observable} will not fail.
=======
     * On subscription of the returned {@link Observable}, writes the passed message stream on the underneath channel.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * @param msg Message to write.
=======
     * <h2>Flush.</h2>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * @return An {@link Observable} representing the result of this and all writes done prior to the flush. Every
     * subscription to this {@link Observable} will write the passed message and flush all pending writes.
     */
    Observable<Void> writeAndFlush(W msg);

    /**
     * On subscription of the returned {@link Observable}, writes the passed message stream on the underneath channel
     * and flushes the channel. Any writes issued before subscribing, will also be flushed. However, the returned
     * {@link Observable} will not capture the result of those writes, i.e. if the other writes, fail and this write
     * does not, the returned {@link Observable} will not fail.
=======
     * All writes will be flushed on completion of the passed {@code Observable}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * @param msgs Message stream to write.
=======
     * @param msgs Stream of messages to write.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * @return An {@link Observable} representing the result of this and all writes done prior to the flush. Every
     * subscription to this {@link Observable} will write the passed message and flush all pending writes.
=======
     * @return {@link Observable} representing the result of this write. Every subscription to this {@link Observable}
     * will replay the write on the channel.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
    Observable<Void> writeAndFlush(Observable<W> msgs);
=======
    Observable<Void> writeBytes(Observable<byte[]> msgs);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * @return An {@link Observable} representing the result of this and all writes done prior to the flush. Every
=======
     * @return An {@link Observable} representing the result of this write. Every
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
    Observable<Void> writeAndFlush(Observable<W> msgs, Func1<W, Boolean> flushSelector);
=======
    Observable<Void> writeBytes(Observable<byte[]> msgs, Func1<byte[], Boolean> flushSelector);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * @return An {@link Observable} representing the result of this and all writes done prior to the flush. Every
=======
     * @return An {@link Observable} representing the result of this write. Every
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
    Observable<Void> writeAndFlushOnEach(Observable<W> msgs);
=======
    Observable<Void> writeBytesAndFlushOnEach(Observable<byte[]> msgs);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * On subscription of the returned {@link Observable}, writes the passed message on the underneath channel and
     * flushes the channel. Any writes issued before subscribing, will also be flushed. However, the returned
     * {@link Observable} will not capture the result of those writes, i.e. if the other writes, fail and this write
     * does not, the returned {@link Observable} will not fail.
=======
     * On subscription of the returned {@link Observable}, writes the passed message stream on the underneath channel.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * @param msg Message to write.
=======
     * <h2>Flush.</h2>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * @return An {@link Observable} representing the result of this and all writes done prior to the flush. Every
     * subscription to this {@link Observable} will write the passed message and flush all pending writes.
     */
    Observable<Void> writeBytesAndFlush(ByteBuf msg);

    /**
     * On subscription of the returned {@link Observable}, writes the passed message on the underneath channel and
     * flushes the channel. Any writes issued before subscribing, will also be flushed. However, the returned
     * {@link Observable} will not capture the result of those writes, i.e. if the other writes, fail and this write
     * does not, the returned {@link Observable} will not fail. This is equivalent to calling:
=======
     * All writes will be flushed on completion of the passed {@code Observable}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * <PRE>
     *  writeBytesAndFlush(getAllocator().buffer(msg.length).writeBytes(msg));
     * </PRE>
=======
     * @param msgs Stream of messages to write.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * @param msg Message to write.
     *
     * @return An {@link Observable} representing the result of this and all writes done prior to the flush. Every
     * subscription to this {@link Observable} will write the passed message and flush all pending writes.
=======
     * @return {@link Observable} representing the result of this write. Every subscription to this {@link Observable}
     * will replay the write on the channel.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
    Observable<Void> writeBytesAndFlush(byte[] msg);
=======
    Observable<Void> writeFileRegion(Observable<FileRegion> msgs);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * On subscription of the returned {@link Observable}, writes the passed message on the underneath channel and
     * flushes the channel. Any writes issued before subscribing, will also be flushed. However, the returned
     * {@link Observable} will not capture the result of those writes, i.e. if the other writes, fail and this write
     * does not, the returned {@link Observable} will not fail. This is equivalent to calling:
=======
     * On subscription of the returned {@link Observable}, writes the passed message stream on the underneath channel
     * and flushes the channel, everytime, {@code flushSelector} returns {@code true} . Any writes issued before
     * subscribing, will also be flushed. However, the returned {@link Observable} will not capture the result of those
     * writes, i.e. if the other writes, fail and this write does not, the returned {@link Observable} will not fail.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * <PRE>
     *  writeBytesAndFlush(getAllocator().buffer(msg.length).writeBytes(msg.getBytes()));
     * </PRE>
=======
     * @param msgs Message stream to write.
     * @param flushSelector A {@link Func1} which is invoked for every item emitted from {@code msgs}. Channel is
     * flushed, iff this function returns, {@code true}.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * @param msg Message to write.
     *
     * @return An {@link Observable} representing the result of this and all writes done prior to the flush. Every
     * subscription to this {@link Observable} will write the passed message and flush all pending writes.
=======
     * @return An {@link Observable} representing the result of this write. Every
     * subscription to this {@link Observable} will write the passed messages and flush all pending writes, when the
     * {@code flushSelector} returns {@code true}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
    Observable<Void> writeStringAndFlush(String msg);
=======
    Observable<Void> writeFileRegion(Observable<FileRegion> msgs, Func1<FileRegion, Boolean> flushSelector);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * On subscription of the returned {@link Observable}, writes the passed file region on the underneath channel and
     * flushes the channel. Any writes issued before subscribing, will also be flushed. However, the returned
     * {@link Observable} will not capture the result of those writes, i.e. if the other writes, fail and this write
     * does not, the returned {@link Observable} will not fail.
=======
     * On subscription of the returned {@link Observable}, writes the passed message stream on the underneath channel
     * and flushes the channel, on every write. Any writes issued before subscribing, will also be flushed. However, the
     * returned {@link Observable} will not capture the result of those writes, i.e. if the other writes, fail and this
     * write does not, the returned {@link Observable} will not fail.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * @param fileRegion File region to write.
=======
     * @param msgs Message stream to write.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * @return An {@link Observable} representing the result of this and all writes done prior to the flush. Every
     * subscription to this {@link Observable} will write the passed region and flush all pending writes.
=======
     * @return An {@link Observable} representing the result of this write. Every
     * subscription to this {@link Observable} will write the passed messages and flush all pending writes, on every
     * write.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
    Observable<Void> writeFileRegionAndFlush(FileRegion fileRegion);
=======
    Observable<Void> writeFileRegionAndFlushOnEach(Observable<FileRegion> msgs);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * Cancels all writes which have not been flushed till now.
     *
     * @param mayInterruptIfRunning If the thread has to be interrupted upon cancelling.
     */
    void cancelPendingWrites(boolean mayInterruptIfRunning);

    /**
     * Returns {@link ByteBufAllocator} to be used for creating {@link ByteBuf}
     *
     * @return {@link ByteBufAllocator}
=======
     * Flushes any pending writes on this connection by calling {@link Channel#flush()}. This can be used for
     * implementing any custom flusing strategies that otherwise can not be implemented by methods like
     * {@link #write(Observable, Func1)}.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
    ByteBufAllocator getAllocator();
=======
    void flush();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/Connection.java;<<<<<<< MINE
=======
import io.reactivex.netty.metrics.MetricEventsSubject;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/Connection.java;<<<<<<< MINE
 * <h2>Backpressure</h2>
 *
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/Connection.java;<<<<<<< MINE

    protected Connection(final Channel nettyChannel) {
=======
    @SuppressWarnings("rawtypes")
    private final MetricEventsSubject eventsSubject;
    private final ChannelMetricEventProvider metricEventProvider;

    protected Connection(final Channel nettyChannel, MetricEventsSubject<?> eventsSubject,
                         ChannelMetricEventProvider metricEventProvider) {
        this.eventsSubject = eventsSubject;
        this.metricEventProvider = metricEventProvider;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/Connection.java;<<<<<<< MINE
        this.nettyChannel.closeFuture().addListener(new ChannelFutureListener() {
            @Override
            public void operationComplete(ChannelFuture future) throws Exception {
                close(false); // Close this connection when the channel is closed.
            }
        });
=======
    }

    protected Connection(Connection<R, W> toCopy) {
        eventsSubject = toCopy.eventsSubject;
        metricEventProvider = toCopy.metricEventProvider;
        nettyChannel = toCopy.nettyChannel;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/Connection.java;<<<<<<< MINE
=======

    @SuppressWarnings("rawtypes")
    protected MetricEventsSubject getEventsSubject() {
        return eventsSubject;
    }

    protected ChannelMetricEventProvider getMetricEventProvider() {
        return metricEventProvider;
    }

    /*
     * In order to make sure that the connection is correctly initialized, the listener needs to be added post
     * constructor. Otherwise, there is a race-condition of the channel closed before the connection is completely
     * created and the Connection.close() call on channel close can access the Connection object which isn't
     * constructed completely. IOW, "this" escapes from the constructor if the listener is added in the constructor.
     */
    protected void connectCloseToChannelClose() {
        nettyChannel.closeFuture().addListener(new ChannelFutureListener() {
            @Override
            public void operationComplete(ChannelFuture future) throws Exception {
                close(false); // Close this connection when the channel is closed.
            }
        });
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty-examples/src/test/java/io/reactivex/netty/examples/http/helloworld/HelloWorldTest.java;<<<<<<< MINE
 * Copyright 2014 Netflix, Inc.
=======
 * Copyright 2015 Netflix, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty-examples/src/test/java/io/reactivex/netty/examples/http/helloworld/HelloWorldTest.java;<<<<<<< MINE
import io.reactivex.netty.protocol.http.server.HttpServer;

=======
import io.reactivex.netty.protocol.http.serverNew.HttpServer;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty-examples/src/test/java/io/reactivex/netty/examples/http/helloworld/HelloWorldTest.java;<<<<<<< MINE
        server = new HelloWorldServer(0).createServer();
        server.start();
=======
        server = new HelloWorldServer(0).startServer();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_f7e49e7_153d71b/rev_f7e49e7-153d71b/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/ConnectionProvider.java;<<<<<<< MINE
=======
import rx.functions.Action0;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_f7e49e7_153d71b/rev_f7e49e7-153d71b/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/ConnectionProvider.java;<<<<<<< MINE
import rx.subjects.ReplaySubject;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_f7e49e7_153d71b/rev_f7e49e7-153d71b/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/ConnectionProvider.java;<<<<<<< MINE
    private final ReplaySubject<Void> shutdownHook = ReplaySubject.create();
=======
    private Observable<Void> startObservable;/*Guarded by this*/
    private Observable<Void> shutdownObservable;/*Guarded by this*/
    private boolean startCalled; /*Guarded by this*/
    private boolean shutdownCalled; /*Guarded by this*/
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_f7e49e7_153d71b/rev_f7e49e7-153d71b/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/ConnectionProvider.java;<<<<<<< MINE
=======
    private volatile boolean started;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_f7e49e7_153d71b/rev_f7e49e7-153d71b/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/ConnectionProvider.java;<<<<<<< MINE
=======
     * Starts this connection provider.
     *
     * <b>This method is idempotent, so can be called multiple times without any side-effects</b>
     *
     * Implementations can override {@link #doStart()} to implement any startup logic, {@link #doStart()} gets called
     * exactly once.
     *
     * @return {@code Observable} which completes when the factory is successfully started.
     */
    public final Observable<Void> start() {
        Observable<Void> _toReturn;
        synchronized (this) {
            if (!startCalled) {
                startCalled = true;
                startObservable = doStart().doOnTerminate(new Action0() {
                    @Override
                    public void call() {
                        started = true; /*Only one subscription as it uses cache*/
                    }
                }).cache();
            }
            _toReturn = startObservable;
        }
        return _toReturn;
    }

    /**
     * Shutdown this connection provider.
     *
     * <b>This method is idempotent, so can be called multiple times without any side-effects</b>
     *
     * Implementations can override {@link #doShutdown()} to implement any shutdown logic, {@link #doShutdown()} gets
     * called exactly once.
     *
     * @return {@code Observable} which completes when the factory is successfully shutdown.
     */
    public final Observable<Void> shutdown() {
        Observable<Void> _toReturn;
        synchronized (this) {
            if (!shutdownCalled) {
                shutdownCalled = true;
                shutdownObservable = doShutdown().doOnTerminate(new Action0() {
                    @Override
                    public void call() {
                        shutdown = true; /*Only one subscription as it uses cache*/
                    }
                }).cache();
            }
            _toReturn = shutdownObservable;
        }
        return _toReturn;
    }

    /**
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_f7e49e7_153d71b/rev_f7e49e7-153d71b/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/ConnectionProvider.java;<<<<<<< MINE
     * Starts this connection provider. Implementations can override this to do any initialization tasks. This method
     * would at most be called once per {@link ConnectionProvider} instance.
=======
     * This method can be overridden to implement any provider specific initialization. The method gets called exactly
     * once, irrespective of how many times {@link #start()} is called.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_f7e49e7_153d71b/rev_f7e49e7-153d71b/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/ConnectionProvider.java;<<<<<<< MINE
     * @return {@code Observable} which completes when the factory is successfully started.
=======
     * @return An {@code Observable} representing the status of the start.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_f7e49e7_153d71b/rev_f7e49e7-153d71b/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/ConnectionProvider.java;<<<<<<< MINE
    public Observable<Void> start() {
=======
    protected Observable<Void> doStart() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_f7e49e7_153d71b/rev_f7e49e7-153d71b/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/ConnectionProvider.java;<<<<<<< MINE
     * Shutdown this factory.
     */
    public void shutdown() {
        shutdown = true;
        shutdownHook.onCompleted();
    }

    /**
     * A hook to listen for shutdown of this factory.
=======
     * This method can be overridden to implement any provider specific initialization. The method gets called exactly
     * once, irrespective of how many times {@link #start()} is called.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_f7e49e7_153d71b/rev_f7e49e7-153d71b/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/ConnectionProvider.java;<<<<<<< MINE
     * @return {@code Observable} which completes when this factory shutsdown.
=======
     * @return An {@code Observable} representing the status of the start.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_f7e49e7_153d71b/rev_f7e49e7-153d71b/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/ConnectionProvider.java;<<<<<<< MINE
    public final Observable<Void> shutdownHook() {
        return shutdownHook;
=======
    protected Observable<Void> doShutdown() {
        return Observable.empty();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_f7e49e7_153d71b/rev_f7e49e7-153d71b/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/ConnectionProvider.java;<<<<<<< MINE
=======
    protected boolean isStarted() {
        return started;
    }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_f7e49e7_153d71b/rev_f7e49e7-153d71b/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/ConnectionProvider.java;<<<<<<< MINE
        public Observable<Void> start() {
=======
        protected Observable<Void> doStart() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_f7e49e7_153d71b/rev_f7e49e7-153d71b/rxnetty-examples/src/test/java/io/reactivex/netty/examples/tcp/streaming/StreamingTest.java;<<<<<<< MINE
=======
/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.reactivex.netty.examples.tcp.streaming;

import org.junit.Test;

import java.util.Queue;

import static io.reactivex.netty.examples.ExamplesTestUtil.*;
import static org.hamcrest.MatcherAssert.*;
import static org.hamcrest.Matchers.*;

public class StreamingTest {

    @Test(timeout = 60000)
    public void testStreaming() throws Exception {
        final Queue<String> output = setupClientLogger(StreamingClient.class);

        StreamingClient.main(null);

        assertThat("Unexpected number of messages echoed", output, hasSize(10));

        String[] content = new String[10];
        for (int i = 0; i < 10; i++) {
            content[i] = "Interval =>" + i;
        }

        assertThat("Unexpected content", output, contains(content));
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_f207ab4_a0e40f0/rev_f207ab4-a0e40f0/core/src/test/java/dagger/UnusedProviderTest.java;<<<<<<< MINE
=======
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_f207ab4_a0e40f0/rev_f207ab4-a0e40f0/core/src/test/java/dagger/UnusedProviderTest.java;<<<<<<< MINE
=======
@RunWith(JUnit4.class)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_137dbfd_a5e8a92/rev_137dbfd-a5e8a92/rxnetty/src/main/java/io/reactivex/netty/protocol/http/client/internal/HttpClientToConnectionBridge.java;<<<<<<< MINE
/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.reactivex.netty.protocol.http.client.internal;

import io.netty.channel.Channel;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelFutureListener;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelPromise;
import io.netty.handler.codec.http.HttpHeaderNames;
import io.netty.handler.codec.http.HttpMessage;
import io.netty.handler.codec.http.HttpRequest;
import io.netty.handler.codec.http.HttpResponse;
import io.netty.handler.codec.http.LastHttpContent;
import io.netty.util.AttributeKey;
import io.reactivex.netty.events.Clock;
import io.reactivex.netty.events.EventPublisher;
import io.reactivex.netty.protocol.http.client.events.HttpClientEventsListener;
import io.reactivex.netty.protocol.http.internal.AbstractHttpConnectionBridge;
import io.reactivex.netty.protocol.tcp.client.ClientConnectionToChannelBridge;
import io.reactivex.netty.protocol.tcp.client.ClientConnectionToChannelBridge.ConnectionReuseEvent;
import io.reactivex.netty.protocol.tcp.client.ClientConnectionToChannelBridge.PooledConnectionReleaseEvent;
import io.reactivex.netty.protocol.tcp.client.internal.TcpEventPublisherFactory;
import rx.Subscriber;
import rx.functions.Action0;
import rx.subscriptions.Subscriptions;

import java.net.InetSocketAddress;
import java.net.SocketAddress;

import static java.util.concurrent.TimeUnit.*;

public class HttpClientToConnectionBridge<C> extends AbstractHttpConnectionBridge<C> {

    /**
     * This attribute stores the value of any dynamic idle timeout value sent via an HTTP keep alive header.
     * This follows the proposal specified here: http://tools.ietf.org/id/draft-thomson-hybi-http-timeout-01.html
     * The attribute can be extracted from an HTTP response header using the helper method
     * {@link HttpClientResponseImpl#getKeepAliveTimeoutSeconds()}
     */
    public static final AttributeKey<Long> KEEP_ALIVE_TIMEOUT_MILLIS_ATTR =
            AttributeKey.valueOf("rxnetty_http_conn_keep_alive_timeout_millis");

    private HttpClientEventsListener eventsListener;
    private EventPublisher eventPublisher;
    private String hostHeader;
    private long requestWriteCompletionTimeNanos;

    @Override
    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {
        eventsListener = ctx.channel().attr(HttpEventPublisherFactory.HTTP_CLIENT_EVENT_LISTENER).get();
        eventPublisher = ctx.channel().attr(TcpEventPublisherFactory.EVENT_PUBLISHER).get();
        super.handlerAdded(ctx);
    }

    @Override
    public void channelActive(ChannelHandlerContext ctx) throws Exception {
        SocketAddress remoteAddr = ctx.channel().remoteAddress();
        if (remoteAddr instanceof InetSocketAddress) {
            InetSocketAddress inetSock = (InetSocketAddress) remoteAddr;
            String hostString = inetSock.getHostString(); // Don't use hostname that does a DNS lookup.
            hostHeader = hostString + ':' + inetSock.getPort();
        }
        super.channelActive(ctx);
    }

    @Override
    protected void beforeOutboundHeaderWrite(HttpMessage httpMsg, ChannelPromise promise, long startTimeNanos) {
        /*Reset on every request write, we do not currently support pipelining, otherwise, this should be stored in a
        queue.*/
        requestWriteCompletionTimeNanos = -1;
        if (null != hostHeader) {
            if (!httpMsg.headers().contains(HttpHeaderNames.HOST)) {
                httpMsg.headers().set(HttpHeaderNames.HOST, hostHeader);
            }
        }
        if (eventPublisher.publishingEnabled()) {
            eventsListener.onRequestWriteStart();
        }
    }

    @Override
    protected void onOutboundLastContentWrite(LastHttpContent msg, ChannelPromise promise,
                                              final long headerWriteStartTimeNanos) {
        if (eventPublisher.publishingEnabled()) {
            promise.addListener(new ChannelFutureListener() {
                @Override
                public void operationComplete(ChannelFuture future) throws Exception {
                    if (eventPublisher.publishingEnabled()) {
                        requestWriteCompletionTimeNanos = Clock.newStartTimeNanos();
                        if (future.isSuccess()) {
                            eventsListener.onRequestWriteComplete(Clock.onEndNanos(headerWriteStartTimeNanos),
                                                                  NANOSECONDS);
                        } else {
                            eventsListener.onRequestWriteFailed(Clock.onEndNanos(headerWriteStartTimeNanos),
                                                                NANOSECONDS, future.cause());
                        }
                    }
                }
            });
        }
    }

    @Override
    public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {
        if (evt instanceof ConnectionReuseEvent) {
            resetSubscriptionState(connectionInputSubscriber);
            connectionInputSubscriber = null;
        } else if (PooledConnectionReleaseEvent.INSTANCE == evt) {
            onPooledConnectionRelease(connectionInputSubscriber);
        }
        super.userEventTriggered(ctx, evt);
    }

    @Override
    protected void onClosedBeforeReceiveComplete(ConnectionInputSubscriber connectionInputSubscriber) {
        if (connectionInputSubscriber.getChannel().isActive()) {
            /*
             * If the close is triggerred by the user, the channel will be active.
             * If the response, isn't complete, then the connection can not be used.
             */
            connectionInputSubscriber.getChannel().attr(ClientConnectionToChannelBridge.DISCARD_CONNECTION).set(true);
        }
    }

    @Override
    protected boolean isInboundHeader(Object nextItem) {
        return nextItem instanceof HttpResponse;
    }

    @Override
    protected boolean isOutboundHeader(Object nextItem) {
        return nextItem instanceof HttpRequest;
    }

    @Override
    protected Object newHttpObject(Object nextItem, Channel channel) {
        final HttpResponse nettyResponse = (HttpResponse) nextItem;

        if (eventPublisher.publishingEnabled()) {
            long duration = -1;
            if (requestWriteCompletionTimeNanos != -1) {
                duration = Clock.onEndNanos(requestWriteCompletionTimeNanos);
            }
            eventsListener.onResponseHeadersReceived(nettyResponse.status().code(), duration, NANOSECONDS);
        }

        final HttpClientResponseImpl<C> rxResponse = HttpClientResponseImpl.unsafeCreate(nettyResponse);
        Long keepAliveTimeoutSeconds = rxResponse.getKeepAliveTimeoutSeconds();
        if (null != keepAliveTimeoutSeconds) {
            channel.attr(KEEP_ALIVE_TIMEOUT_MILLIS_ATTR).set(keepAliveTimeoutSeconds * 1000);
        }

        if (!rxResponse.isKeepAlive()) {
            channel.attr(ClientConnectionToChannelBridge.DISCARD_CONNECTION).set(true); /*Discard connection when done with this response.*/
        }

        return rxResponse;
    }

    @Override
    protected void onContentReceived() {
        if (eventPublisher.publishingEnabled()) {
            eventsListener.onResponseContentReceived();
        }
    }

    @Override
    protected void onContentReceiveComplete(long receiveStartTimeNanos) {
        connectionInputSubscriber.onCompleted(); /*Unsubscribe from the input and hence close/release connection*/
        if (eventPublisher.publishingEnabled()) {
            long headerWriteStart = getHeaderWriteStartTimeNanos();
            eventsListener.onResponseReceiveComplete(Clock.onEndNanos(receiveStartTimeNanos), NANOSECONDS);
            eventsListener.onRequestProcessingComplete(Clock.onEndNanos(headerWriteStart), NANOSECONDS);
        }
    }

    @Override
    protected void onNewContentSubscriber(final ConnectionInputSubscriber inputSubscriber, Subscriber<? super C> newSub) {
        newSub.add(Subscriptions.create(new Action0() {
            @Override
            public void call() {
                inputSubscriber.unsubscribe();
            }
        }));
    }

    private void onPooledConnectionRelease(ConnectionInputSubscriber connectionInputSubscriber) {
        onChannelClose(connectionInputSubscriber);
    }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_c8efda9_215f487/rev_c8efda9-215f487/rxnetty-common/src/main/java/io/reactivex/netty/threads/RxJavaNettyBasedSchedulersHook.java;<<<<<<< MINE
=======
/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package io.reactivex.netty.threads;

import io.netty.channel.EventLoopGroup;
import rx.Scheduler;
import rx.annotations.Beta;
import rx.plugins.RxJavaSchedulersHook;
import rx.schedulers.Schedulers;

/**
 * A scheduler hook for RxJava, to override the computation scheduler, as retrieved via {@link Schedulers#computation()},
 * with a scheduler to use netty's {@link EventLoopGroup}. The computation scheduler implementation is as provided as an
 * {@link RxJavaEventloopScheduler} instance. <p>
 *
 * This is to be used as <p>
 {@code
       RxJavaPlugins.getInstance().registerSchedulersHook(hook);
 }
 at startup.
 */
@Beta
public class RxJavaNettyBasedSchedulersHook extends RxJavaSchedulersHook {

    private final RxJavaEventloopScheduler computationScheduler;

    public RxJavaNettyBasedSchedulersHook(RxJavaEventloopScheduler computationScheduler) {
        this.computationScheduler = computationScheduler;
    }

    @Override
    public Scheduler getComputationScheduler() {
        return computationScheduler;
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_c8efda9_215f487/rev_c8efda9-215f487/rxnetty-common/src/main/java/io/reactivex/netty/threads/RxJavaEventloopScheduler.java;<<<<<<< MINE
=======
/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package io.reactivex.netty.threads;

import io.netty.channel.EventLoop;
import io.netty.channel.EventLoopGroup;
import io.netty.util.concurrent.Future;
import rx.Scheduler;
import rx.Subscription;
import rx.annotations.Beta;
import rx.functions.Action0;
import rx.internal.util.SubscriptionList;
import rx.subscriptions.Subscriptions;

import java.util.concurrent.TimeUnit;

/**
 * A scheduler that uses a provided {@link EventLoopGroup} instance to schedule tasks. This should typically be used as
 * a computation scheduler or any other scheduler that do not schedule blocking tasks. <p>
 */
@Beta
public class RxJavaEventloopScheduler extends Scheduler {

    private final EventLoopGroup eventLoopGroup;

    public RxJavaEventloopScheduler(EventLoopGroup eventLoopGroup) {
        this.eventLoopGroup = eventLoopGroup;
    }

    @Override
    public Worker createWorker() {
        final EventLoop eventLoop = eventLoopGroup.next();

        return new Worker() {

            private final SubscriptionList subs = new SubscriptionList();

            @Override
            public Subscription schedule(final Action0 action) {
                if (isUnsubscribed()) {
                    return Subscriptions.unsubscribed();
                }

                /*If already on the eventloop then execute the action, else schedule it on the eventloop*/
                if (eventLoop.inEventLoop()) {
                    action.call();
                    return Subscriptions.empty();
                } else {
                    final Future<?> result = eventLoop.submit(new Runnable() {
                        @Override
                        public void run() {
                            action.call();
                        }
                    });

                    Subscription toReturn = fromFuture(result);
                    subs.add(toReturn);
                    return toReturn;
                }
            }

            @Override
            public Subscription schedule(final Action0 action, long delayTime, TimeUnit unit) {

                if (delayTime <= 0) {
                    return schedule(action);
                }

                if (isUnsubscribed()) {
                    return Subscriptions.unsubscribed();
                }

                final Future<?> result = eventLoop.schedule(new Runnable() {
                    @Override
                    public void run() {
                        action.call();
                    }
                }, delayTime, unit);

                Subscription toReturn = fromFuture(result);
                subs.add(toReturn);
                return toReturn;
            }

            @Override
            public void unsubscribe() {
                subs.unsubscribe();
            }

            @Override
            public boolean isUnsubscribed() {
                return subs.isUnsubscribed();
            }

            private Subscription fromFuture(final Future<?> result) {
                return Subscriptions.create(new Action0() {
                    @Override
                    public void call() {
                        result.cancel(false);
                    }
                });
            }
        };
    }

}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_be2a71b_752d772/rev_be2a71b-752d772/rxnetty-common/src/main/java/io/reactivex/netty/threads/RxJavaNettyBasedSchedulersHook.java;<<<<<<< MINE
=======
/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package io.reactivex.netty.threads;

import io.netty.channel.EventLoopGroup;
import rx.Scheduler;
import rx.annotations.Beta;
import rx.plugins.RxJavaSchedulersHook;
import rx.schedulers.Schedulers;

/**
 * A scheduler hook for RxJava, to override the computation scheduler, as retrieved via {@link Schedulers#computation()},
 * with a scheduler to use netty's {@link EventLoopGroup}. The computation scheduler implementation is as provided as an
 * {@link RxJavaEventloopScheduler} instance. <p>
 *
 * This is to be used as <p>
 {@code
       RxJavaPlugins.getInstance().registerSchedulersHook(hook);
 }
 at startup.
 */
@Beta
public class RxJavaNettyBasedSchedulersHook extends RxJavaSchedulersHook {

    private final RxJavaEventloopScheduler computationScheduler;

    public RxJavaNettyBasedSchedulersHook(RxJavaEventloopScheduler computationScheduler) {
        this.computationScheduler = computationScheduler;
    }

    @Override
    public Scheduler getComputationScheduler() {
        return computationScheduler;
    }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_be2a71b_752d772/rev_be2a71b-752d772/rxnetty-common/src/main/java/io/reactivex/netty/threads/RxJavaEventloopScheduler.java;<<<<<<< MINE
/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package io.reactivex.netty.threads;

import io.netty.channel.EventLoop;
import io.netty.channel.EventLoopGroup;
import io.netty.util.concurrent.Future;
import rx.Scheduler;
import rx.Subscription;
import rx.annotations.Beta;
import rx.functions.Action0;
import rx.internal.schedulers.EventLoopsScheduler;
import rx.internal.schedulers.ScheduledAction;
import rx.internal.util.SubscriptionList;
import rx.subscriptions.CompositeSubscription;
import rx.subscriptions.Subscriptions;

import java.util.concurrent.TimeUnit;

/**
 * A scheduler that uses a provided {@link EventLoopGroup} instance to schedule tasks. This should typically be used as
 * a computation scheduler or any other scheduler that do not schedule blocking tasks. <p>
 */
@Beta
public class RxJavaEventloopScheduler extends Scheduler {

    private final EventLoopGroup eventLoopGroup;

    public RxJavaEventloopScheduler(EventLoopGroup eventLoopGroup) {
        this.eventLoopGroup = eventLoopGroup;
    }

    @Override
    public Worker createWorker() {
        final EventLoop eventLoop = eventLoopGroup.next();
        return new EventloopWorker(eventLoop);
    }

    /**
     * This code is more or less copied from RxJava's {@link EventLoopsScheduler} worker code.
     **/
    /*Visible for testing*/static class EventloopWorker extends Worker {

        /**
         * Why are there two subscription holders?
         *
         * The serial subscriptions are used for non-delayed schedules which are always executed (and hence removed)
         * in order. Since SubscriptionList holds the subs as a linked list, removals are optimal for serial removes.
         * OTOH, delayed schedules are executed (and hence removed) out of order and hence a CompositeSubscription,
         * that stores the subs in a hash structure is more optimal for removals.
         */
        private final SubscriptionList serial;
        private final CompositeSubscription timed;
        private final SubscriptionList both;
        private final EventLoop eventLoop;

        public EventloopWorker(EventLoop eventLoop) {
            this.eventLoop = eventLoop;
            serial = new SubscriptionList();
            timed = new CompositeSubscription();
            both = new SubscriptionList(serial, timed);
        }

        @Override
        public Subscription schedule(final Action0 action) {
            return schedule(action, 0, TimeUnit.DAYS);
        }

        @Override
        public Subscription schedule(final Action0 action, long delayTime, TimeUnit unit) {

            if (isUnsubscribed()) {
                return Subscriptions.unsubscribed();
            }

            final ScheduledAction sa;

            if (delayTime <= 0) {
                sa = new ScheduledAction(action, serial);
                serial.add(sa);
            } else {
                sa = new ScheduledAction(action, timed);
                timed.add(sa);
            }

            final Future<?> result = eventLoop.schedule(sa, delayTime, unit);
            Subscription cancelFuture = Subscriptions.create(new Action0() {
                @Override
                public void call() {
                    result.cancel(false);
                }
            });
            sa.add(cancelFuture); /*An unsubscribe of the returned sub should cancel the future*/
            return sa;
        }

        @Override
        public void unsubscribe() {
            both.unsubscribe();
        }

        @Override
        public boolean isUnsubscribed() {
            return both.isUnsubscribed();
        }

        /*Visible for testing*/boolean hasScheduledSubscriptions() {
            return serial.hasSubscriptions();
        }

        /*Visible for testing*/boolean hasDelayScheduledSubscriptions() {
            return timed.hasSubscriptions();
        }
    }
}=======
/*
 * Copyright 2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package io.reactivex.netty.threads;

import io.netty.channel.EventLoop;
import io.netty.channel.EventLoopGroup;
import io.netty.util.concurrent.Future;
import rx.Scheduler;
import rx.Subscription;
import rx.annotations.Beta;
import rx.functions.Action0;
import rx.internal.util.SubscriptionList;
import rx.subscriptions.Subscriptions;

import java.util.concurrent.TimeUnit;

/**
 * A scheduler that uses a provided {@link EventLoopGroup} instance to schedule tasks. This should typically be used as
 * a computation scheduler or any other scheduler that do not schedule blocking tasks. <p>
 */
@Beta
public class RxJavaEventloopScheduler extends Scheduler {

    private final EventLoopGroup eventLoopGroup;

    public RxJavaEventloopScheduler(EventLoopGroup eventLoopGroup) {
        this.eventLoopGroup = eventLoopGroup;
    }

    @Override
    public Worker createWorker() {
        final EventLoop eventLoop = eventLoopGroup.next();

        return new Worker() {

            private final SubscriptionList subs = new SubscriptionList();

            @Override
            public Subscription schedule(final Action0 action) {
                if (isUnsubscribed()) {
                    return Subscriptions.unsubscribed();
                }

                /*If already on the eventloop then execute the action, else schedule it on the eventloop*/
                if (eventLoop.inEventLoop()) {
                    action.call();
                    return Subscriptions.empty();
                } else {
                    final Future<?> result = eventLoop.submit(new Runnable() {
                        @Override
                        public void run() {
                            action.call();
                        }
                    });

                    Subscription toReturn = fromFuture(result);
                    subs.add(toReturn);
                    return toReturn;
                }
            }

            @Override
            public Subscription schedule(final Action0 action, long delayTime, TimeUnit unit) {

                if (delayTime <= 0) {
                    return schedule(action);
                }

                if (isUnsubscribed()) {
                    return Subscriptions.unsubscribed();
                }

                final Future<?> result = eventLoop.schedule(new Runnable() {
                    @Override
                    public void run() {
                        action.call();
                    }
                }, delayTime, unit);

                Subscription toReturn = fromFuture(result);
                subs.add(toReturn);
                return toReturn;
            }

            @Override
            public void unsubscribe() {
                subs.unsubscribe();
            }

            @Override
            public boolean isUnsubscribed() {
                return subs.isUnsubscribed();
            }

            private Subscription fromFuture(final Future<?> result) {
                return Subscriptions.create(new Action0() {
                    @Override
                    public void call() {
                        result.cancel(false);
                    }
                });
            }
        };
    }

}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_ede1926_2477211/rev_ede1926-2477211/compiler/src/main/java/dagger/internal/codegen/AtInjectBinding.java;<<<<<<< MINE
/*
 * Copyright (C) 2012 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dagger.internal.codegen;

import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Set;
import javax.inject.Inject;
import javax.inject.Singleton;
import javax.lang.model.element.Element;
import javax.lang.model.element.ExecutableElement;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.VariableElement;
import javax.lang.model.type.TypeMirror;

/**
 * A build time binding that injects the constructor and fields of a class.
 */
final class AtInjectBinding extends Binding<Object> {
  private final TypeElement type;
  private final List<String> keys;
  private final Binding<?>[] bindings;
  private final String supertypeKey;
  private Binding supertypeBinding;

  private AtInjectBinding(String provideKey, String membersKey,
      TypeElement type, List<String> keys, String supertypeKey) {
    super(provideKey, membersKey, type.getAnnotation(Singleton.class) != null,
        type.getQualifiedName().toString());
    this.type = type;
    this.keys = keys;
    this.bindings = new Binding<?>[keys.size()];
    this.supertypeKey = supertypeKey;
  }

  static AtInjectBinding create(TypeElement type, boolean mustHaveInjections) {
    List<String> requiredKeys = new ArrayList<String>();
    boolean hasInjectConstructor = false;
    boolean hasNoArgsConstructor = false;

    for (Element enclosed : type.getEnclosedElements()) {
      switch (enclosed.getKind()) {
      case FIELD:
        if (hasAtInject(enclosed) && !enclosed.getModifiers().contains(Modifier.STATIC)) {
          // Attach the non-static fields of 'type'.
          requiredKeys.add(GeneratorKeys.get((VariableElement) enclosed));
        }
        break;

      case CONSTRUCTOR:
        ExecutableElement constructor = (ExecutableElement) enclosed;
        List<? extends VariableElement> parameters = constructor.getParameters();
        if (hasAtInject(enclosed)) {
          if (hasAtSingleton(enclosed)) {
            throw new IllegalArgumentException("Singleton annotations have no effect on "
                + "constructors. Did you mean to annotate the class? "
                + type.getQualifiedName().toString());
          }
          if (hasInjectConstructor) {
            throw new IllegalArgumentException("Too many injectable constructors on "
                + type.getQualifiedName().toString());
          }
          hasInjectConstructor = true;
          for (VariableElement parameter : parameters) {
            requiredKeys.add(GeneratorKeys.get(parameter));
          }
        } else if (parameters.isEmpty()) {
          hasNoArgsConstructor = true;
        }
        break;

      default:
        if (hasAtInject(enclosed)) {
          throw new IllegalArgumentException("Unexpected @Inject annotation on " + enclosed);
        }
      }
    }

    if (!hasInjectConstructor && requiredKeys.isEmpty() && mustHaveInjections) {
      throw new IllegalArgumentException("No injectable members on "
          + type.getQualifiedName().toString() + ". Do you want to add an injectable constructor?");
    }

    // Attach the supertype.
    TypeMirror supertype = CodeGen.getApplicationSupertype(type);
    String supertypeKey = supertype != null
        ? GeneratorKeys.rawMembersKey(supertype)
        : null;

    String provideKey = hasInjectConstructor || (hasNoArgsConstructor && !requiredKeys.isEmpty())
        ? GeneratorKeys.get(type.asType())
        : null;
    String membersKey = GeneratorKeys.rawMembersKey(type.asType());
    return new AtInjectBinding(provideKey, membersKey, type, requiredKeys, supertypeKey);
  }

  private static boolean hasAtInject(Element enclosed) {
    return enclosed.getAnnotation(Inject.class) != null;
  }

  private static boolean hasAtSingleton(Element enclosed) {
    return enclosed.getAnnotation(Singleton.class) != null;
  }

  @Override public void attach(Linker linker) {
    String requiredBy = type.getQualifiedName().toString();
    for (int i = 0; i < keys.size(); i++) {
      bindings[i] = linker.requestBinding(keys.get(i), requiredBy,
          getClass().getClassLoader());
    }
    if (supertypeKey != null) {
      supertypeBinding = linker.requestBinding(supertypeKey, requiredBy,
          getClass().getClassLoader(), false, true);
    }
  }

  @Override public Object get() {
    throw new AssertionError("Compile-time binding should never be called to inject.");
  }

  @Override public void injectMembers(Object t) {
    throw new AssertionError("Compile-time binding should never be called to inject.");
  }

  @Override public void getDependencies(Set<Binding<?>> get, Set<Binding<?>> injectMembers) {
    Collections.addAll(get, bindings);
  }
}=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_5a31bed_886ce2b/rev_5a31bed-886ce2b/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisInjectBinding.java;<<<<<<< MINE
=======
          if (hasAtSingleton(enclosed)) {
            throw new IllegalArgumentException("Singleton annotations have no effect on "
                + "constructors. Did you mean to annotate the class? "
                + type.getQualifiedName().toString());
          }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_5a31bed_886ce2b/rev_5a31bed-886ce2b/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisInjectBinding.java;<<<<<<< MINE
=======
  private static boolean hasAtSingleton(Element enclosed) {
    return enclosed.getAnnotation(Singleton.class) != null;
  }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092/core/src/main/java/dagger/internal/Loader.java;<<<<<<< MINE
   * Returns a binding that uses {@code @Inject} annotations.
=======
   * Returns a binding that uses {@code @Inject} annotations, or null if no valid binding can
   * be found or created.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092/core/src/main/java/dagger/internal/FailoverLoader.java;<<<<<<< MINE
=======
/*
 * Copyright (C) 2013 Square, Inc.
 * Copyright (C) 2013 Google, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dagger.internal;


import dagger.internal.loaders.GeneratedAdapters;
import dagger.internal.loaders.ReflectiveAtInjectBinding;
import dagger.internal.loaders.ReflectiveModuleAdapter;
import dagger.internal.loaders.ReflectiveStaticInjection;

/**
 * Handles loading/finding of modules, injection bindings, and static injections by use of a
 * strategy of "load the appropriate generated code" or, if no such code is found, create a
 * reflective equivalent.
 */
public final class FailoverLoader implements Loader {

  /**
   * Obtains a module adapter for {@code module} from the first responding resolver.
   */
  @Override public <T> ModuleAdapter<T> getModuleAdapter(Class<? extends T> type, T instance) {
    ModuleAdapter<T> result = GeneratedAdapters.initModuleAdapter(type);
    if (result == null) {
      result = ReflectiveModuleAdapter.create(type);
    }
    result.module = (instance != null) ? instance : result.newModule();
    return result;
  }

  @Override public Binding<?> getAtInjectBinding(String key, String className,
      ClassLoader classLoader, boolean mustHaveInjections) {
    try {
      Binding<?> result = GeneratedAdapters.initInjectAdapter(className, classLoader);
      if (result == null) {
        // A null classloader is the system classloader.
        classLoader = (classLoader != null) ? classLoader : ClassLoader.getSystemClassLoader();
        Class<?> c = classLoader.loadClass(className);
        if (!c.isInterface()) {
          result = ReflectiveAtInjectBinding.create(c, mustHaveInjections);
        }
      }
      return result;
    } catch (ClassNotFoundException e) {
      throw new RuntimeException("Could not find " + className + " needed for binding " + key, e);
    }
  }

  @Override public StaticInjection getStaticInjection(Class<?> injectedClass) {
    StaticInjection result = GeneratedAdapters.initStaticInjection(injectedClass);
    if (result == null) {
      result = ReflectiveStaticInjection.create(injectedClass);
    }
    return result;
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092/core/src/main/java/dagger/internal/loaders/ReflectiveAtInjectBinding.java;<<<<<<< MINE
=======
/*
 * Copyright (C) 2012 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dagger.internal.loaders;

import dagger.internal.Binding;
import dagger.internal.Keys;
import dagger.internal.Linker;
import java.lang.annotation.Annotation;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Set;
import javax.inject.Inject;
import javax.inject.Singleton;

/**
 * Injects the {@code @Inject}-annotated fields and constructors of a class
 * using reflection.
 */
public final class ReflectiveAtInjectBinding<T> extends Binding<T> {
  private final Field[] fields;
  private final ClassLoader loader;
  private final Constructor<T> constructor;
  private final Class<?> supertype;
  private final String[] keys;
  private final Binding<?>[] fieldBindings;
  private final Binding<?>[] parameterBindings;
  private Binding<? super T> supertypeBinding;

  /**
   * @param keys keys for the fields, constructor parameters and supertype in
   *     that order. These are precomputed to minimize reflection when {@code
   *     attach} is called multiple times.
   * @param constructor the injectable constructor, or null if this binding
   *     supports members injection only.
   * @param supertype the injectable supertype, or null if the supertype is a
   */
  private ReflectiveAtInjectBinding(String provideKey, String membersKey, boolean singleton,
      Class<?> type, Field[] fields, Constructor<T> constructor, int parameterCount,
      Class<?> supertype, String[] keys) {
    super(provideKey, membersKey, singleton, type);
    this.constructor = constructor;
    this.fields = fields;
    this.supertype = supertype;
    this.keys = keys;
    this.parameterBindings = new Binding<?>[parameterCount];
    this.fieldBindings = new Binding<?>[fields.length];
    this.loader = type.getClassLoader();
  }

  @SuppressWarnings("unchecked") // We're careful to make keys and bindings match up.
  @Override public void attach(Linker linker) {
    int k = 0;
    for (int i = 0; i < fields.length; i++) {
      if (fieldBindings[i] == null) {
        fieldBindings[i] = linker.requestBinding(keys[k], fields[i], loader);
      }
      k++;
    }
    if (constructor != null) {
      for (int i = 0; i < parameterBindings.length; i++) {
        if (parameterBindings[i] == null) {
          parameterBindings[i] = linker.requestBinding(keys[k], constructor, loader);
        }
        k++;
      }
    }
    if (supertype != null && supertypeBinding == null) {
      supertypeBinding =
          (Binding<? super T>) linker.requestBinding(keys[k], membersKey, loader, false, true);
    }
  }

  @Override public T get() {
    if (constructor == null) {
      throw new UnsupportedOperationException();
    }
    Object[] args = new Object[parameterBindings.length];
    for (int i = 0; i < parameterBindings.length; i++) {
      args[i] = parameterBindings[i].get();
    }
    T result;
    try {
      result = constructor.newInstance(args);
    } catch (InvocationTargetException e) {
      Throwable cause = e.getCause();
      throw cause instanceof RuntimeException
          ? (RuntimeException) cause
          : new RuntimeException(cause);
    } catch (IllegalAccessException e) {
      throw new AssertionError(e);
    } catch (InstantiationException e) {
      throw new RuntimeException(e);
    }
    injectMembers(result);
    return result;
  }

  @Override public void injectMembers(T t) {
    try {
      for (int i = 0; i < fields.length; i++) {
        fields[i].set(t, fieldBindings[i].get());
      }
      if (supertypeBinding != null) {
        supertypeBinding.injectMembers(t);
      }
    } catch (IllegalAccessException e) {
      throw new AssertionError(e);
    }
  }

  @Override public void getDependencies(Set<Binding<?>> get, Set<Binding<?>> injectMembers) {
    if (parameterBindings != null) {
      Collections.addAll(get, parameterBindings);
    }
    Collections.addAll(injectMembers, fieldBindings);
    if (supertypeBinding != null) {
      injectMembers.add(supertypeBinding);
    }
  }

  @Override public String toString() {
    return provideKey != null ? provideKey : membersKey;
  }

  public static <T> Binding<T> create(Class<T> type, boolean mustHaveInjections) {
    boolean singleton = type.isAnnotationPresent(Singleton.class);
    List<String> keys = new ArrayList<String>();

    // Lookup the injectable fields and their corresponding keys.
    List<Field> injectedFields = new ArrayList<Field>();
    for (Class<?> c = type; c != Object.class; c = c.getSuperclass()) {
      for (Field field : c.getDeclaredFields()) {
        if (!field.isAnnotationPresent(Inject.class) || Modifier.isStatic(field.getModifiers())) {
          continue;
        }
        if ((field.getModifiers() & Modifier.PRIVATE) != 0) {
          throw new IllegalStateException("Can't inject private field: " + field);
        }
        field.setAccessible(true);
        injectedFields.add(field);
        keys.add(Keys.get(field.getGenericType(), field.getAnnotations(), field));
      }
    }

    // Look up @Inject-annotated constructors. If there's no @Inject-annotated
    // constructor, use a default public constructor if the class has other
    // injections. Otherwise treat the class as non-injectable.
    Constructor<T> injectedConstructor = null;
    for (Constructor<T> constructor : getConstructorsForType(type)) {
      if (!constructor.isAnnotationPresent(Inject.class)) {
        continue;
      }
      if (injectedConstructor != null) {
        throw new IllegalArgumentException("Too many injectable constructors on " + type.getName());
      }
      injectedConstructor = constructor;
    }
    if (injectedConstructor == null) {
      if (!injectedFields.isEmpty()) {
        try {
          injectedConstructor = type.getDeclaredConstructor();
        } catch (NoSuchMethodException ignored) {
        }
      } else if (mustHaveInjections) {
        throw new IllegalArgumentException("No injectable members on " + type.getName()
            + ". Do you want to add an injectable constructor?");
      }
    }

    int parameterCount;
    String provideKey;
    if (injectedConstructor != null) {
      if ((injectedConstructor.getModifiers() & Modifier.PRIVATE) != 0) {
        throw new IllegalStateException("Can't inject private constructor: " + injectedConstructor);
      }

      provideKey = Keys.get(type);
      injectedConstructor.setAccessible(true);
      Type[] types = injectedConstructor.getGenericParameterTypes();
      parameterCount = types.length;
      if (parameterCount != 0) {
        Annotation[][] annotations = injectedConstructor.getParameterAnnotations();
        for (int p = 0; p < types.length; p++) {
          keys.add(Keys.get(types[p], annotations[p], injectedConstructor));
        }
      }
    } else {
      provideKey = null;
      parameterCount = 0;
      if (singleton) {
        throw new IllegalArgumentException(
            "No injectable constructor on @Singleton " + type.getName());
      }
    }

    Class<? super T> supertype = type.getSuperclass();
    if (supertype != null) {
      if (Keys.isPlatformType(supertype.getName())) {
        supertype = null;
      } else {
        keys.add(Keys.getMembersKey(supertype));
      }
    }

    String membersKey = Keys.getMembersKey(type);
    return new ReflectiveAtInjectBinding<T>(provideKey, membersKey, singleton, type,
        injectedFields.toArray(new Field[injectedFields.size()]), injectedConstructor,
        parameterCount, supertype, keys.toArray(new String[keys.size()]));
  }

  @SuppressWarnings("unchecked") // Class.getDeclaredConstructors is an unsafe API.
  private static <T> Constructor<T>[] getConstructorsForType(Class<T> type) {
    return (Constructor<T>[]) type.getDeclaredConstructors();
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092/core/src/main/java/dagger/internal/loaders/ReflectiveModuleAdapter.java;<<<<<<< MINE
=======
/*
 * Copyright (C) 2012 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dagger.internal.loaders;

import dagger.Lazy;
import dagger.Module;
import dagger.Provides;
import dagger.internal.Binding;
import dagger.internal.Keys;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import dagger.internal.SetBinding;
import java.lang.annotation.Annotation;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import javax.inject.Singleton;

public final class ReflectiveModuleAdapter extends ModuleAdapter<Object> {
  final Class<?> moduleClass;

  public ReflectiveModuleAdapter(Class<?> moduleClass, Module annotation) {
    super(
        injectableTypesToKeys(annotation.injects()),
        annotation.staticInjections(),
        annotation.overrides(),
        annotation.includes(),
        annotation.complete(),
        annotation.library());
    this.moduleClass = moduleClass;
  }

  private static String[] injectableTypesToKeys(Class<?>[] injectableTypes) {
    String[] result = new String[injectableTypes.length];
    for (int i = 0; i < injectableTypes.length; i++) {
      Class<?> injectableType = injectableTypes[i];
      result[i] = injectableType.isInterface()
          ? Keys.get(injectableType)
          : Keys.getMembersKey(injectableType);
    }
    return result;
  }

  @Override public void getBindings(Map<String, Binding<?>> bindings) {
    for (Class<?> c = moduleClass; !c.equals(Object.class); c = c.getSuperclass()) {
      for (Method method : c.getDeclaredMethods()) {
        Provides provides = method.getAnnotation(Provides.class);
        if (provides != null) {
          Type genericReturnType = method.getGenericReturnType();

          Type typeToCheck = genericReturnType;
          if (genericReturnType instanceof ParameterizedType) {
            typeToCheck = ((ParameterizedType) genericReturnType).getRawType();
          }
          if (Provider.class.equals(typeToCheck)) {
            throw new IllegalStateException("@Provides method must not return Provider directly: "
                + c.getName()
                + "."
                + method.getName());
          }
          if (Lazy.class.equals(typeToCheck)) {
            throw new IllegalStateException("@Provides method must not return Lazy directly: "
                + c.getName()
                + "."
                + method.getName());
          }

          String key = Keys.get(genericReturnType, method.getAnnotations(), method);
          switch (provides.type()) {
            case UNIQUE:
              handleBindings(bindings, method, key, library);
              break;
            case SET:
              handleSetBindings(bindings, method, key, library);
              break;
            default:
              throw new AssertionError("Unknown @Provides type " + provides.type());
          }
        }
      }
    }
  }

  private <T> void handleBindings(Map<String, Binding<?>> bindings, Method method, String key,
      boolean library) {
    bindings.put(key, new ProviderMethodBinding<T>(method, key, module, library));
  }

  private <T> void handleSetBindings(Map<String, Binding<?>> bindings, Method method, String key,
      boolean library) {
    String setKey = Keys.getSetKey(method.getGenericReturnType(), method.getAnnotations(), method);
    SetBinding.<T>add(bindings, setKey, new ProviderMethodBinding<T>(method, key, module,
        library));
  }

  @Override public Object newModule() {
    try {
      Constructor<?> constructor = moduleClass.getDeclaredConstructor();
      constructor.setAccessible(true);
      return constructor.newInstance();
    } catch (InvocationTargetException e) {
      throw new IllegalArgumentException(e.getCause());
    } catch (NoSuchMethodException e) {
      throw new IllegalArgumentException("Could not construct " + moduleClass.getName()
          + " as it lacks an accessible no-args constructor. This module must be passed"
          + " in as an instance, or an accessible no-args constructor must be added.", e);
    } catch (InstantiationException e) {
      throw new IllegalArgumentException("Failed to construct " + moduleClass.getName(), e);
    } catch (IllegalAccessException e) {
      throw new AssertionError();
    }
  }

  /**
   * Creates a ReflectiveModuleAdapter or throws an {@code IllegalArgumentException}.
   */
  @SuppressWarnings("unchecked") // Runtime checks validate that the result type matches 'T'.
  public static <T> ModuleAdapter<T> create(Class<? extends T> moduleClass) {
    Module annotation = moduleClass.getAnnotation(Module.class);
    if (annotation == null) {
      throw new IllegalArgumentException("No @Module on " + moduleClass.getName());
    }
    if (!moduleClass.getSuperclass().equals(Object.class)) {
      throw new IllegalArgumentException(
          "Modules must not extend from other classes: " + moduleClass.getName());
    }
    return (ModuleAdapter<T>) new ReflectiveModuleAdapter(moduleClass, annotation);
  }

  /**
   * Invokes a method to provide a value. The method's parameters are injected.
   */
  private final class ProviderMethodBinding<T> extends Binding<T> {
    private Binding<?>[] parameters;
    private final Method method;
    private final Object instance;

    public ProviderMethodBinding(Method method, String key, Object instance, boolean library) {
      super(key, null, method.isAnnotationPresent(Singleton.class),
          moduleClass.getName() + "." + method.getName() + "()");
      this.method = method;
      this.instance = instance;
      method.setAccessible(true);
      setLibrary(library);
    }

    @Override public void attach(Linker linker) {
      Type[] types = method.getGenericParameterTypes();
      Annotation[][] annotations = method.getParameterAnnotations();
      parameters = new Binding[types.length];
      for (int i = 0; i < parameters.length; i++) {
        String key = Keys.get(types[i], annotations[i], method + " parameter " + i);
        parameters[i] = linker.requestBinding(key, method, instance.getClass().getClassLoader());
      }
    }

    @SuppressWarnings("unchecked") // We defined 'T' in terms of the method's return type.
    @Override public T get() {
      Object[] args = new Object[parameters.length];
      for (int i = 0; i < parameters.length; i++) {
        args[i] = parameters[i].get();
      }
      try {
        return (T) method.invoke(instance, args);
      } catch (InvocationTargetException e) {
        Throwable cause = e.getCause();
        throw cause instanceof RuntimeException
            ? (RuntimeException) cause
            : new RuntimeException(cause);
      } catch (IllegalAccessException e) {
        throw new RuntimeException(e);
      }
    }

    @Override public void getDependencies(Set<Binding<?>> get, Set<Binding<?>> injectMembers) {
      for (Binding<?> binding : parameters) {
        get.add(binding);
      }
    }

    @Override public void injectMembers(T t) {
      throw new AssertionError("Provides method bindings are not MembersInjectors");
    }

    @Override public String toString() {
      return method.toString();
    }
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092/core/src/main/java/dagger/internal/loaders/ReflectiveStaticInjection.java;<<<<<<< MINE
=======
/*
 * Copyright (C) 2012 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dagger.internal.loaders;

import dagger.internal.Binding;
import dagger.internal.Keys;
import dagger.internal.Linker;
import dagger.internal.StaticInjection;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.List;
import javax.inject.Inject;

/**
 * Uses reflection to inject the static fields of a class.
 */
public final class ReflectiveStaticInjection extends StaticInjection {
  private final ClassLoader loader;
  private final Field[] fields;
  private Binding<?>[] bindings;

  private ReflectiveStaticInjection(ClassLoader loader, Field[] fields) {
    this.fields = fields;
    this.loader = loader;
  }

  @Override public void attach(Linker linker) {
    bindings = new Binding<?>[fields.length];
    for (int i = 0; i < fields.length; i++) {
      Field field = fields[i];
      String key = Keys.get(field.getGenericType(), field.getAnnotations(), field);
      bindings[i] = linker.requestBinding(key, field, loader);
    }
  }

  @Override public void inject() {
    try {
      for (int f = 0; f < fields.length; f++) {
        fields[f].set(null, bindings[f].get());
      }
    } catch (IllegalAccessException e) {
      throw new AssertionError(e);
    }
  }

  public static StaticInjection create(Class<?> injectedClass) {
    List<Field> fields = new ArrayList<Field>();
    for (Field field : injectedClass.getDeclaredFields()) {
      if (Modifier.isStatic(field.getModifiers()) && field.isAnnotationPresent(Inject.class)) {
        field.setAccessible(true);
        fields.add(field);
      }
    }
    if (fields.isEmpty()) {
      throw new IllegalArgumentException("No static injections: " + injectedClass.getName());
    }
    return new ReflectiveStaticInjection(injectedClass.getClassLoader(),
        fields.toArray(new Field[fields.size()]));
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092/core/src/main/java/dagger/internal/loaders/GeneratedAdapters.java;<<<<<<< MINE
=======
/*
 * Copyright (C) 2013 Square, Inc.
 * Copyright (C) 2013 Google, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dagger.internal.loaders;

import dagger.internal.Binding;
import dagger.internal.ModuleAdapter;
import dagger.internal.StaticInjection;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * A utility for loading and initializing generated adapters.
 */
public final class GeneratedAdapters {
  private static final String SEPARATOR = "$$";
  public static final String INJECT_ADAPTER_SUFFIX = SEPARATOR + "InjectAdapter";
  public static final String MODULE_ADAPTER_SUFFIX = SEPARATOR + "ModuleAdapter";
  public static final String STATIC_INJECTION_SUFFIX = SEPARATOR + "StaticInjection";
  private static final Logger logger = Logger.getLogger(GeneratedAdapters.class.getName());

  private GeneratedAdapters() { }

  public static <T> ModuleAdapter<T> initModuleAdapter(Class<? extends T> moduleClass) {
    return instantiate(moduleClass.getName() + MODULE_ADAPTER_SUFFIX, moduleClass.getClassLoader());
  }

  public static Binding<?> initInjectAdapter(String className, ClassLoader classLoader) {
    return instantiate(className + INJECT_ADAPTER_SUFFIX, classLoader);
  }

  public static StaticInjection initStaticInjection(Class<?> injectedClass) {
    return instantiate(injectedClass.getName() + STATIC_INJECTION_SUFFIX,
        injectedClass.getClassLoader());
  }

  private static <T> T instantiate(String name, ClassLoader classLoader) {
    try {
      // A null classloader is the system classloader.
      classLoader = (classLoader != null) ? classLoader : ClassLoader.getSystemClassLoader();
      Class<?> generatedClass = classLoader.loadClass(name);
      Constructor<?> constructor = generatedClass.getDeclaredConstructor();
      constructor.setAccessible(true);
      return (T) constructor.newInstance();
    } catch (ClassNotFoundException e) {
      if (logger.isLoggable(Level.FINE)) {
        logger.log(Level.FINE, name + " could not be found.", e);
      }
      return null; // Not finding a class is not inherently an error, unlike finding a bad class.
    } catch (NoSuchMethodException e) {
      throw new RuntimeException("No default constructor found on " + name, e);
    } catch (InstantiationException e) {
      throw new RuntimeException("Failed to initialize " + name, e);
    } catch (IllegalAccessException e) {
      throw new RuntimeException("Failed to initialize " + name, e);
    } catch (InvocationTargetException e) {
      throw new RuntimeException("Error while initializing " + name, e.getCause());
    }
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092/core/src/main/java/dagger/internal/Modules.java;<<<<<<< MINE
=======
/*
 * Copyright (C) 2012 Square, Inc.
 * Copyright (C) 2012 Google, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dagger.internal;


import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Static helper for organizing modules.
 */
public final class Modules {

  private Modules() { }

  /**
   * Returns a full set of module adapters, including module adapters for included
   * modules.
   */
  public static Map<Class<?>, ModuleAdapter<?>> getAllModuleAdapters(Loader plugin,
      Object[] seedModules) {
    // Create a module adapter for each seed module.
    ModuleAdapter<?>[] seedAdapters = new ModuleAdapter<?>[seedModules.length];
    int s = 0;
    for (Object module : seedModules) {
      if (module instanceof Class) {
        seedAdapters[s++] = plugin.getModuleAdapter((Class<?>) module, null); // Loader constructs.
      } else {
        seedAdapters[s++] = plugin.getModuleAdapter(module.getClass(), module);
      }
    }

    Map<Class<?>, ModuleAdapter<?>> adaptersByModuleType
        = new LinkedHashMap<Class<?>, ModuleAdapter<?>>();

    // Add the adapters that we have module instances for. This way we won't
    // construct module objects when we have a user-supplied instance.
    for (ModuleAdapter<?> adapter : seedAdapters) {
      adaptersByModuleType.put(adapter.getModule().getClass(), adapter);
    }

    // Next add adapters for the modules that we need to construct. This creates
    // instances of modules as necessary.
    for (ModuleAdapter<?> adapter : seedAdapters) {
      collectIncludedModulesRecursively(plugin, adapter, adaptersByModuleType);
    }

    return adaptersByModuleType;
  }

  /**
   * Fills {@code result} with the module adapters for the includes of {@code
   * adapter}, and their includes recursively.
   */
  private static void collectIncludedModulesRecursively(Loader plugin, ModuleAdapter<?> adapter,
      Map<Class<?>, ModuleAdapter<?>> result) {
    for (Class<?> include : adapter.includes) {
      if (!result.containsKey(include)) {
        ModuleAdapter<Object> includedModuleAdapter = plugin.getModuleAdapter(include, null);
        result.put(include, includedModuleAdapter);
        collectIncludedModulesRecursively(plugin, includedModuleAdapter, result);
      }
    }
  }

}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE
=======
import dagger.internal.FailoverLoader;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE
import dagger.internal.RuntimeAggregatingLoader;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE
import dagger.internal.loaders.generated.GeneratedAdapterLoader;
import dagger.internal.loaders.reflect.ReflectiveLoader;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE
import static dagger.internal.RuntimeAggregatingLoader.getAllModuleAdapters;
=======
import static dagger.internal.Modules.getAllModuleAdapters;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE
    RuntimeAggregatingLoader plugin = new RuntimeAggregatingLoader(
            new GeneratedAdapterLoader(), new ReflectiveLoader());
    return DaggerObjectGraph.makeGraph(null, plugin, modules);
=======
    return DaggerObjectGraph.makeGraph(null, new FailoverLoader(), modules);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
import static dagger.internal.loaders.generated.GeneratedAdapterLoader.MODULE_ADAPTER_SUFFIX;
=======
import static dagger.internal.loaders.GeneratedAdapters.MODULE_ADAPTER_SUFFIX;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
import static java.lang.reflect.Modifier.PROTECTED;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
      writer.beginMethod(typeName, "newModule", PROTECTED);
=======
      writer.beginMethod(typeName, "newModule", PUBLIC);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
import static dagger.internal.loaders.generated.GeneratedAdapterLoader.INJECT_ADAPTER_SUFFIX;
import static dagger.internal.loaders.generated.GeneratedAdapterLoader.STATIC_INJECTION_SUFFIX;
=======
import static dagger.internal.loaders.GeneratedAdapters.INJECT_ADAPTER_SUFFIX;
import static dagger.internal.loaders.GeneratedAdapters.STATIC_INJECTION_SUFFIX;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/AndroidModule.java;<<<<<<< MINE
   * {@link ForApplication @Annotation} to explicitly differentiate it from an activity context.
=======
   * {@link ForApplication @ForApplication} to explicitly differentiate it from an activity context.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/ActivityModule.java;<<<<<<< MINE
    complete = false,
=======
    addsTo = AndroidModule.class,
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/ProvidesBinding.java;<<<<<<< MINE
=======
/*
 * Copyright (C) 2013 Google, Inc.
 * Copyright (C) 2013 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dagger.internal;

/**
 * A {@code Binding<T>} which delegates to a module method.
 */
public abstract class ProvidesBinding<T> extends Binding<T> {
  protected final String moduleClass;

  protected final String methodName;

  /**
   * Creates a new {@code ProvidesBinding} with the given "provides" key, a flag as to whether
   * this binding should be scoped, and the requiredBy object for traceability.
   */
  public ProvidesBinding(String key, boolean singleton, String moduleClass, String methodName) {
    // Set requiredBy as fullMethodName to preserve older debugging meaning.
    super(key, null, singleton, moduleClass + "." + methodName + "()");
    this.moduleClass = moduleClass;
    this.methodName = methodName;
  }

  /**
   * A provides binding is responsible for implementing storage of the module instance, and
   * delegation to that module instance's method.
   */
  @Override
  public abstract T get();

  @Override public String toString() {
    return getClass().getName() + "[key=" + provideKey
        + " method=" + moduleClass + "." + methodName + "()" + "]";
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
import dagger.internal.Binding.InvalidBindingException;
import java.util.ArrayDeque;
=======
import dagger.internal.Binding.InvalidBindingException;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
import java.util.Collections;
import java.util.Deque;
=======
import java.util.Collections;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
import java.util.LinkedList;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
  private final Deque<Binding<?>> toLink = new ArrayDeque<Binding<?>>();
=======
  private final Queue<Binding<?>> toLink = new ArrayQueue<Binding<?>>();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
=======
  /**
   * An unmodifiable map containing all of the bindings available in this linker, fully linked.
   * This will be null if the bindings are not yet fully linked. It provides both a signal
   * of completion of the {@link #linkAll()} method, as well as a place to reference the final,
   * fully linked map of bindings.
   */
  private volatile Map<String, Binding<?>> linkedBindings = null;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
=======
   *
   * This method may only be called before {@link #linkAll()}. Subsequent calls to
   * {@link #installBindings(BindingsGroup)} will throw an {@link IllegalStateException}.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
  public void installBindings(Map<String, ? extends Binding<?>> toInstall) {
=======
  public void installBindings(BindingsGroup toInstall) {
    if (linkedBindings != null) {
      throw new IllegalStateException("Cannot install further bindings after calling linkAll().");
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
   * Links requested bindings and installed bindings, plus all of their
   * transitive dependencies. This creates JIT bindings as necessary to fill in
   * the gaps.
=======
   * Links all known bindings (whether requested or installed), plus all of their
   * transitive dependencies. This loads injectable types' bindings as necessary to fill in
   * the gaps.  If this method has returned successfully at least once, all further
   * work is short-circuited.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
   * @return all bindings known by this linker, which will all be linked.
=======
   * @throws AssertionError if this method is not called within a synchronized block which
   *     holds this {@link Linker} as the lock object.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
=======
    assertLockHeld();
    if (linkedBindings != null) {
      return linkedBindings;
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
    linkRequested();
    return bindings;
=======
    linkRequested(); // This method throws if bindings are not resolvable/linkable.
    linkedBindings = Collections.unmodifiableMap(bindings);
    return linkedBindings;
  }

  /**
   * Returns the map of all bindings available to this {@link Linker}, if and only if
   * {@link #linkAll()} has successfully returned at least once, otherwise it returns null;
   */
  public Map<String, Binding<?>> fullyLinkedBindings() {
    return linkedBindings;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
=======
   *
   * @throws AssertionError if this method is not called within a synchronized block which
   *     holds this {@link Linker} as the lock object.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
          Binding<?> jitBinding =
              createJitBinding(key, binding.requiredBy, deferred.classLoader, mustHaveInjections);
          jitBinding.setLibrary(binding.library());
          jitBinding.setDependedOn(binding.dependedOn());
=======
          Binding<?> resolvedBinding =
              createBinding(key, binding.requiredBy, deferred.classLoader, mustHaveInjections);
          resolvedBinding.setLibrary(binding.library());
          resolvedBinding.setDependedOn(binding.dependedOn());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
          if (!key.equals(jitBinding.provideKey) && !key.equals(jitBinding.membersKey)) {
=======
          if (!key.equals(resolvedBinding.provideKey) && !key.equals(resolvedBinding.membersKey)) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
          Binding<?> scopedJitBinding = scope(jitBinding);
          toLink.add(scopedJitBinding);
          putBinding(scopedJitBinding);
=======
          Binding<?> scopedBinding = scope(resolvedBinding);
          toLink.add(scopedBinding);
          putBinding(scopedBinding);
        } catch (InvalidBindingException e) {
          addError(e.type + " " + e.getMessage() + " required by " + binding.requiredBy);
          bindings.put(key, Binding.UNRESOLVED);
        } catch (UnsupportedOperationException e) {
          addError("Unsupported: " + e.getMessage() + " required by " + binding.requiredBy);
          bindings.put(key, Binding.UNRESOLVED);
        } catch (IllegalArgumentException e) {
          addError(e.getMessage() + " required by " + binding.requiredBy);
          bindings.put(key, Binding.UNRESOLVED);
        } catch (RuntimeException e) {
          throw e;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
          if (e.getMessage() != null) {
            addError(e.getMessage() + " required by " + binding.requiredBy);
            bindings.put(key, Binding.UNRESOLVED);
          } else if (e instanceof RuntimeException) {
            throw (RuntimeException) e;
          } else {
            throw new RuntimeException(e);
          }
=======
          throw new RuntimeException(e);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
   * Creates a just-in-time binding for the key in {@code deferred}. The type of binding
=======
   * Returns a binding for the key in {@code deferred}. The type of binding
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
   *   <li>Injections of other types will use the injectable constructors of those classes.
=======
   *   <li>Injections of raw types will use the injectable constructors of those classes.
   *   <li>Any other injection types require @Provides bindings and will error out.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
  private Binding<?> createJitBinding(String key, Object requiredBy, ClassLoader classLoader,
=======
  private Binding<?> createBinding(String key, Object requiredBy, ClassLoader classLoader,
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
    if (className != null && !Keys.isAnnotated(key)) {
      Binding<?> binding =
          plugin.getAtInjectBinding(key, className, classLoader, mustHaveInjections);
      if (binding != null) {
        return binding;
      }
=======
    if (className == null || Keys.isAnnotated(key)) {
      // Cannot jit-bind annotated keys or generic types.
      throw new IllegalArgumentException(key);
    }
    Binding<?> binding =
        plugin.getAtInjectBinding(key, className, classLoader, mustHaveInjections);
    if (binding != null) {
      return binding;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE

    throw new IllegalArgumentException("No binding for " + key);
=======
    throw new InvalidBindingException(className, "could not be bound with key " + key);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
    if (!binding.isSingleton()) {
      return binding;
=======
    if (!binding.isSingleton() || binding instanceof SingletonBinding) {
      return binding; // Default scoped binding or already a scoped binding.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
    if (binding instanceof SingletonBinding) throw new AssertionError();
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
=======

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
=======

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
=======

    @Override public String toString() {
      return "DeferredBinding[deferredKey=" + deferredKey + "]";
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Keys.java;<<<<<<< MINE
 * Bindings from {@code @Provides} methods are of the first two types. Bindings
=======
 * Bindings from {@code @Provides} methods are of the first two types. BindingsGroup
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Keys.java;<<<<<<< MINE
  private static final LruCache<Class<? extends Annotation>, Boolean> IS_QUALIFIER_ANNOTATION
      = new LruCache<Class<? extends Annotation>, Boolean>(Integer.MAX_VALUE) {
    @Override protected Boolean create(Class<? extends Annotation> annotationType) {
      return annotationType.isAnnotationPresent(Qualifier.class);
    }
  };
=======
  private static final Memoizer<Class<? extends Annotation>, Boolean> IS_QUALIFIER_ANNOTATION =
      new Memoizer<Class<? extends Annotation>, Boolean>() {
        @Override protected Boolean create(Class<? extends Annotation> annotationType) {
          return annotationType.isAnnotationPresent(Qualifier.class);
        }
      };
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Keys.java;<<<<<<< MINE

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Keys.java;<<<<<<< MINE
    return "members/" + get(key);
=======
    // for classes key.getName() is equivalent to get(key)
    return "members/".concat(key.getName());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Keys.java;<<<<<<< MINE
  public static String get(Type type, Annotation annotation) {
=======
  private static String get(Type type, Annotation annotation) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Keys.java;<<<<<<< MINE
          throw new UnsupportedOperationException("Uninjectable type " + type);
=======
          throw new UnsupportedOperationException("Uninjectable type " + c.getName());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Keys.java;<<<<<<< MINE
  /** Returns true if {@code key} is a binding that supports members injection. */
  public static boolean isMembersInjection(String key) {
    return key.startsWith("members/");
  }

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Binding.java;<<<<<<< MINE
      throw new IllegalArgumentException();
=======
      throw new InvalidBindingException(Keys.getClassName(membersKey),
          "is exclusively members injected and therefore cannot be scoped");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Binding.java;<<<<<<< MINE
=======

  /** An exception thrown by anything attempting to construct a binding which is invalid. */
  public static class InvalidBindingException extends RuntimeException {
    public final String type;

    public InvalidBindingException(String type, String error) {
      super(error);
      this.type = type;
    }

    public InvalidBindingException(String type, String error, Throwable cause) {
      super("Binding for " + type + " was invalid: " + error, cause);
      this.type = type;
    }
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/SetBinding.java;<<<<<<< MINE
=======
import java.util.ArrayList;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/SetBinding.java;<<<<<<< MINE
import java.util.Map;
=======
import java.util.List;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/SetBinding.java;<<<<<<< MINE
=======
  public static <T> void add(BindingsGroup bindings, String setKey, Binding<?> binding) {
    prepareSetBinding(bindings, setKey, binding).contributors.add(Linker.scope(binding));
  }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/SetBinding.java;<<<<<<< MINE
  public static <T> void add(Map<String, Binding<?>> bindings, String setKey, Binding<?> binding) {
=======
  private static <T> SetBinding<T> prepareSetBinding(
      BindingsGroup bindings, String setKey, Binding<?> binding) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/SetBinding.java;<<<<<<< MINE
      setBinding = (SetBinding) previous;
=======
      setBinding = (SetBinding<T>) previous;
      setBinding.setLibrary(setBinding.library() && binding.library());
      return setBinding;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/SetBinding.java;<<<<<<< MINE
      bindings.put(setKey, setBinding);
=======
      setBinding.setLibrary(binding.library());
      bindings.contributeSetBinding(setKey, setBinding);
      return (SetBinding<T>) bindings.get(setKey); // BindingMap.put() copies SetBindings.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/SetBinding.java;<<<<<<< MINE
    setBinding.contributors.add(Linker.scope(binding));
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/SetBinding.java;<<<<<<< MINE
  private final Set<Binding<?>> contributors = new LinkedHashSet<Binding<?>>();

=======
  /**
   * A {@link SetBinding} with whose contributing bindings this set-binding provides a union
   * view.
   */
  private final SetBinding<T> parent;

  /**
   * A {@link Set} of {@link Binding} instances which contribute values to the injected set.
   */
  private final List<Binding<?>> contributors;

  /**
   * Creates a new {@code SetBinding} with the given "provides" key, and the requiredBy object
   * for traceability.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/SetBinding.java;<<<<<<< MINE
=======
    parent = null;
    contributors = new ArrayList<Binding<?>>();
  }

  /**
   * Creates a new {@code SetBinding} with all of the contributing bindings of the provided
   * original {@code SetBinding}.
   */
  public SetBinding(SetBinding<T> original) {
    super(original.provideKey, null, false, original.requiredBy);
    parent = original;
    this.setLibrary(original.library());
    this.setDependedOn(original.dependedOn());
    contributors = new ArrayList<Binding<?>>();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/SetBinding.java;<<<<<<< MINE
=======
  public int size() {
    int size = 0;
    for (SetBinding<T> binding = this; binding != null; binding = binding.parent) {
      size += binding.contributors.size();
    }
    return size;
  }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/SetBinding.java;<<<<<<< MINE
    Set<T> result = new LinkedHashSet<T>(contributors.size());
    for (Binding<?> contributor : contributors) {
      Object contribution = contributor.get(); // Let runtime exceptions through.
      if (contributor.provideKey.equals(provideKey)) {
        result.addAll((Set<T>) contribution);
      } else {
        result.add((T) contribution);
=======
    List<T> result = new ArrayList<T>();
    for (SetBinding<T> setBinding = this; setBinding != null; setBinding = setBinding.parent) {
      for (int i = 0, size = setBinding.contributors.size(); i < size; i++) {
        Binding<?> contributor = setBinding.contributors.get(i);
        Object contribution = contributor.get(); // Let runtime exceptions through.
        if (contributor.provideKey.equals(provideKey)) {
          result.addAll((Set<T>) contribution);
        } else {
          result.add((T) contribution);
        }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/SetBinding.java;<<<<<<< MINE
    return Collections.unmodifiableSet(result);
=======
    return Collections.unmodifiableSet(new LinkedHashSet<T>(result));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/SetBinding.java;<<<<<<< MINE
    getBindings.addAll(contributors);
=======
    for (SetBinding<T> binding = this; binding != null; binding = binding.parent) {
      getBindings.addAll(binding.contributors);
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/SetBinding.java;<<<<<<< MINE
    throw new UnsupportedOperationException("Cannot inject into a Set binding");
=======
    throw new UnsupportedOperationException("Cannot inject members on a contributed Set<T>.");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/SetBinding.java;<<<<<<< MINE
    return "SetBinding" + contributors;
=======
    boolean first = true;
    StringBuilder builder = new StringBuilder("SetBinding[");
    for (SetBinding<T> setBinding = this; setBinding != null; setBinding = setBinding.parent) {
      for (int i = 0, size = setBinding.contributors.size(); i < size; i++) {
        if (!first) {
          builder.append(",");
        }
        builder.append(setBinding.contributors.get(i));
        first = false;
      }
    }
    builder.append("]");
    return builder.toString();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Loader.java;<<<<<<< MINE
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
=======
import java.lang.reflect.AccessibleObject;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Loader.java;<<<<<<< MINE

  private final LruCache<ClassLoader, LruCache<String, Class<?>>> caches =
      new LruCache<ClassLoader, LruCache<String, Class<?>>>(Integer.MAX_VALUE) {
    @Override protected LruCache<String, Class<?>> create(final ClassLoader classLoader) {
      return new LruCache<String, Class<?>>(Integer.MAX_VALUE) {
        @Override protected Class<?> create(String className) {
          try {
            return classLoader.loadClass(className);
          } catch (ClassNotFoundException e) {
            return Void.class; // Cache the failure (negative case).
          }
=======
  private final Memoizer<ClassLoader, Memoizer<String, Class<?>>> caches =
      new Memoizer<ClassLoader, Memoizer<String, Class<?>>>() {
        @Override protected Memoizer<String, Class<?>> create(final ClassLoader classLoader) {
          return new Memoizer<String, Class<?>>() {
            @Override protected Class<?> create(String className) {
              try {
                return classLoader.loadClass(className);
              } catch (ClassNotFoundException e) {
                return Void.class; // Cache the failure (negative case).
              }
            }
          };
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Loader.java;<<<<<<< MINE
    }
  };
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Loader.java;<<<<<<< MINE
   * Returns a module adapter for {@code module} or throws a {@code TypeNotPresentException} if
=======
   * Returns a module adapter for {@code moduleClass} or throws a {@code TypeNotPresentException} if
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Loader.java;<<<<<<< MINE
  public abstract <T> ModuleAdapter<T> getModuleAdapter(Class<? extends T> moduleClass, T module);
=======
  public abstract <T> ModuleAdapter<T> getModuleAdapter(Class<T> moduleClass);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Loader.java;<<<<<<< MINE
   * Instantiates a class using its default constructor and the given {@link ClassLoader}.
=======
   * Instantiates a class using its default constructor and the given {@link ClassLoader}. This
   * method does not attempt to {@linkplain AccessibleObject#setAccessible set accessibility}.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Loader.java;<<<<<<< MINE
      Constructor<?> constructor = generatedClass.getDeclaredConstructor();
      constructor.setAccessible(true);
      return (T) constructor.newInstance();
    } catch (NoSuchMethodException e) {
      throw new RuntimeException("No default constructor found on " + name, e);
=======
      @SuppressWarnings("unchecked")
      T instance = (T) generatedClass.newInstance();
      return instance;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Loader.java;<<<<<<< MINE
    } catch (InvocationTargetException e) {
      throw new RuntimeException("Error while initializing " + name, e.getCause());
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/FailoverLoader.java;<<<<<<< MINE
=======
  /*
   * Note that String.concat is used throughout this code because it is the most efficient way to
   * concatenate _two_ strings.  javac uses StringBuilder for the + operator and it has proven to
   * be wasteful in terms of both CPU and memory allocated.
   */

  private final Memoizer<Class<?>, ModuleAdapter<?>> loadedAdapters =
      new Memoizer<Class<?>, ModuleAdapter<?>>() {
        @Override protected ModuleAdapter<?> create(Class<?> type) {
          ModuleAdapter<?> result =
              instantiate(type.getName().concat(MODULE_ADAPTER_SUFFIX), type.getClassLoader());
          if (result == null) {
            throw new IllegalStateException("Module adapter for " + type + " could not be loaded. "
                + "Please ensure that code generation was run for this module.");
          }
          return result;
        }
      };
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/FailoverLoader.java;<<<<<<< MINE
  @Override public <T> ModuleAdapter<T> getModuleAdapter(Class<? extends T> type, T instance) {
    ModuleAdapter<T> result =
        instantiate(type.getName() + MODULE_ADAPTER_SUFFIX, type.getClassLoader());
    if (result == null) {
      throw new IllegalStateException("Module adapter for " + type + " could not be loaded. "
          + "Please ensure that code generation was run for this module.");
    }
    result.module = (instance != null) ? instance : result.newModule();
    return result;
=======
  @SuppressWarnings("unchecked") // cache ensures types match
  @Override public <T> ModuleAdapter<T> getModuleAdapter(Class<T> type) {
    return (ModuleAdapter<T>) loadedAdapters.get(type);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/FailoverLoader.java;<<<<<<< MINE
    Binding<?> result = instantiate(className + INJECT_ADAPTER_SUFFIX, classLoader);
=======
    Binding<?> result = instantiate(className.concat(INJECT_ADAPTER_SUFFIX), classLoader);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/FailoverLoader.java;<<<<<<< MINE
          injectedClass.getName() + STATIC_INJECTION_SUFFIX, injectedClass.getClassLoader());
=======
          injectedClass.getName().concat(STATIC_INJECTION_SUFFIX), injectedClass.getClassLoader());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/loaders/ReflectiveAtInjectBinding.java;<<<<<<< MINE
        throw new IllegalArgumentException("Too many injectable constructors on " + type.getName());
=======
        throw new InvalidBindingException(type.getName(), "has too many injectable constructors");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/loaders/ReflectiveAtInjectBinding.java;<<<<<<< MINE
        throw new IllegalArgumentException("No injectable members on " + type.getName()
            + ". Do you want to add an injectable constructor?");
=======
        throw new InvalidBindingException(type.getName(),
            "has no injectable members. Do you want to add an injectable constructor?");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Modules.java;<<<<<<< MINE
  public static Map<Class<?>, ModuleAdapter<?>> getAllModuleAdapters(Loader plugin,
      Object[] seedModules) {
    // Create a module adapter for each seed module.
    ModuleAdapter<?>[] seedAdapters = new ModuleAdapter<?>[seedModules.length];
    int s = 0;
    for (Object module : seedModules) {
      if (module instanceof Class) {
        seedAdapters[s++] = plugin.getModuleAdapter((Class<?>) module, null); // Loader constructs.
=======
  public static Map<ModuleAdapter<?>, Object> loadModules(Loader loader,
      Object[] seedModulesOrClasses) {
    Map<ModuleAdapter<?>, Object> seedAdapters =
        new LinkedHashMap<ModuleAdapter<?>, Object>(seedModulesOrClasses.length);
    for (int i = 0; i < seedModulesOrClasses.length; i++) {
      if (seedModulesOrClasses[i] instanceof Class<?>) {
        ModuleAdapter<?> adapter = loader.getModuleAdapter((Class<?>) seedModulesOrClasses[i]);
        seedAdapters.put(adapter, adapter.newModule());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Modules.java;<<<<<<< MINE
        seedAdapters[s++] = plugin.getModuleAdapter(module.getClass(), module);
=======
        ModuleAdapter<?> adapter = loader.getModuleAdapter(seedModulesOrClasses[i].getClass());
        seedAdapters.put(adapter, seedModulesOrClasses[i]);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Modules.java;<<<<<<< MINE
    Map<Class<?>, ModuleAdapter<?>> adaptersByModuleType
        = new LinkedHashMap<Class<?>, ModuleAdapter<?>>();

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Modules.java;<<<<<<< MINE
    for (ModuleAdapter<?> adapter : seedAdapters) {
      adaptersByModuleType.put(adapter.getModule().getClass(), adapter);
=======
    Map<ModuleAdapter<?>, Object> result =
        new LinkedHashMap<ModuleAdapter<?>, Object>(seedAdapters);

    // Next collect included modules
    Map<Class<?>, ModuleAdapter<?>> transitiveInclusions =
        new LinkedHashMap<Class<?>, ModuleAdapter<?>>();
    for (ModuleAdapter<?> adapter : seedAdapters.keySet()) {
      collectIncludedModulesRecursively(loader, adapter, transitiveInclusions);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Modules.java;<<<<<<< MINE

    // Next add adapters for the modules that we need to construct. This creates
    // instances of modules as necessary.
    for (ModuleAdapter<?> adapter : seedAdapters) {
      collectIncludedModulesRecursively(plugin, adapter, adaptersByModuleType);
=======
    // and create them if necessary
    for (ModuleAdapter<?> dependency : transitiveInclusions.values()) {
      if (!result.containsKey(dependency)) {
        result.put(dependency, dependency.newModule());
      }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Modules.java;<<<<<<< MINE

    return adaptersByModuleType;
=======
    return result;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Modules.java;<<<<<<< MINE
        ModuleAdapter<Object> includedModuleAdapter = plugin.getModuleAdapter(include, null);
=======
        ModuleAdapter<?> includedModuleAdapter = plugin.getModuleAdapter(include);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/ModuleAdapter.java;<<<<<<< MINE
import java.util.Map;

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/ModuleAdapter.java;<<<<<<< MINE
=======
  public final Class<T> moduleClass;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/ModuleAdapter.java;<<<<<<< MINE
  protected T module;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/ModuleAdapter.java;<<<<<<< MINE
  protected ModuleAdapter(String[] injectableTypes, Class<?>[] staticInjections, boolean overrides,
      Class<?>[] includes, boolean complete, boolean library) {
=======
  protected ModuleAdapter(Class<T> moduleClass, String[] injectableTypes,
      Class<?>[] staticInjections, boolean overrides, Class<?>[] includes, boolean complete,
      boolean library) {
    this.moduleClass = moduleClass;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/ModuleAdapter.java;<<<<<<< MINE
  public void getBindings(@SuppressWarnings("unused") Map<String, Binding<?>> map) {
=======
  @SuppressWarnings("unused")
  public void getBindings(BindingsGroup map, T module) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/ModuleAdapter.java;<<<<<<< MINE
  public T getModule() {
    return module;
=======
  @Override
  public final boolean equals(Object obj) {
    if (obj == this) {
      return true;
    } else if (obj instanceof ModuleAdapter<?>) {
      ModuleAdapter<?> that = (ModuleAdapter<?>) obj;
      return this.moduleClass.equals(that.moduleClass);
    } else {
      return false;
    }
  }

  @Override
  public final int hashCode() {
    return moduleClass.hashCode();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/BindingsGroup.java;<<<<<<< MINE
=======
/*
 * Copyright (C) 2013 Square, Inc.
 * Copyright (C) 2013 Google, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dagger.internal;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

/**
 * A grouping of bindings that fails when existing values are clobbered, to be used in collecting
 * the initial set of bindings for a graph (from provides methods).
 */
public abstract class BindingsGroup {
  private final Map<String, Binding<?>> bindings = new LinkedHashMap<String, Binding<?>>();

  public abstract Binding<?> contributeSetBinding(String key, SetBinding<?> value);

  public Binding<?> contributeProvidesBinding(String key, ProvidesBinding<?> value) {
    return put(key, value);
  }

  protected Binding<?> put(String key, Binding<?> value) {
    Binding<?> clobbered = bindings.put(key, value);
    if (clobbered != null) {
      bindings.put(key, clobbered); // Put things back as they were.
      throw new IllegalArgumentException("Duplicate:\n    " + clobbered + "\n    " + value);
    }
    return null;
  }

  public Binding<?> get(String key) {
    return bindings.get(key);
  }

  public final Set<Entry<String, Binding<?>>> entrySet() {
    return bindings.entrySet();
  }

  @Override public String toString() {
    return getClass().getSimpleName() + bindings.toString();
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Memoizer.java;<<<<<<< MINE
=======
/*
 * Copyright (C) 2011 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dagger.internal;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;

/**
 * Represents an operation to be
 */
abstract class Memoizer<K, V> {
  private final Map<K, V> map;
  private final Lock readLock;
  private final Lock writeLock;

  public Memoizer() {
    this.map = new LinkedHashMap<K, V>();
    ReadWriteLock lock = new ReentrantReadWriteLock();
    this.readLock = lock.readLock();
    this.writeLock = lock.writeLock();
  }

  public final V get(K key) {
    if (key == null) {
      throw new NullPointerException("key == null");
    }

    // check to see if we already have a value
    readLock.lock();
    try {
      V value = map.get(key);
      if (value != null) {
        return value;
      }
    } finally {
      readLock.unlock();
    }

    // create a new value.  this may race and we might create more than one instance, but that's ok
    V newValue = create(key);
    if (newValue == null) {
      throw new NullPointerException("create returned null");
    }

    // write the new value and return it
    writeLock.lock();
    try {
      map.put(key, newValue);
      return newValue;
    } finally {
      writeLock.unlock();
    }
  }

  protected abstract V create(K key);

  @Override public final String toString() {
    readLock.lock();
    try {
      return map.toString();
    } finally {
      readLock.unlock();
    }
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE
=======
import dagger.internal.BindingsGroup;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE
=======
import dagger.internal.Modules;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE
=======
import dagger.internal.SetBinding;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE
import dagger.internal.UniqueMap;
=======
import java.util.ArrayList;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE
=======
import java.util.List;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE

import static dagger.internal.Modules.getAllModuleAdapters;
=======
import java.util.Map.Entry;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE
=======
  // TODO(cgruber): Move this internal implementation of ObjectGraph into the internal package.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE
=======
    private final Loader plugin;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE
    private final Loader plugin;
=======
    private final List<SetBinding<?>> setBindings;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE
        Map<String, Class<?>> injectableTypes) {
      if (linker == null) throw new NullPointerException("linker");
      if (plugin == null) throw new NullPointerException("plugin");
      if (staticInjections == null) throw new NullPointerException("staticInjections");
      if (injectableTypes == null) throw new NullPointerException("injectableTypes");
=======
        Map<String, Class<?>> injectableTypes,
        List<SetBinding<?>> setBindings) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE
      this.linker = linker;
      this.plugin = plugin;
      this.staticInjections = staticInjections;
      this.injectableTypes = injectableTypes;
=======
      this.linker = checkNotNull(linker, "linker");
      this.plugin = checkNotNull(plugin, "plugin");
      this.staticInjections = checkNotNull(staticInjections, "staticInjections");
      this.injectableTypes = checkNotNull(injectableTypes, "injectableTypes");
      this.setBindings = checkNotNull(setBindings, "setBindings");
    }

    private static <T> T checkNotNull(T object, String label) {
      if (object == null) throw new NullPointerException(label);
      return object;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE

      // Extract bindings in the 'base' and 'overrides' set. Within each set no
      // duplicates are permitted.
      Map<String, Binding<?>> baseBindings = new UniqueMap<String, Binding<?>>();
      Map<String, Binding<?>> overrideBindings = new UniqueMap<String, Binding<?>>();
      for (ModuleAdapter<?> moduleAdapter : getAllModuleAdapters(plugin, modules).values()) {
        for (String key : moduleAdapter.injectableTypes) {
          injectableTypes.put(key, moduleAdapter.getModule().getClass());
=======
      StandardBindings baseBindings =
          (base == null) ? new StandardBindings() : new StandardBindings(base.setBindings);
      BindingsGroup overrideBindings = new OverridesBindings();

      Map<ModuleAdapter<?>, Object> loadedModules = Modules.loadModules(plugin, modules);
      for (Entry<ModuleAdapter<?>, Object> loadedModule : loadedModules.entrySet()) {
        ModuleAdapter<Object> moduleAdapter = (ModuleAdapter<Object>) loadedModule.getKey();
        for (int i = 0; i < moduleAdapter.injectableTypes.length; i++) {
          injectableTypes.put(moduleAdapter.injectableTypes[i], moduleAdapter.moduleClass);
        }
        for (int i = 0; i < moduleAdapter.staticInjections.length; i++) {
          staticInjections.put(moduleAdapter.staticInjections[i], null);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE
        for (Class<?> c : moduleAdapter.staticInjections) {
          staticInjections.put(c, null);
=======
        try {
          BindingsGroup addTo = moduleAdapter.overrides ? overrideBindings : baseBindings;
          moduleAdapter.getBindings(addTo, loadedModule.getValue());
        } catch (IllegalArgumentException e) {
          throw new IllegalArgumentException(
              moduleAdapter.moduleClass.getSimpleName() + ": " + e.getMessage(), e);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE
        Map<String, Binding<?>> addTo = moduleAdapter.overrides ? overrideBindings : baseBindings;
        moduleAdapter.getBindings(addTo);
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE
      Linker linker = new Linker((base != null) ? base.linker : null, plugin,
          new ThrowingErrorHandler());
=======
      Linker linker =
          new Linker((base != null) ? base.linker : null, plugin, new ThrowingErrorHandler());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE
      return new DaggerObjectGraph(base, linker, plugin, staticInjections, injectableTypes);
=======
      return new DaggerObjectGraph(
          base, linker, plugin, staticInjections, injectableTypes, baseBindings.setBindings);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE
=======
      Map<String, Binding<?>> bindings = linker.fullyLinkedBindings();
      if (bindings != null) {
        return bindings;
      }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE
=======
        if ((bindings = linker.fullyLinkedBindings()) != null) {
          return bindings;
        }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE
        return linker.linkAll();
=======
        return linker.linkAll(); // Linker.linkAll() implicitly does Linker.linkRequested().
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE
=======


  /**
   * A BindingsGroup which fails when existing values are clobbered and sets aside
   * {@link SetBinding}.
   */
  private static final class StandardBindings extends BindingsGroup {
    private final List<SetBinding<?>> setBindings;

    public StandardBindings() {
      setBindings = new ArrayList<SetBinding<?>>();
    }

    public StandardBindings(List<SetBinding<?>> baseSetBindings) {
      setBindings = new ArrayList<SetBinding<?>>(baseSetBindings.size());
      for (SetBinding<?> sb : baseSetBindings) {
        @SuppressWarnings({ "rawtypes", "unchecked" })
        SetBinding<?> child = new SetBinding(sb);
        setBindings.add(child);
        put(child.provideKey, child);
      }
    }

    @Override public Binding<?> contributeSetBinding(String key, SetBinding<?> value) {
      setBindings.add(value);
      return super.put(key, value);
    }
  }

  /**
   * A BindingsGroup which throws an {@link IllegalArgumentException} when a
   * {@link SetBinding} is contributed, since overrides modules cannot contribute such
   * bindings.
   */
  private static final class OverridesBindings extends BindingsGroup {
    OverridesBindings() { }

    @Override public Binding<?> contributeSetBinding(String key, SetBinding<?> value) {
      throw new IllegalArgumentException("Module overrides cannot contribute set bindings.");
    }
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/internal/TestingModuleAdapter.java;<<<<<<< MINE
import java.util.Map;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/internal/TestingModuleAdapter.java;<<<<<<< MINE
  final Class<?> moduleClass;

  public TestingModuleAdapter(Class<?> moduleClass, Module annotation) {
=======
  public TestingModuleAdapter(Class<M> moduleClass, Module annotation) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/internal/TestingModuleAdapter.java;<<<<<<< MINE
=======
        moduleClass,
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/internal/TestingModuleAdapter.java;<<<<<<< MINE
    this.moduleClass = moduleClass;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/internal/TestingModuleAdapter.java;<<<<<<< MINE
  @Override public void getBindings(Map<String, Binding<?>> bindings) {
=======
  @Override public void getBindings(BindingsGroup bindings, M module) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/internal/TestingModuleAdapter.java;<<<<<<< MINE
              handleBindings(bindings, method, key, library);
=======
              handleBindings(bindings, module, method, key, library);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/internal/TestingModuleAdapter.java;<<<<<<< MINE
              handleSetBindings(bindings, method, setKey, key, library);
=======
              handleSetBindings(bindings, module, method, setKey, key, library);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/internal/TestingModuleAdapter.java;<<<<<<< MINE
              handleSetBindings(bindings, method, key, key, library);
=======
              handleSetBindings(bindings, module, method, key, key, library);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/internal/TestingModuleAdapter.java;<<<<<<< MINE
  private void handleBindings(Map<String, Binding<?>> bindings, Method method, String key,
=======
  private void handleBindings(BindingsGroup bindings, M module, Method method, String key,
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/internal/TestingModuleAdapter.java;<<<<<<< MINE
    bindings.put(key, new ProviderMethodBinding<M>(method, key, module, library));
=======
    bindings.contributeProvidesBinding(key,
        new ReflectiveProvidesBinding<M>(method, key, moduleClass.getName(), module, library));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/internal/TestingModuleAdapter.java;<<<<<<< MINE
  private void handleSetBindings(Map<String, Binding<?>> bindings, Method method, String setKey,
      String providerKey, boolean library) {
    SetBinding.<M>add(bindings, setKey, new ProviderMethodBinding<M>(method, providerKey, module, library));
=======
  private void handleSetBindings(BindingsGroup bindings, M module, Method method,
      String setKey, String providerKey, boolean library) {
    SetBinding.<M>add(bindings, setKey,
        new ReflectiveProvidesBinding<M>(
            method, providerKey, moduleClass.getName(), module, library));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/internal/TestingModuleAdapter.java;<<<<<<< MINE
=======
  @Override public String toString() {
    return "TestingModuleAdapter[" + this.moduleClass.getName() + "]";
  }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/internal/TestingModuleAdapter.java;<<<<<<< MINE
  public static <M> ModuleAdapter<M> create(Class<? extends M> moduleClass) {
=======
  public static <M> ModuleAdapter<M> create(Class<M> moduleClass) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/internal/TestingModuleAdapter.java;<<<<<<< MINE
  private final class ProviderMethodBinding<T> extends Binding<T> {
=======
  private static final class ReflectiveProvidesBinding<T> extends ProvidesBinding<T> {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/internal/TestingModuleAdapter.java;<<<<<<< MINE
    public ProviderMethodBinding(Method method, String key, Object instance, boolean library) {
      super(key, null, method.isAnnotationPresent(Singleton.class),
          moduleClass.getName() + "." + method.getName() + "()");
=======
    public ReflectiveProvidesBinding(Method method, String key, String moduleClass,
        Object instance, boolean library) {
      super(key, method.isAnnotationPresent(Singleton.class), moduleClass, method.getName());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/internal/TestingModuleAdapter.java;<<<<<<< MINE

    @Override public String toString() {
      return method.toString();
    }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/internal/TestingLoader.java;<<<<<<< MINE
  @Override public <T> ModuleAdapter<T> getModuleAdapter(Class<? extends T> type, T instance) {
=======
  @Override public <T> ModuleAdapter<T> getModuleAdapter(Class<T> type) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/internal/TestingLoader.java;<<<<<<< MINE
    adapter.module = (instance != null) ? instance : adapter.newModule();
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/SetBindingTest.java;<<<<<<< MINE
=======
import static org.junit.Assert.fail;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/SetBindingTest.java;<<<<<<< MINE
=======
  @Test public void duplicateValuesContributed() {
    class TestEntryPoint {
      @Inject Set<String> strings;
    }

    @Module(injects = TestEntryPoint.class)
    class TestModule {
      @Provides(type=SET) String provideString1() { return "a"; }
      @Provides(type=SET) String provideString2() { return "a"; }
      @Provides(type=SET) String provideString3() { return "b"; }
    }

    TestEntryPoint ep = injectWithModule(new TestEntryPoint(), new TestModule());
    assertThat(ep.strings).containsOnly("a", "b");
  }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/SetBindingTest.java;<<<<<<< MINE
=======
  @Test public void validateLibraryModules() {
    class TestEntryPoint {}

    @Module(library = true)
    class SetModule {
      @Provides(type = SET)
      public String provideString() {
        return "";
      }
    }

    @Module(injects = TestEntryPoint.class, includes = SetModule.class)
    class TestModule {}

    ObjectGraph graph = ObjectGraph.createWith(new TestingLoader(),
        new TestModule(), new SetModule());
    graph.validate();
  }

  @Test public void validateLibraryModules_nonLibraryContributors() {
    class TestEntryPoint {}

    @Module(library = true)
    class SetModule1 {
      @Provides(type = SET)
      public String provideString() {
        return "a";
      }
    }

    @Module
    class SetModule2 {
      @Provides(type = SET)
      public String provideString() {
        return "b";
      }
    }

    @Module(injects = TestEntryPoint.class, includes = { SetModule1.class, SetModule2.class })
    class TestModule {}

    ObjectGraph graph = ObjectGraph.createWith(new TestingLoader(),
        new TestModule(), new SetModule1(), new SetModule2());
    try {
      graph.validate();
      fail();
    } catch (IllegalStateException expected) {}
  }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/ExtensionWithSetBindingsTest.java;<<<<<<< MINE
=======
/*
 * Copyright (C) 2013 Google Inc.
 * Copyright (C) 2013 Square Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dagger;

import dagger.internal.TestingLoader;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;
import javax.inject.Inject;
import javax.inject.Singleton;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static dagger.Provides.Type.SET;
import static org.fest.assertions.Assertions.assertThat;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

@RunWith(JUnit4.class)
public final class ExtensionWithSetBindingsTest {
  private static final AtomicInteger counter = new AtomicInteger(0);

  @Singleton
  static class RealSingleton {
    @Inject Set<Integer> ints;
  }

  @Singleton
  static class Main {
    @Inject Set<Integer> ints;
  }

  @Module(injects = RealSingleton.class)
  static class RootModule {
    @Provides(type=SET) @Singleton Integer provideA() { return counter.getAndIncrement(); }
    @Provides(type=SET) @Singleton Integer provideB() { return counter.getAndIncrement(); }
  }

  @Module(addsTo = RootModule.class, injects = Main.class )
  static class ExtensionModule {
    @Provides(type=SET) @Singleton Integer provideC() { return counter.getAndIncrement(); }
    @Provides(type=SET) @Singleton Integer provideD() { return counter.getAndIncrement(); }
  }

  @Module
  static class EmptyModule {
  }

  @Module(library = true)
  static class DuplicateModule {
    @Provides @Singleton String provideFoo() { return "foo"; }
    @Provides @Singleton String provideBar() { return "bar"; }
  }

  @Test public void basicInjectionWithExtension() {
    ObjectGraph root = ObjectGraph.createWith(new TestingLoader(), new RootModule());
    RealSingleton rs = root.get(RealSingleton.class);
    assertThat(rs.ints).containsOnly(0, 1);

    ObjectGraph extension = root.plus(new ExtensionModule());
    Main main = extension.get(Main.class);
    assertThat(main.ints).containsOnly(0, 1, 2, 3);

    // Second time around.
    ObjectGraph extension2 = root.plus(new ExtensionModule());
    Main main2 = extension2.get(Main.class);
    assertThat(main2.ints).containsOnly(0, 1, 4, 5);
  }

  @Module(includes = ExtensionModule.class, overrides = true)
  static class TestModule {
    @Provides(type=SET) @Singleton Integer provide9999() { return 9999; }
  }

  @Test public void basicInjectionWithExtensionAndOverrides() {
    try {
      ObjectGraph.createWith(new TestingLoader(), new RootModule()).plus(new TestModule());
      fail("Should throw exception.");
    } catch (IllegalArgumentException e) {
      assertEquals("TestModule: Module overrides cannot contribute set bindings.", e.getMessage());
    }
  }

  @Test public void duplicateBindingsInSecondaryModule() {
    try {
      ObjectGraph.createWith(new TestingLoader(), new EmptyModule(), new DuplicateModule());
      fail("Should throw exception.");
    } catch (IllegalArgumentException e) {
      assertTrue(e.getMessage().startsWith("DuplicateModule: Duplicate"));
    }
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/InjectionTest.java;<<<<<<< MINE
      @Inject AbstractList<?> abstractList;
=======
      @Inject AbstractList abstractList;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/InjectionTest.java;<<<<<<< MINE
  @Module(complete=false, injects =C.class)
=======
  @Module(complete = false, injects = C.class)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/InjectionTest.java;<<<<<<< MINE
  @Module(addsTo=RootModule.class, injects =SingletonLinkedFromExtension.class)
=======
  @Module(addsTo = RootModule.class, injects = SingletonLinkedFromExtension.class)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
=======
import dagger.Lazy;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
=======
import dagger.internal.BindingsGroup;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
=======
import dagger.internal.ProvidesBinding;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
=======
import dagger.internal.codegen.Util.CodeGenerationIncompleteException;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
=======
import java.io.StringWriter;
import java.io.Writer;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
=======
import java.util.EnumSet;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
=======
import javax.lang.model.type.TypeKind;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
import static dagger.internal.codegen.AdapterJavadocs.binderTypeDocs;
import static dagger.internal.codegen.TypeUtils.adapterName;
import static dagger.internal.codegen.TypeUtils.getAnnotation;
import static dagger.internal.codegen.TypeUtils.getNoArgsConstructor;
import static dagger.internal.codegen.TypeUtils.getPackage;
import static dagger.internal.codegen.TypeUtils.isCallableConstructor;
import static dagger.internal.codegen.TypeUtils.isInterface;
import static dagger.internal.codegen.TypeUtils.typeToString;
=======
import static dagger.internal.codegen.AdapterJavadocs.bindingTypeDocs;
import static dagger.internal.codegen.Util.adapterName;
import static dagger.internal.codegen.Util.elementToString;
import static dagger.internal.codegen.Util.getAnnotation;
import static dagger.internal.codegen.Util.getNoArgsConstructor;
import static dagger.internal.codegen.Util.getPackage;
import static dagger.internal.codegen.Util.isCallableConstructor;
import static dagger.internal.codegen.Util.isInterface;
import static dagger.internal.codegen.Util.typeToString;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
import static java.lang.reflect.Modifier.FINAL;
import static java.lang.reflect.Modifier.PRIVATE;
import static java.lang.reflect.Modifier.PUBLIC;
import static java.lang.reflect.Modifier.STATIC;
=======
import static javax.lang.model.element.Modifier.ABSTRACT;
import static javax.lang.model.element.Modifier.FINAL;
import static javax.lang.model.element.Modifier.PRIVATE;
import static javax.lang.model.element.Modifier.PUBLIC;
import static javax.lang.model.element.Modifier.STATIC;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
=======
  private static final String BINDINGS_MAP = JavaWriter.type(BindingsGroup.class);
  private static final List<String> INVALID_RETURN_TYPES =
      Arrays.asList(Provider.class.getCanonicalName(), Lazy.class.getCanonicalName());

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
  private static final String BINDINGS_MAP = JavaWriter.type(
      Map.class, String.class.getCanonicalName(), Binding.class.getCanonicalName() + "<?>");
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
=======

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
        // IllegalStateException.
=======
        // CodeGenerationIncompleteException.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
        try {
          writeModuleAdapter(type, parsedAnnotation, providesTypes);
        } catch (IOException e) {
          error("Code gen failed: " + e, type);
        }
        i.remove();
      } catch (IllegalStateException e) {
        // a dependent type was not defined, we'll catch it on another pass
=======

        //TODO(cgruber): Figure out an initial sizing of the StringWriter.
        StringWriter stringWriter = new StringWriter();
        String adapterName = adapterName(type, MODULE_ADAPTER_SUFFIX);
        generateModuleAdapter(stringWriter, adapterName, type, parsedAnnotation, providesTypes);
        JavaFileObject sourceFile = processingEnv.getFiler().createSourceFile(adapterName, type);
        Writer sourceWriter = sourceFile.openWriter();
        sourceWriter.append(stringWriter.getBuffer());
        sourceWriter.close();
      } catch (CodeGenerationIncompleteException e) {
        continue; // A dependent type was not defined, we'll try to catch it on another pass.
      } catch (IOException e) {
        error("Code gen failed: " + e, type);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
=======
      i.remove();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
    for (Element providerMethod : providesMethods(env)) {
=======

    provides:
    for (Element providerMethod : findProvidesMethods(env)) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
          error("Unexpected @Provides on " + providerMethod, providerMethod);
=======
          error("Unexpected @Provides on " + elementToString(providerMethod), providerMethod);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
      if (typeModifiers.contains(Modifier.PRIVATE)
          || typeModifiers.contains(Modifier.ABSTRACT)) {
=======
      if (typeModifiers.contains(PRIVATE)
          || typeModifiers.contains(ABSTRACT)) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
      if (methodModifiers.contains(Modifier.PRIVATE)
          || methodModifiers.contains(Modifier.ABSTRACT)
          || methodModifiers.contains(Modifier.STATIC)) {
=======
      if (methodModifiers.contains(PRIVATE)
          || methodModifiers.contains(ABSTRACT)
          || methodModifiers.contains(STATIC)) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
      for (String invalidTypeName : Arrays.asList("javax.inject.Provider", "dagger.Lazy")) {
        TypeElement invalidTypeElement = elementUtils.getTypeElement(invalidTypeName);
        if (invalidTypeElement != null) {
          if (types.isSameType(returnType, types.erasure(invalidTypeElement.asType()))) {
=======
      if (!returnType.getKind().equals(TypeKind.ERROR)) {
        // Validate if we have a type to validate (a type yet to be generated by other
        // processors is not "invalid" in this way, so ignore).
        for (String invalidTypeName : INVALID_RETURN_TYPES) {
          TypeElement invalidTypeElement = elementUtils.getTypeElement(invalidTypeName);
          if (invalidTypeElement != null && types.isSameType(returnType,
              types.erasure(invalidTypeElement.asType()))) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
            continue; // skip to next provides method.
=======
            continue provides; // Skip to next provides method.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
        error("Modules must be classes: " + module, module);
=======
        error("Modules must be classes: " + elementToString(module), module);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
        error("Modules must not extend from other classes: " + module, module);
=======
        error("Modules must not extend from other classes: " + elementToString(module), module);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
  private Set<? extends Element> providesMethods(RoundEnvironment env) {
=======
  private Set<? extends Element> findProvidesMethods(RoundEnvironment env) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
  private void writeModuleAdapter(TypeElement type, Map<String, Object> module,
      List<ExecutableElement> providerMethods) throws IOException {
=======
  private void generateModuleAdapter(Writer ioWriter, String adapterName, TypeElement type,
      Map<String, Object> module, List<ExecutableElement> providerMethods) throws IOException {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
    String adapterName = adapterName(type, MODULE_ADAPTER_SUFFIX);
    JavaFileObject sourceFile = processingEnv.getFiler()
        .createSourceFile(adapterName, type);
    JavaWriter writer = new JavaWriter(sourceFile.openWriter());
=======
    JavaWriter writer = new JavaWriter(ioWriter);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
    writer.emitEmptyLine();
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
        getImports(multibindings, !providerMethods.isEmpty(), providerMethodDependencies));
=======
        findImports(multibindings, !providerMethods.isEmpty(), providerMethodDependencies));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
    writer.beginType(adapterName, "class", PUBLIC | FINAL,
=======
    writer.beginType(adapterName, "class", EnumSet.of(PUBLIC, FINAL),
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
    writer.emitField("String[]", "INJECTS", PRIVATE | STATIC | FINAL,
=======
    writer.emitField("String[]", "INJECTS", EnumSet.of(PRIVATE, STATIC, FINAL),
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
    writer.emitField("Class<?>[]", "STATIC_INJECTIONS", PRIVATE | STATIC | FINAL,
=======
    writer.emitField("Class<?>[]", "STATIC_INJECTIONS", EnumSet.of(PRIVATE, STATIC, FINAL),
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
    writer.emitField("Class<?>[]", "INCLUDES", PRIVATE | STATIC | FINAL, includesField.toString());
=======
    writer.emitField(
        "Class<?>[]", "INCLUDES", EnumSet.of(PRIVATE, STATIC, FINAL), includesField.toString());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
    writer.beginMethod(null, adapterName, PUBLIC);
    writer.emitStatement("super(INJECTS, STATIC_INJECTIONS, %s /*overrides*/, "
        + "INCLUDES, %s /*complete*/, %s /*library*/)", overrides, complete, library);
=======
    writer.beginMethod(null, adapterName, EnumSet.of(PUBLIC));
    writer.emitStatement("super(%s.class, INJECTS, STATIC_INJECTIONS, %s /*overrides*/, "
        + "INCLUDES, %s /*complete*/, %s /*library*/)", typeName,  overrides, complete, library);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
      writer.beginMethod(typeName, "newModule", PUBLIC);
=======
      writer.beginMethod(typeName, "newModule", EnumSet.of(PUBLIC));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
      writer.beginMethod("void", "getBindings", PUBLIC, BINDINGS_MAP, "map");
=======
      writer.beginMethod("void", "getBindings", EnumSet.of(PUBLIC), BINDINGS_MAP, "bindings",
          typeName, "module");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
            writer.emitStatement("map.put(%s, new %s(module))", JavaWriter.stringLiteral(key),
=======
            writer.emitStatement("bindings.contributeProvidesBinding(%s, new %s(module))",
                JavaWriter.stringLiteral(key),
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
            writer.emitStatement("SetBinding.add(map, %s, new %s(module))",
=======
            writer.emitStatement("SetBinding.add(bindings, %s, new %s(module))",
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
            writer.emitStatement("SetBinding.add(map, %s, new %s(module))",
=======
            writer.emitStatement("SetBinding.add(bindings, %s, new %s(module))",
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
      writeProvidesAdapter(writer, providerMethod, methodToClassName, methodNameToNextId,
          library);
=======
      generateProvidesAdapter(
          writer, providerMethod, methodToClassName, methodNameToNextId, library);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
  private Set<String> getImports(boolean multibindings, boolean providers, boolean dependencies) {
=======
  private Set<String> findImports(boolean multibindings, boolean providers, boolean dependencies) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
      imports.add(Binding.class.getCanonicalName());
      imports.add(Map.class.getCanonicalName());
=======
      imports.add(BindingsGroup.class.getCanonicalName());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
=======
      imports.add(ProvidesBinding.class.getCanonicalName());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
=======
      imports.add(Binding.class.getCanonicalName());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
  private void writeProvidesAdapter(JavaWriter writer, ExecutableElement providerMethod,
=======
  private void generateProvidesAdapter(JavaWriter writer, ExecutableElement providerMethod,
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
    String className = bindingClassName(providerMethod, methodToClassName, methodNameToNextId);
=======
    String className =
        bindingClassName(providerMethod, methodToClassName, methodNameToNextId);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
    writer.emitJavadoc(binderTypeDocs(returnType, false, false, dependent));
    writer.beginType(className, "class", PUBLIC | FINAL | STATIC,
        JavaWriter.type(Binding.class, returnType),
=======
    writer.emitJavadoc(bindingTypeDocs(returnType, false, false, dependent));
    writer.beginType(className, "class", EnumSet.of(PUBLIC, STATIC, FINAL),
        JavaWriter.type(ProvidesBinding.class, returnType),
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
    writer.emitField(moduleType, "module", PRIVATE | FINAL);
=======
    writer.emitField(moduleType, "module", EnumSet.of(PRIVATE, FINAL));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
          parameterName(parameter), PRIVATE);
=======
          parameterName(parameter), EnumSet.of(PRIVATE));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
    writer.beginMethod(null, className, PUBLIC, moduleType, "module");
=======
    writer.beginMethod(null, className, EnumSet.of(PUBLIC), moduleType, "module");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
    String membersKey = null;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
        key, membersKey, (singleton ? "IS_SINGLETON" : "NOT_SINGLETON"),
        JavaWriter.stringLiteral(moduleType + "." + methodName + "()"));
=======
        key, (singleton ? "IS_SINGLETON" : "NOT_SINGLETON"),
        JavaWriter.stringLiteral(moduleType),
        JavaWriter.stringLiteral(methodName));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
      writer.beginMethod("void", "attach", PUBLIC, Linker.class.getCanonicalName(), "linker");
=======
      writer.beginMethod(
          "void", "attach", EnumSet.of(PUBLIC), Linker.class.getCanonicalName(), "linker");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
      writer.beginMethod("void", "getDependencies", PUBLIC, setOfBindings, "getBindings",
          setOfBindings, "injectMembersBindings");
=======
      writer.beginMethod("void", "getDependencies", EnumSet.of(PUBLIC), setOfBindings,
          "getBindings", setOfBindings, "injectMembersBindings");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
        writer.emitStatement("getBindings.add(%s)", parameter.getSimpleName().toString());
=======
        writer.emitStatement("getBindings.add(%s)", parameterName(parameter));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
    writer.beginMethod(returnType, "get", PUBLIC);
=======
    writer.beginMethod(returnType, "get", EnumSet.of(PUBLIC));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
      args.append(String.format("%s.get()", parameter.getSimpleName().toString()));
=======
      args.append(String.format("%s.get()", parameterName(parameter)));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisInjectBinding.java;<<<<<<< MINE
import static dagger.internal.codegen.TypeUtils.getApplicationSupertype;
=======
import static dagger.internal.codegen.Util.getApplicationSupertype;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisStaticInjection.java;<<<<<<< MINE
import static dagger.internal.codegen.TypeUtils.isStatic;
=======
import static dagger.internal.codegen.Util.isStatic;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
=======
 * Copyright (C) 2013 Google, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
=======
import java.util.EnumSet;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
import javax.lang.model.element.Modifier;
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
import static dagger.internal.Keys.isPlatformType;
import static dagger.internal.codegen.AdapterJavadocs.bindingTypeDocs;
import static dagger.internal.codegen.Util.adapterName;
import static dagger.internal.codegen.Util.elementToString;
import static dagger.internal.codegen.Util.getNoArgsConstructor;
import static dagger.internal.codegen.Util.getPackage;
import static dagger.internal.codegen.Util.isCallableConstructor;
import static dagger.internal.codegen.Util.rawTypeToString;
import static dagger.internal.codegen.Util.typeToString;
=======
import static dagger.internal.codegen.AdapterJavadocs.bindingTypeDocs;
import static dagger.internal.codegen.Util.adapterName;
import static dagger.internal.codegen.Util.elementToString;
import static dagger.internal.codegen.Util.getApplicationSupertype;
import static dagger.internal.codegen.Util.getNoArgsConstructor;
import static dagger.internal.codegen.Util.getPackage;
import static dagger.internal.codegen.Util.isCallableConstructor;
import static dagger.internal.codegen.Util.rawTypeToString;
import static dagger.internal.codegen.Util.typeToString;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
import static java.lang.reflect.Modifier.FINAL;
import static java.lang.reflect.Modifier.PRIVATE;
import static java.lang.reflect.Modifier.PUBLIC;
=======
import static javax.lang.model.element.Modifier.ABSTRACT;
import static javax.lang.model.element.Modifier.FINAL;
import static javax.lang.model.element.Modifier.PRIVATE;
import static javax.lang.model.element.Modifier.PUBLIC;
import static javax.lang.model.element.Modifier.STATIC;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
    remainingTypeNames.addAll(getInjectedClassNames(env));
=======
    remainingTypeNames.addAll(findInjectedClassNames(env));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
      InjectedClass injectedClass = getInjectedClass(i.next());
=======
      InjectedClass injectedClass = createInjectedClass(i.next());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
          writeInjectionsForClass(injectedClass);
=======
          generateInjectionsForClass(injectedClass);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
    return true;
=======
    return false;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
  private void writeInjectionsForClass(InjectedClass injectedClass) throws IOException {
=======
  private void generateInjectionsForClass(InjectedClass injectedClass) throws IOException {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
      writeInjectAdapter(injectedClass.type, injectedClass.constructor, injectedClass.fields);
=======
      generateInjectAdapter(injectedClass.type, injectedClass.constructor, injectedClass.fields);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
      writeStaticInjection(injectedClass.type, injectedClass.staticFields);
=======
      generateStaticInjection(injectedClass.type, injectedClass.staticFields);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
  private Set<String> getInjectedClassNames(RoundEnvironment env) {
=======
  private Set<String> findInjectedClassNames(RoundEnvironment env) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
      error("@Inject is not valid on a class: " + injectable, injectable);
=======
      error("@Inject is not valid on a class: " + elementToString(injectable), injectable);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
      error("Method injection is not supported: " + elementToString(injectable), injectable);
=======
      error("Method injection is not supported: " + elementToString(injectable), injectable);
      return false;
    }

    if (injectable.getKind() == ElementKind.FIELD
        && injectable.getModifiers().contains(FINAL)) {
      error("Can't inject a final field: " + elementToString(injectable), injectable);
      return false;
    }

    if (injectable.getKind() == ElementKind.FIELD
        && injectable.getModifiers().contains(PRIVATE)) {
      error("Can't inject a private field: " + elementToString(injectable), injectable);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE

    if (injectable.getKind() == ElementKind.FIELD
        && injectable.getModifiers().contains(FINAL)) {
      error("Can't inject a final field: " + elementToString(injectable), injectable);
      return false;
    }

    if (injectable.getKind() == ElementKind.FIELD
        && injectable.getModifiers().contains(PRIVATE)) {
      error("Can't inject a private field: " + elementToString(injectable), injectable);
      return false;
    }

    if (injectable.getKind() == ElementKind.CONSTRUCTOR
        && injectable.getModifiers().contains(PRIVATE)) {
      error("Can't inject a private constructor: " + elementToString(injectable), injectable);
=======

    if (injectable.getKind() == ElementKind.CONSTRUCTOR
        && injectable.getModifiers().contains(PRIVATE)) {
      error("Can't inject a private constructor: " + elementToString(injectable), injectable);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
    boolean isStatic = injectableType.getModifiers().contains(Modifier.STATIC);
=======
    boolean isStatic = injectableType.getModifiers().contains(STATIC);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
      error("Can't inject a non-static inner class: " + injectableType, injectableType);
=======
      error("Can't inject a non-static inner class: " + elementToString(injectable),
          injectableType);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
  private InjectedClass getInjectedClass(String injectedClassName) {
=======
  private InjectedClass createInjectedClass(String injectedClassName) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
    boolean isAbstract = type.getModifiers().contains(Modifier.ABSTRACT);
=======
    boolean isAbstract = type.getModifiers().contains(ABSTRACT);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
          if (member.getModifiers().contains(Modifier.STATIC)) {
=======
          if (member.getModifiers().contains(STATIC)) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
          error("Cannot inject " + member, member);
=======
          error("Cannot inject " + elementToString(member), member);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE

  private void error(String msg, Element element) {
    processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, msg, element);
  }

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
  private void writeInjectAdapter(TypeElement type, ExecutableElement constructor,
=======
  private void generateInjectAdapter(TypeElement type, ExecutableElement constructor,
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
    String strippedTypeName =
        strippedTypeName(type.getQualifiedName().toString(), packageName);
    TypeMirror supertype = getNextMemberInjectedAncestor(type);
=======
    String strippedTypeName =
        strippedTypeName(type.getQualifiedName().toString(), packageName);
    TypeMirror supertype = getApplicationSupertype(type);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
    boolean isAbstract = type.getModifiers().contains(Modifier.ABSTRACT);
=======
    boolean isAbstract = type.getModifiers().contains(ABSTRACT);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
=======
    writer.emitImports(findImports(dependent, injectMembers, constructor != null));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
    writer.emitImports(getImports(dependent, injectMembers, constructor != null));

    writer.emitEmptyLine();
    writer.emitJavadoc(binderTypeDocs(strippedTypeName, isAbstract, injectMembers, dependent));
    writer.beginType(adapterName, "class", PUBLIC | FINAL,
=======
    writer.emitJavadoc(bindingTypeDocs(strippedTypeName, isAbstract, injectMembers, dependent));
    writer.beginType(adapterName, "class", EnumSet.of(PUBLIC, FINAL),
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
        interfaces(strippedTypeName, injectMembers, constructor != null));

=======
        implementedInterfaces(strippedTypeName, injectMembers, constructor != null));
    writeMemberBindingsFields(writer, fields, disambiguateFields);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
      for (VariableElement parameter : constructor.getParameters()) {
        writer.emitField(JavaWriter.type(Binding.class,
            typeToString(parameter.asType())),
            parameterName(disambiguateFields, parameter), PRIVATE);
      }
    }
    for (Element field : fields) {
      writer.emitField(JavaWriter.type(Binding.class,
          typeToString(field.asType())),
          fieldName(disambiguateFields, field), PRIVATE);
    }
=======
      writeParameterBindingsFields(writer, constructor, disambiguateFields);
     }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
      writeSupertypeInjectorField(writer, type, supertype);
=======
      writeSupertypeInjectorField(writer, supertype);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
    writer.beginMethod(null, adapterName, PUBLIC);
    String key = (constructor != null)
        ? JavaWriter.stringLiteral(GeneratorKeys.get(type.asType()))
        : null;
    String membersKey = JavaWriter.stringLiteral(GeneratorKeys.rawMembersKey(type.asType()));
    boolean singleton = type.getAnnotation(Singleton.class) != null;
    writer.emitStatement("super(%s, %s, %s, %s.class)",
        key, membersKey, (singleton ? "IS_SINGLETON" : "NOT_SINGLETON"), strippedTypeName);
    writer.endMethod();
=======
    writeInjectAdapterConstructor(writer, constructor, type, strippedTypeName, adapterName);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
      writer.emitEmptyLine();
      writer.emitJavadoc(AdapterJavadocs.ATTACH_METHOD);
      writer.emitAnnotation(Override.class);
      writer.emitAnnotation(SuppressWarnings.class, JavaWriter.stringLiteral("unchecked"));
      writer.beginMethod("void", "attach", PUBLIC, Linker.class.getCanonicalName(), "linker");
      if (constructor != null) {
        for (VariableElement parameter : constructor.getParameters()) {
          writer.emitStatement(
              "%s = (%s) linker.requestBinding(%s, %s.class, getClass().getClassLoader())",
              parameterName(disambiguateFields, parameter),
              writer.compressType(JavaWriter.type(Binding.class, typeToString(parameter.asType()))),
              JavaWriter.stringLiteral(GeneratorKeys.get(parameter)),
              strippedTypeName);
        }
      }
      for (Element field : fields) {
        writer.emitStatement(
            "%s = (%s) linker.requestBinding(%s, %s.class, getClass().getClassLoader())",
            fieldName(disambiguateFields, field),
            writer.compressType(JavaWriter.type(Binding.class, typeToString(field.asType()))),
            JavaWriter.stringLiteral(GeneratorKeys.get((VariableElement) field)),
            strippedTypeName);
      }
      if (supertype != null) {
        writer.emitStatement(
            "%s = (%s) linker.requestBinding(%s, %s.class, getClass().getClassLoader()"
                + ", false, true)", // Yep.  This is a dumb line-length violation otherwise.
            "supertype",
            writer.compressType(JavaWriter.type(Binding.class, rawTypeToString(supertype, '.'))),
            JavaWriter.stringLiteral(GeneratorKeys.rawMembersKey(supertype)),
            strippedTypeName);
      }
      writer.endMethod();

      writer.emitEmptyLine();
      writer.emitJavadoc(AdapterJavadocs.GET_DEPENDENCIES_METHOD);
      writer.emitAnnotation(Override.class);
      String setOfBindings = JavaWriter.type(Set.class, "Binding<?>");
      writer.beginMethod("void", "getDependencies", PUBLIC, setOfBindings, "getBindings",
          setOfBindings, "injectMembersBindings");
      if (constructor != null) {
        for (Element parameter : constructor.getParameters()) {
          writer.emitStatement("getBindings.add(%s)", parameterName(disambiguateFields, parameter));
        }
      }
      for (Element field : fields) {
        writer.emitStatement("injectMembersBindings.add(%s)", fieldName(disambiguateFields, field));
      }
      if (supertype != null) {
        writer.emitStatement("injectMembersBindings.add(%s)", "supertype");
      }
      writer.endMethod();
=======
      writeAttachMethod(writer, constructor, fields, disambiguateFields, strippedTypeName,
          supertype, true);
      writeGetDependenciesMethod(writer, constructor, fields, disambiguateFields, supertype, true);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
      writer.emitEmptyLine();
      writer.emitJavadoc(AdapterJavadocs.GET_METHOD, strippedTypeName);
      writer.emitAnnotation(Override.class);
      writer.beginMethod(strippedTypeName, "get", PUBLIC);
      StringBuilder newInstance = new StringBuilder();
      newInstance.append(strippedTypeName).append(" result = new ");
      newInstance.append(strippedTypeName).append('(');
      boolean first = true;
      for (VariableElement parameter : constructor.getParameters()) {
        if (!first) newInstance.append(", ");
        else first = false;
        newInstance.append(parameterName(disambiguateFields, parameter)).append(".get()");
      }
      newInstance.append(')');
      writer.emitStatement(newInstance.toString());
      if (injectMembers) {
        writer.emitStatement("injectMembers(result)");
      }
      writer.emitStatement("return result");
      writer.endMethod();
=======
      writeGetMethod(writer, constructor, disambiguateFields, injectMembers, strippedTypeName);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
      writer.emitEmptyLine();
      writer.emitJavadoc(AdapterJavadocs.MEMBERS_INJECT_METHOD, strippedTypeName);
      writer.emitAnnotation(Override.class);
      writer.beginMethod("void", "injectMembers", PUBLIC, strippedTypeName, "object");
      for (Element field : fields) {
        writer.emitStatement("object.%s = %s.get()", field.getSimpleName(),
            fieldName(disambiguateFields, field));
      }
      if (supertype != null) {
        writer.emitStatement("supertype.injectMembers(object)");
      }
      writer.endMethod();
=======
      writeMembersInjectMethod(writer, fields, disambiguateFields, strippedTypeName, supertype);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
  private void generateParentBindings(TypeElement originChild, TypeElement ancestor)
      throws IOException {
    List<Element> ancestorFields = createInjectedClass(ancestor.toString()).fields;
    TypeMirror nextAncestor = getNextMemberInjectedAncestor(ancestor);
    TypeElement nextAncestorElement =
        (nextAncestor != null) ? (TypeElement) processingEnv.getTypeUtils().asElement(nextAncestor)
            : null;
    String ancestorPackageName = getPackage(ancestor).getQualifiedName().toString();
    String strippedAncestorType =
        strippedTypeName(ancestor.getQualifiedName().toString(), ancestorPackageName);
    String adapterName = parentAdapterName(originChild, ancestor);
    JavaFileObject sourceFile = processingEnv.getFiler().createSourceFile(adapterName, ancestor);
    JavaWriter writer = new JavaWriter(sourceFile.openWriter());
    writer.emitSingleLineComment(AdapterJavadocs.GENERATED_BY_DAGGER);
    writer.emitPackage(ancestorPackageName);
    writer.emitImports(MembersInjector.class.getCanonicalName(), Binding.class.getCanonicalName());
    writer.emitEmptyLine();
    writer.emitJavadoc(AdapterJavadocs.PARENT_ADAPTER_TYPE);
    writer.beginType(adapterName, "class", EnumSet.of(PUBLIC, FINAL), null,
        JavaWriter.type(MembersInjector.class, strippedAncestorType));
    writeMemberBindingsFields(writer, ancestorFields, false);
    if (nextAncestor != null) {
      writeSupertypeInjectorField(writer, originChild, nextAncestor); // next injectable ancestor
    }
    writer.emitEmptyLine();
    writeAttachMethod(writer, null, ancestorFields, false, strippedAncestorType, nextAncestor,
        false);
    writeGetDependenciesMethod(writer, null, ancestorFields, false, nextAncestor, false);
    writeMembersInjectMethod(writer, ancestorFields, false, strippedAncestorType, nextAncestor);
    writer.endType();
    writer.close();
    if (nextAncestor != null) {
      generateParentBindings(originChild, nextAncestorElement);
    }
  }

  /**
   * Returns the closest ancestor that has members injected or {@code null}
   * if the class has no ancestors with injected members.
   */
  private TypeMirror getNextMemberInjectedAncestor(TypeElement type) {
    TypeMirror nextAncestor = type.getSuperclass();
    TypeElement nextAncestorElement =
        (TypeElement) processingEnv.getTypeUtils().asElement(nextAncestor);
    if (isPlatformType(nextAncestor.toString())) {
      return null;
    }
    if (!createInjectedClass(nextAncestorElement.toString()).fields.isEmpty()) {
      return nextAncestor;
    }
    return getNextMemberInjectedAncestor(nextAncestorElement);
  }

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
  private void writeStaticInjection(TypeElement type, List<Element> fields) throws IOException {
=======
  private void generateStaticInjection(TypeElement type, List<Element> fields) throws IOException {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE

    writer.emitEmptyLine();
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
    writer.beginType(adapterName, "class", PUBLIC | FINAL, StaticInjection.class.getSimpleName());
=======
    writer.beginType(
        adapterName, "class", EnumSet.of(PUBLIC, FINAL), StaticInjection.class.getSimpleName());
    writeMemberBindingsFields(writer, fields, false);
    writer.emitEmptyLine();
    writeAttachMethod(writer, null, fields, false, typeName, null, true);
    writeStaticInjectMethod(writer, fields, typeName);
    writer.endType();
    writer.close();
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
=======
  private void writeMemberBindingsFields(
      JavaWriter writer, List<Element> fields, boolean disambiguateFields) throws IOException {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
          fieldName(disambiguateFields, field), EnumSet.of(PRIVATE));
    }
  }

  private void writeParameterBindingsFields(
      JavaWriter writer, ExecutableElement constructor, boolean disambiguateFields)
      throws IOException {
    for (VariableElement parameter : constructor.getParameters()) {
      writer.emitField(JavaWriter.type(Binding.class,
          typeToString(parameter.asType())),
          parameterName(disambiguateFields, parameter), EnumSet.of(PRIVATE));
=======
          fieldName(disambiguateFields, field), EnumSet.of(PRIVATE));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
  }

  private void writeSupertypeInjectorField(
      JavaWriter writer, TypeElement type, TypeMirror nextAncestor) throws IOException {
    TypeElement supertypeElement =
        ((TypeElement) processingEnv.getTypeUtils().asElement(nextAncestor));
    String adapterName = parentAdapterName(type, supertypeElement);
    writer.emitField(
        adapterName, "nextInjectableAncestor", EnumSet.of(PRIVATE), "new " + adapterName + "()");
  }
=======
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
  private void writeInjectAdapterConstructor(JavaWriter writer, ExecutableElement constructor,
      TypeElement type, String strippedTypeName, String adapterName) throws IOException {
    writer.beginMethod(null, adapterName, EnumSet.of(PUBLIC));
    String key = (constructor != null)
        ? JavaWriter.stringLiteral(GeneratorKeys.get(type.asType()))
        : null;
    String membersKey = JavaWriter.stringLiteral(GeneratorKeys.rawMembersKey(type.asType()));
    boolean singleton = type.getAnnotation(Singleton.class) != null;
    writer.emitStatement("super(%s, %s, %s, %s.class)",
        key, membersKey, (singleton ? "IS_SINGLETON" : "NOT_SINGLETON"), strippedTypeName);
    writer.endMethod();
=======
  private void writeParameterBindingsFields(
      JavaWriter writer, ExecutableElement constructor, boolean disambiguateFields)
      throws IOException {
    for (VariableElement parameter : constructor.getParameters()) {
      writer.emitField(JavaWriter.type(Binding.class,
          typeToString(parameter.asType())),
          parameterName(disambiguateFields, parameter), EnumSet.of(PRIVATE));
    }
  }

  private void writeSupertypeInjectorField(JavaWriter writer, TypeMirror supertype)
      throws IOException {
    writer.emitField(JavaWriter.type(Binding.class, rawTypeToString(supertype, '.')), "supertype",
        EnumSet.of(PRIVATE));
  }

  private void writeInjectAdapterConstructor(JavaWriter writer, ExecutableElement constructor,
      TypeElement type, String strippedTypeName, String adapterName) throws IOException {
    writer.beginMethod(null, adapterName, EnumSet.of(PUBLIC));
    String key = (constructor != null)
        ? JavaWriter.stringLiteral(GeneratorKeys.get(type.asType()))
        : null;
    String membersKey = JavaWriter.stringLiteral(GeneratorKeys.rawMembersKey(type.asType()));
    boolean singleton = type.getAnnotation(Singleton.class) != null;
    writer.emitStatement("super(%s, %s, %s, %s.class)",
        key, membersKey, (singleton ? "IS_SINGLETON" : "NOT_SINGLETON"), strippedTypeName);
    writer.endMethod();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
  }

  /**
   * Writes the {@code attach()} method for the generated adapters. The {@code supertype} provided
   * is the next injectable ancestor.
   */
  private void writeAttachMethod(JavaWriter writer, ExecutableElement constructor,
      List<Element> fields, boolean disambiguateFields, String typeName, TypeMirror supertype,
      boolean extendsBinding) throws IOException {
=======
  }

  private void writeAttachMethod(JavaWriter writer, ExecutableElement constructor,
      List<Element> fields, boolean disambiguateFields, String typeName, TypeMirror supertype,
      boolean extendsBinding) throws IOException {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
    if (extendsBinding) {
      writer.emitAnnotation(Override.class);
    }
    writer.emitAnnotation(SuppressWarnings.class, JavaWriter.stringLiteral("unchecked"));
    writer.beginMethod(
        "void", "attach", EnumSet.of(PUBLIC), Linker.class.getCanonicalName(), "linker");
    if (supertype != null) {
      writer.emitStatement("nextInjectableAncestor.attach(linker)");
    }
    if (constructor != null) {
      for (VariableElement parameter : constructor.getParameters()) {
        writer.emitStatement(
            "%s = (%s) linker.requestBinding(%s, %s.class, getClass().getClassLoader())",
            parameterName(disambiguateFields, parameter),
            writer.compressType(JavaWriter.type(Binding.class, typeToString(parameter.asType()))),
            JavaWriter.stringLiteral(GeneratorKeys.get(parameter)), typeName);
      }
    }
=======
    if (extendsBinding) {
      writer.emitAnnotation(Override.class);
    }
    writer.emitAnnotation(SuppressWarnings.class, JavaWriter.stringLiteral("unchecked"));
    writer.beginMethod(
        "void", "attach", EnumSet.of(PUBLIC), Linker.class.getCanonicalName(), "linker");
    if (constructor != null) {
      for (VariableElement parameter : constructor.getParameters()) {
        writer.emitStatement(
            "%s = (%s) linker.requestBinding(%s, %s.class, getClass().getClassLoader())",
            parameterName(disambiguateFields, parameter),
            writer.compressType(JavaWriter.type(Binding.class, typeToString(parameter.asType()))),
            JavaWriter.stringLiteral(GeneratorKeys.get(parameter)), typeName);
      }
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
          fieldName(false, field),
=======
          fieldName(disambiguateFields, field),
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
          JavaWriter.stringLiteral(GeneratorKeys.get((VariableElement) field)), typeName);
    }
    writer.endMethod();
    writer.emitEmptyLine();
  }

  /**
   * Writes the {@code getDependencies()} method for the generated adapters. The {@code supertype}
   * provided is the next injectable ancestor.
   */
  private void writeGetDependenciesMethod(JavaWriter writer, ExecutableElement constructor,
      List<Element> fields, boolean disambiguateFields, TypeMirror supertype,
      boolean extendsBinding) throws IOException {
    writer.emitJavadoc(AdapterJavadocs.GET_DEPENDENCIES_METHOD);
    if (extendsBinding) {
      writer.emitAnnotation(Override.class);
    }
    String setOfBindings = JavaWriter.type(Set.class, "Binding<?>");
    writer.beginMethod("void", "getDependencies", EnumSet.of(PUBLIC), setOfBindings, "getBindings",
        setOfBindings, "injectMembersBindings");
    if (constructor != null) {
      for (Element parameter : constructor.getParameters()) {
        writer.emitStatement("getBindings.add(%s)", parameterName(disambiguateFields, parameter));
      }
    }
    for (Element field : fields) {
      writer.emitStatement("injectMembersBindings.add(%s)", fieldName(disambiguateFields, field));
    }
    if (supertype != null) {
      writer.emitStatement("nextInjectableAncestor.getDependencies(null, injectMembersBindings)");
=======
          JavaWriter.stringLiteral(GeneratorKeys.get((VariableElement) field)), typeName);
    }
    if (supertype != null) {
      writer.emitStatement(
          "%s = (%s) linker.requestBinding(%s, %s.class, getClass().getClassLoader()"
              + ", false, true)",
          "supertype",
          writer.compressType(JavaWriter.type(Binding.class, rawTypeToString(supertype, '.'))),
          JavaWriter.stringLiteral(GeneratorKeys.rawMembersKey(supertype)), typeName);
    }
    writer.endMethod();
    writer.emitEmptyLine();
  }

  private void writeGetDependenciesMethod(JavaWriter writer, ExecutableElement constructor,
      List<Element> fields, boolean disambiguateFields, TypeMirror supertype,
      boolean extendsBinding) throws IOException {
    writer.emitJavadoc(AdapterJavadocs.GET_DEPENDENCIES_METHOD);
    if (extendsBinding) {
      writer.emitAnnotation(Override.class);
    }
    String setOfBindings = JavaWriter.type(Set.class, "Binding<?>");
    writer.beginMethod("void", "getDependencies", EnumSet.of(PUBLIC), setOfBindings, "getBindings",
        setOfBindings, "injectMembersBindings");
    if (constructor != null) {
      for (Element parameter : constructor.getParameters()) {
        writer.emitStatement("getBindings.add(%s)", parameterName(disambiguateFields, parameter));
      }
    }
    for (Element field : fields) {
      writer.emitStatement("injectMembersBindings.add(%s)", fieldName(disambiguateFields, field));
    }
    if (supertype != null) {
      writer.emitStatement("injectMembersBindings.add(%s)", "supertype");
    }
    writer.endMethod();
    writer.emitEmptyLine();
  }

  private void writeGetMethod(JavaWriter writer, ExecutableElement constructor,
      boolean disambiguateFields, boolean injectMembers, String strippedTypeName)
      throws IOException {
    writer.emitJavadoc(AdapterJavadocs.GET_METHOD, strippedTypeName);
    writer.emitAnnotation(Override.class);
    writer.beginMethod(strippedTypeName, "get", EnumSet.of(PUBLIC));
    StringBuilder newInstance = new StringBuilder();
    newInstance.append(strippedTypeName).append(" result = new ");
    newInstance.append(strippedTypeName).append('(');
    boolean first = true;
    for (VariableElement parameter : constructor.getParameters()) {
      if (!first) newInstance.append(", ");
      else first = false;
      newInstance.append(parameterName(disambiguateFields, parameter)).append(".get()");
    }
    newInstance.append(')');
    writer.emitStatement(newInstance.toString());
    if (injectMembers) {
      writer.emitStatement("injectMembers(result)");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
=======
    writer.emitEmptyLine();
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
  private void writeGetMethod(JavaWriter writer, ExecutableElement constructor,
      boolean disambiguateFields, boolean injectMembers, String strippedTypeName)
      throws IOException {
    writer.emitJavadoc(AdapterJavadocs.GET_METHOD, strippedTypeName);
    writer.emitAnnotation(Override.class);
    writer.beginMethod(strippedTypeName, "get", EnumSet.of(PUBLIC));
    StringBuilder newInstance = new StringBuilder();
    newInstance.append(strippedTypeName).append(" result = new ");
    newInstance.append(strippedTypeName).append('(');
    boolean first = true;
    for (VariableElement parameter : constructor.getParameters()) {
      if (!first) newInstance.append(", ");
      else first = false;
      newInstance.append(parameterName(disambiguateFields, parameter)).append(".get()");
    }
    newInstance.append(')');
    writer.emitStatement(newInstance.toString());
    if (injectMembers) {
      writer.emitStatement("injectMembers(result)");
    }
    writer.emitStatement("return result");
    writer.endMethod();
    writer.emitEmptyLine();
  }

  /**
   * Writes the {@code injectMembers()} method for the generated adapters. The {@code supertype}
   * provided is the next injectable ancestor.
   */
  private void writeMembersInjectMethod(JavaWriter writer, List<Element> fields,
      boolean disambiguateFields, String strippedTypeName, TypeMirror supertype)
      throws IOException {
    writer.emitJavadoc(AdapterJavadocs.MEMBERS_INJECT_METHOD, strippedTypeName);
    writer.emitAnnotation(Override.class);
    writer.beginMethod("void", "injectMembers", EnumSet.of(PUBLIC), strippedTypeName, "object");
    for (Element field : fields) {
      writer.emitStatement("object.%s = %s.get()",
          field.getSimpleName(),
          fieldName(disambiguateFields, field));
    }
    if (supertype != null) {
      writer.emitStatement("nextInjectableAncestor.injectMembers(object)");
    }
    writer.endMethod();
    writer.emitEmptyLine();
  }

  private void writeStaticInjectMethod(JavaWriter writer, List<Element> fields, String typeName)
      throws IOException {
=======
  private void writeMembersInjectMethod(JavaWriter writer, List<Element> fields,
      boolean disambiguateFields, String strippedTypeName, TypeMirror supertype)
      throws IOException {
    writer.emitJavadoc(AdapterJavadocs.MEMBERS_INJECT_METHOD, strippedTypeName);
    writer.emitAnnotation(Override.class);
    writer.beginMethod("void", "injectMembers", EnumSet.of(PUBLIC), strippedTypeName, "object");
    for (Element field : fields) {
      writer.emitStatement("object.%s = %s.get()",
          field.getSimpleName(),
          fieldName(disambiguateFields, field));
    }
    if (supertype != null) {
      writer.emitStatement("supertype.injectMembers(object)");
    }
    writer.endMethod();
    writer.emitEmptyLine();
  }

  private void writeStaticInjectMethod(JavaWriter writer, List<Element> fields, String typeName)
      throws IOException {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
    writer.beginMethod("void", "inject", PUBLIC);
=======
    writer.beginMethod("void", "inject", EnumSet.of(PUBLIC));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
    writer.emitEmptyLine();
  }

  private Set<String> findImports(boolean dependent, boolean injectMembers, boolean isProvider) {
    Set<String> imports = new LinkedHashSet<String>();
    imports.add(Binding.class.getCanonicalName());
    if (dependent) {
      imports.add(Linker.class.getCanonicalName());
      imports.add(Set.class.getCanonicalName());
    }
    if (injectMembers) imports.add(MembersInjector.class.getCanonicalName());
    if (isProvider) imports.add(Provider.class.getCanonicalName());
    return imports;
  }

  private String[] implementedInterfaces(
      String strippedTypeName, boolean hasFields, boolean isProvider) {
    List<String> interfaces = new ArrayList<String>();
    if (isProvider) {
      interfaces.add(JavaWriter.type(Provider.class, strippedTypeName));
    }
    if (hasFields) {
      interfaces.add(JavaWriter.type(MembersInjector.class, strippedTypeName));
    }
    return interfaces.toArray(new String[interfaces.size()]);
  }
=======
    writer.emitEmptyLine();
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
  private String strippedTypeName(String type, String packageName) {
    return type.substring(packageName.isEmpty() ? 0 : packageName.length() + 1);
=======
  private Set<String> findImports(boolean dependent, boolean injectMembers, boolean isProvider) {
    Set<String> imports = new LinkedHashSet<String>();
    imports.add(Binding.class.getCanonicalName());
    if (dependent) {
      imports.add(Linker.class.getCanonicalName());
      imports.add(Set.class.getCanonicalName());
    }
    if (injectMembers) imports.add(MembersInjector.class.getCanonicalName());
    if (isProvider) imports.add(Provider.class.getCanonicalName());
    return imports;
  }

  private String[] implementedInterfaces(
      String strippedTypeName, boolean hasFields, boolean isProvider) {
    List<String> interfaces = new ArrayList<String>();
    if (isProvider) {
      interfaces.add(JavaWriter.type(Provider.class, strippedTypeName));
    }
    if (hasFields) {
      interfaces.add(JavaWriter.type(MembersInjector.class, strippedTypeName));
    }
    return interfaces.toArray(new String[interfaces.size()]);
  }

  private String strippedTypeName(String type, String packageName) {
    return type.substring(packageName.isEmpty() ? 0 : packageName.length() + 1);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
  private String parentAdapterName(TypeElement originChild, TypeElement ancestor) {
    StringBuilder result = new StringBuilder();
    String ancestorPackageName = getPackage(ancestor).getQualifiedName().toString();
    String childPackageName = getPackage(originChild).getQualifiedName().toString();
    String childName = strippedTypeName(originChild.getQualifiedName().toString(), childPackageName)
        .replace('.', '$');
    String ancestorName = strippedTypeName(
        ancestor.getQualifiedName().toString(), ancestorPackageName).replace('.', '$');
    if (!ancestorPackageName.isEmpty()) {
      result.append(ancestorPackageName);
      result.append('.');
    }
    result.append(ancestorName);
    result.append(PARENT_ADAPTER_INFIX);
    if (!childPackageName.isEmpty()) {
      result.append(childPackageName.replace('.', '_'));
      result.append('_');
    }
    result.append(childName);
    return result.toString();
  }

  private void error(String msg, Element element) {
    processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, msg, element);
  }

=======
  private void error(String msg, Element element) {
    processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, msg, element);
  }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/Util.java;<<<<<<< MINE
=======
/*
 * Copyright (C) 2013 Google, Inc.
 * Copyright (C) 2013 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dagger.internal.codegen;

import dagger.internal.Keys;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import javax.lang.model.element.AnnotationMirror;
import javax.lang.model.element.AnnotationValue;
import javax.lang.model.element.AnnotationValueVisitor;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.ExecutableElement;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.PackageElement;
import javax.lang.model.element.TypeElement;
import javax.lang.model.type.ArrayType;
import javax.lang.model.type.DeclaredType;
import javax.lang.model.type.ErrorType;
import javax.lang.model.type.PrimitiveType;
import javax.lang.model.type.TypeMirror;
import javax.lang.model.type.TypeVariable;
import javax.lang.model.util.SimpleAnnotationValueVisitor6;
import javax.lang.model.util.SimpleTypeVisitor6;

/**
 * Utilities for handling types in annotation processors
 */
final class Util {
  private Util() {
  }

  public static PackageElement getPackage(Element type) {
    while (type.getKind() != ElementKind.PACKAGE) {
      type = type.getEnclosingElement();
    }
    return (PackageElement) type;
  }

  /**
   * Returns the supertype, or {@code null} if the supertype is a platform
   * class. This is intended for annotation processors that assume platform
   * classes will never be annotated with application annotations.
   */
  public static TypeMirror getApplicationSupertype(TypeElement type) {
    TypeMirror supertype = type.getSuperclass();
    return Keys.isPlatformType(supertype.toString()) ? null : supertype;
  }

  /** Returns a fully qualified class name to complement {@code type}. */
  public static String adapterName(TypeElement typeElement, String suffix) {
    StringBuilder builder = new StringBuilder();
    rawTypeToString(builder, typeElement, '$');
    builder.append(suffix);
    return builder.toString();
  }

  /** Returns a string for {@code type}. Primitive types are always boxed. */
  public static String typeToString(TypeMirror type) {
    StringBuilder result = new StringBuilder();
    typeToString(type, result, '.');
    return result.toString();
  }

  /** Returns a string for the raw type of {@code type}. Primitive types are always boxed. */
  public static String rawTypeToString(TypeMirror type, char innerClassSeparator) {
    if (!(type instanceof DeclaredType)) {
      throw new IllegalArgumentException("Unexpected type: " + type);
    }
    StringBuilder result = new StringBuilder();
    DeclaredType declaredType = (DeclaredType) type;
    rawTypeToString(result, (TypeElement) declaredType.asElement(), innerClassSeparator);
    return result.toString();
  }

  /**
   * Appends a string for {@code type} to {@code result}. Primitive types are
   * always boxed.
   *
   * @param innerClassSeparator either '.' or '$', which will appear in a
   *     class name like "java.lang.Map.Entry" or "java.lang.Map$Entry".
   *     Use '.' for references to existing types in code. Use '$' to define new
   *     class names and for strings that will be used by runtime reflection.
   */
  public static void typeToString(final TypeMirror type, final StringBuilder result,
      final char innerClassSeparator) {
    type.accept(new SimpleTypeVisitor6<Void, Void>() {
      @Override public Void visitDeclared(DeclaredType declaredType, Void v) {
        TypeElement typeElement = (TypeElement) declaredType.asElement();
        rawTypeToString(result, typeElement, innerClassSeparator);
        List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();
        if (!typeArguments.isEmpty()) {
          result.append("<");
          for (int i = 0; i < typeArguments.size(); i++) {
            if (i != 0) {
              result.append(", ");
            }
            typeToString(typeArguments.get(i), result, innerClassSeparator);
          }
          result.append(">");
        }
        return null;
      }
      @Override public Void visitPrimitive(PrimitiveType primitiveType, Void v) {
        result.append(box((PrimitiveType) type).getName());
        return null;
      }
      @Override public Void visitArray(ArrayType arrayType, Void v) {
        TypeMirror type = arrayType.getComponentType();
        if (type instanceof PrimitiveType) {
          result.append(type.toString()); // Don't box, since this is an array.
        } else {
          typeToString(arrayType.getComponentType(), result, innerClassSeparator);
        }
        result.append("[]");
        return null;
      }
      @Override public Void visitTypeVariable(TypeVariable typeVariable, Void v) {
        result.append(typeVariable.asElement().getSimpleName());
        return null;
      }
      @Override public Void visitError(ErrorType errorType, Void v) {
        // Error type found, a type may not yet have been generated, but we need the type
        // so we can generate the correct code in anticipation of the type being available
        // to the compiler.

        // Paramterized types which don't exist are returned as an error type whose name is "<any>"
        if ("<any>".equals(errorType.toString())) {
          throw new CodeGenerationIncompleteException(
              "Type reported as <any> is likely a not-yet generated parameterized type.");
        }
        // TODO(cgruber): Figure out a strategy for non-FQCN cases.
        result.append(errorType.toString());
        return null;
      }
      @Override protected Void defaultAction(TypeMirror typeMirror, Void v) {
        throw new UnsupportedOperationException(
            "Unexpected TypeKind " + typeMirror.getKind() + " for "  + typeMirror);
      }
    }, null);
  }

  private static final AnnotationValueVisitor<Object, Void> VALUE_EXTRACTOR =
      new SimpleAnnotationValueVisitor6<Object, Void>() {
        @Override public Object visitString(String s, Void p) {
          if ("<error>".equals(s)) {
            throw new CodeGenerationIncompleteException("Unknown type returned as <error>.");
          } else if ("<any>".equals(s)) {
            throw new CodeGenerationIncompleteException("Unknown type returned as <any>.");
          }
          return s;
        }
        @Override public Object visitType(TypeMirror t, Void p) {
          return t;
        }
        @Override protected Object defaultAction(Object o, Void v) {
          return o;
        }
        @Override public Object visitArray(List<? extends AnnotationValue> values, Void v) {
          Object[] result = new Object[values.size()];
          for (int i = 0; i < values.size(); i++) {
            result[i] = values.get(i).accept(this, null);
          }
          return result;
        }
      };

  /**
   * Returns the annotation on {@code element} formatted as a Map. This returns
   * a Map rather than an instance of the annotation interface to work-around
   * the fact that Class and Class[] fields won't work at code generation time.
   * See http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5089128
   */
  public static Map<String, Object> getAnnotation(Class<?> annotationType, Element element) {
    for (AnnotationMirror annotation : element.getAnnotationMirrors()) {
      if (!rawTypeToString(annotation.getAnnotationType(), '$')
          .equals(annotationType.getName())) {
        continue;
      }

      Map<String, Object> result = new LinkedHashMap<String, Object>();
      for (Method m : annotationType.getMethods()) {
        result.put(m.getName(), m.getDefaultValue());
      }
      for (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> e
          : annotation.getElementValues().entrySet()) {
        String name = e.getKey().getSimpleName().toString();
        Object value = e.getValue().accept(VALUE_EXTRACTOR, null);
        Object defaultValue = result.get(name);
        if (!lenientIsInstance(defaultValue.getClass(), value)) {
          throw new IllegalStateException(String.format(
              "Value of %s.%s is a %s but expected a %s\n    value: %s",
              annotationType, name, value.getClass().getName(), defaultValue.getClass().getName(),
              value instanceof Object[] ? Arrays.toString((Object[]) value) : value));
        }
        result.put(name, value);
      }
      return result;
    }
    return null; // Annotation not found.
  }

  /**
   * Returns true if {@code value} can be assigned to {@code expectedClass}.
   * Like {@link Class#isInstance} but more lenient for {@code Class<?>} values.
   */
  private static boolean lenientIsInstance(Class<?> expectedClass, Object value) {
    if (expectedClass.isArray()) {
      Class<?> componentType = expectedClass.getComponentType();
      if (!(value instanceof Object[])) {
        return false;
      }
      for (Object element : (Object[]) value) {
        if (!lenientIsInstance(componentType, element)) return false;
      }
      return true;
    } else if (expectedClass == Class.class) {
      return value instanceof TypeMirror;
    } else {
      return expectedClass == value.getClass();
    }
  }

  // TODO(sgoldfed): better format for other types of elements?
  static String elementToString(Element element) {
    switch (element.getKind()) {
      case FIELD:
      // fall through
      case CONSTRUCTOR:
      // fall through
      case METHOD:
        return element.getEnclosingElement() + "." + element;
      default:
        return element.toString();
    }
  }

  static void rawTypeToString(StringBuilder result, TypeElement type,
      char innerClassSeparator) {
    String packageName = getPackage(type).getQualifiedName().toString();
    String qualifiedName = type.getQualifiedName().toString();
    if (packageName.isEmpty()) {
        result.append(qualifiedName.replace('.', innerClassSeparator));
    } else {
      result.append(packageName);
      result.append('.');
      result.append(
          qualifiedName.substring(packageName.length() + 1).replace('.', innerClassSeparator));
    }
  }

  private static Class<?> box(PrimitiveType primitiveType) {
    switch (primitiveType.getKind()) {
      case BYTE:
        return Byte.class;
      case SHORT:
        return Short.class;
      case INT:
        return Integer.class;
      case LONG:
        return Long.class;
      case FLOAT:
        return Float.class;
      case DOUBLE:
        return Double.class;
      case BOOLEAN:
        return Boolean.class;
      case CHAR:
        return Character.class;
      case VOID:
        return Void.class;
      default:
        throw new AssertionError();
    }
  }

  /**
   * Returns the no-args constructor for {@code type}, or null if no such
   * constructor exists.
   */
  public static ExecutableElement getNoArgsConstructor(TypeElement type) {
    for (Element enclosed : type.getEnclosedElements()) {
      if (enclosed.getKind() != ElementKind.CONSTRUCTOR) {
        continue;
      }
      ExecutableElement constructor = (ExecutableElement) enclosed;
      if (constructor.getParameters().isEmpty()) {
        return constructor;
      }
    }
    return null;
  }

  /**
   * Returns true if generated code can invoke {@code constructor}. That is, if
   * the constructor is non-private and its enclosing class is either a
   * top-level class or a static nested class.
   */
  public static boolean isCallableConstructor(ExecutableElement constructor) {
    if (constructor.getModifiers().contains(Modifier.PRIVATE)) {
      return false;
    }
    TypeElement type = (TypeElement) constructor.getEnclosingElement();
    return type.getEnclosingElement().getKind() == ElementKind.PACKAGE
        || type.getModifiers().contains(Modifier.STATIC);
  }


  /**
   * Returns a user-presentable string like {@code coffee.CoffeeModule}.
   */
  public static String className(ExecutableElement method) {
    return ((TypeElement) method.getEnclosingElement()).getQualifiedName().toString();
  }

  public static boolean isInterface(TypeMirror typeMirror) {
    return typeMirror instanceof DeclaredType
        && ((DeclaredType) typeMirror).asElement().getKind() == ElementKind.INTERFACE;
  }

  static boolean isStatic(Element element) {
    for (Modifier modifier : element.getModifiers()) {
      if (modifier.equals(Modifier.STATIC)) {
        return true;
      }
    }
    return false;
  }

  /**
   * An exception thrown when a type is not extant (returns as an error type),
   * usually as a result of another processor not having yet generated its types upon
   * which a dagger-annotated type depends.
   */
  final static class CodeGenerationIncompleteException extends IllegalStateException {
    public CodeGenerationIncompleteException(String s) {
      super(s);
    }
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphVisualizer.java;<<<<<<< MINE
=======
import java.util.Comparator;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphVisualizer.java;<<<<<<< MINE
=======
import java.util.TreeSet;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphVisualizer.java;<<<<<<< MINE
      Set<Binding<?>> dependencies = new HashSet<Binding<?>>();
=======
      Set<Binding<?>> dependencies = new TreeSet<Binding<?>>(new BindingComparator());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphVisualizer.java;<<<<<<< MINE
=======

  /** A Comparator for Bindings so we can insure a consistent ordering of output. */
  private static class BindingComparator implements Comparator<Binding<?>> {
    @Override
    public int compare(Binding<?> left, Binding<?> right) {
      return getStringForBinding(left).compareTo(getStringForBinding(right));
    }

    private String getStringForBinding(Binding<?> binding) {
      return binding == null ? "" : binding.toString();
    }
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisLoader.java;<<<<<<< MINE
  @Override public <T> ModuleAdapter<T> getModuleAdapter(Class<? extends T> moduleClass, T module) {
=======
  @Override public <T> ModuleAdapter<T> getModuleAdapter(Class<T> moduleClass) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ValidationProcessor.java;<<<<<<< MINE
=======
/*
 * Copyright (C) 2013 Google, Inc.
 * Copyright (C) 2013 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dagger.internal.codegen;

import dagger.Module;
import dagger.Provides;
import dagger.internal.codegen.Util.CodeGenerationIncompleteException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.inject.Inject;
import javax.inject.Qualifier;
import javax.inject.Scope;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.AnnotationMirror;
import javax.lang.model.element.Element;
import javax.lang.model.element.ExecutableElement;
import javax.lang.model.element.TypeElement;
import javax.tools.Diagnostic;

import static dagger.internal.codegen.Util.elementToString;
import static javax.lang.model.element.ElementKind.CONSTRUCTOR;
import static javax.lang.model.element.ElementKind.METHOD;
import static javax.lang.model.element.Modifier.ABSTRACT;

/**
 * Checks for errors that are not directly related to modules and
 *  {@code @Inject} annotated elements.
 *
 *  <p> Warnings for invalid use of qualifier annotations can be suppressed
 *  with @SuppressWarnings("qualifiers")
 *
 *  <p> Warnings for invalid use of scoping annotations can be suppressed
 *  with @SuppressWarnings("scoping")
 */
@SupportedAnnotationTypes({ "*" })
public final class ValidationProcessor extends AbstractProcessor {

  @Override public SourceVersion getSupportedSourceVersion() {
    return SourceVersion.latestSupported();
  }

  @Override public boolean process(Set<? extends TypeElement> types, RoundEnvironment env) {
    List<Element> allElements = new ArrayList<Element>();
    Map<Element, Element> parametersToTheirMethods = new LinkedHashMap<Element, Element>();
    getAllElements(env, allElements, parametersToTheirMethods);
    for (Element element : allElements) {
      try {
        validateProvides(element);
      } catch (CodeGenerationIncompleteException e) {
        continue; // Upstream compiler issue in play. Ignore this element.
      }
      validateScoping(element);
      validateQualifiers(element, parametersToTheirMethods);
    }
    return false;
  }

  private void validateProvides(Element element) {
    if (element.getAnnotation(Provides.class) != null
        && Util.getAnnotation(Module.class, element.getEnclosingElement()) == null) {
      error("@Provides methods must be declared in modules: " + elementToString(element), element);
    }
  }

  private void validateQualifiers(Element element, Map<Element, Element> parametersToTheirMethods) {
    boolean suppressWarnings =
        element.getAnnotation(SuppressWarnings.class) != null && Arrays.asList(
            element.getAnnotation(SuppressWarnings.class).value()).contains("qualifiers");
    int numberOfQualifiersOnElement = 0;
    for (AnnotationMirror annotation : element.getAnnotationMirrors()) {
      if (annotation.getAnnotationType().asElement().getAnnotation(Qualifier.class) == null) {
       continue;
      }
      switch (element.getKind()) {
        case FIELD:
          numberOfQualifiersOnElement++;
          if (element.getAnnotation(Inject.class) == null && !suppressWarnings) {
            warning("Dagger will ignore qualifier annotations on fields that are not "
                + "annotated with @Inject: " + elementToString(element), element);
          }
          break;
        case METHOD:
          numberOfQualifiersOnElement++;
          if (!isProvidesMethod(element) && !suppressWarnings) {
            warning("Dagger will ignore qualifier annotations on methods that are not "
                + "@Provides methods: " + elementToString(element), element);
          }
          break;
        case PARAMETER:
          numberOfQualifiersOnElement++;
          if (!isInjectableConstructorParameter(element, parametersToTheirMethods)
              && !isProvidesMethodParameter(element, parametersToTheirMethods)
              && !suppressWarnings) {
            warning("Dagger will ignore qualifier annotations on parameters that are not "
                + "@Inject constructor parameters or @Provides method parameters: "
                + elementToString(element), element);
          }
          break;
        default:
          error("Qualifier annotations are only allowed on fields, methods, and parameters: "
              + elementToString(element), element);
      }
    }
    if (numberOfQualifiersOnElement > 1) {
      error("Only one qualifier annotation is allowed per element: " + elementToString(element),
          element);
    }
  }

  private void validateScoping(Element element) {
    boolean suppressWarnings =
        element.getAnnotation(SuppressWarnings.class) != null && Arrays.asList(
            element.getAnnotation(SuppressWarnings.class).value()).contains("scoping");
    int numberOfScopingAnnotationsOnElement = 0;
    for (AnnotationMirror annotation : element.getAnnotationMirrors()) {
      if (annotation.getAnnotationType().asElement().getAnnotation(Scope.class) == null) {
        continue;
      }
      switch (element.getKind()) {
        case METHOD:
          numberOfScopingAnnotationsOnElement++;
          if (!isProvidesMethod(element) && !suppressWarnings) {
            warning("Dagger will ignore scoping annotations on methods that are not "
                + "@Provides methods: " + elementToString(element), element);
          }
          break;
        case CLASS:
          if (!element.getModifiers().contains(ABSTRACT)) {
            numberOfScopingAnnotationsOnElement++;
            break;
          }
        // fall through if abstract
        default:
          error("Scoping annotations are only allowed on concrete types and @Provides methods: "
              + elementToString(element), element);
      }
    }
    if (numberOfScopingAnnotationsOnElement > 1) {
      error("Only one scoping annotation is allowed per element: " + elementToString(element),
          element);
    }
  }

  private void getAllElements(
      RoundEnvironment env, List<Element> result, Map<Element, Element> parametersToTheirMethods) {
    for (Element element : env.getRootElements()) {
      addAllEnclosed(element, result, parametersToTheirMethods);
    }
  }

  private void addAllEnclosed(
      Element element, List<Element> result, Map<Element, Element> parametersToTheirMethods) {
    result.add(element);
    for (Element enclosed : element.getEnclosedElements()) {
      addAllEnclosed(enclosed, result, parametersToTheirMethods);
      if (enclosed.getKind() == METHOD || enclosed.getKind() == CONSTRUCTOR) {
        for (Element parameter : ((ExecutableElement) enclosed).getParameters()) {
          result.add(parameter);
          parametersToTheirMethods.put(parameter, enclosed);
        }
      }
    }
  }

  private boolean isProvidesMethod(Element element) {
    return element.getKind() == METHOD && element.getAnnotation(Provides.class) != null;
  }

  /**
   * @param parameter an {@code Element} whose {@code Kind} is parameter. The {@code Kind} is not
   *        tested here.
   */
  private boolean isProvidesMethodParameter(
      Element parameter, Map<Element, Element> parametersToTheirMethods) {
    return parametersToTheirMethods.get(parameter).getAnnotation(Provides.class) != null;
  }

  /**
   * @param parameter an {@code Element} whose {@code Kind} is parameter. The {@code Kind} is not
   *        tested here.
   */
  private boolean isInjectableConstructorParameter(
      Element parameter, Map<Element, Element> parametersToTheirMethods) {
    return parametersToTheirMethods.get(parameter).getKind() == CONSTRUCTOR
        && parametersToTheirMethods.get(parameter).getAnnotation(Inject.class) != null;
  }

  private void error(String msg, Element element) {
    processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, msg, element);
  }

  private void warning(String msg, Element element) {
    processingEnv.getMessager().printMessage(Diagnostic.Kind.WARNING, msg, element);
  }

}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GeneratorKeys.java;<<<<<<< MINE
import static dagger.internal.codegen.TypeUtils.rawTypeToString;
import static dagger.internal.codegen.TypeUtils.typeToString;
=======
import static dagger.internal.codegen.Util.rawTypeToString;
import static dagger.internal.codegen.Util.typeToString;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GeneratorKeys.java;<<<<<<< MINE
    AnnotationMirror qualifier = getQualifier(method.getAnnotationMirrors(), method);
=======
    AnnotationMirror qualifier = getQualifier(method.getAnnotationMirrors());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GeneratorKeys.java;<<<<<<< MINE
    AnnotationMirror qualifier = getQualifier(method.getAnnotationMirrors(), method);
=======
    AnnotationMirror qualifier = getQualifier(method.getAnnotationMirrors());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GeneratorKeys.java;<<<<<<< MINE
    AnnotationMirror qualifier = getQualifier(variable.getAnnotationMirrors(), variable);
=======
    AnnotationMirror qualifier = getQualifier(variable.getAnnotationMirrors());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GeneratorKeys.java;<<<<<<< MINE
=======
  /** Does not test for multiple qualifiers. This is tested in {@code ValidationProcessor}.  */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GeneratorKeys.java;<<<<<<< MINE
      List<? extends AnnotationMirror> annotations, Object member) {
=======
      List<? extends AnnotationMirror> annotations) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GeneratorKeys.java;<<<<<<< MINE
      if (qualifier != null) {
        throw new IllegalArgumentException("Too many qualifier annotations on " + member);
      }
=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/AdapterJavadocs.java;<<<<<<< MINE
  static String binderTypeDocs(String type, boolean abstrakt, boolean members, boolean dependent) {
=======
  static String bindingTypeDocs(String type, boolean abstrakt, boolean members, boolean dependent) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/AdapterJavadocs.java;<<<<<<< MINE
    sb.append("A {@code Binder<").append(type).append(">} implementation which satisfies\n");
=======
    sb.append("A {@code Binding<").append(type).append(">} implementation which satisfies\n");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
=======
import dagger.internal.Binding.InvalidBindingException;
import dagger.internal.BindingsGroup;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
=======
import dagger.internal.ProvidesBinding;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
=======
import dagger.internal.codegen.Util.CodeGenerationIncompleteException;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
=======
import javax.lang.model.util.Elements;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
import static dagger.internal.codegen.TypeUtils.getAnnotation;
import static dagger.internal.codegen.TypeUtils.getPackage;
import static dagger.internal.codegen.TypeUtils.isInterface;
import static dagger.internal.codegen.TypeUtils.methodName;
=======
import static dagger.internal.codegen.Util.className;
import static dagger.internal.codegen.Util.getAnnotation;
import static dagger.internal.codegen.Util.getPackage;
import static dagger.internal.codegen.Util.isInterface;
import static java.util.Arrays.asList;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
=======
  private static final Set<String> ERROR_NAMES_TO_PROPAGATE = new LinkedHashSet<String>(asList(
      "com.sun.tools.javac.code.Symbol$CompletionFailure"));

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
      return true;
=======
      return false;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
      modules.add(processingEnv.getElementUtils().getTypeElement(moduleName));
=======
      modules.add(elements().getTypeElement(moduleName));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
      Map<String, Object> annotation = getAnnotation(Module.class, element);
=======
      Map<String, Object> annotation = null;
      try {
        annotation = getAnnotation(Module.class, element);
      } catch (CodeGenerationIncompleteException e) {
        continue; // skip this element. An up-stream compiler error is in play.
      }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE

=======
      if (annotation == null) {
        error("Missing @Module annotation.", moduleType);
        continue;
      }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
        } catch (IllegalStateException e) {
          error("Graph validation failed: " + e.getMessage(), moduleType);
=======
        } catch (InvalidBindingException e) {
          error("Graph validation failed: " + e.getMessage(), elements().getTypeElement(e.type));
          continue;
        } catch (RuntimeException e) {
          if (ERROR_NAMES_TO_PROPAGATE.contains(e.getClass().getName())) {
            throw e;
          }
          error("Unknown error " + e.getClass().getName() + " thrown by javac in graph validation: "
              + e.getMessage(), moduleType);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
    return true;
=======
    return false;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
      Map<String, Binding<?>> baseBindings = new LinkedHashMap<String, Binding<?>>();
      Map<String, Binding<?>> overrideBindings = new LinkedHashMap<String, Binding<?>>();
=======
      BindingsGroup baseBindings = new BindingsGroup() {
        @Override public Binding<?> contributeSetBinding(String key, SetBinding<?> value) {
          return super.put(key, value);
        }
      };
      BindingsGroup overrideBindings = new BindingsGroup() {
        @Override public Binding<?> contributeSetBinding(String key, SetBinding<?> value) {
          throw new IllegalStateException("Module overrides cannot contribute set bindings.");
        }
      };
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
        Map<String, Binding<?>> addTo = overrides ? overrideBindings : baseBindings;
=======
        BindingsGroup addTo = overrides ? overrideBindings : baseBindings;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
=======
        Set<String> injectsProvisionKeys = new LinkedHashSet<String>();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
=======
          String providerKey = GeneratorKeys.get(injectableType);
          injectsProvisionKeys.add(providerKey);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
              ? GeneratorKeys.get(injectableType)
=======
              ? providerKey
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
          Binding binding = new ProviderMethodBinding(key, providerMethod, library);
=======
          ProvidesBinding<?> binding = new ProviderMethodBinding(key, providerMethod, library);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
          Binding previous = addTo.get(key);
=======
          Binding<?> previous = addTo.get(key);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
              addTo.put(key, binding);
=======
              if (injectsProvisionKeys.contains(binding.provideKey)) {
                binding.setDependedOn(true);
              }
              try {
                addTo.contributeProvidesBinding(key, binding);
              } catch (IllegalStateException ise) {
                throw new ModuleValidationException(ise.getMessage(), providerMethod);
              }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
  private String shortMethodName(ExecutableElement method) {
    return method.getEnclosingElement().getSimpleName().toString()
        + "." + method.getSimpleName() + "()";
=======
  private Elements elements() {
    return processingEnv.getElementUtils();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
  static class ProviderMethodBinding extends Binding<Object> {
=======
  static class ProviderMethodBinding extends ProvidesBinding<Object> {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
      super(provideKey, null, method.getAnnotation(Singleton.class) != null, methodName(method));
=======
      super(provideKey, method.getAnnotation(Singleton.class) != null,
          className(method), method.getSimpleName().toString());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
=======

    @Override public String toString() {
      return "ProvidesBinding[key=" + provideKey
          + " method=" + moduleClass + "." + method.getSimpleName() + "()";
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
    final TypeElement source;
=======
    final Element source;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
    public ModuleValidationException(String message, TypeElement source) {
=======
    public ModuleValidationException(String message, Element source) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/test/java/dagger/internal/codegen/GraphVisualizerTest.java;<<<<<<< MINE
=======
  @SuppressWarnings("qualifiers")
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/test/java/dagger/internal/codegen/GraphVisualizerTest.java;<<<<<<< MINE
=======
  @SuppressWarnings("qualifiers")
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/test/java/dagger/internal/codegen/GraphVisualizerTest.java;<<<<<<< MINE
=======
  @SuppressWarnings("qualifiers")
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/test/java/dagger/testing/it/BuildLogValidator.java;<<<<<<< MINE
=======
    String buildOutput = getBuildOutput(buildLogfile);

    StringBuilder sb = new StringBuilder("Build output did not contain expected error text:");
    boolean missing = false;

    for (String expected : expectedStrings) {
      if (!buildOutput.contains(expected)) {
        missing = true;
        sb.append("\n    \"").append(expected).append("\"");
      }
    }
    if (missing) {
      appendBuildStatus(sb, buildOutput);
      throw new Exception(sb.toString());
    }
  }

  /**
   * Processes a log file, ensuring it does not contain any of the provided strings within it.
   *
   * @param buildLogfile a log file to be searched
   * @param unexpectedStrings the strings that must not be present in the log file for it to be
   *        valid
   */
  public void assertDoesNotHaveText(File buildLogfile, String... unexpectedStrings)
      throws Throwable {
    String buildOutput = getBuildOutput(buildLogfile);

    StringBuilder sb = new StringBuilder("Build output contained unexpected text:");
    boolean found = false;

    for (String unexpected : unexpectedStrings) {
      if (buildOutput.contains(unexpected)) {
        found = true;
        sb.append("\n    \"").append(unexpected).append("\"");
      }
    }
    if (found) {
      appendBuildStatus(sb, buildOutput);
      throw new Exception(sb.toString());
    }
  }

  private String getBuildOutput(File buildLogfile) throws Throwable {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/test/java/dagger/testing/it/BuildLogValidator.java;<<<<<<< MINE
=======
    return buildOutput;
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/test/java/dagger/testing/it/BuildLogValidator.java;<<<<<<< MINE
    StringBuilder sb = new StringBuilder("Build output did not contain expected error text:");
    boolean missing = false;

    for (String expected : expectedStrings) {
      if (!buildOutput.contains(expected)) {
        missing = true;
        sb.append("\n    \"").append(expected).append("\"");
=======
  private void appendBuildStatus(StringBuilder sb, String buildOutput) {
    sb.append("\n\nBuild Output:\n\n");
    boolean containsError = false;
    for(String line : buildOutput.split("\n")) {
      if (line.contains("[ERROR]")) {
        containsError = true;
        sb.append("\n        ").append(line);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/test/java/dagger/testing/it/BuildLogValidator.java;<<<<<<< MINE
    if (missing) {
      sb.append("\n\nBuild Output:\n\n");
      boolean containsError = false;
      for(String line : buildOutput.split("\n")) {
        if (line.contains("[ERROR]")) {
          containsError = true;
          sb.append("\n        ").append(line);
        }
      }
      if (!containsError) {
        sb.append("\nTEST BUILD SUCCEEDED.\n");
      }
      throw new Exception(sb.toString());
=======
    if (!containsError) {
      sb.append("\nTEST BUILD SUCCEEDED.\n");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/test/java/dagger/tests/integration/ProcessorTestUtils.java;<<<<<<< MINE
=======
/*
 * Copyright (c) 2013 Google, Inc.
 * Copyright (c) 2013 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dagger.tests.integration;

import dagger.internal.codegen.GraphAnalysisProcessor;
import dagger.internal.codegen.InjectAdapterProcessor;
import dagger.internal.codegen.ModuleAdapterProcessor;
import dagger.internal.codegen.ValidationProcessor;
import java.util.Arrays;
import javax.annotation.processing.Processor;

/**
 * Internal test utilities.
 */
public class ProcessorTestUtils {
  public static Iterable<? extends Processor> daggerProcessors() {
    return Arrays.asList(
        new InjectAdapterProcessor(),
        new ModuleAdapterProcessor(),
        new GraphAnalysisProcessor(),
        new ValidationProcessor());
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java;<<<<<<< MINE
=======
/**
 * Copyright (C) 2013 Google, Inc.
 * Copyright (C) 2013 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dagger.tests.integration.operation;

import dagger.Module;
import dagger.ObjectGraph;
import dagger.Provides;
import javax.inject.Inject;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.fest.assertions.Assertions.assertThat;

@RunWith(JUnit4.class)
public final class PrimitiveInjectionTest {
  static class ArrayInjectable {
    @Inject byte[] byteArray;
    @Inject int[] integerArray;
    @Inject boolean[] booleanArray;
    @Inject char[] charArray;
    @Inject long[] longArray;
    @Inject float[] floatArray;
    @Inject double[] doubleArray;
  }

  @Module(injects = ArrayInjectable.class)
  static class PrimitiveArrayModule {
    @Provides byte[] byteArray() { return new byte[] { Byte.MAX_VALUE }; }
    @Provides int[] provideInt() { return new int[] { Integer.MAX_VALUE }; }
    @Provides boolean[] provideBoolean() { return new boolean[] { true }; }
    @Provides long[] provideLong() { return new long[] { Long.MAX_VALUE }; }
    @Provides char[] provideChar() { return new char[] { Character.MAX_VALUE }; }
    @Provides float[] provideFloat() { return new float[] { Float.MAX_VALUE }; }
    @Provides double[] provideDouble() { return new double[] { Double.MAX_VALUE }; }
  }

  @Test public void primitiveArrayTypesAllInjected() {
    ArrayInjectable result = ObjectGraph.create(PrimitiveArrayModule.class)
        .get(ArrayInjectable.class);
    assertThat(result).isNotNull();
    assertThat(result.byteArray).isEqualTo(new byte[] { Byte.MAX_VALUE });
    assertThat(result.integerArray).isEqualTo(new int[] { Integer.MAX_VALUE });
    assertThat(result.booleanArray).isEqualTo(new boolean[] { true });
    assertThat(result.charArray).isEqualTo(new char[] { Character.MAX_VALUE });
    assertThat(result.longArray).isEqualTo(new long[] { Long.MAX_VALUE });
    assertThat(result.floatArray).isEqualTo(new float[] { Float.MAX_VALUE });
    assertThat(result.doubleArray).isEqualTo(new double[] { Double.MAX_VALUE });
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/test/java/dagger/tests/integration/operation/SimpleInjectionTest.java;<<<<<<< MINE
=======
/**
 * Copyright (C) 2013 Google, Inc.
 * Copyright (C) 2013 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dagger.tests.integration.operation;

import dagger.Module;
import dagger.ObjectGraph;
import dagger.Provides;
import javax.inject.Inject;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.truth0.Truth.ASSERT;

@RunWith(JUnit4.class)
public final class SimpleInjectionTest {
  static abstract class AbstractFoo {
    @Inject String blah;
  }

  static class Foo extends AbstractFoo { }

  @Module(injects = Foo.class)
  static class FooModule {
    @Provides String string() { return "blah"; }
  }

  @Module(injects = Foo.class)
  static class ProvidingFooModule {
    @Provides String string() { return "blah"; }
    @Provides Foo foo(String blah) {
      Foo foo = new Foo();
      foo.blah = blah;
      return foo;
    }
  }

  @Test public void memberInject_WithoutProvidesMethod() {
    Foo foo = new Foo();
    ObjectGraph.create(FooModule.class).inject(foo);
    ASSERT.that(foo.blah).equals("blah");
  }

  @Test public void membersInject_WithProvidesMethod() {
    Foo foo = new Foo();
    ObjectGraph.create(ProvidingFooModule.class).inject(foo);
    ASSERT.that(foo.blah).equals("blah");
  }

  @Test public void get_WithProvidesMethod() {
    Foo foo = ObjectGraph.create(ProvidingFooModule.class).get(Foo.class);
    ASSERT.that(foo.blah).equals("blah");
  }

  static class Bar { }

  @Module(injects = Bar.class)
  static class BarModule {
  }

  @Test public void membersInject_WithNonInjectable() {
    Bar bar = new Bar();
    ObjectGraph.create(BarModule.class).inject(bar);
  }

  @Module(injects = Bar.class)
  static class ProvidingBarModule {
    @Provides public Bar bar() { return new Bar(); }
  }

  @Test public void membersInject_WithProvidedNonInjectable() {
    Bar bar = ObjectGraph.create(ProvidingBarModule.class).get(Bar.class);
    ASSERT.that(bar).isNotNull();
  }

}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/test/java/dagger/tests/integration/codegen/InjectAdapterGenerationTest.java;<<<<<<< MINE
=======
/*
 * Copyright (C) 2013 Google Inc.
 * Copyright (C) 2013 Square Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dagger.tests.integration.codegen;

import com.google.common.base.Joiner;
import com.google.testing.compile.JavaFileObjects;
import javax.tools.JavaFileObject;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
import static dagger.tests.integration.ProcessorTestUtils.daggerProcessors;
import static org.truth0.Truth.ASSERT;

@RunWith(JUnit4.class)
public final class InjectAdapterGenerationTest {
  @Test public void basicInjectAdapter() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Basic", Joiner.on("\n").join(
        "import dagger.Module;",
        "import javax.inject.Inject;",
        "class Basic {",
        "  static class A { @Inject A() { } }",
        "  @Module(injects = A.class)",
        "  static class AModule { }",
        "}"));

    JavaFileObject expectedModuleAdapter =
        JavaFileObjects.forSourceString("Basic$AModule$$ModuleAdapter", Joiner.on("\n").join(
            "import dagger.internal.ModuleAdapter;",
            "public final class Basic$AModule$$ModuleAdapter",
            "    extends ModuleAdapter<Basic.AModule> {",
            "  private static final String[] INJECTS = {\"members/Basic$A\"};",
            "  private static final Class<?>[] STATIC_INJECTIONS = {};",
            "  private static final Class<?>[] INCLUDES = {};",
            "  public Basic$AModule$$ModuleAdapter() {",
            "    super(Basic.AModule.class, INJECTS, STATIC_INJECTIONS, false, INCLUDES,",
            "      true, false);",
            "  }",
            "  @Override public Basic.AModule newModule() {",
            "    return new Basic.AModule();",
            "  }",
            "}"));

    JavaFileObject expectedInjectAdapter =
        JavaFileObjects.forSourceString("Basic$A$$InjectAdapter", Joiner.on("\n").join(
            "import dagger.internal.Binding;",
            "import javax.inject.Provider;",
            "public final class Basic$A$$InjectAdapter",
            "    extends Binding<Basic.A> implements Provider<Basic.A> {",
            "  public Basic$A$$InjectAdapter() {",
            "    super(\"Basic$A\", \"members/Basic$A\", NOT_SINGLETON, Basic.A.class);",
            "  }",
            "  @Override public Basic.A get() {",
            "    Basic.A result = new Basic.A();",
            "    return result;",
            "  }",
            "}"));

    ASSERT.about(javaSource()).that(sourceFile).processedWith(daggerProcessors())
        .compilesWithoutError().and()
        .generatesSources(expectedModuleAdapter, expectedInjectAdapter);

  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/test/java/dagger/tests/integration/codegen/ModuleAdapterGenerationTest.java;<<<<<<< MINE
=======
/*
 * Copyright (C) 2013 Google Inc.
 * Copyright (C) 2013 Square Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dagger.tests.integration.codegen;

import com.google.common.base.Joiner;
import com.google.testing.compile.JavaFileObjects;
import javax.tools.JavaFileObject;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
import static dagger.tests.integration.ProcessorTestUtils.daggerProcessors;
import static java.util.Arrays.asList;
import static org.truth0.Truth.ASSERT;

@RunWith(JUnit4.class)
public final class ModuleAdapterGenerationTest {
  /**
   * Shows current behavior for a {@link dagger.Provides provides method}
   * used to supply an injected ctor parameter.
   *
   * <ul>
   *   <li>{@code ProvidesAdapter} invokes the module's provides method on
   *   {@code get}</li>
   *   <li>On {@code getBindings}, the above is newed up and linked to its type
   *   key.
   *   <li>{@code InjectAdapter} contains a field for the parameter binding,
   *   referenced in {@code getDependencies} and set on {@code attach}</li>
   *   <li>On {@code get}, the injected constructor is called with the value of
   *   {@link dagger.internal.Binding#get}</li>
   * </ul>
   */
  @Test public void providerForCtorInjection() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Field", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "import javax.inject.Inject;",
        "class Field {",
        "  static class A { final String name; @Inject A(String name) { this.name = name; }}",
        "  @Module(injects = { A.class, String.class })",
        "  static class AModule { @Provides String name() { return \"foo\"; }}",
        "}"));

    JavaFileObject expectedModuleAdapter =
        JavaFileObjects.forSourceString("Field$AModule$$ModuleAdapter", Joiner.on("\n").join(
        "import dagger.internal.BindingsGroup;",
        "import dagger.internal.ModuleAdapter;",
        "import dagger.internal.ProvidesBinding;",
        "import javax.inject.Provider;",
        "public final class Field$AModule$$ModuleAdapter",
        "    extends ModuleAdapter<Field.AModule> {",
        "  private static final String[] INJECTS = ",
        "      {\"members/Field$A\", \"members/java.lang.String\"};",
        "  private static final Class<?>[] STATIC_INJECTIONS = {};",
        "  private static final Class<?>[] INCLUDES = {};",
        "  public Field$AModule$$ModuleAdapter() {",
        "    super(Field.AModule.class, INJECTS, STATIC_INJECTIONS, false, INCLUDES, true, false);",
        "  }",
        "  @Override public Field.AModule newModule() {",
        "    return new Field.AModule();",
        "  }",
        "  @Override public void getBindings(BindingsGroup bindings, Field.AModule module) {",
        "    bindings.contributeProvidesBinding(\"java.lang.String\",",
        "        new NameProvidesAdapter(module));", // eager new!
        "  }",
        "  public static final class NameProvidesAdapter", // corresponds to method name
        "      extends ProvidesBinding<String> implements Provider<String> {",
        "    private final Field.AModule module;",
        "    public NameProvidesAdapter(Field.AModule module) {",
        "      super(\"java.lang.String\", NOT_SINGLETON, \"Field.AModule\", \"name\");",
        "      this.module = module;",
        "      setLibrary(false);",
        "    }",
        "    @Override public String get() {",
        "      return module.name();", // corresponds to @Provides method
        "    }",
        "  }",
        "}"));

    JavaFileObject expectedInjectAdapter =
        JavaFileObjects.forSourceString("Field$A$$InjectAdapter", Joiner.on("\n").join(
            "import dagger.internal.Binding;",
            "import dagger.internal.Linker;",
            "import java.util.Set;",
            "import javax.inject.Provider;",
            "public final class Field$A$$InjectAdapter",
            "    extends Binding<Field.A> implements Provider<Field.A> {",
            "  private Binding<String> name;", // for ctor
            "  public Field$A$$InjectAdapter() {",
            "    super(\"Field$A\", \"members/Field$A\", NOT_SINGLETON, Field.A.class);",
            "  }",
            "  @Override @SuppressWarnings(\"unchecked\")",
            "  public void attach(Linker linker) {",
            "    name = (Binding<String>)linker.requestBinding(", // binding key is not a class
            "      \"java.lang.String\", Field.A.class, getClass().getClassLoader());",
            "  }",
            "  @Override public void getDependencies(",
            "      Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {",
            "    getBindings.add(name);", // name is added to dependencies
            "  }",
            "  @Override public Field.A get() {",
            "    Field.A result = new Field.A(name.get());", // adds ctor param
            "    return result;",
            "  }",
            "}"));

    ASSERT.about(javaSource()).that(sourceFile).processedWith(daggerProcessors())
        .compilesWithoutError()
        .and()
        .generatesSources(expectedModuleAdapter, expectedInjectAdapter);

  }

  @Test public void injectsMembersInjectedAndProvidedAndConstructedTypes() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Field", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "import javax.inject.Inject;",
        "class Field {",
        "  static class A { final String name; @Inject A(String name) { this.name = name; }}",
        "  static class B { @Inject String name; }",
        "  @Module(injects = { A.class, String.class, B.class })",
        "  static class AModule { @Provides String name() { return \"foo\"; }}",
        "}"));

    JavaFileObject expectedModuleAdapter =
        JavaFileObjects.forSourceString("Field$AModule$$ModuleAdapter", Joiner.on("\n").join(
        "import dagger.internal.BindingsGroup;",
        "import dagger.internal.ModuleAdapter;",
        "import dagger.internal.ProvidesBinding;",
        "import javax.inject.Provider;",
        "public final class Field$AModule$$ModuleAdapter extends ModuleAdapter<Field.AModule> {",
        "  private static final String[] INJECTS = ",
        "      {\"members/Field$A\", \"members/java.lang.String\", \"members/Field$B\"};",
        "  private static final Class<?>[] STATIC_INJECTIONS = {};",
        "  private static final Class<?>[] INCLUDES = {};",
        "  public Field$AModule$$ModuleAdapter() {",
        "    super(Field.AModule.class, INJECTS, STATIC_INJECTIONS, false, INCLUDES, true, false);",
        "  }",
        "  @Override public Field.AModule newModule() {",
        "    return new Field.AModule();",
        "  }",
        "  @Override public void getBindings(BindingsGroup bindings, Field.AModule module) {",
        "    bindings.contributeProvidesBinding(\"java.lang.String\",",
        "        new NameProvidesAdapter(module));", // eager new!
        "  }",
        "  public static final class NameProvidesAdapter", // corresponds to method name
        "      extends ProvidesBinding<String> implements Provider<String> {",
        "    private final Field.AModule module;",
        "    public NameProvidesAdapter(Field.AModule module) {",
        "      super(\"java.lang.String\", NOT_SINGLETON, \"Field.AModule\", \"name\");",
        "      this.module = module;",
        "      setLibrary(false);",
        "    }",
        "    @Override public String get() {",
        "      return module.name();", // corresponds to @Provides method
        "    }",
        "  }",
        "}"));

    JavaFileObject expectedInjectAdapterA =
        JavaFileObjects.forSourceString("Field$A$$InjectAdapter", Joiner.on("\n").join(
            "import dagger.internal.Binding;",
            "import dagger.internal.Linker;",
            "import java.util.Set;",
            "import javax.inject.Provider;",
            "public final class Field$A$$InjectAdapter",
            "    extends Binding<Field.A> implements Provider<Field.A> {",
            "  private Binding<String> name;", // For Constructor.
            "  public Field$A$$InjectAdapter() {",
            "    super(\"Field$A\", \"members/Field$A\", NOT_SINGLETON, Field.A.class);",
            "  }",
            "  @Override @SuppressWarnings(\"unchecked\")",
            "  public void attach(Linker linker) {",
            "    name = (Binding<String>)linker.requestBinding(",
            "      \"java.lang.String\", Field.A.class, getClass().getClassLoader());",
            "  }",
            "  @Override public void getDependencies(",
            "      Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {",
            "    getBindings.add(name);", // Name is added to dependencies.
            "  }",
            "  @Override public Field.A get() {",
            "    Field.A result = new Field.A(name.get());", // Adds constructor parameter.
            "    return result;",
            "  }",
            "}"));

    JavaFileObject expectedInjectAdapterB =
        JavaFileObjects.forSourceString("Field$B$$InjectAdapter", Joiner.on("\n").join(
            "import dagger.MembersInjector;",
            "import dagger.internal.Binding;",
            "import dagger.internal.Linker;",
            "import java.util.Set;",
            "import javax.inject.Provider;",
            "public final class Field$B$$InjectAdapter",
            "    extends Binding<Field.B> implements Provider<Field.B>, MembersInjector<Field.B> {",
            "  private Binding<String> name;", // For field.
            "  public Field$B$$InjectAdapter() {",
            "    super(\"Field$B\", \"members/Field$B\", NOT_SINGLETON, Field.B.class);",
            "  }",
            "  @Override @SuppressWarnings(\"unchecked\")",
            "  public void attach(Linker linker) {",
            "    name = (Binding<String>)linker.requestBinding(",
            "      \"java.lang.String\", Field.B.class, getClass().getClassLoader());",
            "  }",
            "  @Override public void getDependencies(",
            "      Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {",
            "    injectMembersBindings.add(name);", // Name is added to dependencies.
            "  }",
            "  @Override public Field.B get() {",
            "    Field.B result = new Field.B();",
            "    injectMembers(result);",
            "    return result;",
            "  }",
            "  @Override public void injectMembers(Field.B object) {",
            "    object.name = name.get();", // Inject field.
            "  }",
            "}"));
    ASSERT.about(javaSource()).that(sourceFile).processedWith(daggerProcessors())
        .compilesWithoutError()
        .and()
        .generatesSources(expectedModuleAdapter, expectedInjectAdapterA, expectedInjectAdapterB);
  }


  @Test public void providesHasParameterNamedModule() {
    JavaFileObject a = JavaFileObjects.forSourceString("A", Joiner.on("\n").join(
        "import javax.inject.Inject;",
        "class A { @Inject A(){ }}"));
    JavaFileObject b = JavaFileObjects.forSourceString("B", Joiner.on("\n").join(
        "import javax.inject.Inject;",
        "class B { @Inject B(){ }}"));

    JavaFileObject module = JavaFileObjects.forSourceString("BModule", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "import javax.inject.Inject;",
        "@Module(injects = B.class)",
        "class BModule { @Provides B b(A module) { return new B(); }}"));

    ASSERT.about(javaSources()).that(asList(a, b, module)).processedWith(daggerProcessors())
        .compilesWithoutError();
  }

}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/test/java/dagger/tests/integration/validation/CyclicModuleIncludesTest.java;<<<<<<< MINE
=======
/**
 * Copyright (c) 2013 Google, Inc.
 * Copyright (c) 2013 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dagger.tests.integration.validation;

import com.google.common.base.Joiner;
import com.google.testing.compile.JavaFileObjects;
import javax.tools.JavaFileObject;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
import static dagger.tests.integration.ProcessorTestUtils.daggerProcessors;
import static org.truth0.Truth.ASSERT;

@RunWith(JUnit4.class)
public class CyclicModuleIncludesTest {
  private final JavaFileObject javaFile =
      JavaFileObjects.forSourceString("CyclicModules", Joiner.on("\n").join(
          "import dagger.Module;",
          "class CyclicModules {",
          "  @Module(includes = SelfReferencingModule.class)",
          "  static class SelfReferencingModule { }",
          "  @Module(includes = Spock.class)",
          "  static class Rock {}",
          "  @Module(includes = Rock.class)",
          "  static class Paper {}",
          "  @Module(includes = Paper.class)",
          "  static class Scissors {}",
          "  @Module(includes = Scissors.class)",
          "  static class Lizard {}",
          "  @Module(includes = Lizard.class)",
          "  static class Spock {}",
          "}"));

  @Test public void cyclicModuleSelfIncludes() {
    ASSERT.about(javaSource()).that(javaFile).processedWith(daggerProcessors()).failsToCompile()
        .withErrorContaining("CyclicModules.SelfReferencingModule includes itself directly")
            .in(javaFile).onLine(4);
  }

  @Test public void cyclicModuleIncludes_full_cycle() {
    ASSERT.about(javaSource()).that(javaFile).processedWith(daggerProcessors()).failsToCompile()
        .withErrorContaining("0. CyclicModules.Rock included by CyclicModules.Paper")
            .in(javaFile).onLine(6).and()
        .withErrorContaining("1. CyclicModules.Paper included by CyclicModules.Scissors")
            .in(javaFile).onLine(6).and()
        .withErrorContaining("2. CyclicModules.Scissors included by CyclicModules.Lizard")
            .in(javaFile).onLine(6).and()
        .withErrorContaining("3. CyclicModules.Lizard included by CyclicModules.Spock")
            .in(javaFile).onLine(6).and()
        .withErrorContaining("4. CyclicModules.Spock included by CyclicModules.Rock")
            .in(javaFile).onLine(6);
  }

  @Test public void cyclicModuleIncludes_initial_inclusion() {
    ASSERT.about(javaSource()).that(javaFile).processedWith(daggerProcessors()).failsToCompile()
        .withErrorContaining("0. CyclicModules.Rock included by CyclicModules.Paper")
            .in(javaFile).onLine(6).and()
        .withErrorContaining("0. CyclicModules.Paper included by CyclicModules.Scissors")
            .in(javaFile).onLine(8).and()
        .withErrorContaining("0. CyclicModules.Scissors included by CyclicModules.Lizard")
            .in(javaFile).onLine(10).and()
        .withErrorContaining("0. CyclicModules.Lizard included by CyclicModules.Spock")
            .in(javaFile).onLine(12).and()
        .withErrorContaining("0. CyclicModules.Spock included by CyclicModules.Rock")
            .in(javaFile).onLine(14);
  }


}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/test/java/dagger/tests/integration/validation/GeneratedTypesNotReadyTest.java;<<<<<<< MINE
=======
/**
 * Copyright (c) 2013 Google, Inc.
 * Copyright (c) 2013 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dagger.tests.integration.validation;

import com.google.common.base.Joiner;
import com.google.testing.compile.JavaFileObjects;
import java.io.IOException;
import java.io.Writer;
import java.util.Set;
import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.TypeElement;
import javax.tools.JavaFileObject;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static com.google.common.collect.Iterables.concat;
import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
import static dagger.tests.integration.ProcessorTestUtils.daggerProcessors;
import static java.util.Arrays.asList;
import static org.truth0.Truth.ASSERT;

/**
 * Tests that the annotation processor(s) will properly handle the case where
 * code they are processing and depending on is generated by other processors
 * in the environment, and so the types they need may not exist yet.
 */
@RunWith(JUnit4.class)
public class GeneratedTypesNotReadyTest {
  private final JavaFileObject foo = JavaFileObjects.forSourceString("Foo", Joiner.on("\n").join(
      "package myPackage;",
      "public interface Foo {}"
  ));
  private final JavaFileObject main = JavaFileObjects.forSourceString("Main", Joiner.on("\n").join(
      "import javax.inject.Inject;",
      "import myPackage.Foo;",
      "class Main {",
      "  @Inject Foo f;",
      "}"));

  @Test public void withstandsMissingTypeReferencedInInjects() {
    // TODO(cgruber): remove Foo (interface) from this when injects= analysis is fixed.
    JavaFileObject module = JavaFileObjects.forSourceString("FooModule", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "import myPackage.Foo;",
        "@Module(injects = { Main.class, myPackage.FooImpl.class })",
        "class FooModule {",
        "  @Provides Foo provideFoo(myPackage.FooImpl impl) {",
        "    return impl;",
        "  }",
        "}"));

    ASSERT.about(javaSources()).that(asList(foo, main, module))
        .processedWith(concat(asList(new FooImplGenerator()), daggerProcessors()))
        .compilesWithoutError();
  }

  @Test public void withstandsMissingTypeReferencedInsideModule() {
    JavaFileObject module = JavaFileObjects.forSourceString("FooModule", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "import myPackage.Foo;",
        "@Module(injects = { Main.class })",
        "class FooModule {",
        "  @Provides Foo provideFoo(myPackage.FooImpl impl) {",
        "    return impl;",
        "  }",
        "}"));

    ASSERT.about(javaSources()).that(asList(foo, module, main))
        .processedWith(concat(daggerProcessors(), asList(new FooImplGenerator())))
        .compilesWithoutError();
  }

  @Test public void withstandsMissingTypeReferencedByProvidesReturnType() {
    JavaFileObject main = JavaFileObjects.forSourceString("Main", Joiner.on("\n").join(
        "import javax.inject.Inject;",
        "class Main {",
        "  @Inject myPackage.FooImpl f;",
        "}"));
    JavaFileObject module = JavaFileObjects.forSourceString("FooModule", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "@Module(injects = { Main.class })",
        "class FooModule {",
        "  @Provides myPackage.FooImpl provideFoo() {",
        "    return new myPackage.FooImpl();",
        "  }",
        "}"));

    ASSERT.about(javaSources()).that(asList(foo, module, main))
        .processedWith(concat(daggerProcessors(), asList(new FooImplGenerator())))
        .compilesWithoutError();
  }

  @Test public void failsWhenMissingGenericTypeReferencedByProvidesReturnType() {
    JavaFileObject main = JavaFileObjects.forSourceString("Main", Joiner.on("\n").join(
        "import javax.inject.Inject;",
        "class Main {",
        "  @Inject myPackage.FooImpl2<String> f;",
        "}"));
    JavaFileObject module = JavaFileObjects.forSourceString("FooModule", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "@Module(injects = { Main.class })",
        "class FooModule {",
        "  @Provides myPackage.FooImpl2<String> provideFoo() {",
        "    return new myPackage.FooImpl2<String>();",
        "  }",
        "}"));

    ASSERT.about(javaSources()).that(asList(foo, module, main))
        .processedWith(new FooImplGenerator())
        .compilesWithoutError();
    ASSERT.about(javaSources()).that(asList(foo, module, main))
        .processedWith(concat(daggerProcessors(), asList(new FooImplGenerator())))
        .failsToCompile()
        .withErrorContaining("Could not find types required by provides methods for [FooModule]");
  }

  @Test public void withstandsMissingTypeReferencedInTransitiveJITDependency() {
    JavaFileObject main = JavaFileObjects.forSourceString("Main", Joiner.on("\n").join(
        "import javax.inject.Inject;",
        "import myPackage.FooImpl;",
        "class Main {",
        "  @Inject FooImpl f;",
        "}"));
    JavaFileObject module = JavaFileObjects.forSourceString("FooModule", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "@Module(injects = { Main.class })",
        "class FooModule {",
        "}"));

    ASSERT.about(javaSources()).that(asList(foo, module, main))
        .processedWith(concat(daggerProcessors(), asList(new FooImplGenerator())))
        .compilesWithoutError();
  }

  @Test public void verifyFooImplGeneratorIsCompilingWithoutDagger() {
    JavaFileObject module = JavaFileObjects.forSourceString("FooModule", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "import myPackage.Foo;",
        "@Module(injects = { Main.class })",
        "class FooModule {",
        "  @Provides Foo provideFoo(myPackage.FooImpl impl) {",
        "    return impl;",
        "  }",
        "}"));
    ASSERT.about(javaSources()).that(asList(foo, module, main))
        .processedWith(new FooImplGenerator())
        .compilesWithoutError();
  }

  @SupportedAnnotationTypes("*")
  private final class FooImplGenerator extends AbstractProcessor {
    boolean written = false;
    @Override public boolean process(Set<? extends TypeElement> na1, RoundEnvironment na2) {
      if (!written) {
        try {
          JavaFileObject sourceFile = processingEnv.getFiler().createSourceFile("FooImpl");
          Writer writer = sourceFile.openWriter();
          writer.write(Joiner.on("\n").join(
              "package myPackage;",
              "import javax.inject.Inject;",
              "public final class FooImpl implements Foo {",
              "  @Inject public FooImpl() { }",
              "}"));
          writer.close();
          sourceFile = processingEnv.getFiler().createSourceFile("FooImpl2");
          writer = sourceFile.openWriter();
          writer.write(Joiner.on("\n").join(
              "package myPackage;",
              "import javax.inject.Inject;",
              "public final class FooImpl2<T> implements Foo {",
              "  @Inject public FooImpl2() { }",
              "}"));
          writer.close();
          written = true;
        } catch (IOException e) {
          throw new RuntimeException(e);
        }
      }
      return false;
    }

    @Override public SourceVersion getSupportedSourceVersion() {
      return SourceVersion.latestSupported();
    }
  }

}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/test/java/dagger/tests/integration/validation/LibraryModuleTest.java;<<<<<<< MINE
=======
/**
 * Copyright (C) 2013 Google, Inc.
 * Copyright (C) 2013 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dagger.tests.integration.validation;

import com.google.common.base.Joiner;
import com.google.testing.compile.JavaFileObjects;
import java.util.Arrays;
import javax.tools.JavaFileObject;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
import static dagger.tests.integration.ProcessorTestUtils.daggerProcessors;
import static org.truth0.Truth.ASSERT;

@RunWith(JUnit4.class)
public final class LibraryModuleTest {
  @Test public void unusedProviderMethodsPassOnLibrary() {
    JavaFileObject source = JavaFileObjects.forSourceString("Library", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "import java.lang.Override;",
        "@Module(library = true)",
        "class TestModule {",
        "  @Provides String string() {",
        "    return \"string\";",
        "  }",
        "}"));
    ASSERT.about(javaSource())
        .that(source).processedWith(daggerProcessors()).compilesWithoutError();
  }

  @Test public void unusedProviderMethodsFailOnNonLibrary() {
    JavaFileObject source = JavaFileObjects.forSourceString("Library", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "import java.lang.Override;",
        "@Module(library = false)",
        "class TestModule {",
        "  @Provides String string() {",
        "    return \"string\";",
        "  }",
        "}"));
    ASSERT.about(javaSource()).that(source).processedWith(daggerProcessors()).failsToCompile()
        .withErrorContaining("Graph validation failed:").in(source).onLine(5).and()
        .withErrorContaining("You have these unused @Provider methods:").in(source).onLine(5).and()
        .withErrorContaining("1. TestModule.string()").in(source).onLine(5).and()
        .withErrorContaining("Set library=true in your module").in(source).onLine(5);
  }

  @Test public void injectsOfInterfaceMakesProvidesBindingNotAnOrphan() {
    JavaFileObject foo = JavaFileObjects.forSourceString("Foo", "interface Foo {}");
    JavaFileObject module = JavaFileObjects.forSourceString("TestModule", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "import javax.inject.Singleton;",
        "@Module(injects = Foo.class, library = false)",
        "class TestModule {",
        "  @Singleton @Provides Foo provideFoo() {",
        "    return new Foo() {};",
        "  }",
        "}"));
    ASSERT.about(javaSources()).that(Arrays.asList(foo, module))
        .processedWith(daggerProcessors())
        .compilesWithoutError();
  }

  @Test public void injectsOfClassMakesProvidesBindingNotAnOrphan() {
    JavaFileObject foo = JavaFileObjects.forSourceString("Foo", "class Foo {}");
    JavaFileObject module = JavaFileObjects.forSourceString("TestModule", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "import javax.inject.Singleton;",
        "@Module(injects = Foo.class, library = false)",
        "class TestModule {",
        "  @Singleton @Provides Foo provideFoo() {",
        "    return new Foo() {};",
        "  }",
        "}"));
    ASSERT.about(javaSources()).that(Arrays.asList(foo, module))
        .processedWith(daggerProcessors())
        .compilesWithoutError();
  }

}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/test/java/dagger/tests/integration/validation/ScopeAnnotationUseTest.java;<<<<<<< MINE
=======
/**
 * Copyright (c) 2013 Google, Inc.
 * Copyright (c) 2013 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dagger.tests.integration.validation;

import com.google.common.base.Joiner;
import com.google.testing.compile.JavaFileObjects;
import javax.tools.JavaFileObject;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
import static dagger.tests.integration.ProcessorTestUtils.daggerProcessors;
import static java.util.Arrays.asList;
import static org.truth0.Truth.ASSERT;

/**
 * Integration tests for the validation processors related to the use
 * of Scoping Annotations.
 */
// TODO(cgruber): Audit this class when http://github.com/google/compile-testing
//                has error/warning counts and other warning predicates available.
@RunWith(JUnit4.class)
public class ScopeAnnotationUseTest {
  private static final String ABSTRACTION_SCOPING_TEXT =
      "Scoping annotations are only allowed on concrete types and @Provides methods:";

  // TODO(cgruber): uncomment when http://github.com/google/compile-testing supports warnings.
  //private static final String MISUSED_SCOPE_TEXT =
  //    "Dagger will ignore scoping annotations on methods that are not @Provides methods:";

  @Test public void compileSucceedsScopeOnConcreteType() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Test", Joiner.on("\n").join(
        "import javax.inject.Inject;",
        "import javax.inject.Singleton;",
        "@Singleton",
        "class Test {",
        "  @Inject public Test() { }",
        "}"));

    // TODO(cgruber): uncomment when http://github.com/google/compile-testing has hasNoWarnings()
    ASSERT.about(javaSource())
        .that(sourceFile).processedWith(daggerProcessors()).compilesWithoutError();
        //.and().hasNoWarnings();
  }

  @Test public void compileSucceedsScopeOnProvidesMethod() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Test", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "import javax.inject.Singleton;",
        "@Module(library = true, injects = String.class)",
        "class Test {",
        "  @Provides @Singleton public String provideString() { return \"\"; }",
        "}"));

    // TODO(cgruber): uncomment when http://github.com/google/compile-testing has hasNoWarnings()
    ASSERT.about(javaSource())
        .that(sourceFile).processedWith(daggerProcessors()).compilesWithoutError();
        //.and().hasNoWarnings();
  }

  @Test public void compileSucceedsWithScopedSuppressedNonProvidesMethod() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Test", Joiner.on("\n").join(
        "import javax.inject.Singleton;",
        "class Test {",
        "  @SuppressWarnings(\"scoping\")",
        "  @Singleton void method() { }",
        "}"));

    // TODO(cgruber): uncomment when http://github.com/google/compile-testing has hasNoWarnings()
    ASSERT.about(javaSource())
        .that(sourceFile).processedWith(daggerProcessors()).compilesWithoutError();
        //.and().hasNoWarnings();
  }

  @Test public void compileSucceedsWithScopedMultiplySuppressedNonProvidesMethod() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Test", Joiner.on("\n").join(
        "import javax.inject.Singleton;",
        "class Test {",
        "  @SuppressWarnings({\"blah\", \"scoping\", \"foo\"})",
        "  @Singleton void method() { }",
        "}"));

    // TODO(cgruber): uncomment when http://github.com/google/compile-testing has hasNoWarnings()
    ASSERT.about(javaSource())
        .that(sourceFile).processedWith(daggerProcessors()).compilesWithoutError();
        //.and().hasNoWarnings();
  }

  @Test public void compileWarnsWithScopedNonProvidesMethod() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Test", Joiner.on("\n").join(
        "import javax.inject.Singleton;",
        "class Test {",
        "  @Singleton void method() { }",
        "}"));

    // TODO(cgruber): uncomment when http://github.com/google/compile-testing supports warnings.
    ASSERT.about(javaSource())
        .that(sourceFile).processedWith(daggerProcessors()).compilesWithoutError();
        //.withWarningContaining(MISUSED_SCOPE_TEXT).in(sourceFile).onLine(3).atColumn(49).and()
        //.withWarningContaining("Test.method()").in(sourceFile).onLine(3).atColumn(49);
  }

  @Test public void compileWarnsWithScopedIncorrectlySuppressedNonProvidesMethod() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Test", Joiner.on("\n").join(
        "import javax.inject.Singleton;",
        "class Test {",
        "  @SuppressWarnings(\"some string other than 'scoping'\")",
        "  @Singleton void method() { }",
        "}"));

    // TODO(cgruber): uncomment when http://github.com/google/compile-testing supports warnings.
    ASSERT.about(javaSource())
        .that(sourceFile).processedWith(daggerProcessors()).compilesWithoutError();
        //.withWarningContaining(MISUSED_SCOPE_TEXT).in(sourceFile).onLine(4).atColumn(49).and()
        //.withWarningContaining("Test.method()").in(sourceFile).onLine(4).atColumn(49);
  }

  @Test public void compileFailsWithScopeOnInterface() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Test", Joiner.on("\n").join(
        "import dagger.Module;",
        "import javax.inject.Singleton;",
        "class Test {",
        "  @Module(injects = TestType.class) class TestModule { }",
        "  @Singleton interface TestType { }",
        "}"));

    ASSERT.about(javaSource())
        .that(sourceFile).processedWith(daggerProcessors()).failsToCompile()
        .withErrorContaining(ABSTRACTION_SCOPING_TEXT).in(sourceFile).onLine(5).atColumn(14).and()
        .withErrorContaining("Test.TestType").in(sourceFile).onLine(5).atColumn(14);
  }

  @Test public void compileFailsWithScopeOnAbstractClass() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Test", Joiner.on("\n").join(
        "import dagger.Module;",
        "import javax.inject.Singleton;",
        "class Test {",
        "  @Module(injects = TestType.class) class TestModule { }",
        "  @Singleton abstract class TestType { }",
        "}"));

    ASSERT.about(javaSource())
        .that(sourceFile).processedWith(daggerProcessors()).failsToCompile()
        .withErrorContaining(ABSTRACTION_SCOPING_TEXT).in(sourceFile).onLine(5).atColumn(23).and()
        .withErrorContaining("Test.TestType").in(sourceFile).onLine(5).atColumn(23);
  }

  @Test public void compileFailsWithScopeOnField() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Test", Joiner.on("\n").join(
        "import dagger.Module;",
        "import javax.inject.Inject;",
        "import javax.inject.Singleton;",
        "class Test {",
        "  @Singleton String field;",
        "  @Inject public Test() { }",
        "  @Module(injects = Test.class) class TestModule { }",
        "}"));

    ASSERT.about(javaSource())
        .that(sourceFile).processedWith(daggerProcessors()).failsToCompile()
        .withErrorContaining(ABSTRACTION_SCOPING_TEXT).in(sourceFile).onLine(5).atColumn(21).and()
        .withErrorContaining("Test.field").in(sourceFile).onLine(5).atColumn(21);
  }

  @Test public void compileFailsWithScopeOnMethodParameter() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Test", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "import javax.inject.Singleton;",
        "@Module(library = true, injects = String.class)",
        "class Test {",
        "  @Provides int provideInteger() { return 0; }",
        "  @Provides String provideString(@Singleton int intParam) { return \"\"; }",
        "}"));

    ASSERT.about(javaSource())
        .that(sourceFile).processedWith(daggerProcessors()).failsToCompile()
        .withErrorContaining(ABSTRACTION_SCOPING_TEXT).in(sourceFile).onLine(7).atColumn(49).and()
        .withErrorContaining("intParam").in(sourceFile).onLine(7).atColumn(49);
  }

  @Test public void compileFailsWithMultipleScopeAnnotations() {
    JavaFileObject annotation = JavaFileObjects.forSourceString("MyScope", Joiner.on("\n").join(
        "import java.lang.annotation.Retention;",
        "import javax.inject.Scope;",
        "import static java.lang.annotation.RetentionPolicy.RUNTIME;",
        "@Scope @Retention(RUNTIME) public @interface MyScope { }"));

    JavaFileObject module = JavaFileObjects.forSourceString("MyModule", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "import javax.inject.Singleton;",
        "@Module(library = true, injects = Injectable.class)",
        "class MyModule {",
        "  @Provides @Singleton @MyScope String method() { return \"\"; }",
        "}"));

    JavaFileObject injectable = JavaFileObjects.forSourceString("Test", Joiner.on("\n").join(
        "import javax.inject.Inject;",
        "import javax.inject.Singleton;",
        "@Singleton @MyScope",
        "class Injectable {",
        "  @Inject String string;",
        "}"));

    String error = "Only one scoping annotation is allowed per element: ";

    ASSERT.about(javaSources()).that(asList(annotation, module, injectable))
        .processedWith(daggerProcessors()).failsToCompile()
        .withErrorContaining(error + "MyModule.method()").in(module).onLine(6).atColumn(40).and()
        .withErrorContaining(error + "Injectable").in(injectable).onLine(4).atColumn(1);
  }

  @Test public void compileFailsWithScopeOnConstructor() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Test", Joiner.on("\n").join(
        "import dagger.Module;",
        "import javax.inject.Inject;",
        "import javax.inject.Singleton;",
        "class Test {",
        "  @Singleton @Inject public Test() { }",
        "  @Module(injects = Test.class) class TestModule { }",
        "}"));

   String singletonErrorText = ""
        + "Singleton annotations have no effect on constructors. "
        + "Did you mean to annotate the class?";

    ASSERT.about(javaSource())
        .that(sourceFile).processedWith(daggerProcessors()).failsToCompile()
        .withErrorContaining(ABSTRACTION_SCOPING_TEXT).in(sourceFile).onLine(5).atColumn(29).and()
        .withErrorContaining("Test.Test()").in(sourceFile).onLine(5).atColumn(29).and()
        .withErrorContaining(singletonErrorText).in(sourceFile).onLine(6).atColumn(33);
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/test/java/dagger/tests/integration/validation/SimpleMissingDependencyTest.java;<<<<<<< MINE
=======
/**
 * Copyright (c) 2013 Google, Inc.
 * Copyright (c) 2013 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dagger.tests.integration.validation;

import com.google.common.base.Joiner;
import com.google.testing.compile.JavaFileObjects;
import javax.tools.JavaFileObject;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
import static dagger.tests.integration.ProcessorTestUtils.daggerProcessors;
import static org.truth0.Truth.ASSERT;

@RunWith(JUnit4.class)
public class SimpleMissingDependencyTest {

  @Test public void missingDependency() {
    JavaFileObject file = JavaFileObjects.forSourceString("MissingDep", Joiner.on("\n").join(
        "import dagger.Module;",
        "import javax.inject.Inject;",
        "class MissingDep {",
        "  @Inject Dependency dep;",
        "  static interface Dependency {",
        "    void doit();",
        "  }",
        "  @Module(injects = MissingDep.class)",
        "  static class DaModule {",
        "    /* missing */ // @Provides Dependency a() { return new Dependency(); }",
        "  }",
        "}"));

    ASSERT.about(javaSource())
        .that(file).processedWith(daggerProcessors())
        .failsToCompile()
        .withErrorContaining("MissingDep$Dependency could not be bound").in(file).onLine(9).and()
        .withErrorContaining("required by MissingDep for MissingDep.DaModule").in(file).onLine(9);
  }
}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/test/java/dagger/tests/integration/validation/CyclicDependencyTest.java;<<<<<<< MINE
=======
/**
 * Copyright (c) 2013 Google, Inc.
 * Copyright (c) 2013 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dagger.tests.integration.validation;

import com.google.common.base.Joiner;
import com.google.testing.compile.JavaFileObjects;
import javax.tools.JavaFileObject;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
import static dagger.tests.integration.ProcessorTestUtils.daggerProcessors;
import static org.truth0.Truth.ASSERT;

@RunWith(JUnit4.class)
public class CyclicDependencyTest {

  @Test public void cyclicDepsWithInjectables() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("CyclicDeps", Joiner.on("\n").join(
        "import dagger.Module;",
        "import javax.inject.Inject;",
        "class CyclicDeps {",
        "  static class Foo {",
        "    @Inject Foo(Bar b) { }",
        "  }",
        "  static class Bar {",
        "    @Inject Bar(Blah b) { }",
        "  }",
        "  static class Blah {",
        "    @Inject Blah(Foo f) { }",
        "  }",
        "  static class EntryPoint {",
        "    @Inject Foo f;",
        "  }",
        "  @Module(injects = EntryPoint.class)",
        "  static class TestModule { }",
        "}"));

    ASSERT.about(javaSource()).that(sourceFile).processedWith(daggerProcessors()).failsToCompile()
        .withErrorContaining("0. CyclicDeps$Foo bound by").in(sourceFile).onLine(17).and()
        .withErrorContaining("1. CyclicDeps$Bar bound by").in(sourceFile).onLine(17).and()
        .withErrorContaining("2. CyclicDeps$Blah bound by").in(sourceFile).onLine(17);
  }

  @Test public void cyclicDepsWithProvidesMethods() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("CyclicDeps", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "class CyclicDeps {",
        "  static class A { }",
        "  static class B { }",
        "  static class C { }",
        "  static class D { }",
        "  @Module(injects = D.class)",
        "  static class CyclicModule {",
        "    @Provides A a(D d) { return null; }",
        "    @Provides B b(A a) { return null; }",
        "    @Provides C c(B b) { return null; }",
        "    @Provides D d(C c) { return null; }",
        "  }",
        "}"));

    ASSERT.about(javaSource()).that(sourceFile).processedWith(daggerProcessors()).failsToCompile()
        .withErrorContaining("0. CyclicDeps$A bound by Provides").in(sourceFile).onLine(9).and()
        .withErrorContaining("1. CyclicDeps$D bound by Provides").in(sourceFile).onLine(9).and()
        .withErrorContaining("2. CyclicDeps$C bound by Provides").in(sourceFile).onLine(9).and()
        .withErrorContaining("3. CyclicDeps$B bound by Provides").in(sourceFile).onLine(9);
  }

}>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/volley/revisions/rev_46741f2_07e780c/rev_46741f2-07e780c/src/main/java/com/android/volley/toolbox/ImageLoader.java;<<<<<<< MINE
        return get(requestUrl, listener, 0, 0, ScaleType.CENTER_INSIDE);
=======
        return get(requestUrl, listener, 0, 0);
    }

    /**
     * Equivalent to calling {@link #get(String, ImageListener, int, int, ScaleType)} with
     * {@code Scaletype == ScaleType.CENTER_INSIDE}.
     */
    public ImageContainer get(String requestUrl, ImageListener imageListener,
            int maxWidth, int maxHeight) {
        return get(requestUrl, imageListener, maxWidth, maxHeight, ScaleType.CENTER_INSIDE);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/volley/revisions/rev_0d6df2e_331e52b/rev_0d6df2e-331e52b/src/main/java/com/android/volley/toolbox/ImageRequest.java;<<<<<<< MINE
=======
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.widget.ImageView.ScaleType;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/volley/revisions/rev_0d6df2e_331e52b/rev_0d6df2e-331e52b/src/main/java/com/android/volley/toolbox/ImageRequest.java;<<<<<<< MINE
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.widget.ImageView.ScaleType;

=======
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/volley/revisions/rev_0d6df2e_331e52b/rev_0d6df2e-331e52b/src/main/java/com/android/volley/toolbox/ImageRequest.java;<<<<<<< MINE
    private static final int IMAGE_TIMEOUT_MS = 1000;
=======
    public static final int DEFAULT_IMAGE_TIMEOUT_MS = 1000;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/volley/revisions/rev_0d6df2e_331e52b/rev_0d6df2e-331e52b/src/main/java/com/android/volley/toolbox/ImageRequest.java;<<<<<<< MINE
    private static final int IMAGE_MAX_RETRIES = 2;
=======
    public static final int DEFAULT_IMAGE_MAX_RETRIES = 2;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/volley/revisions/rev_0d6df2e_331e52b/rev_0d6df2e-331e52b/src/main/java/com/android/volley/toolbox/ImageRequest.java;<<<<<<< MINE
    private static final float IMAGE_BACKOFF_MULT = 2f;
=======
    public static final float DEFAULT_IMAGE_BACKOFF_MULT = 2f;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/volley/revisions/rev_0d6df2e_331e52b/rev_0d6df2e-331e52b/src/main/java/com/android/volley/toolbox/ImageRequest.java;<<<<<<< MINE
        super(Method.GET, url, errorListener); 
        setRetryPolicy(
                new DefaultRetryPolicy(IMAGE_TIMEOUT_MS, IMAGE_MAX_RETRIES, IMAGE_BACKOFF_MULT));
=======
        super(Method.GET, url, errorListener);
        setRetryPolicy(new DefaultRetryPolicy(DEFAULT_IMAGE_TIMEOUT_MS, DEFAULT_IMAGE_MAX_RETRIES,
                DEFAULT_IMAGE_BACKOFF_MULT));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/volley/revisions/rev_0d6df2e_331e52b/rev_0d6df2e-331e52b/src/test/java/com/android/volley/toolbox/ImageRequestTest.java;<<<<<<< MINE
=======

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/volley/revisions/rev_0d6df2e_331e52b/rev_0d6df2e-331e52b/src/test/java/com/android/volley/toolbox/ImageRequestTest.java;<<<<<<< MINE
=======
        assertEquals(ImageRequest.DEFAULT_IMAGE_TIMEOUT_MS, 1000);
        assertEquals(ImageRequest.DEFAULT_IMAGE_MAX_RETRIES, 2);
        assertEquals(ImageRequest.DEFAULT_IMAGE_BACKOFF_MULT, 2f);
>>>>>>> YOURS
