revision;file;methodsignature;leftbody;basebody;rightbody
/home/paper219/Desktop/analysis/demonstration//projects/BottomBar/revisions/rev_aa164a0_7f0c347/rev_aa164a0-7f0c347;/bottom-bar/src/main/java/com/roughike/bottombar/scrollsweetness/BottomNavigationBehavior;updateSnackbar(CoordinatorLayout,View,View);;;                if (ViewCompat.getTranslationY(child) != 0) return;
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_52d21ee_0cd5aaf/rev_52d21ee-0cd5aaf;/modules/swagger-oauth2-auth-server/src/main/scala/com/wordnik/swagger/auth/service/TokenScope;setUsername(String);;;public static void setUsername(String username) {
    userThreadLocal.set(username);
  }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_52d21ee_0cd5aaf/rev_52d21ee-0cd5aaf;/modules/swagger-oauth2-auth-server/src/main/scala/com/wordnik/swagger/auth/service/TokenScope;unsetUsername();;;public static void unsetUsername() {
    userThreadLocal.remove();
  }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_7d577f8_a748922/rev_7d577f8-a748922;/modules/swagger-oauth2-auth-server/src/main/scala/com/wordnik/swagger/auth/service/TokenScope;setUsername(String);;;public static void setUsername(String username) {
    userThreadLocal.set(username);
  }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_7d577f8_a748922/rev_7d577f8-a748922;/modules/swagger-oauth2-auth-server/src/main/scala/com/wordnik/swagger/auth/service/TokenScope;getUsername();;;public static String getUsername() {
    return (String)userThreadLocal.get();
  }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_7d577f8_a748922/rev_7d577f8-a748922;/modules/swagger-oauth2-auth-server/src/main/scala/com/wordnik/swagger/auth/service/TokenScope;unsetUsername();;;public static void unsetUsername() {
    userThreadLocal.remove();
  }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_5369ed1_0b9b59c/rev_5369ed1-0b9b59c;/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/resource/QueryResultBean;getSkip();;;public Integer getSkip() {
    return skip;
  }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_5369ed1_0b9b59c/rev_5369ed1-0b9b59c;/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/resource/QueryResultBean;setSkip(Integer);;;public void setSkip(Integer skip) {
    this.skip = skip;
  }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_5369ed1_0b9b59c/rev_5369ed1-0b9b59c;/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/resource/QueryResultBean;getLimit();;;public Integer getLimit() {
    return limit;
  }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_5369ed1_0b9b59c/rev_5369ed1-0b9b59c;/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/resource/QueryResultBean;setLimit(Integer);;;public void setLimit(Integer limit) {
    this.limit = limit;
  }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_d9f3dd3_e85702c/rev_d9f3dd3-e85702c;/modules/swagger-models/src/main/java/com/wordnik/swagger/models/parameters/Parameter;setRequired(boolean);;;void setRequired(boolean required);
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad;/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/DecimalProperty;xml(Xml);;;public DecimalProperty xml(Xml xml) {
    this.setXml(xml);
    return this;
  }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad;/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/BooleanProperty;xml(Xml);;;public BooleanProperty xml(Xml xml) {
    this.setXml(xml);
    return this;
  }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad;/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/FloatProperty;xml(Xml);;;public FloatProperty xml(Xml xml) {
    this.setXml(xml);
    return this;
  }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad;/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/FileProperty;xml(Xml);;;public FileProperty xml(Xml xml) {
    this.setXml(xml);
    return this;
  }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad;/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/DateProperty;xml(Xml);;;public DateProperty xml(Xml xml) {
    this.setXml(xml);
    return this;
  }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad;/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/UUIDProperty;xml(Xml);;;public UUIDProperty xml(Xml xml) {
    this.setXml(xml);
    return this;
  }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad;/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/IntegerProperty;xml(Xml);;;public IntegerProperty xml(Xml xml) {
    this.setXml(xml);
    return this;
  }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad;/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/DateTimeProperty;xml(Xml);;;public DateTimeProperty xml(Xml xml) {
    this.setXml(xml);
    return this;
  }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad;/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/ObjectProperty;xml(Xml);;;public ObjectProperty xml(Xml xml) {
    this.setXml(xml);
    return this;
  }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad;/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/ArrayProperty;xml(Xml);;;public ArrayProperty xml(Xml xml) {
    this.setXml(xml);
    return this;
  }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad;/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/LongProperty;xml(Xml);;;public LongProperty xml(Xml xml) {
    this.setXml(xml);
    return this;
  }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad;/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/DoubleProperty;xml(Xml);;;public DoubleProperty xml(Xml xml) {
    this.setXml(xml);
    return this;
  }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad;/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/StringProperty;xml(Xml);;;public StringProperty xml(Xml xml) {
    this.setXml(xml);
    return this;
  }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad;/modules/swagger-models/src/main/java/com/wordnik/swagger/models/properties/MapProperty;xml(Xml);;;public MapProperty xml(Xml xml) {
    this.setXml(xml);
    return this;
  }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_c784806_eaf37e8/rev_c784806-eaf37e8;/modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader;ContainerWrapper(String);;;ContainerWrapper(String container) {
      this.container = container;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_c784806_eaf37e8/rev_c784806-eaf37e8;/modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader;wrap(String,Property);;;public Property wrap(String container, Property property) {
      if (this.container.equalsIgnoreCase(container)) {
        return doWrap(property);
      }
      return null;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_c784806_eaf37e8/rev_c784806-eaf37e8;/modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader;wrapContainer(String,Property,ContainerWrapper);;;public static Property wrapContainer(String container, Property property, ContainerWrapper... allowed) {
      final Set<ContainerWrapper> tmp = allowed.length > 0 ? EnumSet.copyOf(Arrays.asList(allowed)) : EnumSet.allOf(ContainerWrapper.class);
      for (ContainerWrapper wrapper : tmp) {
        final Property prop = wrapper.wrap(container, property);
        if (prop != null) {
          return prop;
        }
      }
      return property;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_c784806_eaf37e8/rev_c784806-eaf37e8;/modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader;doWrap(Property);;;protected abstract Property doWrap(Property property);
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_2338ebe_a2a9a04/rev_2338ebe-a2a9a04;/modules/swagger-jaxrs/src/test/java/io/swagger/models/Sample;getName();;;public String getName() {
        return name;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_2338ebe_a2a9a04/rev_2338ebe-a2a9a04;/modules/swagger-jaxrs/src/test/java/io/swagger/models/Sample;setName(String);;;public void setName(String name) {
        this.name = name;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_2338ebe_a2a9a04/rev_2338ebe-a2a9a04;/modules/swagger-jaxrs/src/test/java/io/swagger/models/Sample;getValue();;;public String getValue() {
        return value;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_2338ebe_a2a9a04/rev_2338ebe-a2a9a04;/modules/swagger-jaxrs/src/test/java/io/swagger/models/Sample;setValue(String);;;public void setValue(String value) {
        this.value = value;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_2338ebe_a2a9a04/rev_2338ebe-a2a9a04;/modules/swagger-jaxrs/src/test/java/io/swagger/models/duplicated/Tag;getId();;;@XmlElement(name = "id")
    public long getId() {
        return id;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_2338ebe_a2a9a04/rev_2338ebe-a2a9a04;/modules/swagger-jaxrs/src/test/java/io/swagger/models/duplicated/Tag;setId(long);;;public void setId(long id) {
        this.id = id;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_2338ebe_a2a9a04/rev_2338ebe-a2a9a04;/modules/swagger-jaxrs/src/test/java/io/swagger/models/duplicated/Tag;getName();;;@XmlElement(name = "name")
    public String getName() {
        return name;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_2338ebe_a2a9a04/rev_2338ebe-a2a9a04;/modules/swagger-jaxrs/src/test/java/io/swagger/models/duplicated/Tag;setName(String);;;public void setName(String name) {
        this.name = name;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_36a5d31_0553cfb/rev_36a5d31-0553cfb;/modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/models/Pagination;getSkip();;;public Integer getSkip() {
        return skip;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_36a5d31_0553cfb/rev_36a5d31-0553cfb;/modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/models/Pagination;setSkip(Integer);;;public void setSkip(Integer skip) {
        this.skip = skip;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_36a5d31_0553cfb/rev_36a5d31-0553cfb;/modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/models/Pagination;getLimit();;;public Integer getLimit() {
        return limit;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_36a5d31_0553cfb/rev_36a5d31-0553cfb;/modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/models/Pagination;setLimit(Integer);;;public void setLimit(Integer limit) {
        this.limit = limit;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader;parseMethod(Class<?>,Method,List<Parameter>);;;private Operation parseMethod(Class<?> cls, Method method, List<Parameter> globalParameters) {
        Operation operation = new Operation();

        ApiOperation apiOperation = getAnnotation(method, ApiOperation.class);
        ApiResponses responseAnnotation = getAnnotation(method, ApiResponses.class);

        String operationId = method.getName();
        String responseContainer = null;

        Type responseType = null;
        Map<String, Property> defaultResponseHeaders = new HashMap<String, Property>();

        if (apiOperation != null) {
            if (apiOperation.hidden()) {
                return null;
            }
            if (!"".equals(apiOperation.nickname())) {
                operationId = method.getName();
            }

            defaultResponseHeaders = parseResponseHeaders(apiOperation.responseHeaders());

            operation
                    .summary(apiOperation.value())
                    .description(apiOperation.notes());

            if (apiOperation.response() != null && !isVoid(apiOperation.response())) {
                responseType = apiOperation.response();
            }
            if (!"".equals(apiOperation.responseContainer())) {
                responseContainer = apiOperation.responseContainer();
            }
            if (apiOperation.authorizations() != null) {
                List<SecurityRequirement> securities = new ArrayList<SecurityRequirement>();
                for (Authorization auth : apiOperation.authorizations()) {
                    if (auth.value() != null && !"".equals(auth.value())) {
                        SecurityRequirement security = new SecurityRequirement();
                        security.setName(auth.value());
                        AuthorizationScope[] scopes = auth.scopes();
                        for (AuthorizationScope scope : scopes) {
                            if (scope.scope() != null && !"".equals(scope.scope())) {
                                security.addScope(scope.scope());
                            }
                        }
                        securities.add(security);
                    }
                }
                if (securities.size() > 0) {
                    for (SecurityRequirement sec : securities) {
                        operation.security(sec);
                    }
                }
            }
            if (apiOperation.consumes() != null && !apiOperation.consumes().isEmpty()) {
                operation.consumes(apiOperation.consumes());
            }
            if (apiOperation.produces() != null && !apiOperation.produces().isEmpty()) {
                operation.produces(apiOperation.produces());
            }
        }

        if (apiOperation != null && StringUtils.isNotEmpty(apiOperation.responseReference())) {
            Response response = new Response().description(SUCCESSFUL_OPERATION);
            response.schema(new RefProperty(apiOperation.responseReference()));
            operation.addResponse(String.valueOf(apiOperation.code()), response);
        } else if (responseType == null) {
            // pick out response from method declaration
            LOGGER.debug("picking up response class from method " + method);
            responseType = method.getGenericReturnType();
        }
        if (isValidResponse(responseType)) {
            final Property property = ModelConverters.getInstance().readAsProperty(responseType);
            if (property != null) {
                final Property responseProperty = ContainerWrapper.wrapContainer(responseContainer, property);
                final int responseCode = apiOperation == null ? 200 : apiOperation.code();
                operation.response(responseCode, new Response().description(SUCCESSFUL_OPERATION).schema(responseProperty)
                        .headers(defaultResponseHeaders));
                appendModels(responseType);
            }
        }

        operation.operationId(operationId);

        Annotation annotation;
        if (apiOperation != null && apiOperation.consumes() != null && apiOperation.consumes().isEmpty()) {
            annotation = getAnnotation(method, Consumes.class);
            if (annotation != null) {
                String[] apiConsumes = ((Consumes) annotation).value();
                for (String mediaType : apiConsumes) {
                    operation.consumes(mediaType);
                }
            }
        }

        if (apiOperation != null && apiOperation.produces() != null && apiOperation.produces().isEmpty()) {
            annotation = getAnnotation(method, Produces.class);
            if (annotation != null) {
                String[] apiProduces = ((Produces) annotation).value();
                for (String mediaType : apiProduces) {
                    operation.produces(mediaType);
                }
            }
        }

        List<ApiResponse> apiResponses = new ArrayList<ApiResponse>();
        if (responseAnnotation != null) {
            for (ApiResponse apiResponse : responseAnnotation.value()) {
                Map<String, Property> responseHeaders = parseResponseHeaders(apiResponse.responseHeaders());

                Response response = new Response()
                        .description(apiResponse.message())
                        .headers(responseHeaders);

                if (apiResponse.code() == 0) {
                    operation.defaultResponse(response);
                } else {
                    operation.response(apiResponse.code(), response);
                }

                if (StringUtils.isNotEmpty(apiResponse.reference())) {
                    response.schema(new RefProperty(apiResponse.reference()));
                } else if (!isVoid(apiResponse.response())) {
                    responseType = apiResponse.response();
                    final Property property = ModelConverters.getInstance().readAsProperty(responseType);
                    if (property != null) {
                        response.schema(ContainerWrapper.wrapContainer(apiResponse.responseContainer(), property));
                        appendModels(responseType);
                    }
                }
            }
        }
        if (getAnnotation(method, Deprecated.class) != null) {
            operation.setDeprecated(true);
        }

        // process parameters
        for (Parameter globalParameter : globalParameters) {
            operation.parameter(globalParameter);
        }

        Type[] genericParameterTypes = method.getGenericParameterTypes();
        Annotation[][] paramAnnotations = method.getParameterAnnotations();
        for (int i = 0; i < genericParameterTypes.length; i++) {
            final Type type = TypeFactory.defaultInstance().constructType(genericParameterTypes[i], cls);
            List<Parameter> parameters = getParameters(type, Arrays.asList(paramAnnotations[i]));

            for (Parameter parameter : parameters) {
                operation.parameter(parameter);
            }
        }

        if (operation.getResponses() == null) {
            Response response = new Response().description(SUCCESSFUL_OPERATION);
            operation.defaultResponse(response);
        }
        return operation;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader;getParameters(Type,List<Annotation>);;;
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/utils/ReflectionUtils;getDeclaredFields(Class<?>);;;public static List<Field> getDeclaredFields(Class<?> cls) {
        if (cls.equals(Object.class)) {
            return Collections.emptyList();
        }
        final List<Field> fields = new ArrayList<Field>();
        final Set<String> fieldNames = new HashSet<String>();
        for (Field field : cls.getDeclaredFields()) {
            fields.add(field);
            fieldNames.add(field.getName());
        }
        for (Field field : getDeclaredFields(cls.getSuperclass())) {
            if (!fieldNames.contains(field.getName())) {
                fields.add(field);
            }
        }
        return fields;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-jaxrs/src/test/java/io/swagger/GenericsTest;scanModelWithGenericType();;;@Test(description = "scan model with Generic Type")
    public void scanModelWithGenericType() {
        final Swagger swagger = new Reader(new Swagger()).read(UserApiRoute.class);
        assertNotNull(swagger);
        final Model userEntity = swagger.getDefinitions().get("UserEntity");
        assertNotNull(userEntity);
        final Map<String, Property> properties = userEntity.getProperties();
        assertEquals(properties.size(), 2);
        assertNotNull(properties.get("id"));
        assertNotNull(properties.get("name"));
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-jaxrs/src/test/java/io/swagger/ReaderTest;scanParametersFromBaseResource();;;@Test(description = "it should scan parameters from base resource class")
    public void scanParametersFromBaseResource(){
        Swagger swagger = getSwagger(BookResource.class);
        assertNotNull(swagger);

        List<Parameter> parameters =  getGet(swagger, "/{id}/v1/books/{name}").getParameters();
        assertEquals(parameters.size(), 4);

        Parameter description = parameters.get(0);
        assertTrue(description instanceof PathParameter);
        assertEquals(description.getName(), "description");
        assertEquals(description.getDescription(), "Overriden description");

        Parameter id = parameters.get(1);
        assertTrue(id instanceof PathParameter);
        assertEquals(id.getName(), "id");
        assertEquals(id.getDescription(), "The Identifier of entity");

        Parameter test = parameters.get(2);
        assertTrue(test instanceof QueryParameter);
        assertEquals(test.getName(), "test");
        assertEquals(test.getDescription(), "Test Query Param");

        Parameter name = parameters.get(3);
        assertTrue(name instanceof PathParameter);
        assertEquals(name.getName(), "name");
        assertEquals(name.getDescription(), "The books name");
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-jaxrs/src/test/java/io/swagger/resources/BaseResource;getId();;;public String getId() {
        return id;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-jaxrs/src/test/java/io/swagger/resources/BaseResource;setId(String);;;public void setId(String id) {
        this.id = id;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-jaxrs/src/test/java/io/swagger/resources/BaseResource;getDescription();;;public String getDescription() {
        return description;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-jaxrs/src/test/java/io/swagger/resources/BaseResource;setDescription(String);;;public void setDescription(String description) {
        this.description = description;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-jaxrs/src/test/java/io/swagger/resources/generics/ApiCrudRoute;doCreate(T);;;@POST
    @ApiOperation(value = "Create")
    public Response doCreate(
            @ApiParam(value = "Create object", required = true) T entity) throws Exception {
        service.add(entity);
        return new Response();
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-core/src/main/java/io/swagger/util/PropertyDeserializer;getVendorExtensions(JsonNode);;;
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-core/src/main/java/io/swagger/util/PropertyDeserializer;getVendorExtensions(JsonNode);;;
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-core/src/main/java/io/swagger/util/PropertyDeserializer;propertyFromNode(JsonNode);;;
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-core/src/main/java/io/swagger/util/PropertyDeserializer;propertyFromNode(JsonNode);;;        
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-core/src/test/java/io/swagger/ModelSerializerTest;integerEnumGeneration();;;@Test(description = "it should generate an integer field with enum")
    public void integerEnumGeneration() throws IOException {
        final String json = "{\n" +
                "   \"properties\":{\n" +
                "      \"id\":{\n" +
                "         \"description\":\"fun!\",\n" +
                "         \"type\":\"integer\",\n" +
                "         \"format\":\"int32\",\n" +
                "         \"readOnly\":true,\n" +
                "         \"enum\": [ 0, 1]\n" +
                "      }\n" +
                "   }\n" +
                "}";
        final ModelImpl model = Json.mapper().readValue(json, ModelImpl.class);
        IntegerProperty p = (IntegerProperty)model.getProperties().get("id");

        assertNotNull(p.getEnum());
        assertEquals(p.getEnum().get(0), new Integer(0));
        assertEquals(p.getEnum().get(1), new Integer(1));
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-core/src/test/java/io/swagger/util/JsonDeserializationTest;testDeserializePropertyWithVendorExtensions();;;
        //check for vendor extensions in array property types
        vendorExtensions = swagger.getDefinitions().get("Health").getProperties().get("array").getVendorExtensions();

        xStringValue = (String) vendorExtensions.get("x-string-value");
        assertNotNull(xStringValue);
        assertEquals(xStringValue, "string_value");
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/Path;getOperationMap();;;        if (head != null) {
            result.put(HttpMethod.HEAD, head);
        }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/ComposedModel;clone();;;public Object clone() {
        ComposedModel cloned = new ComposedModel();
        super.cloneTo(cloned);
        cloned.allOf = this.allOf;
        cloned.parent = this.parent;
        cloned.child = this.child;
        cloned.interfaces = this.interfaces;
        cloned.description = this.description;
        cloned.example = this.example;

        return cloned;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/properties/FloatProperty;_enum(Float);;;public FloatProperty _enum(Float value) {
        if (this._enum == null) {
            this._enum = new ArrayList<Float>();
        }
        if (!_enum.contains(value)) {
            _enum.add(value);
        }
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/properties/FloatProperty;_enum(List<Float>);;;public FloatProperty _enum(List<Float> value) {
        this._enum = value;
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/properties/FloatProperty;getEnum();;;public List<Float> getEnum() {
        return _enum;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/properties/FloatProperty;setEnum(List<Float>);;;public void setEnum(List<Float> _enum) {
        this._enum = _enum;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/properties/DateProperty;_enum(String);;;public DateProperty _enum(String value) {
        if (this._enum == null) {
            this._enum = new ArrayList<String>();
        }
        if (!_enum.contains(value)) {
            _enum.add(value);
        }
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/properties/DateProperty;_enum(List<String>);;;public DateProperty _enum(List<String> value) {
        this._enum = value;
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/properties/DateProperty;getEnum();;;public List<String> getEnum() {
        return _enum;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/properties/DateProperty;setEnum(List<String>);;;public void setEnum(List<String> _enum) {
        this._enum = _enum;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/properties/UUIDProperty;_enum(String);;;public UUIDProperty _enum(String value) {
        if (this._enum == null) {
            this._enum = new ArrayList<String>();
        }
        if (!_enum.contains(value)) {
            _enum.add(value);
        }
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/properties/UUIDProperty;_enum(List<String>);;;public UUIDProperty _enum(List<String> value) {
        this._enum = value;
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/properties/UUIDProperty;getEnum();;;public List<String> getEnum() {
        return _enum;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/properties/UUIDProperty;setEnum(List<String>);;;public void setEnum(List<String> _enum) {
        this._enum = _enum;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/properties/IntegerProperty;_enum(Integer);;;public IntegerProperty _enum(Integer value) {
        if (this._enum == null) {
            this._enum = new ArrayList<Integer>();
        }
        if (!_enum.contains(value)) {
            _enum.add(value);
        }
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/properties/IntegerProperty;_enum(List<Integer>);;;public IntegerProperty _enum(List<Integer> value) {
        this._enum = value;
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/properties/IntegerProperty;getEnum();;;public List<Integer> getEnum() {
        return _enum;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/properties/IntegerProperty;setEnum(List<Integer>);;;public void setEnum(List<Integer> _enum) {
        this._enum = _enum;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/properties/DateTimeProperty;_enum(String);;;public DateTimeProperty _enum(String value) {
        if (this._enum == null) {
            this._enum = new ArrayList<String>();
        }
        if (!_enum.contains(value)) {
            _enum.add(value);
        }
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/properties/DateTimeProperty;_enum(List<String>);;;public DateTimeProperty _enum(List<String> value) {
        this._enum = value;
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/properties/DateTimeProperty;getEnum();;;public List<String> getEnum() {
        return _enum;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/properties/DateTimeProperty;setEnum(List<String>);;;public void setEnum(List<String> _enum) {
        this._enum = _enum;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/properties/PropertyBuilder;merge(Property,Map<PropertyId,Object>);;;                if(args.containsKey(PropertyId.ENUM)) {
                    final List<String> values = PropertyId.ENUM.findValue(args);
                    if(values != null) {
                        if(property instanceof IntegerProperty) {
                            IntegerProperty p = (IntegerProperty) property;
                            for(String value : values) {
                              try {
                                p._enum(Integer.parseInt(value));
                              }
                              catch(Exception e) {
                                // continue
                              }
                            }                            
                        }
                        if(property instanceof LongProperty) {
                          LongProperty p = (LongProperty) property;
                          for(String value : values) {
                            try {
                              p._enum(Long.parseLong(value));
                            }
                            catch(Exception e) {
                              // continue
                            }
                          }                            
                        }
                        if(property instanceof DoubleProperty) {
                            DoubleProperty p = (DoubleProperty) property;
                            for(String value : values) {
                              try {
                                p._enum(Double.parseDouble(value));
                              }
                              catch(Exception e) {
                                // continue
                              }
                            }                            
                        }
                        if(property instanceof FloatProperty) {
                          FloatProperty p = (FloatProperty) property;
                          for(String value : values) {
                            try {
                              p._enum(Float.parseFloat(value));
                            }
                            catch(Exception e) {
                              // continue
                            }
                          }                            
                       }
                       if(property instanceof DateProperty) {
                          DateProperty p = (DateProperty) property;
                          for(String value : values) {
                            try {
                              p._enum(value);
                            }
                            catch(Exception e) {
                              // continue
                            }
                          }                            
                       }
                       if(property instanceof DateTimeProperty) {
                         DateTimeProperty p = (DateTimeProperty) property;
                         for(String value : values) {
                           try {
                             p._enum(value);
                           }
                           catch(Exception e) {
                             // continue
                           }
                         }                            
                       }
                       if(property instanceof UUIDProperty) {
                         UUIDProperty p = (UUIDProperty) property;
                         for(String value : values) {
                           try {
                             p._enum(value);
                           }
                           catch(Exception e) {
                             // continue
                           }
                         }                            
                       }
                    }
                }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/properties/LongProperty;_enum(Long);;;public LongProperty _enum(Long value) {
        if (this._enum == null) {
            this._enum = new ArrayList<Long>();
        }
        if (!_enum.contains(value)) {
            _enum.add(value);
        }
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/properties/LongProperty;_enum(List<Long>);;;public LongProperty _enum(List<Long> value) {
        this._enum = value;
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/properties/LongProperty;getEnum();;;public List<Long> getEnum() {
        return _enum;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/properties/LongProperty;setEnum(List<Long>);;;public void setEnum(List<Long> _enum) {
        this._enum = _enum;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/properties/DoubleProperty;_enum(Double);;;public DoubleProperty _enum(Double value) {
        if (this._enum == null) {
            this._enum = new ArrayList<Double>();
        }
        if (!_enum.contains(value)) {
            _enum.add(value);
        }
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/properties/DoubleProperty;_enum(List<Double>);;;public DoubleProperty _enum(List<Double> value) {
        this._enum = value;
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/properties/DoubleProperty;getEnum();;;public List<Double> getEnum() {
        return _enum;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-models/src/main/java/io/swagger/models/properties/DoubleProperty;setEnum(List<Double>);;;public void setEnum(List<Double> _enum) {
        this._enum = _enum;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-jersey2-jaxrs/src/main/java/io/swagger/jersey/SwaggerJersey2Jaxrs;extractParameters(List<Annotation>,Type,Set<Type>,Iterator<SwaggerExtension>);;;                } else {
                    final FormParameter fp = new FormParameter().name(fd.value());
                    final Property schema = ModelConverters.getInstance().readAsProperty(type);
                    if (schema != null) {
                        fp.setProperty(schema);
                    }
                    parameters.add(fp);
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-jersey2-jaxrs/src/main/java/io/swagger/jersey/SwaggerJersey2Jaxrs;shouldIgnoreClass(Class<?>);;;@Override
    protected boolean shouldIgnoreClass(Class<?> cls) {
        for (Class<?> item : Arrays.asList(org.glassfish.jersey.media.multipart.FormDataContentDisposition.class,
                org.glassfish.jersey.media.multipart.FormDataBodyPart.class)) {
            if (item.isAssignableFrom(cls)) {
                return true;
            }
        }
        return false;
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/SwaggerJersey2JaxrsTest;testFormDataBodyPart();;;@Test(description = "FormDataBodyPart should be ignored when generating the Swagger document")
    public void testFormDataBodyPart() {
        final Swagger swagger = new Reader(new Swagger()).read(ResourceWithFormData.class);
        final List<Parameter> parameters = swagger.getPath("/test/document/{documentName}.json").getPost().getParameters();
        assertEquals(parameters.size(), 3);
        assertEquals(parameters.get(0).getName(), "documentName");
        assertEquals(parameters.get(1).getName(), "input");
        assertEquals(parameters.get(2).getName(), "id");
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01;/modules/swagger-jersey2-jaxrs/src/test/java/io/swagger/resources/ResourceWithFormData;uploadAttachAndParseUserDocument(String,FormDataContentDisposition,FormDataBodyPart,InputStream,Integer);;;@POST
    @Path("/document/{documentName}.json")
    @ApiOperation(value = "uploadAttachAndParseUserDocument", notes = "Uploads, parses, and attaches the document to the user's job application.", position = 509)
    public String uploadAttachAndParseUserDocument(@PathParam("documentName") final String documentName,
                                                   @FormDataParam("document") final FormDataContentDisposition detail,
                                                   @FormDataParam("document2") final FormDataBodyPart bodyPart,
                                                   @FormDataParam("input") final InputStream input,
                                                   @FormDataParam("id") final Integer id) throws Exception {
        return "";
    }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_8378133_798bf6a/rev_8378133-798bf6a;/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader;read(Class<?>,String,String,boolean,String[],String[],Map<String,Tag>,List<Parameter>,Set<Class<?>>);                    if(apiOperation != null || config.isScanAllResources() || httpMethod != null || methodPath != null) { ;;                    if(apiOperation != null || config.isScanAllResources() || httpMethod != null || methodPath != null) {
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_6de2d16_6f801c0/rev_6de2d16-6f801c0;/modules/swagger-models/src/main/java/io/swagger/models/Operation;toString();@Override
    public String toString() {
        return super.toString() + "[" + operationId + "]";
    };;@Override
	public String toString() {
		return super.toString() + "[" + operationId + "]";
	}
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_4698800_8db0f6a/rev_4698800-8db0f6a;/modules/swagger-core/src/main/java/io/swagger/jackson/ModelResolver;resolve(JavaType,ModelConverterContext,Iterator<ModelConverter>);                if(mp != null && mp.readOnly()) {
                  isReadOnly = mp.readOnly();;;                if (mp != null && mp.readOnly()) {
                    isReadOnly = mp.readOnly();
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_4698800_8db0f6a/rev_4698800-8db0f6a;/modules/swagger-core/src/main/java/io/swagger/jackson/ModelResolver;resolve(JavaType,ModelConverterContext,Iterator<ModelConverter>);;;
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_e661e1a_9a6cf32/rev_e661e1a-9a6cf32;/modules/swagger-core/src/main/java/io/swagger/util/ReflectionUtils;getParameterAnnotations(Method);	Annotation[][] methodAnnotations = method.getParameterAnnotations();
	Method overriddenmethod = getOverriddenMethod(method);;;        Annotation[][] methodAnnotations = method.getParameterAnnotations();
        Method overriddenmethod = getOverriddenMethod(method);
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_e661e1a_9a6cf32/rev_e661e1a-9a6cf32;/modules/swagger-core/src/main/java/io/swagger/util/ReflectionUtils;getParameterAnnotations(Method);	if (overriddenmethod != null) {
	    Annotation[][] overriddenAnnotations = overriddenmethod
		    .getParameterAnnotations();;;        if (overriddenmethod != null) {
            Annotation[][] overriddenAnnotations = overriddenmethod
                    .getParameterAnnotations();
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_e661e1a_9a6cf32/rev_e661e1a-9a6cf32;/modules/swagger-core/src/main/java/io/swagger/util/ReflectionUtils;getParameterAnnotations(Method);	    for (int i = 0; i < methodAnnotations.length; i++) {
		List<Type> types = new ArrayList<Type>();
		for (int j = 0; j < methodAnnotations[i].length; j++) {
		    types.add(methodAnnotations[i][j].annotationType());
		}
		for (int j = 0; j < overriddenAnnotations[i].length; j++) {
		    if (!types.contains(overriddenAnnotations[i][j]
			    .annotationType())) {
			methodAnnotations[i] = ArrayUtils.add(
				methodAnnotations[i],
				overriddenAnnotations[i][j]);
		    }
		};;            for (int i = 0; i < methodAnnotations.length; i++) {
                List<Type> types = new ArrayList<Type>();
                for (int j = 0; j < methodAnnotations[i].length; j++) {
                    types.add(methodAnnotations[i][j].annotationType());
                }
                for (int j = 0; j < overriddenAnnotations[i].length; j++) {
                    if (!types.contains(overriddenAnnotations[i][j]
                            .annotationType())) {
                        methodAnnotations[i] = ArrayUtils.add(
                                methodAnnotations[i],
                                overriddenAnnotations[i][j]);
                    }
                }
/home/paper219/Desktop/analysis/demonstration//projects/Swagger-core/revisions/rev_e661e1a_9a6cf32/rev_e661e1a-9a6cf32;/modules/swagger-core/src/main/java/io/swagger/util/ReflectionUtils;getParameterAnnotations(Method);	    }
	}
	return methodAnnotations;;;            }
        }
        return methodAnnotations;
/home/paper219/Desktop/analysis/demonstration//projects/bitcoinj/revisions/rev_29d996b_e990bcd/rev_29d996b-e990bcd;/src/com/google/bitcoin/core/Peer;startBlockChainDownload();public void startBlockChainDownload() throws IOException {
        for (PeerEventListener listener : eventListeners) {
            synchronized (listener) {
                listener.onChainDownloadStarted(this, getPeerBlocksToGet());
            };public CountDownLatch startBlockChainDownload() throws IOException {
        // Chain will overflow signed int blocks in ~41,000 years.
        int chainHeight = (int) conn.getVersionMessage().bestHeight;
        if (chainHeight <= 0) {
            // This should not happen because we shouldn't have given the user a Peer that is to another client-mode
            // node. If that happens it means the user overrode us somewhere.
            throw new  RuntimeException("Peer does not have block chain");;public CountDownLatch startBlockChainDownload() throws IOException {
        // Chain will overflow signed int blocks in ~41,000 years.
        int chainHeight = (int) conn.getVersionMessage().bestHeight;
        if (chainHeight <= 0) {
            // This should not happen because we shouldn't have given the user a Peer that is to another client-mode
            // node. If that happens it means the user overrode us somewhere.
            throw new RuntimeException("Peer does not have block chain");
/home/paper219/Desktop/analysis/demonstration//projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c;/tests/com/google/bitcoin/core/AlertMessageTest;setUp();;;@Before
    public void setUp() throws Exception {
        ECKey key = new ECKey(new BigInteger(1, TEST_KEY_PRIV));
        params = NetworkParameters.unitTests();
        params.alertSigningKey = key.getPubKey();
    }
/home/paper219/Desktop/analysis/demonstration//projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c;/tests/com/google/bitcoin/core/AlertMessageTest;deserialize();;;@Test
    public void deserialize() throws Exception {
        // A CAlert taken from the reference implementation.
        // TODO: This does not check the subVer or set fields. Support proper version matching.
        final byte[] payload = Hex.decode("5c010000004544eb4e000000004192ec4e00000000eb030000e9030000000000000048ee00000088130000002f43416c6572742073797374656d20746573743a2020202020202020207665722e302e352e3120617661696c61626c6500473045022100ec799908c008b272d5e5cd5a824abaaac53d210cc1fa517d8e22a701ecdb9e7002206fa1e7e7c251d5ba0d7c1fe428fc1870662f2927531d1cad8d4581b45bc4f8a7");
        AlertMessage alert = new AlertMessage(params, payload);
        assertEquals(1324041285, alert.getRelayUntil().getTime() / 1000);
        assertEquals(1324126785, alert.getExpiration().getTime() / 1000);
        assertEquals(1003, alert.getId());
        assertEquals(1001, alert.getCancel());
        assertEquals(0, alert.getMinVer());
        assertEquals(61000, alert.getMaxVer());
        assertEquals(5000, alert.getPriority());
        assertEquals("CAlert system test:         ver.0.5.1 available", alert.getStatusBar());
        assertTrue(alert.isSignatureValid());
    }
/home/paper219/Desktop/analysis/demonstration//projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c;/src/com/google/bitcoin/core/BitcoinSerializer;makeMessage(String,int,byte[],byte[],byte[]);;;        } else if (command.equals("alert")) {
            log.info("alert payload " + Utils.bytesToHexString(payloadBytes));
            return new AlertMessage(params, payloadBytes);
/home/paper219/Desktop/analysis/demonstration//projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c;/src/com/google/bitcoin/core/AlertMessage;AlertMessage(NetworkParameters,byte[]);;;public AlertMessage(NetworkParameters params, byte[] payloadBytes) throws ProtocolException {
        super(params, payloadBytes, 0);
    }
/home/paper219/Desktop/analysis/demonstration//projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c;/src/com/google/bitcoin/core/AlertMessage;isSignatureValid();;;public boolean isSignatureValid() {
        return ECKey.verify(Utils.doubleDigest(content), signature, params.alertSigningKey);
    }
/home/paper219/Desktop/analysis/demonstration//projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c;/src/com/google/bitcoin/core/AlertMessage;parseLite();;;@Override
    protected void parseLite() throws ProtocolException {
        // Do nothing, lazy parsing isn't useful for alerts.
    }
/home/paper219/Desktop/analysis/demonstration//projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c;/src/com/google/bitcoin/core/AlertMessage;getRelayUntil();;;public Date getRelayUntil() {
        return relayUntil;
    }
/home/paper219/Desktop/analysis/demonstration//projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c;/src/com/google/bitcoin/core/AlertMessage;setRelayUntil(Date);;;public void setRelayUntil(Date relayUntil) {
        this.relayUntil = relayUntil;
    }
/home/paper219/Desktop/analysis/demonstration//projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c;/src/com/google/bitcoin/core/AlertMessage;getExpiration();;;public Date getExpiration() {
        return expiration;
    }
/home/paper219/Desktop/analysis/demonstration//projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c;/src/com/google/bitcoin/core/AlertMessage;setExpiration(Date);;;public void setExpiration(Date expiration) {
        this.expiration = expiration;
    }
/home/paper219/Desktop/analysis/demonstration//projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c;/src/com/google/bitcoin/core/AlertMessage;getId();;;public long getId() {
        return id;
    }
/home/paper219/Desktop/analysis/demonstration//projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c;/src/com/google/bitcoin/core/AlertMessage;setId(long);;;public void setId(long id) {
        this.id = id;
    }
/home/paper219/Desktop/analysis/demonstration//projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c;/src/com/google/bitcoin/core/AlertMessage;getCancel();;;public long getCancel() {
        return cancel;
    }
/home/paper219/Desktop/analysis/demonstration//projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c;/src/com/google/bitcoin/core/AlertMessage;setCancel(long);;;public void setCancel(long cancel) {
        this.cancel = cancel;
    }
/home/paper219/Desktop/analysis/demonstration//projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c;/src/com/google/bitcoin/core/AlertMessage;getMinVer();;;public long getMinVer() {
        return minVer;
    }
/home/paper219/Desktop/analysis/demonstration//projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c;/src/com/google/bitcoin/core/AlertMessage;setMinVer(long);;;public void setMinVer(long minVer) {
        this.minVer = minVer;
    }
/home/paper219/Desktop/analysis/demonstration//projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c;/src/com/google/bitcoin/core/AlertMessage;getMaxVer();;;public long getMaxVer() {
        return maxVer;
    }
/home/paper219/Desktop/analysis/demonstration//projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c;/src/com/google/bitcoin/core/AlertMessage;setMaxVer(long);;;public void setMaxVer(long maxVer) {
        this.maxVer = maxVer;
    }
/home/paper219/Desktop/analysis/demonstration//projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c;/src/com/google/bitcoin/core/AlertMessage;getPriority();;;public long getPriority() {
        return priority;
    }
/home/paper219/Desktop/analysis/demonstration//projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c;/src/com/google/bitcoin/core/AlertMessage;setPriority(long);;;public void setPriority(long priority) {
        this.priority = priority;
    }
/home/paper219/Desktop/analysis/demonstration//projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c;/src/com/google/bitcoin/core/AlertMessage;getComment();;;public String getComment() {
        return comment;
    }
/home/paper219/Desktop/analysis/demonstration//projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c;/src/com/google/bitcoin/core/AlertMessage;setComment(String);;;public void setComment(String comment) {
        this.comment = comment;
    }
/home/paper219/Desktop/analysis/demonstration//projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c;/src/com/google/bitcoin/core/AlertMessage;getStatusBar();;;public String getStatusBar() {
        return statusBar;
    }
/home/paper219/Desktop/analysis/demonstration//projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c;/src/com/google/bitcoin/core/AlertMessage;setStatusBar(String);;;public void setStatusBar(String statusBar) {
        this.statusBar = statusBar;
    }
/home/paper219/Desktop/analysis/demonstration//projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c;/src/com/google/bitcoin/core/AlertMessage;getReserved();;;public String getReserved() {
        return reserved;
    }
/home/paper219/Desktop/analysis/demonstration//projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c;/src/com/google/bitcoin/core/AlertMessage;setReserved(String);;;public void setReserved(String reserved) {
        this.reserved = reserved;
    }
/home/paper219/Desktop/analysis/demonstration//projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c;/src/com/google/bitcoin/core/NetworkParameters;createTestNet(NetworkParameters);;;        n.alertSigningKey = SATOSHI_KEY;
/home/paper219/Desktop/analysis/demonstration//projects/bitcoinj/revisions/rev_464b528_10c936c/rev_464b528-10c936c;/src/com/google/bitcoin/core/NetworkParameters;prodNet();;;        n.alertSigningKey = SATOSHI_KEY;
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_ce59b53_1084df7/rev_ce59b53-1084df7;/servo-core/src/main/java/com/netflix/servo/examples/JvmMetricExample;main(String[]);;;        // Sampling interval
        long samplingInterval = 10;
        TimeUnit samplingUnit = TimeUnit.SECONDS;

        // Transform used to convert counter metrics into a rate per second
        MetricObserver transform = new CounterToRateMetricTransform(
            observer, 2 * samplingInterval, samplingUnit);
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_ce59b53_1084df7/rev_ce59b53-1084df7;/servo-core/src/main/java/com/netflix/servo/publish/CounterToRateMetricTransform;CounterToRateMetricTransform(MetricObserver,long,TimeUnit);;;public CounterToRateMetricTransform(
            MetricObserver observer, long heartbeat, TimeUnit unit) {
        this.observer = observer;
        this.cache = CacheBuilder.newBuilder()
            .expireAfterWrite(heartbeat, unit)
            .build();
    }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_ce59b53_1084df7/rev_ce59b53-1084df7;/servo-core/src/main/java/com/netflix/servo/publish/CounterToRateMetricTransform;getName();;;public String getName() {
        return getClass().getSimpleName() + "-" + observer.getName();
    }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_ce59b53_1084df7/rev_ce59b53-1084df7;/servo-core/src/main/java/com/netflix/servo/publish/CounterToRateMetricTransform;update(List<Metric>);;;public void update(List<Metric> metrics) {
        Preconditions.checkNotNull(metrics);
        List<Metric> newMetrics = Lists.newArrayList();
        for (Metric m : metrics) {
            if (isCounter(m)) {
                CounterValue current = new CounterValue(m);
                CounterValue prev = cache.getIfPresent(m.getConfig());
                if (prev != null) {
                    Metric rate = new Metric(
                        m.getConfig(),
                        m.getTimestamp(),
                        current.computeRate(prev));
                    newMetrics.add(rate);
                }
                cache.put(m.getConfig(), current);
            } else {
                newMetrics.add(m);
            }
        }
        observer.update(newMetrics);
    }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_ce59b53_1084df7/rev_ce59b53-1084df7;/servo-core/src/main/java/com/netflix/servo/publish/CounterToRateMetricTransform;reset();;;public void reset() {
        cache.invalidateAll();
    }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_ce59b53_1084df7/rev_ce59b53-1084df7;/servo-core/src/main/java/com/netflix/servo/publish/CounterToRateMetricTransform;isCounter(Metric);;;private boolean isCounter(Metric m) {
        TagList tags = m.getConfig().getTags();
        Tag type = tags.getTag(DataSourceType.KEY);
        String counter = DataSourceType.COUNTER.name();
        return (type != null && counter.equals(type.getValue()));
    }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_ce59b53_1084df7/rev_ce59b53-1084df7;/servo-core/src/main/java/com/netflix/servo/publish/CounterToRateMetricTransform;CounterValue(long,double);;;public CounterValue(long timestamp, double value) {
            this.timestamp = timestamp;
            this.value = value;
        }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_ce59b53_1084df7/rev_ce59b53-1084df7;/servo-core/src/main/java/com/netflix/servo/publish/CounterToRateMetricTransform;CounterValue(Metric);;;public CounterValue(Metric m) {
            this(m.getTimestamp(), m.getValue().doubleValue());
        }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_ce59b53_1084df7/rev_ce59b53-1084df7;/servo-core/src/main/java/com/netflix/servo/publish/CounterToRateMetricTransform;computeRate(CounterValue);;;public double computeRate(CounterValue prev) {
            double duration = (timestamp - prev.timestamp) / 1000.0;
            double delta = value - prev.value;
            return (duration <= 0.0 || delta <= 0.0) ? 0.0 : delta / duration;
        }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_ce59b53_1084df7/rev_ce59b53-1084df7;/servo-core/src/test/java/com/netflix/servo/publish/CounterToRateMetricTransformTest;mkList(long,int);;;private List<Metric> mkList(long ts, int value) {
        return ImmutableList.of(
            new Metric("m1", EMPTY, ts, value),
            new Metric("m2", GAUGE, ts, value),
            new Metric("m3", COUNTER, ts, value)
        );
    }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_ce59b53_1084df7/rev_ce59b53-1084df7;/servo-core/src/test/java/com/netflix/servo/publish/CounterToRateMetricTransformTest;mkMap(List<List<Metric>>);;;private Map<String,Double> mkMap(List<List<Metric>> updates) {
        Map<String,Double> map = Maps.newHashMap();
        for (Metric m : updates.get(0)) {
            map.put(m.getConfig().getName(), m.getValue().doubleValue());
        }
        return map;
    }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_ce59b53_1084df7/rev_ce59b53-1084df7;/servo-core/src/test/java/com/netflix/servo/publish/CounterToRateMetricTransformTest;testSimpleRate();;;@Test
    public void testSimpleRate() throws Exception {
        MemoryMetricObserver mmo = new MemoryMetricObserver("m", 1);
        MetricObserver transform =
            new CounterToRateMetricTransform(mmo, 120, TimeUnit.SECONDS);
        Map<String,Double> metrics = null;

        // First sample
        transform.update(mkList(0, 0));
        metrics = mkMap(mmo.getObservations());
        assertEquals(metrics.size(), 2);
        assertEquals(metrics.get("m3"), null);

        // Delta of 5 in 5 seconds
        transform.update(mkList(5000, 5));
        metrics = mkMap(mmo.getObservations());
        assertEquals(metrics.size(), 3);
        assertEquals(metrics.get("m3"), 1.0, 0.00001);

        // Delta of 15 in 5 seconds
        transform.update(mkList(10000, 20));
        metrics = mkMap(mmo.getObservations());
        assertEquals(metrics.size(), 3);
        assertEquals(metrics.get("m3"), 3.0, 0.00001);

        // No change from previous sample
        transform.update(mkList(15000, 20));
        metrics = mkMap(mmo.getObservations());
        assertEquals(metrics.size(), 3);
        assertEquals(metrics.get("m3"), 0.0, 0.00001);

        // Decrease from previous sample
        transform.update(mkList(20000, 19));
        metrics = mkMap(mmo.getObservations());
        assertEquals(metrics.size(), 3);
        assertEquals(metrics.get("m3"), 0.0, 0.00001);
    }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692;/servo-core/src/main/java/com/netflix/servo/examples/JmxClientExample;mkJmxUrl(String,String);;;private static JMXServiceURL mkJmxUrl(String host, String port)
            throws MalformedURLException {
        String url = String.format(
            "service:jmx:rmi://%1$s:%2$s/jndi/rmi://%1$s:%2$s/jmxrmi",
            host, port);
        return new JMXServiceURL(url);
    }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692;/servo-core/src/main/java/com/netflix/servo/examples/JmxClientExample;println(int,String);;;private static void println(int indent, String msg) {
        for (int i = 0; i < indent * INDENT_SPACES; ++i) {
            System.out.print(" ");
        }
        System.out.println(msg);
    }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692;/servo-core/src/main/java/com/netflix/servo/examples/JmxClientExample;dumpValue(int,String,Object);;;private static void dumpValue(int indent, String name, Object obj) {
        if (obj instanceof CompositeData) {
            CompositeData cd = (CompositeData) obj;
            println(indent, String.format("%s:", name));
            for (String key : cd.getCompositeType().keySet()) {
                dumpValue(indent + 1, key, cd.get(key));
            }
        } else {
            println(indent, String.format("%s => %s", name, obj));
        }
    }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692;/servo-core/src/main/java/com/netflix/servo/examples/JmxClientExample;dumpObj(MBeanServerConnection,ObjectName);;;private static void dumpObj(MBeanServerConnection con, ObjectName objName)
            throws Exception {
        System.out.println("ObjectName: " + objName.toString());

        MBeanAttributeInfo[] attrs = con.getMBeanInfo(objName).getAttributes();
        if (attrs != null) {
            String attrNames[] = new String[attrs.length];
            for (int i = 0; i < attrNames.length; ++i) {
                attrNames[i] = attrs[i].getName();
            }

            AttributeList list = con.getAttributes(objName, attrNames);
            for (Attribute a : list.asList()) {
                dumpValue(1, a.getName(), a.getValue());
            }
        }
    }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692;/servo-core/src/main/java/com/netflix/servo/examples/JmxClientExample;main(String[]);;;public static void main(String[] args) throws Exception {
        if (args.length < 2) {
            System.out.println("Usage: JMXClientExample <host> <port>");
            System.exit(1);
        }
        String host = args[0];
        String port = args[1];

        JMXServiceURL url = mkJmxUrl(host, port);

        MBeanServerConnection con = JMXConnectorFactory.connect(
            url, null).getMBeanServerConnection();

        ObjectName pattern = new ObjectName(
            "com.netflix.servo.jmx.MonitoredResource:*");

        Set<ObjectName> objNames = con.queryNames(pattern, null);
        for (ObjectName objName : objNames) {
            dumpObj(con, objName);
        }
    }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692;/servo-core/src/main/java/com/netflix/servo/examples/EchoServerExample;EchoServerExample(int);;;public EchoServerExample(int port) {
        this.port = port;
    }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692;/servo-core/src/main/java/com/netflix/servo/examples/EchoServerExample;start();;;public void start() throws IOException {
        AcceptTask task = new AcceptTask(port);
        Thread t = new Thread(task, "AcceptTask");
        t.start();
    }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692;/servo-core/src/main/java/com/netflix/servo/examples/EchoServerExample;shutdown();;;public void shutdown() {
        // Just an example, a real server should have a way to cleanly
        // shutdown
    }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692;/servo-core/src/main/java/com/netflix/servo/examples/EchoServerExample;AcceptTask(int);;;public AcceptTask(int port) throws IOException {
            ss = new ServerSocket(port);
        }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692;/servo-core/src/main/java/com/netflix/servo/examples/EchoServerExample;getTags(Socket);;;public TagList getTags(Socket s) {
            String country = COUNTRIES[r.nextInt(COUNTRIES.length)];
            return BasicTagList.copyOf(new BasicTag("Country", country));
        }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692;/servo-core/src/main/java/com/netflix/servo/examples/EchoServerExample;run();;;public void run() {
            while (true) {
                try {
                    Socket s = ss.accept();
                    TagList tags = getTags(s);
                    LOGGER.info("received connection from {} with tags {}",
                        s.getRemoteSocketAddress(), tags);

                    Counters.increment("RequestCount", tags);
                    ClientTask task = new ClientTask(tags, s);
                    Thread t = new Thread(task, "ClientTask");
                    t.start();
                } catch (IOException e) {
                    LOGGER.error("failure accepting connection", e);
                }
            }
        }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692;/servo-core/src/main/java/com/netflix/servo/examples/EchoServerExample;ClientTask(TagList,Socket);;;public ClientTask(TagList tags, Socket s) {
            this.tags = tags;
            this.s = s;
        }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692;/servo-core/src/main/java/com/netflix/servo/examples/EchoServerExample;doWork();;;private void doWork() throws IOException {
            CountingInputStream input = null;
            CountingOutputStream output = null;
            try {
                input = new CountingInputStream(s.getInputStream());
                output = new CountingOutputStream(s.getOutputStream());
                ByteStreams.copy(input, output);
                Counters.increment("BytesIn", input.getCount());
                Counters.increment("BytesOut", output.getCount());
            } finally {
                Closeables.closeQuietly(input);
                Closeables.closeQuietly(output);
            }
        }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692;/servo-core/src/main/java/com/netflix/servo/examples/EchoServerExample;run();;;public void run() {
            // Setup context so all counters increments in this thread will get
            // tagged
            TaggingContext.setTags(tags);

            try {
                doWork();
            } catch (IOException e) {
                SocketAddress a = s.getRemoteSocketAddress();
                LOGGER.error("failure handling connection from " + a, e);
            }
        }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692;/servo-core/src/main/java/com/netflix/servo/examples/EchoServerExample;main(String[]);;;public static void main(String[] args) throws Exception {
        // Schedule collection of monitor registry metrics every 10 seconds
        PollScheduler scheduler = PollScheduler.getInstance();
        scheduler.start();
        MetricObserver transform = new CounterToRateMetricTransform(
            new FileMetricObserver("serverstat", new File(".")),
            20, TimeUnit.SECONDS);
        PollRunnable task = new PollRunnable(
            new MonitorRegistryMetricPoller(),
            BasicMetricFilter.MATCH_ALL,
            transform);
        scheduler.addPoller(task, 10, TimeUnit.SECONDS);

        // Run server
        int port = 54321;
        if (args.length > 0) {
            port = Integer.valueOf(args[0]);
        }
        EchoServerExample example = new EchoServerExample(port);
        example.start();
    }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692;/servo-core/src/main/java/com/netflix/servo/annotations/AnnotatedObject;AnnotatedObject(Object);;;
        String className = obj.getClass().getCanonicalName();
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692;/servo-core/src/main/java/com/netflix/servo/util/Counters;increment(String,long);;;public static void increment(String name, long delta) {
        increment(new MetricConfig(name), delta);
    }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692;/servo-core/src/main/java/com/netflix/servo/util/Counters;increment(String,TagList,long);;;public static void increment(String name, TagList tags, long delta) {
        increment(new MetricConfig(name, tags), delta);
    }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692;/servo-core/src/main/java/com/netflix/servo/util/Counters;increment(MetricConfig,long);;;public static void increment(MetricConfig config, long delta) {
        TagList cxtTags = TaggingContext.getTags();
        if (cxtTags != null) {
            String name = config.getName();
            TagList newTags = BasicTagList.concat(config.getTags(), cxtTags);
            MetricConfig newConfig = new MetricConfig(name, newTags);
            COUNTERS.getUnchecked(newConfig).increment(delta);
        } else {
            COUNTERS.getUnchecked(config).increment(delta);
        }
    }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692;/servo-core/src/test/java/com/netflix/servo/annotations/AnnotationUtilsTest;StringArrayTagObject(String);;;public StringArrayTagObject(String... tags) {
            this.tags = tags;
        }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692;/servo-core/src/test/java/com/netflix/servo/annotations/AnnotationUtilsTest;StringGaugeObject();;;public StringGaugeObject() {
        }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692;/servo-core/src/test/java/com/netflix/servo/annotations/AnnotationUtilsTest;StringCounterObject();;;public StringCounterObject() {
        }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692;/servo-core/src/test/java/com/netflix/servo/annotations/AnnotationUtilsTest;testValidateOk();;;@Test
    public void testValidateOk() throws Exception {
        AnnotationUtils.validate(new MonitorObject());
    }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692;/servo-core/src/test/java/com/netflix/servo/annotations/AnnotationUtilsTest;testValidateNoMonitor();;;@Test(expectedExceptions = IllegalArgumentException.class)
    public void testValidateNoMonitor() throws Exception {
        AnnotationUtils.validate(new Object());
    }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692;/servo-core/src/test/java/com/netflix/servo/annotations/AnnotationUtilsTest;testValidateBadGauge();;;@Test(expectedExceptions = IllegalArgumentException.class)
    public void testValidateBadGauge() throws Exception {
        AnnotationUtils.validate(new StringGaugeObject());
    }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692;/servo-core/src/test/java/com/netflix/servo/annotations/AnnotationUtilsTest;testValidateBadCounter();;;@Test(expectedExceptions = IllegalArgumentException.class)
    public void testValidateBadCounter() throws Exception {
        AnnotationUtils.validate(new StringCounterObject());
    }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692;/servo-cloudwatch/src/main/java/com/netflix/servo/examples/CloudWatchExample;main(String[]);;;public static void main(String[] args) throws Exception {
        if(args.length != 1){
            System.err.println("Please specify the path to a properties file with your amazon keys.");
            return;
        }

        CloudWatchMetricObserver observer = new CloudWatchMetricObserver("SampleObserver", "SampleDomain",
                new PropertiesCredentials(new File(args[0])));

        List<Tag> tags = new ArrayList<Tag>(2);
        tags.add(InjectableTag.HOSTNAME);
        tags.add(InjectableTag.IP);

        BasicExample example = new BasicExample("test", tags);

        DefaultMonitorRegistry.getInstance().registerObject(example);

        PollCallable poller = new PollCallable(new MonitorRegistryMetricPoller(), BasicMetricFilter.MATCH_ALL);


        while(true){
            example.counter.incrementAndGet();
            example.setSampleGauge(Math.round(Math.random() * 1000));
            observer.update(poller.call());
            Thread.sleep(60000);
        }
    }
/home/paper219/Desktop/analysis/demonstration//projects/truth/revisions/rev_8b6bb73_2bd108d/rev_8b6bb73-2bd108d;/src/main/java/org/junit/contrib/truth/subjects/Subject;Subject(FailureStrategy,T);    ;;
/home/paper219/Desktop/analysis/demonstration//projects/truth/revisions/rev_8b6bb73_2bd108d/rev_8b6bb73-2bd108d;/src/main/java/org/junit/contrib/truth/subjects/Subject;Subject(FailureStrategy,T);      @SuppressWarnings("unchecked") ;;      @SuppressWarnings("unchecked")
/home/paper219/Desktop/analysis/demonstration//projects/truth/revisions/rev_8b6bb73_2bd108d/rev_8b6bb73-2bd108d;/src/main/java/org/junit/contrib/truth/subjects/Subject;is(T);    if (getSubject() == null) { ;;    if (getSubject() == null) {
/home/paper219/Desktop/analysis/demonstration//projects/truth/revisions/rev_8b6bb73_2bd108d/rev_8b6bb73-2bd108d;/src/main/java/org/junit/contrib/truth/subjects/Subject;isEqualTo(Object);    if (getSubject() == null) { ;;    if (getSubject() == null) {
/home/paper219/Desktop/analysis/demonstration//projects/truth/revisions/rev_8b6bb73_2bd108d/rev_8b6bb73-2bd108d;/src/main/java/org/junit/contrib/truth/subjects/Subject;isNotEqualTo(Object);    if (getSubject() == null) { ;;    if (getSubject() == null) {
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_c9212bb_b20ae0a/rev_c9212bb-b20ae0a;/src/main/java/graphql/Assert;assertNotNull(T,String);;;public static <T> T assertNotNull(T object, String errorMessage) {
        if (object != null) return object;
        throw new AssertException(errorMessage);
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_c9212bb_b20ae0a/rev_c9212bb-b20ae0a;/src/main/java/graphql/Assert;assertNotEmpty(Collection<T>,String);;;public static <T> Collection<T> assertNotEmpty(Collection<T> c, String errorMessage) {
        if (c == null || c.isEmpty()) throw new AssertException(errorMessage);
        return c;
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/GraphQL;GraphQL(GraphQLSchema,ExecutionStrategy,ExecutionStrategy,ExecutionIdProvider);;;private GraphQL(GraphQLSchema graphQLSchema, ExecutionStrategy queryStrategy, ExecutionStrategy mutationStrategy, ExecutionIdProvider idProvider) {
        this.graphQLSchema = assertNotNull(graphQLSchema,"queryStrategy must be non null");
        this.queryStrategy = assertNotNull(queryStrategy, "queryStrategy must be non null");
        this.idProvider = assertNotNull(idProvider, "idProvider must be non null");
        this.mutationStrategy = mutationStrategy;
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/GraphQL;executionIdProvider(ExecutionIdProvider);;;public Builder executionIdProvider(ExecutionIdProvider executionIdProvider) {
            this.idProvider = assertNotNull(executionIdProvider, "ExecutionIdProvider must be non null");
            return this;
        }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/Scalars;isWholeNumber(Object);;;private static boolean isWholeNumber(Object input) {
        return input instanceof Long
                || input instanceof Integer
                || input instanceof Short
                || input instanceof Byte;
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/Scalars;isNumberIsh(Object);;;private static boolean isNumberIsh(Object input) {
        return input instanceof Number || input instanceof String;
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/Scalars;toNumber(Object);;;private static Number toNumber(Object input) {
        if (input instanceof Number) {
            return (Number) input;
        }
        if (input instanceof String) {
            // we go to double and then let each scalar type decide what precision they want from it.  This
            // will allow lenient behavior in string input as well as Number input... eg "42.3" as a string to a Long
            // scalar is the same as new Double(42.3) to a Long scalar.
            //
            // each type will use Java Narrow casting to turn this into the desired type (Long, Integer, Short etc...)
            //
            // See http://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html#jls-5.1.3
            //
            return Double.parseDouble((String) input);
        }
        // we never expect this and if we do, the code is wired wrong
        throw new AssertException("Unexpected case - this call should be protected by a previous call to isNumberIsh()");
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/schema/GraphQLNonNull;nonNull(GraphQLType);;;public static GraphQLNonNull nonNull(GraphQLType wrappedType) {
        return new GraphQLNonNull(wrappedType);
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/schema/GraphQLList;list(GraphQLType);;;public static GraphQLList list(GraphQLType wrappedType) {
        return new GraphQLList(wrappedType);
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/relay/DefaultConnectionCursor;DefaultConnectionCursor(String);;;public DefaultConnectionCursor(String value) {
        if (value == null || value.isEmpty()) {
            throw new IllegalArgumentException("connection value cannot be null or empty");
        }
        this.value = value;
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/relay/DefaultConnectionCursor;getValue();;;@Override
    public String getValue() {
        return value;
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/relay/DefaultConnectionCursor;equals(Object);;;@Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DefaultConnectionCursor that = (DefaultConnectionCursor) o;
        if (value != null ? !value.equals(that.value) : that.value != null) {
            return false;
        }
        return true;
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/relay/DefaultConnectionCursor;hashCode();;;@Override
    public int hashCode() {
        return value != null ? value.hashCode() : 0;
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/relay/DefaultConnectionCursor;toString();;;@Override
    public String toString() {
        return value;
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/relay/DefaultEdge;DefaultEdge(Object,DefaultConnectionCursor);;;public DefaultEdge(Object node, DefaultConnectionCursor cursor) {
        this.node = node;
        this.cursor = cursor;
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/relay/DefaultEdge;getNode();;;@Override
    public Object getNode() {
        return node;
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/relay/DefaultEdge;setNode(Object);;;public void setNode(Object node) {
        this.node = node;
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/relay/DefaultEdge;getCursor();;;@Override
    public ConnectionCursor getCursor() {
        return cursor;
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/relay/DefaultEdge;setCursor(ConnectionCursor);;;public void setCursor(ConnectionCursor cursor) {
        this.cursor = cursor;
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/relay/DefaultEdge;toString();;;@Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("DefaultEdge{");
        sb.append("node=").append(node);
        sb.append(", cursor=").append(cursor);
        sb.append('}');
        return sb.toString();
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/relay/DefaultPageInfo;getStartCursor();;;@Override
    public ConnectionCursor getStartCursor() {
        return startCursor;
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/relay/DefaultPageInfo;setStartCursor(ConnectionCursor);;;public void setStartCursor(ConnectionCursor startCursor) {
        this.startCursor = startCursor;
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/relay/DefaultPageInfo;getEndCursor();;;@Override
    public ConnectionCursor getEndCursor() {
        return endCursor;
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/relay/DefaultPageInfo;setEndCursor(ConnectionCursor);;;public void setEndCursor(ConnectionCursor endCursor) {
        this.endCursor = endCursor;
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/relay/DefaultPageInfo;isHasPreviousPage();;;@Override
    public boolean isHasPreviousPage() {
        return hasPreviousPage;
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/relay/DefaultPageInfo;setHasPreviousPage(boolean);;;public void setHasPreviousPage(boolean hasPreviousPage) {
        this.hasPreviousPage = hasPreviousPage;
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/relay/DefaultPageInfo;isHasNextPage();;;@Override
    public boolean isHasNextPage() {
        return hasNextPage;
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/relay/DefaultPageInfo;setHasNextPage(boolean);;;public void setHasNextPage(boolean hasNextPage) {
        this.hasNextPage = hasNextPage;
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/relay/DefaultPageInfo;toString();;;@Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("DefaultPageInfo{");
        sb.append("startCursor=").append(startCursor);
        sb.append(", endCursor=").append(endCursor);
        sb.append(", hasPreviousPage=").append(hasPreviousPage);
        sb.append(", hasNextPage=").append(hasNextPage);
        sb.append('}');
        return sb.toString();
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/relay/DefaultConnection;getEdges();;;@Override
    public List<Edge> getEdges() {
        return edges;
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/relay/DefaultConnection;setEdges(List<Edge>);;;public void setEdges(List<Edge> edges) {
        this.edges = edges;
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/relay/DefaultConnection;getPageInfo();;;@Override
    public PageInfo getPageInfo() {
        return pageInfo;
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/relay/DefaultConnection;setPageInfo(PageInfo);;;public void setPageInfo(PageInfo pageInfo) {
        this.pageInfo = pageInfo;
    }
/home/paper219/Desktop/analysis/demonstration//projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848;/src/main/java/graphql/relay/DefaultConnection;toString();;;@Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("DefaultConnection{");
        sb.append("edges=").append(edges);
        sb.append(", pageInfo=").append(pageInfo);
        sb.append('}');
        return sb.toString();
    }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_0537297_34bb99e/rev_0537297-34bb99e;/servo-core/src/main/java/com/netflix/servo/publish/CounterToRateMetricTransform;CounterToRateMetricTransform(MetricObserver,long,TimeUnit);@edu.umd.cs.findbugs.annotations.SuppressWarnings(value = "SE_BAD_FIELD_INNER_CLASS",
            justification = "ignore that LinkedHashMap is serializable");@edu.umd.cs.findbugs.annotations.SuppressWarnings(value = "SE_BAD_FIELD_INNER_CLASS",
            justification = "We don't use serialization - ignore that LinkedHashMap is serializable");@edu.umd.cs.findbugs.annotations.SuppressWarnings(
        value = "SE_BAD_FIELD_INNER_CLASS",
        justification = "We don't use serialization - ignore that LinkedHashMap is serializable")
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_76a9a85_f82768d/rev_76a9a85-f82768d;/servo-aws/src/main/java/com/netflix/servo/aws/AwsPropertyKeys;AwsPropertyKeys(String);;;private AwsPropertyKeys(String bundle) {
       this.bundle = bundle;
    }
/home/paper219/Desktop/analysis/demonstration//projects/servo/revisions/rev_76a9a85_f82768d/rev_76a9a85-f82768d;/servo-aws/src/main/java/com/netflix/servo/aws/AwsPropertyKeys;getBundle();;;public String getBundle() {
		return bundle;
	}
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50;/src/main/java/com/squareup/injector/internal/Keys;isPlatformType(String);;;public static boolean isPlatformType(String name) {
    return name.startsWith("java.") || name.startsWith("javax.") || name.startsWith("android.");
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50;/src/main/java/com/squareup/injector/internal/AtInjectBinding;AtInjectBinding(String,String,boolean,Class<?>,Constructor<T>,Field[],Class<?>);;;private AtInjectBinding(String key, String membersKey, boolean singleton, Class<?> type,
      Constructor<T> constructor, Field[] fields, Class<?> supertype) {
    super(key, membersKey, singleton, type);
    this.constructor = constructor;
    this.fields = fields;
    this.supertype = supertype;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50;/src/main/java/com/squareup/injector/internal/AtInjectBinding;attach(Linker);;;
    // Supertype binding.
    if (supertype != null && !Keys.isPlatformType(supertype.getName())) {
      supertypeBinding = (Binding<? super T>) linker.requestBinding(
          Keys.getMembersKey(supertype), membersKey);
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50;/src/main/java/com/squareup/injector/internal/AtInjectBinding;injectMembers(T);;;      if (supertypeBinding != null) {
        supertypeBinding.injectMembers(t);
      }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50;/src/main/java/com/squareup/codegen/CodeGen;rawTypeToString(TypeMirror,char);;;public static String rawTypeToString(TypeMirror type, char innerClassSeparator) {
    if (!(type instanceof DeclaredType)) {
      throw new IllegalArgumentException("Unexpected type: " + type);
    }
    StringBuilder result = new StringBuilder();
    DeclaredType declaredType = (DeclaredType) type;
    rawTypeToString(result, (TypeElement) declaredType.asElement(), innerClassSeparator);
    return result.toString();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50;/src/main/java/com/squareup/codegen/GeneratorKeys;rawMembersKey(TypeMirror);;;public static String rawMembersKey(TypeMirror type) {
    return "members/" + CodeGen.rawTypeToString(type, '$');
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50;/src/test/java/com/squareup/injector/InjectionTest;noProvideBindingsForAbstractClasses();;;@Test public void noProvideBindingsForAbstractClasses() {
    class TestEntryPoint {
      @Inject AbstractList abstractList;
    }

    @Module(entryPoints = TestEntryPoint.class)
    class TestModule {
      @Provides Object unused() {
        throw new AssertionError();
      }
    }

    try {
      ObjectGraph.get(new TestModule());
      fail();
    } catch (IllegalArgumentException expected) {
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50;/src/test/java/com/squareup/injector/InjectionTest;get(int);;;@Override public Integer get(int i) {
      return i;
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50;/src/test/java/com/squareup/injector/InjectionTest;size();;;@Override public int size() {
      return 5;
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50;/src/test/java/com/squareup/injector/InjectionTest;extendsParameterizedType();;;@Test public void extendsParameterizedType() {
    class TestEntryPoint {
      @Inject ExtendsParameterizedType extendsParameterizedType;
    }

    @Module(entryPoints = TestEntryPoint.class)
    class TestModule {
      @Provides String provideString() {
        return "injected";
      }
    }

    TestEntryPoint entryPoint = new TestEntryPoint();
    ObjectGraph.get(new TestModule()).inject(entryPoint);
    assertThat(entryPoint.extendsParameterizedType.string).isEqualTo("injected");
  }
/home/paper219/Desktop/analysis/demonstration//projects/volley/revisions/rev_f746ab4_2b1e41c/rev_f746ab4-2b1e41c;/src/com/android/volley/VolleyLog;setTag(String);;;public static void setTag(String tag) {
        d("Changing log tag to %s", tag);
        TAG = tag;

        // Reinitialize the DEBUG "constant"
        DEBUG = Log.isLoggable(TAG, Log.VERBOSE);
    }
/home/paper219/Desktop/analysis/demonstration//projects/volley/revisions/rev_b4448a3_f746ab4/rev_b4448a3-f746ab4;/src/com/android/volley/VolleyLog;setTag(String);;;public static void setTag(String tag) {
        d("Changing log tag to %s", tag);
        TAG = tag;

        // Reinitialize the DEBUG "constant"
        DEBUG = Log.isLoggable(TAG, Log.VERBOSE);
    }
/home/paper219/Desktop/analysis/demonstration//projects/volley/revisions/rev_2b1e41c_cc6ed2d/rev_2b1e41c-cc6ed2d;/src/com/android/volley/VolleyLog;setTag(String);;;public static void setTag(String tag) {
        d("Changing log tag to %s", tag);
        TAG = tag;

        // Reinitialize the DEBUG "constant"
        DEBUG = Log.isLoggable(TAG, Log.VERBOSE);
    }
/home/paper219/Desktop/analysis/demonstration//projects/xodus/revisions/rev_1030bb3_eae9845/rev_1030bb3-eae9845;/environment/src/main/java/jetbrains/exodus/io/Block;lastModified();;;long lastModified();
/home/paper219/Desktop/analysis/demonstration//projects/xodus/revisions/rev_1030bb3_eae9845/rev_1030bb3-eae9845;/environment/src/main/java/jetbrains/exodus/io/inMemory/MemoryDataReader;lastModified();;;@Override
        public long lastModified() {
            return 0;
        }
/home/paper219/Desktop/analysis/demonstration//projects/xodus/revisions/rev_0a19e10_a5d1b68/rev_0a19e10-a5d1b68;/entity-store/src/test/java/jetbrains/exodus/entitystore/iterate/EntityIterableTests;testSingleEntityIterable2();;;public void testSingleEntityIterable2() {
        final PersistentStoreTransaction txn = getStoreTransaction();
        final int count = 1;
        createNUsers(txn, count);
        txn.flush();
        EntityIterable users = txn.getSingletonIterable(txn.getAll("User").getFirst());
        users = users.union(users);
        Assert.assertFalse(((EntityIterableBase) users).canBeCached());
        Assert.assertEquals(-1L, users.getRoughCount());
        getEntityStore().getAsyncProcessor().waitForJobs(100);
        Assert.assertEquals(1L, users.getRoughCount());
    }
/home/paper219/Desktop/analysis/demonstration//projects/xodus/revisions/rev_1f4b98b_56ea0e3/rev_1f4b98b-56ea0e3;/entity-store/src/main/java/jetbrains/exodus/entitystore/iterate/PropertyValueIterable;getHandleImpl();;;                if (value instanceof ComparableSet) {
                    return ((ComparableSet) value).containsItem(PropertyValueIterable.this.value);
                }
/home/paper219/Desktop/analysis/demonstration//projects/xodus/revisions/rev_f4c3310_e47d8bc/rev_f4c3310-e47d8bc;/openAPI/src/main/java/jetbrains/exodus/entitystore/ComparableGetter;select(Entity);;;Comparable select(final Entity entity);
/home/paper219/Desktop/analysis/demonstration//projects/xodus/revisions/rev_41b74a4_68b45ff/rev_41b74a4-68b45ff;/openAPI/src/main/java/jetbrains/exodus/entitystore/ComparableGetter;select(Entity);;;Comparable select(final Entity entity);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b;/rx-netty/src/main/java/io/reactivex/netty/channel/DefaultChannelWriter;flush();        return unflushedWritesListener.listenForNextCompletion().take(1).flatMap(new Func1<ChannelFuture, Observable<Void>>() {
            @Override
            public Observable<Void> call(ChannelFuture future) {
                return Observable.empty();
            }
        });;;        return unflushedWritesListener.listenForNextCompletion().take(1).flatMap(
                new Func1<ChannelFuture, Observable<Void>>() {
                    @Override
                    public Observable<Void> call(ChannelFuture future) {
                        return Observable.empty();
                    }
                });
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_52f2378_825850e/rev_52f2378-825850e;/rx-netty/src/main/java/io/reactivex/netty/protocol/http/server/HttpServerResponse;_close();;;@Override
    public Observable<Void> _close() {

        writeHeadersIfNotWritten();

        if (headers.isTransferEncodingChunked() || headers.isKeepAlive()) {
            writeOnChannel(new DefaultLastHttpContent()); // This indicates end of response for netty. If this is not
            // sent for keep-alive connections, netty's HTTP codec will not know that the response has ended and hence
            // will ignore the subsequent HTTP header writes. See issue: https://github.com/Netflix/RxNetty/issues/130
        }
        return flush();
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_52f2378_825850e/rev_52f2378-825850e;/rx-netty/src/main/java/io/reactivex/netty/channel/DefaultChannelWriter;isCloseIssued();;;public boolean isCloseIssued() {
        return closeIssued.get();
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_52f2378_825850e/rev_52f2378-825850e;/rx-netty/src/main/java/io/reactivex/netty/channel/DefaultChannelWriter;close();;;public Observable<Void> close() {
        if (closeIssued.compareAndSet(false, true)) {
            return _close();
        } else {
            return CONNECTION_ALREADY_CLOSED;
        }
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_52f2378_825850e/rev_52f2378-825850e;/rx-netty/src/main/java/io/reactivex/netty/channel/DefaultChannelWriter;_close();;;protected Observable<Void> _close() {
        return Observable.empty();
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_52f2378_825850e/rev_52f2378-825850e;/rx-netty/src/main/java/io/reactivex/netty/channel/ObservableConnection;_close();;;@Override
    protected Observable<Void> _close() {
        PublishSubject<I> thisSubject = inputSubject;
        cleanupConnection();
        Observable<Void> toReturn = _closeChannel();
        thisSubject.onCompleted(); // This is just to make sure we make the subject as completed after we finish
        // closing the channel, results in more deterministic behavior for clients.
        return toReturn;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_9a0e62f_5841056/rev_9a0e62f-5841056;/rx-netty/src/main/java/io/reactivex/netty/client/ClientChannelFactoryImpl;connect(Subscriber<?superObservableConnection<I,O>>,RxClient.ServerInfo,ClientConnectionFactory<I,O,?extendsObservableConnection<I,O>>);                                 final ClientConnectionFactory<I, O,? extends ObservableConnection<I, O>> connectionFactory) {
        final long startTimeMillis = Clock.newStartTimeMillis();
        eventsSubject.onEvent(ClientMetricsEvent.CONNECT_START);;                                 final ClientConnectionFactory<I, O,? extends ObservableConnection<I, O>> connectionFactory) {;                                 final ClientConnectionFactory<I, O, ? extends ObservableConnection<I, O>> connectionFactory) {
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_08cfb63_7918160/rev_08cfb63-7918160;/rx-netty/src/main/java/io/reactivex/netty/protocol/http/client/HttpClientRequest;withRawContent(S,ContentTransformer<S>);;;public <S> HttpClientRequest<T> withRawContent(S content, ContentTransformer<S> transformer) {
        return withRawContentSource(new SingletonRawSource<S>(content, transformer));
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/client/ServerPool;next();;;Server<M> next();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/client/ServerPool;getAddress();;;SocketAddress getAddress();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/client/ServerPool;getLifecycle();;;Observable<Void> getLifecycle();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/client/PoolConfig;getIdleConnCleanupTicker();;;Observable<Long> getIdleConnCleanupTicker() {
        return idleConnCleanupTicker;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/client/PoolConfig;getLimitDeterminationStrategy();;;PoolLimitDeterminationStrategy getLimitDeterminationStrategy() {
        return limitDeterminationStrategy;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/client/PoolConfig;getIdleConnectionsHolder();;;IdleConnectionsHolder<W, R> getIdleConnectionsHolder() {
        return idleConnectionsHolder;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/TrailingHeaders;TrailingHeaders();;;public TrailingHeaders() {
        lastHttpContent = new DefaultLastHttpContent();
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/TrailingHeaders;TrailingHeaders(LastHttpContent);;;public TrailingHeaders(LastHttpContent lastHttpContent) {
        this.lastHttpContent = lastHttpContent;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/TrailingHeaders;addHeader(CharSequence,Object);;;public TrailingHeaders addHeader(CharSequence name, Object value) {
        lastHttpContent.trailingHeaders().add(name, value);
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/TrailingHeaders;addHeader(CharSequence,Iterable<Object>);;;public TrailingHeaders addHeader(CharSequence name, Iterable<Object> values) {
        lastHttpContent.trailingHeaders().add(name, values);
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/TrailingHeaders;setHeader(CharSequence,Object);;;public TrailingHeaders setHeader(CharSequence name, Object value) {
        lastHttpContent.trailingHeaders().set(name, value);
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/TrailingHeaders;setHeader(CharSequence,Iterable<Object>);;;public TrailingHeaders setHeader(CharSequence name, Iterable<Object> values) {
        lastHttpContent.trailingHeaders().set(name, values);
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/TrailingHeaders;getHeader(CharSequence);;;public String getHeader(CharSequence name) {
        return lastHttpContent.trailingHeaders().get(name);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/TrailingHeaders;getAllHeaderValues(CharSequence);;;public List<String> getAllHeaderValues(CharSequence name) {
        return lastHttpContent.trailingHeaders().getAll(name);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/internal/HttpTrailerSubscriberEvent;HttpTrailerSubscriberEvent(Subscriber<?superTrailingHeaders>);;;public HttpTrailerSubscriberEvent(Subscriber<? super TrailingHeaders> subscriber) {
        this.subscriber = subscriber;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/internal/HttpTrailerSubscriberEvent;getSubscriber();;;public Subscriber<? super TrailingHeaders> getSubscriber() {
        return subscriber;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/internal/OperatorTrailer;OperatorTrailer(Func0<T>,Func2);;;public OperatorTrailer(Func0<T> trailerFactory, Func2 trailerMutator) {
        this.trailerFactory = trailerFactory;
        this.trailerMutator = trailerMutator;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/internal/OperatorTrailer;call(Object);;;@Override
    public Object call(Object child) {
        final Subscriber subscriber = (Subscriber) child;
        return new Subscriber(subscriber) {

            private T trailer = trailerFactory.call();

            @SuppressWarnings("unchecked")
            @Override
            public void onCompleted() {
                subscriber.onNext(trailer);
                subscriber.onCompleted();
            }

            @Override
            public void onError(Throwable e) {
                subscriber.onError(e);
            }

            @SuppressWarnings("unchecked")
            @Override
            public void onNext(Object i) {
                try {
                    trailer = (T) trailerMutator.call(trailer, i);
                    subscriber.onNext(i);
                } catch (Throwable e) {
                    Exceptions.throwIfFatal(e);
                    onError(OnErrorThrowable.addValueAsLastCause(e, i));
                }
            }
        };
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/internal/OperatorTrailer;liftFrom(Observable,Func0<T>,Func2);;;@SuppressWarnings("unchecked")
    public static <T extends TrailingHeaders> Observable liftFrom(Observable source,
                                                                   Func0<T> trailerFactory, Func2 trailerMutator) {
        return source.lift(new OperatorTrailer<T>(trailerFactory, trailerMutator));
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;getStatus();;;public abstract HttpResponseStatus getStatus();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;containsHeader(CharSequence);;;public abstract boolean containsHeader(CharSequence name);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;containsHeader(CharSequence,CharSequence,boolean);;;public abstract boolean containsHeader(CharSequence name, CharSequence value, boolean ignoreCaseValue);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;getHeader(CharSequence);;;public abstract String getHeader(CharSequence name);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;getHeader(CharSequence,String);;;public abstract String getHeader(CharSequence name, String defaultValue);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;getAllHeaderValues(CharSequence);;;public abstract List<String> getAllHeaderValues(CharSequence name);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;getDateHeader(CharSequence);;;public abstract Date getDateHeader(CharSequence name) throws ParseException;
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;getDateHeader(CharSequence,Date);;;public abstract Date getDateHeader(CharSequence name, Date defaultValue);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;getIntHeader(CharSequence);;;public abstract int getIntHeader(CharSequence name);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;getIntHeader(CharSequence,int);;;public abstract int getIntHeader(CharSequence name, int defaultValue);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;getHeaderNames();;;public abstract Set<String> getHeaderNames();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;addHeader(CharSequence,Object);;;public abstract HttpServerResponse<C> addHeader(CharSequence name, Object value);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;addCookie(Cookie);;;public abstract HttpServerResponse<C> addCookie(Cookie cookie);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;addDateHeader(CharSequence,Date);;;public abstract HttpServerResponse<C> addDateHeader(CharSequence name, Date value);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;addDateHeader(CharSequence,Iterable<Date>);;;public abstract HttpServerResponse<C> addDateHeader(CharSequence name, Iterable<Date> values);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;addHeader(CharSequence,Iterable<Object>);;;public abstract HttpServerResponse<C> addHeader(CharSequence name, Iterable<Object> values);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;setDateHeader(CharSequence,Date);;;public abstract HttpServerResponse<C> setDateHeader(CharSequence name, Date value);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;setHeader(CharSequence,Object);;;public abstract HttpServerResponse<C> setHeader(CharSequence name, Object value);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;setDateHeader(CharSequence,Iterable<Date>);;;public abstract HttpServerResponse<C> setDateHeader(CharSequence name, Iterable<Date> values);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;setHeader(CharSequence,Iterable<Object>);;;public abstract HttpServerResponse<C> setHeader(CharSequence name, Iterable<Object> values);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;removeHeader(CharSequence);;;public abstract HttpServerResponse<C> removeHeader(CharSequence name);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;setStatus(HttpResponseStatus);;;public abstract HttpServerResponse<C> setStatus(HttpResponseStatus status);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;sendHeaders();;;public abstract ContentWriter<C> sendHeaders();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;ContentWriter(OnSubscribe<Void>);;;protected ContentWriter(OnSubscribe<Void> f) {
            super(f);
        }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;write(Observable<C>);;;public abstract ContentWriter<C> write(Observable<C> msgs);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;write(Observable<C>,Func0<T>,Func2<T,C,T>);;;public abstract <T extends TrailingHeaders> Observable<Void> write(Observable<C> contentSource,
                                                                           Func0<T> trailerFactory,
                                                                           Func2<T, C, T> trailerMutator);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;write(Observable<C>,Func0<T>,Func2<T,C,T>,Func1<C,Boolean>);;;public abstract <T extends TrailingHeaders> Observable<Void> write(Observable<C> contentSource,
                                                                           Func0<T> trailerFactory,
                                                                           Func2<T, C, T> trailerMutator,
                                                                           Func1<C, Boolean> flushSelector);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;write(Observable<C>,Func1<C,Boolean>);;;public abstract ContentWriter<C> write(Observable<C> msgs, Func1<C, Boolean> flushSelector);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;writeAndFlushOnEach(Observable<C>);;;public abstract ContentWriter<C> writeAndFlushOnEach(Observable<C> msgs);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;writeString(Observable<String>);;;public abstract ContentWriter<C> writeString(Observable<String> msgs);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;writeString(Observable<String>,Func0<T>,Func2<T,String,T>);;;public abstract <T extends TrailingHeaders> Observable<Void> writeString(Observable<String> contentSource,
                                                                                 Func0<T> trailerFactory,
                                                                                 Func2<T, String, T> trailerMutator);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;writeString(Observable<String>,Func0<T>,Func2<T,String,T>,Func1<String,Boolean>);;;public abstract <T extends TrailingHeaders> Observable<Void> writeString(Observable<String> contentSource,
                                                                                 Func0<T> trailerFactory,
                                                                                 Func2<T, String, T> trailerMutator,
                                                                                 Func1<String, Boolean> flushSelector);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;writeString(Observable<String>,Func1<String,Boolean>);;;public abstract ContentWriter<C> writeString(Observable<String> msgs, Func1<String, Boolean> flushSelector);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;writeStringAndFlushOnEach(Observable<String>);;;public abstract ContentWriter<C> writeStringAndFlushOnEach(Observable<String> msgs);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;writeBytes(Observable<byte[]>);;;public abstract ContentWriter<C> writeBytes(Observable<byte[]> msgs);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;writeBytes(Observable<byte[]>,Func0<T>,Func2<T,byte[],T>);;;public abstract <T extends TrailingHeaders> Observable<Void> writeBytes(Observable<byte[]> contentSource,
                                                                                Func0<T> trailerFactory,
                                                                                Func2<T, byte[], T> trailerMutator);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;writeBytes(Observable<byte[]>,Func0<T>,Func2<T,byte[],T>,Func1<byte[],Boolean>);;;public abstract <T extends TrailingHeaders> Observable<Void> writeBytes(Observable<byte[]> contentSource,
                                                                                Func0<T> trailerFactory,
                                                                                Func2<T, byte[], T> trailerMutator,
                                                                                Func1<byte[], Boolean> flushSelector);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;writeBytes(Observable<byte[]>,Func1<byte[],Boolean>);;;public abstract ContentWriter<C> writeBytes(Observable<byte[]> msgs, Func1<byte[], Boolean> flushSelector);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerResponse;writeBytesAndFlushOnEach(Observable<byte[]>);;;public abstract ContentWriter<C> writeBytesAndFlushOnEach(Observable<byte[]> msgs);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;getHttpMethod();;;public abstract HttpMethod getHttpMethod();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;getHttpVersion();;;public abstract HttpVersion getHttpVersion();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;getUri();;;public abstract String getUri();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;getDecodedPath();;;public abstract String getDecodedPath();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;getCookies();;;public abstract Map<String, Set<Cookie>> getCookies();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;getQueryParameters();;;public abstract Map<String, List<String>> getQueryParameters();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;containsHeader(CharSequence);;;public abstract boolean containsHeader(CharSequence name);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;containsHeader(CharSequence,CharSequence,boolean);;;public abstract boolean containsHeader(CharSequence name, CharSequence value, boolean ignoreCaseValue);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;headerIterator();;;public abstract Iterator<Entry<String, String>> headerIterator();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;getHeader(CharSequence);;;public abstract String getHeader(CharSequence name);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;getHeader(CharSequence,String);;;public abstract String getHeader(CharSequence name, String defaultValue);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;getAllHeaderValues(CharSequence);;;public abstract List<String> getAllHeaderValues(CharSequence name);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;getContentLength();;;public abstract long getContentLength();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;getContentLength(long);;;public abstract long getContentLength(long defaultValue);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;getDateHeader(CharSequence);;;public abstract Date getDateHeader(CharSequence name) throws ParseException;
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;getDateHeader(CharSequence,Date);;;public abstract Date getDateHeader(CharSequence name, Date defaultValue);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;getHostHeader();;;public abstract String getHostHeader();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;getHostHeader(String);;;public abstract String getHostHeader(String defaultValue);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;getIntHeader(CharSequence);;;public abstract int getIntHeader(CharSequence name);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;getIntHeader(CharSequence,int);;;public abstract int getIntHeader(CharSequence name, int defaultValue);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;is100ContinueExpected();;;public abstract boolean is100ContinueExpected();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;isContentLengthSet();;;public abstract boolean isContentLengthSet();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;isKeepAlive();;;public abstract boolean isKeepAlive();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;isTransferEncodingChunked();;;public abstract boolean isTransferEncodingChunked();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;getHeaderNames();;;public abstract Set<String> getHeaderNames();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;addHeader(CharSequence,Object);;;public abstract HttpServerRequest<T> addHeader(CharSequence name, Object value);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;addCookie(Cookie);;;public abstract HttpServerRequest<T> addCookie(Cookie cookie);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;addDateHeader(CharSequence,Date);;;public abstract HttpServerRequest<T> addDateHeader(CharSequence name, Date value);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;addDateHeader(CharSequence,Iterable<Date>);;;public abstract HttpServerRequest<T> addDateHeader(CharSequence name, Iterable<Date> values);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;addHeader(CharSequence,Iterable<Object>);;;public abstract HttpServerRequest<T> addHeader(CharSequence name, Iterable<Object> values);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;setDateHeader(CharSequence,Date);;;public abstract HttpServerRequest<T> setDateHeader(CharSequence name, Date value);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;setHeader(CharSequence,Object);;;public abstract HttpServerRequest<T> setHeader(CharSequence name, Object value);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;setDateHeader(CharSequence,Iterable<Date>);;;public abstract HttpServerRequest<T> setDateHeader(CharSequence name, Iterable<Date> values);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;setHeader(CharSequence,Iterable<Object>);;;public abstract HttpServerRequest<T> setHeader(CharSequence name, Iterable<Object> values);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;removeHeader(CharSequence);;;public abstract HttpServerRequest<T> removeHeader(CharSequence name);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;getContent();;;public abstract Observable<T> getContent();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;discardContent();;;public abstract Observable<Void> discardContent();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequest;toString();;;public String toString() {
        StringBuilder builder = new StringBuilder();
        builder.append(getHttpMethod())
               .append(' ')
               .append(getUri())
               .append(' ')
               .append(getHttpVersion().text())
               .append('\n');

        Iterator<Entry<String, String>> headers = headerIterator();
        while (headers.hasNext()) {
            Entry<String, String> next = headers.next();
            builder.append(next.getKey())
                   .append(": ")
                   .append(next.getValue())
                   .append('\n');
        }
        builder.append('\n');

        return builder.toString();
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServer;channelOption(ChannelOption<T>,T);;;public abstract <T> HttpServer<I, O> channelOption(ChannelOption<T> option, T value);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServer;clientChannelOption(ChannelOption<T>,T);;;public abstract <T> HttpServer<I, O> clientChannelOption(ChannelOption<T> option, T value);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServer;addChannelHandlerFirst(String,Func0<ChannelHandler>);;;public abstract <II, OO> HttpServer<II, OO> addChannelHandlerFirst(String name,
                                                                       Func0<ChannelHandler> handlerFactory);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServer;addChannelHandlerFirst(EventExecutorGroup,String,Func0<ChannelHandler>);;;public abstract <II, OO> HttpServer<II, OO> addChannelHandlerFirst(EventExecutorGroup group, String name,
                                                                       Func0<ChannelHandler> handlerFactory);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServer;addChannelHandlerLast(String,Func0<ChannelHandler>);;;public abstract <II, OO> HttpServer<II, OO> addChannelHandlerLast(String name,
                                                                      Func0<ChannelHandler> handlerFactory);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServer;addChannelHandlerLast(EventExecutorGroup,String,Func0<ChannelHandler>);;;public abstract <II, OO> HttpServer<II, OO> addChannelHandlerLast(EventExecutorGroup group, String name,
                                                                      Func0<ChannelHandler> handlerFactory);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServer;addChannelHandlerBefore(String,String,Func0<ChannelHandler>);;;public abstract <II, OO> HttpServer<II, OO> addChannelHandlerBefore(String baseName, String name,
                                                                        Func0<ChannelHandler> handlerFactory);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServer;addChannelHandlerBefore(EventExecutorGroup,String,String,Func0<ChannelHandler>);;;public abstract <II, OO> HttpServer<II, OO> addChannelHandlerBefore(EventExecutorGroup group, String baseName,
                                                                        String name,
                                                                        Func0<ChannelHandler> handlerFactory);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServer;addChannelHandlerAfter(String,String,Func0<ChannelHandler>);;;public abstract <II, OO> HttpServer<II, OO> addChannelHandlerAfter(String baseName, String name,
                                                                       Func0<ChannelHandler> handlerFactory);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServer;addChannelHandlerAfter(EventExecutorGroup,String,String,Func0<ChannelHandler>);;;public abstract <II, OO> HttpServer<II, OO> addChannelHandlerAfter(EventExecutorGroup group, String baseName,
                                                                       String name,
                                                                       Func0<ChannelHandler> handlerFactory);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServer;pipelineConfigurator(Action1<ChannelPipeline>);;;public abstract <II, OO> HttpServer<II, OO> pipelineConfigurator(Action1<ChannelPipeline> pipelineConfigurator);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServer;enableWireLogging(LogLevel);;;public abstract HttpServer<I, O> enableWireLogging(LogLevel wireLoggingLevel);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServer;getServerPort();;;public abstract int getServerPort();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServer;startAndWait(RequestHandler<I,O>);;;public abstract void startAndWait(RequestHandler<I, O> requestHandler);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServer;start(RequestHandler<I,O>);;;public abstract HttpServer<I, O> start(RequestHandler<I, O> requestHandler);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServer;shutdown();;;public abstract void shutdown();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServer;waitTillShutdown();;;public abstract void waitTillShutdown();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServer;waitTillShutdown(long,TimeUnit);;;public abstract void waitTillShutdown(long duration, TimeUnit timeUnit);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServer;newServer();;;public static HttpServer<ByteBuf, ByteBuf> newServer() {
        return _newServer(TcpServer.newServer(0));
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServer;newServer(int);;;public static HttpServer<ByteBuf, ByteBuf> newServer(int port) {
        return _newServer(TcpServer.newServer(port));
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServer;newServer(int,EventLoopGroup,Class<?extendsServerChannel>);;;public static HttpServer<ByteBuf, ByteBuf> newServer(int port, EventLoopGroup eventLoopGroup,
                                                         Class<? extends ServerChannel> channelClass) {
        return _newServer(TcpServer.newServer(port, eventLoopGroup, eventLoopGroup, channelClass));
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServer;newServer(int,EventLoopGroup,EventLoopGroup,Class<?extendsServerChannel>);;;public static HttpServer<ByteBuf, ByteBuf> newServer(int port, EventLoopGroup serverGroup,
                                                         EventLoopGroup clientGroup,
                                                         Class<? extends ServerChannel> channelClass) {
        return _newServer(TcpServer.newServer(port, serverGroup, clientGroup, channelClass));
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServer;_newServer(TcpServer<ByteBuf,ByteBuf>);;;private static HttpServer<ByteBuf, ByteBuf> _newServer(TcpServer<ByteBuf, ByteBuf> tcpServer) {
        return HttpServerImpl.create(tcpServer);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/RequestHandler;handle(HttpServerRequest<I>,HttpServerResponse<O>);;;Observable<Void> handle(HttpServerRequest<I> request, HttpServerResponse<O> response);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;HttpServerRequestImpl(HttpRequest,Channel);;;public HttpServerRequestImpl(HttpRequest nettyRequest, Channel nettyChannel) {
        this.nettyRequest = nettyRequest;
        this.nettyChannel = nettyChannel;
        uriInfoHolder = new UriInfoHolder(this.nettyRequest.uri());
        cookiesHolder = CookiesHolder.newServerRequestHolder(nettyRequest.headers());
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;getHttpMethod();;;@Override
    public HttpMethod getHttpMethod() {
        return nettyRequest.method();
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;getHttpVersion();;;@Override
    public HttpVersion getHttpVersion() {
        return nettyRequest.protocolVersion();
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;getUri();;;@Override
    public String getUri() {
        return uriInfoHolder.getRawUriString();
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;getDecodedPath();;;@Override
    public String getDecodedPath() {
        return uriInfoHolder.getPath();
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;getCookies();;;@Override
    public Map<String, Set<Cookie>> getCookies() {
        return cookiesHolder.getAllCookies();
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;getQueryParameters();;;@Override
    public Map<String, List<String>> getQueryParameters() {
        return uriInfoHolder.getQueryParameters();
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;containsHeader(CharSequence);;;@Override
    public boolean containsHeader(CharSequence name) {
        return nettyRequest.headers().contains(name);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;containsHeader(CharSequence,CharSequence,boolean);;;@Override
    public boolean containsHeader(CharSequence name, CharSequence value, boolean ignoreCaseValue) {
        return nettyRequest.headers().contains(name, value, ignoreCaseValue);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;headerIterator();;;@Override
    public Iterator<Entry<String, String>> headerIterator() {
        return nettyRequest.headers().iterator();
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;getHeader(CharSequence);;;@Override
    public String getHeader(CharSequence name) {
        return nettyRequest.headers().get(name);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;getHeader(CharSequence,String);;;@Override
    public String getHeader(CharSequence name, String defaultValue) {
        return HttpHeaders.getHeader(nettyRequest, name, defaultValue);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;getAllHeaderValues(CharSequence);;;@Override
    public List<String> getAllHeaderValues(CharSequence name) {
        return nettyRequest.headers().getAll(name);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;getContentLength();;;@Override
    public long getContentLength() {
        return HttpHeaders.getContentLength(nettyRequest);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;getContentLength(long);;;@Override
    public long getContentLength(long defaultValue) {
        return HttpHeaders.getContentLength(nettyRequest, defaultValue);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;getDateHeader(CharSequence);;;@Override
    public Date getDateHeader(CharSequence name) throws ParseException {
        return HttpHeaders.getDateHeader(nettyRequest, name);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;getDateHeader(CharSequence,Date);;;@Override
    public Date getDateHeader(CharSequence name, Date defaultValue) {
        return HttpHeaders.getDateHeader(nettyRequest, name, defaultValue);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;getHostHeader();;;@Override
    public String getHostHeader() {
        return HttpHeaders.getHost(nettyRequest);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;getHostHeader(String);;;@Override
    public String getHostHeader(String defaultValue) {
        return HttpHeaders.getHost(nettyRequest, defaultValue);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;getIntHeader(CharSequence);;;@Override
    public int getIntHeader(CharSequence name) {
        return HttpHeaders.getIntHeader(nettyRequest, name);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;getIntHeader(CharSequence,int);;;@Override
    public int getIntHeader(CharSequence name, int defaultValue) {
        return HttpHeaders.getIntHeader(nettyRequest, name, defaultValue);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;is100ContinueExpected();;;@Override
    public boolean is100ContinueExpected() {
        return HttpHeaders.is100ContinueExpected(nettyRequest);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;isContentLengthSet();;;@Override
    public boolean isContentLengthSet() {
        return HttpHeaders.isContentLengthSet(nettyRequest);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;isKeepAlive();;;@Override
    public boolean isKeepAlive() {
        return HttpHeaders.isKeepAlive(nettyRequest);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;isTransferEncodingChunked();;;@Override
    public boolean isTransferEncodingChunked() {
        return HttpHeaders.isTransferEncodingChunked(nettyRequest);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;getHeaderNames();;;@Override
    public Set<String> getHeaderNames() {
        return nettyRequest.headers().names();
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;addHeader(CharSequence,Object);;;@Override
    public HttpServerRequest<T> addHeader(CharSequence name, Object value) {
        nettyRequest.headers().add(name, value);
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;addCookie(Cookie);;;@Override
    public HttpServerRequest<T> addCookie(Cookie cookie) {
        nettyRequest.headers().add(Names.COOKIE,
                                   ClientCookieEncoder.encode(cookie) /*Since this is a request object, cookies are
                                   as if coming from a client*/);
        return this;

    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;addDateHeader(CharSequence,Date);;;@Override
    public HttpServerRequest<T> addDateHeader(CharSequence name, Date value) {
        HttpHeaders.addDateHeader(nettyRequest, name, value);
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;addDateHeader(CharSequence,Iterable<Date>);;;@Override
    public HttpServerRequest<T> addDateHeader(CharSequence name, Iterable<Date> values) {
        for (Date value : values) {
            HttpHeaders.addDateHeader(nettyRequest, name, value);
        }
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;addHeader(CharSequence,Iterable<Object>);;;@Override
    public HttpServerRequest<T> addHeader(CharSequence name, Iterable<Object> values) {
        nettyRequest.headers().add(name, values);
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;setDateHeader(CharSequence,Date);;;@Override
    public HttpServerRequest<T> setDateHeader(CharSequence name, Date value) {
        HttpHeaders.setDateHeader(nettyRequest, name, value);
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;setHeader(CharSequence,Object);;;@Override
    public HttpServerRequest<T> setHeader(CharSequence name, Object value) {
        nettyRequest.headers().set(name, value);
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;setDateHeader(CharSequence,Iterable<Date>);;;@Override
    public HttpServerRequest<T> setDateHeader(CharSequence name, Iterable<Date> values) {
        for (Date value : values) {
            HttpHeaders.setDateHeader(nettyRequest, name, value);
        }
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;setHeader(CharSequence,Iterable<Object>);;;@Override
    public HttpServerRequest<T> setHeader(CharSequence name, Iterable<Object> values) {
        nettyRequest.headers().add(name, values);
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;removeHeader(CharSequence);;;@Override
    public HttpServerRequest<T> removeHeader(CharSequence name) {
        nettyRequest.headers().remove(name);
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;getContent();;;@Override
    public Observable<T> getContent() {
        return Observable.create(new OnSubscribe<T>() {
            @Override
            public void call(Subscriber<? super T> subscriber) {
                nettyChannel.pipeline()
                            .fireUserEventTriggered(new HttpContentSubscriberEvent<T>(subscriber));
            }
        });
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/serverNew/HttpServerRequestImpl;discardContent();;;@Override
    public Observable<Void> discardContent() {
        return Observable.create(new OnSubscribe<Void>() {
            @Override
            public void call(Subscriber<? super Void> subscriber) {
                nettyChannel.pipeline()
                            .fireUserEventTriggered(HttpContentSubscriberEvent.discardAllInput());
                subscriber.onCompleted();
            }
        });
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient;createRequest(HttpMethod,String);;;public abstract HttpClientRequest<I, O> createRequest(HttpMethod method, String uri);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient;addChannelHandlerFirst(String,Func0<ChannelHandler>);;;public abstract <II, OO> HttpClient<II, OO> addChannelHandlerFirst(String name, Func0<ChannelHandler> handlerFactory);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient;addChannelHandlerFirst(EventExecutorGroup,String,Func0<ChannelHandler>);;;public abstract <II, OO> HttpClient<II, OO> addChannelHandlerFirst(EventExecutorGroup group, String name,
                                                                       Func0<ChannelHandler> handlerFactory);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient;addChannelHandlerLast(String,Func0<ChannelHandler>);;;public abstract <II, OO> HttpClient<II, OO>  addChannelHandlerLast(String name, Func0<ChannelHandler> handlerFactory);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient;addChannelHandlerLast(EventExecutorGroup,String,Func0<ChannelHandler>);;;public abstract <II, OO> HttpClient<II, OO> addChannelHandlerLast(EventExecutorGroup group, String name,
                                                                      Func0<ChannelHandler> handlerFactory);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient;addChannelHandlerBefore(String,String,Func0<ChannelHandler>);;;public abstract <II, OO> HttpClient<II, OO> addChannelHandlerBefore(String baseName, String name,
                                                                        Func0<ChannelHandler> handlerFactory);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient;addChannelHandlerBefore(EventExecutorGroup,String,String,Func0<ChannelHandler>);;;public abstract <II, OO> HttpClient<II, OO> addChannelHandlerBefore(EventExecutorGroup group, String baseName,
                                                                        String name, Func0<ChannelHandler> handlerFactory);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient;addChannelHandlerAfter(String,String,Func0<ChannelHandler>);;;public abstract <II, OO> HttpClient<II, OO>  addChannelHandlerAfter(String baseName, String name,
                                                                        Func0<ChannelHandler> handlerFactory);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient;addChannelHandlerAfter(EventExecutorGroup,String,String,Func0<ChannelHandler>);;;public abstract <II, OO> HttpClient<II, OO> addChannelHandlerAfter(EventExecutorGroup group, String baseName,
                                                                       String name, Func0<ChannelHandler> handlerFactory);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient;idleConnectionsTimeoutMillis(long);;;public abstract HttpClient<I, O> idleConnectionsTimeoutMillis(long idleConnectionsTimeoutMillis);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient;connectionPoolLimitStrategy(PoolLimitDeterminationStrategy);;;public abstract HttpClient<I, O> connectionPoolLimitStrategy(
            PoolLimitDeterminationStrategy limitDeterminationStrategy);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient;idleConnectionCleanupTimer(Observable<Long>);;;public abstract HttpClient<I, O> idleConnectionCleanupTimer(Observable<Long> idleConnectionCleanupTimer);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient;noIdleConnectionCleanup();;;public abstract HttpClient<I, O> noIdleConnectionCleanup();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient;noConnectionPooling();;;public abstract HttpClient<I, O> noConnectionPooling();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient;newClient(ServerPool<ClientMetricsEvent<?>>);;;public static HttpClient<ByteBuf, ByteBuf> newClient(ServerPool<ClientMetricsEvent<?>> serverPool) {
        return newClient(HTTP_CLIENT_NO_NAME, serverPool);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient;newClient(String,int);;;public static HttpClient<ByteBuf, ByteBuf> newClient(String host, int port) {
        return newClient(HTTP_CLIENT_NO_NAME, host, port);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient;newClient(String,String,int);;;public static HttpClient<ByteBuf, ByteBuf> newClient(String name, String host, int port) {
        return _newClient(TcpClient.newClient(name, new InetSocketAddress(host, port)));
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient;newClient(String,ServerPool<ClientMetricsEvent<?>>);;;public static HttpClient<ByteBuf, ByteBuf> newClient(String name, ServerPool<ClientMetricsEvent<?>> serverPool) {
        return _newClient(TcpClient.newClient(name, serverPool));
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient;newClient(EventLoopGroup,Class<?extendsChannel>,String,int);;;public static HttpClient<ByteBuf, ByteBuf> newClient(EventLoopGroup eventLoopGroup,
                                                        Class<? extends Channel> channelClass, String host, int port) {
        return newClient(eventLoopGroup, channelClass, HTTP_CLIENT_NO_NAME, host, port);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient;newClient(EventLoopGroup,Class<?extendsChannel>,String,String,int);;;public static HttpClient<ByteBuf, ByteBuf> newClient(EventLoopGroup eventLoopGroup,
                                                        Class<? extends Channel> channelClass, String name, String host,
                                                        int port) {
        return _newClient(TcpClient.newClient(eventLoopGroup, channelClass, name, new InetSocketAddress(host, port)));
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient;newClient(EventLoopGroup,Class<?extendsChannel>,ServerPool<ClientMetricsEvent<?>>);;;public static HttpClient<ByteBuf, ByteBuf> newClient(EventLoopGroup eventLoopGroup,
                                                        Class<? extends Channel> channelClass,
                                                        ServerPool<ClientMetricsEvent<?>> serverPool) {
        return newClient(eventLoopGroup, channelClass, HTTP_CLIENT_NO_NAME, serverPool);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient;newClient(EventLoopGroup,Class<?extendsChannel>,String,ServerPool<ClientMetricsEvent<?>>);;;public static HttpClient<ByteBuf, ByteBuf> newClient(EventLoopGroup eventLoopGroup,
                                                        Class<? extends Channel> channelClass, String name,
                                                        ServerPool<ClientMetricsEvent<?>> serverPool) {
        return _newClient(TcpClient.newClient(eventLoopGroup, channelClass, name, serverPool));
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient;newClient(SocketAddress);;;public static HttpClient<ByteBuf, ByteBuf> newClient(SocketAddress remoteAddress) {
        return newClient(HTTP_CLIENT_NO_NAME, remoteAddress);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient;newClient(String,SocketAddress);;;public static HttpClient<ByteBuf, ByteBuf> newClient(String name, SocketAddress remoteAddress) {
        return _newClient(TcpClient.newClient(name, remoteAddress));
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient;newClient(EventLoopGroup,Class<?extendsChannel>,SocketAddress);;;public static HttpClient<ByteBuf, ByteBuf> newClient(EventLoopGroup eventLoopGroup,
                                                        Class<? extends Channel> channelClass,
                                                        SocketAddress remoteAddress) {
        return newClient(eventLoopGroup, channelClass, HTTP_CLIENT_NO_NAME, remoteAddress);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient;newClient(EventLoopGroup,Class<?extendsChannel>,String,SocketAddress);;;public static HttpClient<ByteBuf, ByteBuf> newClient(EventLoopGroup eventLoopGroup,
                                                        Class<? extends Channel> channelClass, String name,
                                                        SocketAddress remoteAddress) {
        return _newClient(TcpClient.newClient(eventLoopGroup, channelClass, name, remoteAddress));
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient;_newClient(TcpClient<ByteBuf,ByteBuf>);;;private static HttpClient<ByteBuf, ByteBuf> _newClient(TcpClient<ByteBuf, ByteBuf> tcpClient) {
        return HttpClientImpl.create(tcpClient);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;getHttpVersion();;;public abstract HttpVersion getHttpVersion();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;getStatus();;;public abstract HttpResponseStatus getStatus();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;getCookies();;;public abstract Map<String, Set<Cookie>> getCookies();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;containsHeader(CharSequence);;;public abstract boolean containsHeader(CharSequence name);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;containsHeader(CharSequence,CharSequence,boolean);;;public abstract boolean containsHeader(CharSequence name, CharSequence value, boolean ignoreCaseValue);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;headerIterator();;;public abstract Iterator<Entry<String, String>> headerIterator();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;getHeader(CharSequence);;;public abstract String getHeader(CharSequence name);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;getHeader(CharSequence,String);;;public abstract String getHeader(CharSequence name, String defaultValue);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;getAllHeaderValues(CharSequence);;;public abstract List<String> getAllHeaderValues(CharSequence name);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;getContentLength();;;public abstract long getContentLength();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;getContentLength(long);;;public abstract long getContentLength(long defaultValue);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;getDateHeader(CharSequence);;;public abstract Date getDateHeader(CharSequence name) throws ParseException;
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;getDateHeader(CharSequence,Date);;;public abstract Date getDateHeader(CharSequence name, Date defaultValue);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;getHostHeader();;;public abstract String getHostHeader();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;getHost(String);;;public abstract String getHost(String defaultValue);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;getIntHeader(CharSequence);;;public abstract int getIntHeader(CharSequence name);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;getIntHeader(CharSequence,int);;;public abstract int getIntHeader(CharSequence name, int defaultValue);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;isContentLengthSet();;;public abstract boolean isContentLengthSet();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;isKeepAlive();;;public abstract boolean isKeepAlive();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;isTransferEncodingChunked();;;public abstract boolean isTransferEncodingChunked();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;getHeaderNames();;;public abstract Set<String> getHeaderNames();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;addHeader(CharSequence,Object);;;public abstract HttpClientResponse<T> addHeader(CharSequence name, Object value);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;addCookie(Cookie);;;public abstract HttpClientResponse<T> addCookie(Cookie cookie);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;addDateHeader(CharSequence,Date);;;public abstract HttpClientResponse<T> addDateHeader(CharSequence name, Date value);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;addDateHeader(CharSequence,Iterable<Date>);;;public abstract HttpClientResponse<T> addDateHeader(CharSequence name, Iterable<Date> values);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;addHeader(CharSequence,Iterable<Object>);;;public abstract HttpClientResponse<T> addHeader(CharSequence name, Iterable<Object> values);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;setDateHeader(CharSequence,Date);;;public abstract HttpClientResponse<T> setDateHeader(CharSequence name, Date value);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;setHeader(CharSequence,Object);;;public abstract HttpClientResponse<T> setHeader(CharSequence name, Object value);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;setDateHeader(CharSequence,Iterable<Date>);;;public abstract HttpClientResponse<T> setDateHeader(CharSequence name, Iterable<Date> values);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;setHeader(CharSequence,Iterable<Object>);;;public abstract HttpClientResponse<T> setHeader(CharSequence name, Iterable<Object> values);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;removeHeader(CharSequence);;;public abstract HttpClientResponse<T> removeHeader(CharSequence name);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;getContent();;;public abstract Observable<T> getContent();
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponse;toString();;;public String toString() {
        StringBuilder builder = new StringBuilder();
        builder.append(getHttpVersion().text())
               .append(' ')
               .append(getStatus().code())
               .append(' ')
               .append(getStatus().reasonPhrase())
               .append('\n');

        Iterator<Entry<String, String>> headers = headerIterator();
        while (headers.hasNext()) {
            Entry<String, String> next = headers.next();
            builder.append(next.getKey())
                   .append(": ")
                   .append(next.getValue());
        }
        builder.append('\n');

        return builder.toString();
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest;writeContent(Observable<I>);;;public abstract Observable<HttpClientResponse<O>> writeContent(Observable<I> contentSource);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest;writeContentAndFlushOnEach(Observable<I>);;;public abstract Observable<HttpClientResponse<O>> writeContentAndFlushOnEach(Observable<I> contentSource);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest;writeContent(Observable<I>,Func1<I,Boolean>);;;public abstract Observable<HttpClientResponse<O>> writeContent(Observable<I> contentSource,
                                                                   Func1<I, Boolean> flushSelector);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest;writeContent(Observable<I>,Func0<T>,Func2<T,I,T>);;;@Experimental
    public abstract <T extends TrailingHeaders> Observable<HttpClientResponse<O>> writeContent(Observable<I> contentSource,
                                                                                               Func0<T> trailerFactory,
                                                                                               Func2<T, I, T> trailerMutator);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest;writeContent(Observable<I>,Func0<T>,Func2<T,I,T>,Func1<I,Boolean>);;;@Experimental
    public abstract <T extends TrailingHeaders> Observable<HttpClientResponse<O>> writeContent(Observable<I> contentSource,
                                                                                               Func0<T> trailerFactory,
                                                                                               Func2<T, I, T> trailerMutator,
                                                                                               Func1<I, Boolean> flushSelector);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest;writeStringContent(Observable<String>);;;public abstract Observable<HttpClientResponse<O>> writeStringContent(Observable<String> contentSource);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest;writeStringContent(Observable<String>,Func1<String,Boolean>);;;public abstract Observable<HttpClientResponse<O>> writeStringContent(Observable<String> contentSource,
                                                                         Func1<String, Boolean> flushSelector);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest;writeStringContent(Observable<String>,Func0<T>,Func2<T,String,T>);;;@Experimental
    public abstract <T extends TrailingHeaders> Observable<HttpClientResponse<O>> writeStringContent(Observable<String> contentSource,
                                                                                                     Func0<T> trailerFactory,
                                                                                                     Func2<T, String, T> trailerMutator);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest;writeStringContent(Observable<String>,Func0<T>,Func2<T,String,T>,Func1<String,Boolean>);;;@Experimental
    public abstract <T extends TrailingHeaders> Observable<HttpClientResponse<O>> writeStringContent(Observable<String> contentSource,
                                                                                                     Func0<T> trailerFactory,
                                                                                                     Func2<T, String, T> trailerMutator,
                                                                                                     Func1<String, Boolean> flushSelector);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest;writeBytesContent(Observable<byte[]>);;;public abstract Observable<HttpClientResponse<O>> writeBytesContent(Observable<byte[]> contentSource);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest;writeBytesContent(Observable<byte[]>,Func1<byte[],Boolean>);;;public abstract Observable<HttpClientResponse<O>> writeBytesContent(Observable<byte[]> contentSource,
                                                                        Func1<byte[], Boolean> flushSelector);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest;writeBytesContent(Observable<byte[]>,Func0<T>,Func2<T,byte[],T>);;;@Experimental
    public abstract <T extends TrailingHeaders> Observable<HttpClientResponse<O>> writeBytesContent(Observable<byte[]> contentSource,
                                                                                                    Func0<T> trailerFactory,
                                                                                                    Func2<T, byte[], T> trailerMutator);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest;writeBytesContent(Observable<byte[]>,Func0<T>,Func2<T,byte[],T>,Func1<byte[],Boolean>);;;@Experimental
    public abstract <T extends TrailingHeaders> Observable<HttpClientResponse<O>> writeBytesContent(Observable<byte[]> contentSource,
                                                                                                    Func0<T> trailerFactory,
                                                                                                    Func2<T, byte[], T> trailerMutator,
                                                                                                    Func1<byte[], Boolean> flushSelector);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest;removeHeader(CharSequence);;;public abstract HttpClientRequest<I, O> removeHeader(CharSequence name);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest;addChannelHandlerFirst(String,Func0<ChannelHandler>);;;public abstract <II, OO> HttpClientRequest<II, OO> addChannelHandlerFirst(String name,
                                                                              Func0<ChannelHandler> handlerFactory);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest;addChannelHandlerFirst(EventExecutorGroup,String,Func0<ChannelHandler>);;;public abstract <II, OO> HttpClientRequest<II, OO> addChannelHandlerFirst(EventExecutorGroup group, String name,
                                                                              Func0<ChannelHandler> handlerFactory);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest;addChannelHandlerLast(String,Func0<ChannelHandler>);;;public abstract <II, OO> HttpClientRequest<II, OO> addChannelHandlerLast(String name,
                                                                             Func0<ChannelHandler> handlerFactory);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest;addChannelHandlerLast(EventExecutorGroup,String,Func0<ChannelHandler>);;;public abstract <II, OO> HttpClientRequest<II, OO> addChannelHandlerLast(EventExecutorGroup group, String name,
                                                                             Func0<ChannelHandler> handlerFactory);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest;addChannelHandlerBefore(String,String,Func0<ChannelHandler>);;;public abstract <II, OO> HttpClientRequest<II, OO> addChannelHandlerBefore(String baseName, String name,
                                                                               Func0<ChannelHandler> handlerFactory);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest;addChannelHandlerBefore(EventExecutorGroup,String,String,Func0<ChannelHandler>);;;public abstract <II, OO> HttpClientRequest<II, OO> addChannelHandlerBefore(EventExecutorGroup group,
                                                                               String baseName,
                                                                               String name,
                                                                               Func0<ChannelHandler> handlerFactory);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest;addChannelHandlerAfter(String,String,Func0<ChannelHandler>);;;public abstract <II, OO> HttpClientRequest<II, OO> addChannelHandlerAfter(String baseName, String name,
                                                                              Func0<ChannelHandler> handlerFactory);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest;addChannelHandlerAfter(EventExecutorGroup,String,String,Func0<ChannelHandler>);;;public abstract <II, OO> HttpClientRequest<II, OO> addChannelHandlerAfter(EventExecutorGroup group, String baseName,
                                                                              String name,
                                                                              Func0<ChannelHandler> handlerFactory);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest;pipelineConfigurator(Action1<ChannelPipeline>);;;public abstract <II, OO> HttpClientRequest<II, OO> pipelineConfigurator(Action1<ChannelPipeline> configurator);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest;enableWireLogging(LogLevel);;;public abstract HttpClientRequest<I, O> enableWireLogging(LogLevel wireLoggingLevel);
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;HttpClientResponseImpl(HttpResponse,Channel);;;protected HttpClientResponseImpl(HttpResponse nettyResponse, Channel nettyChannel) {
        this.nettyResponse = nettyResponse;
        this.nettyChannel = nettyChannel;
        cookiesHolder = CookiesHolder.newClientResponseHolder(nettyResponse.headers());
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;getHttpVersion();;;@Override
    public HttpVersion getHttpVersion() {
        return nettyResponse.protocolVersion();
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;getStatus();;;@Override
    public HttpResponseStatus getStatus() {
        return nettyResponse.status();
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;getCookies();;;@Override
    public Map<String, Set<Cookie>> getCookies() {
        return cookiesHolder.getAllCookies();
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;containsHeader(CharSequence);;;@Override
    public boolean containsHeader(CharSequence name) {
        return nettyResponse.headers().contains(name);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;containsHeader(CharSequence,CharSequence,boolean);;;@Override
    public boolean containsHeader(CharSequence name, CharSequence value, boolean ignoreCaseValue) {
        return nettyResponse.headers().contains(name, value, ignoreCaseValue);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;headerIterator();;;@Override
    public Iterator<Entry<String, String>> headerIterator() {
        return nettyResponse.headers().iterator();
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;getHeader(CharSequence);;;@Override
    public String getHeader(CharSequence name) {
        return nettyResponse.headers().get(name);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;getHeader(CharSequence,String);;;@Override
    public String getHeader(CharSequence name, String defaultValue) {
        return HttpHeaders.getHeader(nettyResponse, name, defaultValue);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;getAllHeaderValues(CharSequence);;;@Override
    public List<String> getAllHeaderValues(CharSequence name) {
        return nettyResponse.headers().getAll(name);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;getContentLength();;;@Override
    public long getContentLength() {
        return HttpHeaders.getContentLength(nettyResponse);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;getContentLength(long);;;@Override
    public long getContentLength(long defaultValue) {
        return HttpHeaders.getContentLength(nettyResponse, defaultValue);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;getDateHeader(CharSequence);;;@Override
    public Date getDateHeader(CharSequence name) throws ParseException {
        return HttpHeaders.getDateHeader(nettyResponse, name);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;getDateHeader(CharSequence,Date);;;@Override
    public Date getDateHeader(CharSequence name, Date defaultValue) {
        return HttpHeaders.getDateHeader(nettyResponse, name, defaultValue);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;getHostHeader();;;@Override
    public String getHostHeader() {
        return HttpHeaders.getHost(nettyResponse);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;getHost(String);;;@Override
    public String getHost(String defaultValue) {
        return HttpHeaders.getHost(nettyResponse, defaultValue);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;getIntHeader(CharSequence);;;@Override
    public int getIntHeader(CharSequence name) {
        return HttpHeaders.getIntHeader(nettyResponse, name);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;getIntHeader(CharSequence,int);;;@Override
    public int getIntHeader(CharSequence name, int defaultValue) {
        return HttpHeaders.getIntHeader(nettyResponse, name, defaultValue);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;isContentLengthSet();;;@Override
    public boolean isContentLengthSet() {
        return HttpHeaders.isContentLengthSet(nettyResponse);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;isKeepAlive();;;@Override
    public boolean isKeepAlive() {
        return HttpHeaders.isKeepAlive(nettyResponse);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;isTransferEncodingChunked();;;@Override
    public boolean isTransferEncodingChunked() {
        return HttpHeaders.isTransferEncodingChunked(nettyResponse);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;getHeaderNames();;;@Override
    public Set<String> getHeaderNames() {
        return nettyResponse.headers().names();
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;addHeader(CharSequence,Object);;;@Override
    public HttpClientResponse<T> addHeader(CharSequence name, Object value) {
        nettyResponse.headers().add(name, value);
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;addCookie(Cookie);;;@Override
    public HttpClientResponse<T> addCookie(Cookie cookie) {
        nettyResponse.headers().add(HttpHeaders.Names.SET_COOKIE, ClientCookieEncoder.encode(cookie));
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;addDateHeader(CharSequence,Date);;;@Override
    public HttpClientResponse<T> addDateHeader(CharSequence name, Date value) {
        HttpHeaders.addDateHeader(nettyResponse, name, value);
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;addDateHeader(CharSequence,Iterable<Date>);;;@Override
    public HttpClientResponse<T> addDateHeader(CharSequence name, Iterable<Date> values) {
        for (Date value : values) {
            HttpHeaders.addDateHeader(nettyResponse, name, value);
        }
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;addHeader(CharSequence,Iterable<Object>);;;@Override
    public HttpClientResponse<T> addHeader(CharSequence name, Iterable<Object> values) {
        nettyResponse.headers().add(name, values);
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;setDateHeader(CharSequence,Date);;;@Override
    public HttpClientResponse<T> setDateHeader(CharSequence name, Date value) {
        HttpHeaders.setDateHeader(nettyResponse, name, value);
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;setHeader(CharSequence,Object);;;@Override
    public HttpClientResponse<T> setHeader(CharSequence name, Object value) {
        nettyResponse.headers().set(name, value);
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;setDateHeader(CharSequence,Iterable<Date>);;;@Override
    public HttpClientResponse<T> setDateHeader(CharSequence name, Iterable<Date> values) {
        for (Date value : values) {
            HttpHeaders.setDateHeader(nettyResponse, name, value);
        }
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;setHeader(CharSequence,Iterable<Object>);;;@Override
    public HttpClientResponse<T> setHeader(CharSequence name, Iterable<Object> values) {
        nettyResponse.headers().set(name, values);
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;removeHeader(CharSequence);;;@Override
    public HttpClientResponse<T> removeHeader(CharSequence name) {
        nettyResponse.headers().remove(name);
        return this;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;getContent();;;@Override
    public Observable<T> getContent() {
        return Observable.create(new OnSubscribe<T>() {
            @Override
            public void call(Subscriber<? super T> subscriber) {
                nettyChannel.pipeline()
                            .fireUserEventTriggered(new HttpContentSubscriberEvent<T>(subscriber));
            }
        });
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientResponseImpl;getKeepAliveTimeoutSeconds();;;public Long getKeepAliveTimeoutSeconds() {
        String keepAliveHeader = nettyResponse.headers().get(KEEP_ALIVE_HEADER_NAME);
        if (null != keepAliveHeader && !keepAliveHeader.isEmpty()) {
            String[] pairs = PATTERN_COMMA.split(keepAliveHeader);
            if (pairs != null) {
                for (String pair: pairs) {
                    String[] nameValue = PATTERN_EQUALS.split(pair.trim());
                    if (nameValue != null && nameValue.length >= 2) {
                        String name = nameValue[0].trim().toLowerCase();
                        String value = nameValue[1].trim();
                        if (KEEP_ALIVE_TIMEOUT_HEADER_ATTR.equals(name)) {
                            try {
                                return Long.valueOf(value);
                            } catch (NumberFormatException e) {
                                logger.info("Invalid HTTP keep alive timeout value. Keep alive header: "
                                            + keepAliveHeader + ", timeout attribute value: " + nameValue[1], e);
                                return null;
                            }
                        }
                    }
                }
            }
        }
        return null;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/PooledClientConnectionFactoryImpl;PooledClientConnectionFactoryImpl(ClientState<W,R>,IdleConnectionsHolder<W,R>,ClientConnectionFactory<W,R>);;;                                                        .doOnSubscribe(new Action0() {
                                                            @Override
                                                            public void call() {
                                                                metricsEventSubject.onEvent(POOL_ACQUIRE_START);
                                                            }
                                                        })
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/server/TcpServer;newServer(int);;;public static TcpServer<ByteBuf, ByteBuf> newServer(int port) {
        return new TcpServerImpl<ByteBuf, ByteBuf>(port);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/server/TcpServer;newServer(int,EventLoopGroup,Class<?extendsServerChannel>);;;public static TcpServer<ByteBuf, ByteBuf> newServer(int port, EventLoopGroup eventLoopGroup,
                                                         Class<? extends ServerChannel> channelClass) {
        return new TcpServerImpl<ByteBuf, ByteBuf>(port, eventLoopGroup, eventLoopGroup, channelClass);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/server/TcpServer;newServer(int,EventLoopGroup,EventLoopGroup,Class<?extendsServerChannel>);;;public static TcpServer<ByteBuf, ByteBuf> newServer(int port, EventLoopGroup serverGroup,
                                                         EventLoopGroup clientGroup,
                                                         Class<? extends ServerChannel> channelClass) {
        return new TcpServerImpl<ByteBuf, ByteBuf>(port, serverGroup, clientGroup, channelClass);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations;write(Observable<W>,Func1<W,Boolean>);;;@Override
    public Observable<Void> write(Observable<W> msgs, final Func1<W, Boolean> flushSelector) {
        return _write(msgs, flushSelector);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations;writeString(Observable<String>);;;@Override
    public Observable<Void> writeString(Observable<String> msgs) {
        return _write(msgs);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations;writeString(Observable<String>,Func1<String,Boolean>);;;@Override
    public Observable<Void> writeString(Observable<String> msgs, Func1<String, Boolean> flushSelector) {
        return _write(msgs, flushSelector);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations;writeStringAndFlushOnEach(Observable<String>);;;@Override
    public Observable<Void> writeStringAndFlushOnEach(Observable<String> msgs) {
        return writeString(msgs, FLUSH_ON_EACH_STRING);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations;writeBytes(Observable<byte[]>);;;@Override
    public Observable<Void> writeBytes(Observable<byte[]> msgs) {
        return _write(msgs);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations;writeBytes(Observable<byte[]>,Func1<byte[],Boolean>);;;@Override
    public Observable<Void> writeBytes(Observable<byte[]> msgs, Func1<byte[], Boolean> flushSelector) {
        return _write(msgs, flushSelector);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations;writeBytesAndFlushOnEach(Observable<byte[]>);;;@Override
    public Observable<Void> writeBytesAndFlushOnEach(Observable<byte[]> msgs) {
        return _write(msgs, FLUSH_ON_EACH_BYTES);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations;writeFileRegion(Observable<FileRegion>);;;@Override
    public Observable<Void> writeFileRegion(Observable<FileRegion> msgs) {
        return _write(msgs);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations;writeFileRegion(Observable<FileRegion>,Func1<FileRegion,Boolean>);;;@Override
    public Observable<Void> writeFileRegion(Observable<FileRegion> msgs, Func1<FileRegion, Boolean> flushSelector) {
        return _write(msgs, flushSelector);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations;writeFileRegionAndFlushOnEach(Observable<FileRegion>);;;@Override
    public Observable<Void> writeFileRegionAndFlushOnEach(Observable<FileRegion> msgs) {
        return writeFileRegion(msgs, FLUSH_ON_EACH_FILE_REGION);
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations;_write(Observable<X>,Func1<X,Boolean>);;;private <X> Observable<Void> _write(final Observable<X> msgs, Func1<X, Boolean> flushSelector) {
        return _write(msgs.lift(new FlushSelectorOperator<X>(flushSelector, nettyChannel)));
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations;_write(Observable<?>);;;private Observable<Void> _write(final Observable<?> msgs) {
        return Observable.create(new OnSubscribe<Void>() {
            @Override
            public void call(final Subscriber<? super Void> subscriber) {
                final ChannelFuture writeFuture = nettyChannel.write(msgs.doOnCompleted(new Action0() {
                    @Override
                    public void call() {
                        nettyChannel.flush();
                    }
                }));
                subscriber.add(Subscriptions.create(new Action0() {
                    @Override
                    public void call() {
                        writeFuture.cancel(false); // cancel write on unsubscribe.
                    }
                }));
                writeFuture.addListener(new ChannelFutureListener() {
                    @Override
                    public void operationComplete(ChannelFuture future) throws Exception {
                        if (subscriber.isUnsubscribed()) {
                            /*short-circuit if subscriber is unsubscribed*/
                            return;
                        }

                        if (future.isSuccess()) {
                            subscriber.onCompleted();
                        } else {
                            subscriber.onError(future.cause());
                        }
                    }
                });
            }
        });
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/channel/FlushSelectorOperator;FlushSelectorOperator(Func1<T,Boolean>,Channel);;;public FlushSelectorOperator(Func1<T, Boolean> flushSelector, Channel channel) {
        this.flushSelector = flushSelector;
        this.channel = channel;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f;/rxnetty/src/main/java/io/reactivex/netty/channel/FlushSelectorOperator;call(Subscriber<?superT>);;;@Override
    public Subscriber<? super T> call(final Subscriber<? super T> subscriber) {

        return new Subscriber<T>(subscriber) {
            @Override
            public void onCompleted() {
                subscriber.onCompleted();
            }

            @Override
            public void onError(Throwable e) {
                subscriber.onError(e);
            }

            @Override
            public void onNext(T next) {
                subscriber.onNext(next);
                /*Call the selector _after_ writing an element*/
                if (flushSelector.call(next)) {
                    channel.flush();
                }
            }
        };
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_f7e49e7_153d71b/rev_f7e49e7-153d71b;/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/ConnectionProvider;doStart();;;protected Observable<Void> doStart() {
        return Observable.empty();
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_f7e49e7_153d71b/rev_f7e49e7-153d71b;/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/ConnectionProvider;doShutdown();;;protected Observable<Void> doShutdown() {
        return Observable.empty();
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_f7e49e7_153d71b/rev_f7e49e7-153d71b;/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/ConnectionProvider;isStarted();;;protected boolean isStarted() {
        return started;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_f7e49e7_153d71b/rev_f7e49e7-153d71b;/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/ConnectionProvider;doStart();;;@Override
        protected Observable<Void> doStart() {
            return Observable.error(new IllegalStateException("Connection factory not initialized"));
        }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_f7e49e7_153d71b/rev_f7e49e7-153d71b;/rxnetty-examples/src/test/java/io/reactivex/netty/examples/tcp/streaming/StreamingTest;testStreaming();;;@Test(timeout = 60000)
    public void testStreaming() throws Exception {
        final Queue<String> output = setupClientLogger(StreamingClient.class);

        StreamingClient.main(null);

        assertThat("Unexpected number of messages echoed", output, hasSize(10));

        String[] content = new String[10];
        for (int i = 0; i < 10; i++) {
            content[i] = "Interval =>" + i;
        }

        assertThat("Unexpected content", output, contains(content));
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_c8efda9_215f487/rev_c8efda9-215f487;/rxnetty-common/src/main/java/io/reactivex/netty/threads/RxJavaNettyBasedSchedulersHook;RxJavaNettyBasedSchedulersHook(RxJavaEventloopScheduler);;;public RxJavaNettyBasedSchedulersHook(RxJavaEventloopScheduler computationScheduler) {
        this.computationScheduler = computationScheduler;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_c8efda9_215f487/rev_c8efda9-215f487;/rxnetty-common/src/main/java/io/reactivex/netty/threads/RxJavaNettyBasedSchedulersHook;getComputationScheduler();;;@Override
    public Scheduler getComputationScheduler() {
        return computationScheduler;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_c8efda9_215f487/rev_c8efda9-215f487;/rxnetty-common/src/main/java/io/reactivex/netty/threads/RxJavaEventloopScheduler;RxJavaEventloopScheduler(EventLoopGroup);;;public RxJavaEventloopScheduler(EventLoopGroup eventLoopGroup) {
        this.eventLoopGroup = eventLoopGroup;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_c8efda9_215f487/rev_c8efda9-215f487;/rxnetty-common/src/main/java/io/reactivex/netty/threads/RxJavaEventloopScheduler;createWorker();;;@Override
    public Worker createWorker() {
        final EventLoop eventLoop = eventLoopGroup.next();

        return new Worker() {

            private final SubscriptionList subs = new SubscriptionList();

            @Override
            public Subscription schedule(final Action0 action) {
                if (isUnsubscribed()) {
                    return Subscriptions.unsubscribed();
                }

                /*If already on the eventloop then execute the action, else schedule it on the eventloop*/
                if (eventLoop.inEventLoop()) {
                    action.call();
                    return Subscriptions.empty();
                } else {
                    final Future<?> result = eventLoop.submit(new Runnable() {
                        @Override
                        public void run() {
                            action.call();
                        }
                    });

                    Subscription toReturn = fromFuture(result);
                    subs.add(toReturn);
                    return toReturn;
                }
            }

            @Override
            public Subscription schedule(final Action0 action, long delayTime, TimeUnit unit) {

                if (delayTime <= 0) {
                    return schedule(action);
                }

                if (isUnsubscribed()) {
                    return Subscriptions.unsubscribed();
                }

                final Future<?> result = eventLoop.schedule(new Runnable() {
                    @Override
                    public void run() {
                        action.call();
                    }
                }, delayTime, unit);

                Subscription toReturn = fromFuture(result);
                subs.add(toReturn);
                return toReturn;
            }

            @Override
            public void unsubscribe() {
                subs.unsubscribe();
            }

            @Override
            public boolean isUnsubscribed() {
                return subs.isUnsubscribed();
            }

            private Subscription fromFuture(final Future<?> result) {
                return Subscriptions.create(new Action0() {
                    @Override
                    public void call() {
                        result.cancel(false);
                    }
                });
            }
        };
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_be2a71b_752d772/rev_be2a71b-752d772;/rxnetty-common/src/main/java/io/reactivex/netty/threads/RxJavaNettyBasedSchedulersHook;RxJavaNettyBasedSchedulersHook(RxJavaEventloopScheduler);;;public RxJavaNettyBasedSchedulersHook(RxJavaEventloopScheduler computationScheduler) {
        this.computationScheduler = computationScheduler;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_be2a71b_752d772/rev_be2a71b-752d772;/rxnetty-common/src/main/java/io/reactivex/netty/threads/RxJavaNettyBasedSchedulersHook;getComputationScheduler();;;@Override
    public Scheduler getComputationScheduler() {
        return computationScheduler;
    }
/home/paper219/Desktop/analysis/demonstration//projects/RxNetty/revisions/rev_be2a71b_752d772/rev_be2a71b-752d772;/rxnetty-common/src/main/java/io/reactivex/netty/threads/RxJavaEventloopScheduler;RxJavaEventloopScheduler(EventLoopGroup);;;public RxJavaEventloopScheduler(EventLoopGroup eventLoopGroup) {
        this.eventLoopGroup = eventLoopGroup;
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_5a31bed_886ce2b/rev_5a31bed-886ce2b;/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisInjectBinding;create(TypeElement,boolean);;;          if (hasAtSingleton(enclosed)) {
            throw new IllegalArgumentException("Singleton annotations have no effect on "
                + "constructors. Did you mean to annotate the class? "
                + type.getQualifiedName().toString());
          }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_5a31bed_886ce2b/rev_5a31bed-886ce2b;/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisInjectBinding;hasAtSingleton(Element);;;private static boolean hasAtSingleton(Element enclosed) {
    return enclosed.getAnnotation(Singleton.class) != null;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/FailoverLoader;getModuleAdapter(Class<?extendsT>,T);;;@Override public <T> ModuleAdapter<T> getModuleAdapter(Class<? extends T> type, T instance) {
    ModuleAdapter<T> result = GeneratedAdapters.initModuleAdapter(type);
    if (result == null) {
      result = ReflectiveModuleAdapter.create(type);
    }
    result.module = (instance != null) ? instance : result.newModule();
    return result;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/FailoverLoader;getAtInjectBinding(String,String,ClassLoader,boolean);;;@Override public Binding<?> getAtInjectBinding(String key, String className,
      ClassLoader classLoader, boolean mustHaveInjections) {
    try {
      Binding<?> result = GeneratedAdapters.initInjectAdapter(className, classLoader);
      if (result == null) {
        // A null classloader is the system classloader.
        classLoader = (classLoader != null) ? classLoader : ClassLoader.getSystemClassLoader();
        Class<?> c = classLoader.loadClass(className);
        if (!c.isInterface()) {
          result = ReflectiveAtInjectBinding.create(c, mustHaveInjections);
        }
      }
      return result;
    } catch (ClassNotFoundException e) {
      throw new RuntimeException("Could not find " + className + " needed for binding " + key, e);
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/FailoverLoader;getStaticInjection(Class<?>);;;@Override public StaticInjection getStaticInjection(Class<?> injectedClass) {
    StaticInjection result = GeneratedAdapters.initStaticInjection(injectedClass);
    if (result == null) {
      result = ReflectiveStaticInjection.create(injectedClass);
    }
    return result;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/Modules;Modules();;;private Modules() { }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/Modules;getAllModuleAdapters(Loader,Object[]);;;public static Map<Class<?>, ModuleAdapter<?>> getAllModuleAdapters(Loader plugin,
      Object[] seedModules) {
    // Create a module adapter for each seed module.
    ModuleAdapter<?>[] seedAdapters = new ModuleAdapter<?>[seedModules.length];
    int s = 0;
    for (Object module : seedModules) {
      if (module instanceof Class) {
        seedAdapters[s++] = plugin.getModuleAdapter((Class<?>) module, null); // Loader constructs.
      } else {
        seedAdapters[s++] = plugin.getModuleAdapter(module.getClass(), module);
      }
    }

    Map<Class<?>, ModuleAdapter<?>> adaptersByModuleType
        = new LinkedHashMap<Class<?>, ModuleAdapter<?>>();

    // Add the adapters that we have module instances for. This way we won't
    // construct module objects when we have a user-supplied instance.
    for (ModuleAdapter<?> adapter : seedAdapters) {
      adaptersByModuleType.put(adapter.getModule().getClass(), adapter);
    }

    // Next add adapters for the modules that we need to construct. This creates
    // instances of modules as necessary.
    for (ModuleAdapter<?> adapter : seedAdapters) {
      collectIncludedModulesRecursively(plugin, adapter, adaptersByModuleType);
    }

    return adaptersByModuleType;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/Modules;collectIncludedModulesRecursively(Loader,ModuleAdapter<?>,Map<Class<?>,ModuleAdapter<?>>);;;private static void collectIncludedModulesRecursively(Loader plugin, ModuleAdapter<?> adapter,
      Map<Class<?>, ModuleAdapter<?>> result) {
    for (Class<?> include : adapter.includes) {
      if (!result.containsKey(include)) {
        ModuleAdapter<Object> includedModuleAdapter = plugin.getModuleAdapter(include, null);
        result.put(include, includedModuleAdapter);
        collectIncludedModulesRecursively(plugin, includedModuleAdapter, result);
      }
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/ReflectiveAtInjectBinding;ReflectiveAtInjectBinding(String,String,boolean,Class<?>,Field[],Constructor<T>,int,Class<?>,String[]);;;private ReflectiveAtInjectBinding(String provideKey, String membersKey, boolean singleton,
      Class<?> type, Field[] fields, Constructor<T> constructor, int parameterCount,
      Class<?> supertype, String[] keys) {
    super(provideKey, membersKey, singleton, type);
    this.constructor = constructor;
    this.fields = fields;
    this.supertype = supertype;
    this.keys = keys;
    this.parameterBindings = new Binding<?>[parameterCount];
    this.fieldBindings = new Binding<?>[fields.length];
    this.loader = type.getClassLoader();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/ReflectiveAtInjectBinding;attach(Linker);;;@SuppressWarnings("unchecked") // We're careful to make keys and bindings match up.
  @Override public void attach(Linker linker) {
    int k = 0;
    for (int i = 0; i < fields.length; i++) {
      if (fieldBindings[i] == null) {
        fieldBindings[i] = linker.requestBinding(keys[k], fields[i], loader);
      }
      k++;
    }
    if (constructor != null) {
      for (int i = 0; i < parameterBindings.length; i++) {
        if (parameterBindings[i] == null) {
          parameterBindings[i] = linker.requestBinding(keys[k], constructor, loader);
        }
        k++;
      }
    }
    if (supertype != null && supertypeBinding == null) {
      supertypeBinding =
          (Binding<? super T>) linker.requestBinding(keys[k], membersKey, loader, false, true);
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/ReflectiveAtInjectBinding;get();;;@Override public T get() {
    if (constructor == null) {
      throw new UnsupportedOperationException();
    }
    Object[] args = new Object[parameterBindings.length];
    for (int i = 0; i < parameterBindings.length; i++) {
      args[i] = parameterBindings[i].get();
    }
    T result;
    try {
      result = constructor.newInstance(args);
    } catch (InvocationTargetException e) {
      Throwable cause = e.getCause();
      throw cause instanceof RuntimeException
          ? (RuntimeException) cause
          : new RuntimeException(cause);
    } catch (IllegalAccessException e) {
      throw new AssertionError(e);
    } catch (InstantiationException e) {
      throw new RuntimeException(e);
    }
    injectMembers(result);
    return result;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/ReflectiveAtInjectBinding;injectMembers(T);;;@Override public void injectMembers(T t) {
    try {
      for (int i = 0; i < fields.length; i++) {
        fields[i].set(t, fieldBindings[i].get());
      }
      if (supertypeBinding != null) {
        supertypeBinding.injectMembers(t);
      }
    } catch (IllegalAccessException e) {
      throw new AssertionError(e);
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/ReflectiveAtInjectBinding;getDependencies(Set<Binding<?>>,Set<Binding<?>>);;;@Override public void getDependencies(Set<Binding<?>> get, Set<Binding<?>> injectMembers) {
    if (parameterBindings != null) {
      Collections.addAll(get, parameterBindings);
    }
    Collections.addAll(injectMembers, fieldBindings);
    if (supertypeBinding != null) {
      injectMembers.add(supertypeBinding);
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/ReflectiveAtInjectBinding;toString();;;@Override public String toString() {
    return provideKey != null ? provideKey : membersKey;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/ReflectiveAtInjectBinding;create(Class<T>,boolean);;;public static <T> Binding<T> create(Class<T> type, boolean mustHaveInjections) {
    boolean singleton = type.isAnnotationPresent(Singleton.class);
    List<String> keys = new ArrayList<String>();

    // Lookup the injectable fields and their corresponding keys.
    List<Field> injectedFields = new ArrayList<Field>();
    for (Class<?> c = type; c != Object.class; c = c.getSuperclass()) {
      for (Field field : c.getDeclaredFields()) {
        if (!field.isAnnotationPresent(Inject.class) || Modifier.isStatic(field.getModifiers())) {
          continue;
        }
        if ((field.getModifiers() & Modifier.PRIVATE) != 0) {
          throw new IllegalStateException("Can't inject private field: " + field);
        }
        field.setAccessible(true);
        injectedFields.add(field);
        keys.add(Keys.get(field.getGenericType(), field.getAnnotations(), field));
      }
    }

    // Look up @Inject-annotated constructors. If there's no @Inject-annotated
    // constructor, use a default public constructor if the class has other
    // injections. Otherwise treat the class as non-injectable.
    Constructor<T> injectedConstructor = null;
    for (Constructor<T> constructor : getConstructorsForType(type)) {
      if (!constructor.isAnnotationPresent(Inject.class)) {
        continue;
      }
      if (injectedConstructor != null) {
        throw new IllegalArgumentException("Too many injectable constructors on " + type.getName());
      }
      injectedConstructor = constructor;
    }
    if (injectedConstructor == null) {
      if (!injectedFields.isEmpty()) {
        try {
          injectedConstructor = type.getDeclaredConstructor();
        } catch (NoSuchMethodException ignored) {
        }
      } else if (mustHaveInjections) {
        throw new IllegalArgumentException("No injectable members on " + type.getName()
            + ". Do you want to add an injectable constructor?");
      }
    }

    int parameterCount;
    String provideKey;
    if (injectedConstructor != null) {
      if ((injectedConstructor.getModifiers() & Modifier.PRIVATE) != 0) {
        throw new IllegalStateException("Can't inject private constructor: " + injectedConstructor);
      }

      provideKey = Keys.get(type);
      injectedConstructor.setAccessible(true);
      Type[] types = injectedConstructor.getGenericParameterTypes();
      parameterCount = types.length;
      if (parameterCount != 0) {
        Annotation[][] annotations = injectedConstructor.getParameterAnnotations();
        for (int p = 0; p < types.length; p++) {
          keys.add(Keys.get(types[p], annotations[p], injectedConstructor));
        }
      }
    } else {
      provideKey = null;
      parameterCount = 0;
      if (singleton) {
        throw new IllegalArgumentException(
            "No injectable constructor on @Singleton " + type.getName());
      }
    }

    Class<? super T> supertype = type.getSuperclass();
    if (supertype != null) {
      if (Keys.isPlatformType(supertype.getName())) {
        supertype = null;
      } else {
        keys.add(Keys.getMembersKey(supertype));
      }
    }

    String membersKey = Keys.getMembersKey(type);
    return new ReflectiveAtInjectBinding<T>(provideKey, membersKey, singleton, type,
        injectedFields.toArray(new Field[injectedFields.size()]), injectedConstructor,
        parameterCount, supertype, keys.toArray(new String[keys.size()]));
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/ReflectiveAtInjectBinding;getConstructorsForType(Class<T>);;;@SuppressWarnings("unchecked") // Class.getDeclaredConstructors is an unsafe API.
  private static <T> Constructor<T>[] getConstructorsForType(Class<T> type) {
    return (Constructor<T>[]) type.getDeclaredConstructors();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/ReflectiveModuleAdapter;ReflectiveModuleAdapter(Class<?>,Module);;;public ReflectiveModuleAdapter(Class<?> moduleClass, Module annotation) {
    super(
        injectableTypesToKeys(annotation.injects()),
        annotation.staticInjections(),
        annotation.overrides(),
        annotation.includes(),
        annotation.complete(),
        annotation.library());
    this.moduleClass = moduleClass;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/ReflectiveModuleAdapter;injectableTypesToKeys(Class<?>[]);;;private static String[] injectableTypesToKeys(Class<?>[] injectableTypes) {
    String[] result = new String[injectableTypes.length];
    for (int i = 0; i < injectableTypes.length; i++) {
      Class<?> injectableType = injectableTypes[i];
      result[i] = injectableType.isInterface()
          ? Keys.get(injectableType)
          : Keys.getMembersKey(injectableType);
    }
    return result;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/ReflectiveModuleAdapter;getBindings(Map<String,Binding<?>>);;;@Override public void getBindings(Map<String, Binding<?>> bindings) {
    for (Class<?> c = moduleClass; !c.equals(Object.class); c = c.getSuperclass()) {
      for (Method method : c.getDeclaredMethods()) {
        Provides provides = method.getAnnotation(Provides.class);
        if (provides != null) {
          Type genericReturnType = method.getGenericReturnType();

          Type typeToCheck = genericReturnType;
          if (genericReturnType instanceof ParameterizedType) {
            typeToCheck = ((ParameterizedType) genericReturnType).getRawType();
          }
          if (Provider.class.equals(typeToCheck)) {
            throw new IllegalStateException("@Provides method must not return Provider directly: "
                + c.getName()
                + "."
                + method.getName());
          }
          if (Lazy.class.equals(typeToCheck)) {
            throw new IllegalStateException("@Provides method must not return Lazy directly: "
                + c.getName()
                + "."
                + method.getName());
          }

          String key = Keys.get(genericReturnType, method.getAnnotations(), method);
          switch (provides.type()) {
            case UNIQUE:
              handleBindings(bindings, method, key, library);
              break;
            case SET:
              handleSetBindings(bindings, method, key, library);
              break;
            default:
              throw new AssertionError("Unknown @Provides type " + provides.type());
          }
        }
      }
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/ReflectiveModuleAdapter;handleBindings(Map<String,Binding<?>>,Method,String,boolean);;;private <T> void handleBindings(Map<String, Binding<?>> bindings, Method method, String key,
      boolean library) {
    bindings.put(key, new ProviderMethodBinding<T>(method, key, module, library));
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/ReflectiveModuleAdapter;handleSetBindings(Map<String,Binding<?>>,Method,String,boolean);;;private <T> void handleSetBindings(Map<String, Binding<?>> bindings, Method method, String key,
      boolean library) {
    String setKey = Keys.getSetKey(method.getGenericReturnType(), method.getAnnotations(), method);
    SetBinding.<T>add(bindings, setKey, new ProviderMethodBinding<T>(method, key, module,
        library));
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/ReflectiveModuleAdapter;newModule();;;@Override public Object newModule() {
    try {
      Constructor<?> constructor = moduleClass.getDeclaredConstructor();
      constructor.setAccessible(true);
      return constructor.newInstance();
    } catch (InvocationTargetException e) {
      throw new IllegalArgumentException(e.getCause());
    } catch (NoSuchMethodException e) {
      throw new IllegalArgumentException("Could not construct " + moduleClass.getName()
          + " as it lacks an accessible no-args constructor. This module must be passed"
          + " in as an instance, or an accessible no-args constructor must be added.", e);
    } catch (InstantiationException e) {
      throw new IllegalArgumentException("Failed to construct " + moduleClass.getName(), e);
    } catch (IllegalAccessException e) {
      throw new AssertionError();
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/ReflectiveModuleAdapter;create(Class<?extendsT>);;;@SuppressWarnings("unchecked") // Runtime checks validate that the result type matches 'T'.
  public static <T> ModuleAdapter<T> create(Class<? extends T> moduleClass) {
    Module annotation = moduleClass.getAnnotation(Module.class);
    if (annotation == null) {
      throw new IllegalArgumentException("No @Module on " + moduleClass.getName());
    }
    if (!moduleClass.getSuperclass().equals(Object.class)) {
      throw new IllegalArgumentException(
          "Modules must not extend from other classes: " + moduleClass.getName());
    }
    return (ModuleAdapter<T>) new ReflectiveModuleAdapter(moduleClass, annotation);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/ReflectiveModuleAdapter;ProviderMethodBinding(Method,String,Object,boolean);;;public ProviderMethodBinding(Method method, String key, Object instance, boolean library) {
      super(key, null, method.isAnnotationPresent(Singleton.class),
          moduleClass.getName() + "." + method.getName() + "()");
      this.method = method;
      this.instance = instance;
      method.setAccessible(true);
      setLibrary(library);
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/ReflectiveModuleAdapter;attach(Linker);;;@Override public void attach(Linker linker) {
      Type[] types = method.getGenericParameterTypes();
      Annotation[][] annotations = method.getParameterAnnotations();
      parameters = new Binding[types.length];
      for (int i = 0; i < parameters.length; i++) {
        String key = Keys.get(types[i], annotations[i], method + " parameter " + i);
        parameters[i] = linker.requestBinding(key, method, instance.getClass().getClassLoader());
      }
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/ReflectiveModuleAdapter;get();;;@SuppressWarnings("unchecked") // We defined 'T' in terms of the method's return type.
    @Override public T get() {
      Object[] args = new Object[parameters.length];
      for (int i = 0; i < parameters.length; i++) {
        args[i] = parameters[i].get();
      }
      try {
        return (T) method.invoke(instance, args);
      } catch (InvocationTargetException e) {
        Throwable cause = e.getCause();
        throw cause instanceof RuntimeException
            ? (RuntimeException) cause
            : new RuntimeException(cause);
      } catch (IllegalAccessException e) {
        throw new RuntimeException(e);
      }
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/ReflectiveModuleAdapter;getDependencies(Set<Binding<?>>,Set<Binding<?>>);;;@Override public void getDependencies(Set<Binding<?>> get, Set<Binding<?>> injectMembers) {
      for (Binding<?> binding : parameters) {
        get.add(binding);
      }
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/ReflectiveModuleAdapter;injectMembers(T);;;@Override public void injectMembers(T t) {
      throw new AssertionError("Provides method bindings are not MembersInjectors");
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/ReflectiveModuleAdapter;toString();;;@Override public String toString() {
      return method.toString();
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/ReflectiveStaticInjection;ReflectiveStaticInjection(ClassLoader,Field[]);;;private ReflectiveStaticInjection(ClassLoader loader, Field[] fields) {
    this.fields = fields;
    this.loader = loader;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/ReflectiveStaticInjection;attach(Linker);;;@Override public void attach(Linker linker) {
    bindings = new Binding<?>[fields.length];
    for (int i = 0; i < fields.length; i++) {
      Field field = fields[i];
      String key = Keys.get(field.getGenericType(), field.getAnnotations(), field);
      bindings[i] = linker.requestBinding(key, field, loader);
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/ReflectiveStaticInjection;inject();;;@Override public void inject() {
    try {
      for (int f = 0; f < fields.length; f++) {
        fields[f].set(null, bindings[f].get());
      }
    } catch (IllegalAccessException e) {
      throw new AssertionError(e);
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/ReflectiveStaticInjection;create(Class<?>);;;public static StaticInjection create(Class<?> injectedClass) {
    List<Field> fields = new ArrayList<Field>();
    for (Field field : injectedClass.getDeclaredFields()) {
      if (Modifier.isStatic(field.getModifiers()) && field.isAnnotationPresent(Inject.class)) {
        field.setAccessible(true);
        fields.add(field);
      }
    }
    if (fields.isEmpty()) {
      throw new IllegalArgumentException("No static injections: " + injectedClass.getName());
    }
    return new ReflectiveStaticInjection(injectedClass.getClassLoader(),
        fields.toArray(new Field[fields.size()]));
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/GeneratedAdapters;GeneratedAdapters();;;private GeneratedAdapters() { }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/GeneratedAdapters;initModuleAdapter(Class<?extendsT>);;;public static <T> ModuleAdapter<T> initModuleAdapter(Class<? extends T> moduleClass) {
    return instantiate(moduleClass.getName() + MODULE_ADAPTER_SUFFIX, moduleClass.getClassLoader());
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/GeneratedAdapters;initInjectAdapter(String,ClassLoader);;;public static Binding<?> initInjectAdapter(String className, ClassLoader classLoader) {
    return instantiate(className + INJECT_ADAPTER_SUFFIX, classLoader);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/GeneratedAdapters;initStaticInjection(Class<?>);;;public static StaticInjection initStaticInjection(Class<?> injectedClass) {
    return instantiate(injectedClass.getName() + STATIC_INJECTION_SUFFIX,
        injectedClass.getClassLoader());
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092;/core/src/main/java/dagger/internal/loaders/GeneratedAdapters;instantiate(String,ClassLoader);;;private static <T> T instantiate(String name, ClassLoader classLoader) {
    try {
      // A null classloader is the system classloader.
      classLoader = (classLoader != null) ? classLoader : ClassLoader.getSystemClassLoader();
      Class<?> generatedClass = classLoader.loadClass(name);
      Constructor<?> constructor = generatedClass.getDeclaredConstructor();
      constructor.setAccessible(true);
      return (T) constructor.newInstance();
    } catch (ClassNotFoundException e) {
      if (logger.isLoggable(Level.FINE)) {
        logger.log(Level.FINE, name + " could not be found.", e);
      }
      return null; // Not finding a class is not inherently an error, unlike finding a bad class.
    } catch (NoSuchMethodException e) {
      throw new RuntimeException("No default constructor found on " + name, e);
    } catch (InstantiationException e) {
      throw new RuntimeException("Failed to initialize " + name, e);
    } catch (IllegalAccessException e) {
      throw new RuntimeException("Failed to initialize " + name, e);
    } catch (InvocationTargetException e) {
      throw new RuntimeException("Error while initializing " + name, e.getCause());
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/ObjectGraph;DaggerObjectGraph(DaggerObjectGraph,Linker,Loader,Map<Class<?>,StaticInjection>,Map<String,Class<?>>,List<SetBinding<?>>);;;DaggerObjectGraph(DaggerObjectGraph base,
        Linker linker,
        Loader plugin,
        Map<Class<?>, StaticInjection> staticInjections,
        Map<String, Class<?>> injectableTypes,
        List<SetBinding<?>> setBindings) {

      this.base = base;
      this.linker = checkNotNull(linker, "linker");
      this.plugin = checkNotNull(plugin, "plugin");
      this.staticInjections = checkNotNull(staticInjections, "staticInjections");
      this.injectableTypes = checkNotNull(injectableTypes, "injectableTypes");
      this.setBindings = checkNotNull(setBindings, "setBindings");
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/ObjectGraph;checkNotNull(T,String);;;private static <T> T checkNotNull(T object, String label) {
      if (object == null) throw new NullPointerException(label);
      return object;
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/ObjectGraph;makeGraph(DaggerObjectGraph,Loader,Object);;;      StandardBindings baseBindings =
          (base == null) ? new StandardBindings() : new StandardBindings(base.setBindings);
      BindingsGroup overrideBindings = new OverridesBindings();
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/ObjectGraph;makeGraph(DaggerObjectGraph,Loader,Object);      Linker linker = new Linker((base != null) ? base.linker : null, plugin,
          new ThrowingErrorHandler());;;      Linker linker =
          new Linker((base != null) ? base.linker : null, plugin, new ThrowingErrorHandler());
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/ObjectGraph;linkEverything();;;      Map<String, Binding<?>> bindings = linker.fullyLinkedBindings();
      if (bindings != null) {
        return bindings;
      }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/ObjectGraph;linkEverything();;;        if ((bindings = linker.fullyLinkedBindings()) != null) {
          return bindings;
        }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/ObjectGraph;StandardBindings();;;public StandardBindings() {
      setBindings = new ArrayList<SetBinding<?>>();
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/ObjectGraph;StandardBindings(List<SetBinding<?>>);;;public StandardBindings(List<SetBinding<?>> baseSetBindings) {
      setBindings = new ArrayList<SetBinding<?>>(baseSetBindings.size());
      for (SetBinding<?> sb : baseSetBindings) {
        @SuppressWarnings({ "rawtypes", "unchecked" })
        SetBinding<?> child = new SetBinding(sb);
        setBindings.add(child);
        put(child.provideKey, child);
      }
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/ObjectGraph;contributeSetBinding(String,SetBinding<?>);;;@Override public Binding<?> contributeSetBinding(String key, SetBinding<?> value) {
      setBindings.add(value);
      return super.put(key, value);
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/ObjectGraph;OverridesBindings();;;OverridesBindings() { }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/ObjectGraph;contributeSetBinding(String,SetBinding<?>);;;@Override public Binding<?> contributeSetBinding(String key, SetBinding<?> value) {
      throw new IllegalArgumentException("Module overrides cannot contribute set bindings.");
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/ProvidesBinding;ProvidesBinding(String,boolean,String,String);;;public ProvidesBinding(String key, boolean singleton, String moduleClass, String methodName) {
    // Set requiredBy as fullMethodName to preserve older debugging meaning.
    super(key, null, singleton, moduleClass + "." + methodName + "()");
    this.moduleClass = moduleClass;
    this.methodName = methodName;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/ProvidesBinding;get();;;@Override
  public abstract T get();
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/ProvidesBinding;toString();;;@Override public String toString() {
    return getClass().getName() + "[key=" + provideKey
        + " method=" + moduleClass + "." + methodName + "()" + "]";
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/Linker;installBindings(BindingsGroup);;;public void installBindings(BindingsGroup toInstall) {
    if (linkedBindings != null) {
      throw new IllegalStateException("Cannot install further bindings after calling linkAll().");
    }
    for (Map.Entry<String, ? extends Binding<?>> entry : toInstall.entrySet()) {
      bindings.put(entry.getKey(), scope(entry.getValue()));
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/Linker;linkAll();;;    assertLockHeld();
    if (linkedBindings != null) {
      return linkedBindings;
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/Linker;fullyLinkedBindings();;;public Map<String, Binding<?>> fullyLinkedBindings() {
    return linkedBindings;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/Linker;linkRequested();;;
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/Linker;createBinding(String,Object,ClassLoader,boolean);;;private Binding<?> createBinding(String key, Object requiredBy, ClassLoader classLoader,
      boolean mustHaveInjections) {
    String builtInBindingsKey = Keys.getBuiltInBindingsKey(key);
    if (builtInBindingsKey != null) {
      return new BuiltInBinding<Object>(key, requiredBy, classLoader, builtInBindingsKey);
    }
    String lazyKey = Keys.getLazyKey(key);
    if (lazyKey != null) {
      return new LazyBinding<Object>(key, requiredBy, classLoader, lazyKey);
    }

    String className = Keys.getClassName(key);
    if (className == null || Keys.isAnnotated(key)) {
      // Cannot jit-bind annotated keys or generic types.
      throw new IllegalArgumentException(key);
    }
    Binding<?> binding =
        plugin.getAtInjectBinding(key, className, classLoader, mustHaveInjections);
    if (binding != null) {
      return binding;
    }
    throw new InvalidBindingException(className, "could not be bound with key " + key);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/Linker;toString();;;@Override public String toString() {
      return "DeferredBinding[deferredKey=" + deferredKey + "]";
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/Binding;InvalidBindingException(String,String);;;public InvalidBindingException(String type, String error) {
      super(error);
      this.type = type;
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/Binding;InvalidBindingException(String,String,Throwable);;;public InvalidBindingException(String type, String error, Throwable cause) {
      super("Binding for " + type + " was invalid: " + error, cause);
      this.type = type;
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/SetBinding;add(BindingsGroup,String,Binding<?>);;;public static <T> void add(BindingsGroup bindings, String setKey, Binding<?> binding) {
    prepareSetBinding(bindings, setKey, binding).contributors.add(Linker.scope(binding));
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/SetBinding;prepareSetBinding(BindingsGroup,String,Binding<?>);;;@SuppressWarnings("unchecked")
  private static <T> SetBinding<T> prepareSetBinding(
      BindingsGroup bindings, String setKey, Binding<?> binding) {
    Binding<?> previous = bindings.get(setKey);
    SetBinding<T> setBinding;
    if (previous instanceof SetBinding) {
      setBinding = (SetBinding<T>) previous;
      setBinding.setLibrary(setBinding.library() && binding.library());
      return setBinding;
    } else if (previous != null) {
      throw new IllegalArgumentException("Duplicate:\n    " + previous + "\n    " + binding);
    } else {
      setBinding = new SetBinding<T>(setKey, binding.requiredBy);
      setBinding.setLibrary(binding.library());
      bindings.contributeSetBinding(setKey, setBinding);
      return (SetBinding<T>) bindings.get(setKey); // BindingMap.put() copies SetBindings.
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/SetBinding;SetBinding(String,Object);;;    parent = null;
    contributors = new ArrayList<Binding<?>>();
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/SetBinding;SetBinding(SetBinding<T>);;;public SetBinding(SetBinding<T> original) {
    super(original.provideKey, null, false, original.requiredBy);
    parent = original;
    this.setLibrary(original.library());
    this.setDependedOn(original.dependedOn());
    contributors = new ArrayList<Binding<?>>();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/SetBinding;size();;;public int size() {
    int size = 0;
    for (SetBinding<T> binding = this; binding != null; binding = binding.parent) {
      size += binding.contributors.size();
    }
    return size;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/Loader;getModuleAdapter(Class<T>);;;public abstract <T> ModuleAdapter<T> getModuleAdapter(Class<T> moduleClass);
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/FailoverLoader;getModuleAdapter(Class<T>);;;@SuppressWarnings("unchecked") // cache ensures types match
  @Override public <T> ModuleAdapter<T> getModuleAdapter(Class<T> type) {
    return (ModuleAdapter<T>) loadedAdapters.get(type);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/Modules;loadModules(Loader,Object[]);;;public static Map<ModuleAdapter<?>, Object> loadModules(Loader loader,
      Object[] seedModulesOrClasses) {
    Map<ModuleAdapter<?>, Object> seedAdapters =
        new LinkedHashMap<ModuleAdapter<?>, Object>(seedModulesOrClasses.length);
    for (int i = 0; i < seedModulesOrClasses.length; i++) {
      if (seedModulesOrClasses[i] instanceof Class<?>) {
        ModuleAdapter<?> adapter = loader.getModuleAdapter((Class<?>) seedModulesOrClasses[i]);
        seedAdapters.put(adapter, adapter.newModule());
      } else {
        ModuleAdapter<?> adapter = loader.getModuleAdapter(seedModulesOrClasses[i].getClass());
        seedAdapters.put(adapter, seedModulesOrClasses[i]);
      }
    }

    // Add the adapters that we have module instances for. This way we won't
    // construct module objects when we have a user-supplied instance.
    Map<ModuleAdapter<?>, Object> result =
        new LinkedHashMap<ModuleAdapter<?>, Object>(seedAdapters);

    // Next collect included modules
    Map<Class<?>, ModuleAdapter<?>> transitiveInclusions =
        new LinkedHashMap<Class<?>, ModuleAdapter<?>>();
    for (ModuleAdapter<?> adapter : seedAdapters.keySet()) {
      collectIncludedModulesRecursively(loader, adapter, transitiveInclusions);
    }
    // and create them if necessary
    for (ModuleAdapter<?> dependency : transitiveInclusions.values()) {
      if (!result.containsKey(dependency)) {
        result.put(dependency, dependency.newModule());
      }
    }
    return result;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/ModuleAdapter;ModuleAdapter(Class<T>,String[],Class<?>[],boolean,Class<?>[],boolean,boolean);;;protected ModuleAdapter(Class<T> moduleClass, String[] injectableTypes,
      Class<?>[] staticInjections, boolean overrides, Class<?>[] includes, boolean complete,
      boolean library) {
    this.moduleClass = moduleClass;
    this.injectableTypes = injectableTypes;
    this.staticInjections = staticInjections;
    this.overrides = overrides;
    this.includes = includes;
    this.complete = complete;
    this.library = library;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/ModuleAdapter;getBindings(BindingsGroup,T);;;@SuppressWarnings("unused")
  public void getBindings(BindingsGroup map, T module) {
    // no-op;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/ModuleAdapter;equals(Object);;;@Override
  public final boolean equals(Object obj) {
    if (obj == this) {
      return true;
    } else if (obj instanceof ModuleAdapter<?>) {
      ModuleAdapter<?> that = (ModuleAdapter<?>) obj;
      return this.moduleClass.equals(that.moduleClass);
    } else {
      return false;
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/ModuleAdapter;hashCode();;;@Override
  public final int hashCode() {
    return moduleClass.hashCode();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/BindingsGroup;contributeSetBinding(String,SetBinding<?>);;;public abstract Binding<?> contributeSetBinding(String key, SetBinding<?> value);
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/BindingsGroup;contributeProvidesBinding(String,ProvidesBinding<?>);;;public Binding<?> contributeProvidesBinding(String key, ProvidesBinding<?> value) {
    return put(key, value);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/BindingsGroup;put(String,Binding<?>);;;protected Binding<?> put(String key, Binding<?> value) {
    Binding<?> clobbered = bindings.put(key, value);
    if (clobbered != null) {
      bindings.put(key, clobbered); // Put things back as they were.
      throw new IllegalArgumentException("Duplicate:\n    " + clobbered + "\n    " + value);
    }
    return null;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/BindingsGroup;get(String);;;public Binding<?> get(String key) {
    return bindings.get(key);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/BindingsGroup;entrySet();;;public final Set<Entry<String, Binding<?>>> entrySet() {
    return bindings.entrySet();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/BindingsGroup;toString();;;@Override public String toString() {
    return getClass().getSimpleName() + bindings.toString();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/Memoizer;Memoizer();;;public Memoizer() {
    this.map = new LinkedHashMap<K, V>();
    ReadWriteLock lock = new ReentrantReadWriteLock();
    this.readLock = lock.readLock();
    this.writeLock = lock.writeLock();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/Memoizer;get(K);;;public final V get(K key) {
    if (key == null) {
      throw new NullPointerException("key == null");
    }

    // check to see if we already have a value
    readLock.lock();
    try {
      V value = map.get(key);
      if (value != null) {
        return value;
      }
    } finally {
      readLock.unlock();
    }

    // create a new value.  this may race and we might create more than one instance, but that's ok
    V newValue = create(key);
    if (newValue == null) {
      throw new NullPointerException("create returned null");
    }

    // write the new value and return it
    writeLock.lock();
    try {
      map.put(key, newValue);
      return newValue;
    } finally {
      writeLock.unlock();
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/Memoizer;create(K);;;protected abstract V create(K key);
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/main/java/dagger/internal/Memoizer;toString();;;@Override public final String toString() {
    readLock.lock();
    try {
      return map.toString();
    } finally {
      readLock.unlock();
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/test/java/dagger/SetBindingTest;duplicateValuesContributed();;;@Test public void duplicateValuesContributed() {
    class TestEntryPoint {
      @Inject Set<String> strings;
    }

    @Module(injects = TestEntryPoint.class)
    class TestModule {
      @Provides(type=SET) String provideString1() { return "a"; }
      @Provides(type=SET) String provideString2() { return "a"; }
      @Provides(type=SET) String provideString3() { return "b"; }
    }

    TestEntryPoint ep = injectWithModule(new TestEntryPoint(), new TestModule());
    assertThat(ep.strings).containsOnly("a", "b");
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/test/java/dagger/SetBindingTest;validateLibraryModules();;;@Test public void validateLibraryModules() {
    class TestEntryPoint {}

    @Module(library = true)
    class SetModule {
      @Provides(type = SET)
      public String provideString() {
        return "";
      }
    }

    @Module(injects = TestEntryPoint.class, includes = SetModule.class)
    class TestModule {}

    ObjectGraph graph = ObjectGraph.createWith(new TestingLoader(),
        new TestModule(), new SetModule());
    graph.validate();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/test/java/dagger/SetBindingTest;validateLibraryModules_nonLibraryContributors();;;@Test public void validateLibraryModules_nonLibraryContributors() {
    class TestEntryPoint {}

    @Module(library = true)
    class SetModule1 {
      @Provides(type = SET)
      public String provideString() {
        return "a";
      }
    }

    @Module
    class SetModule2 {
      @Provides(type = SET)
      public String provideString() {
        return "b";
      }
    }

    @Module(injects = TestEntryPoint.class, includes = { SetModule1.class, SetModule2.class })
    class TestModule {}

    ObjectGraph graph = ObjectGraph.createWith(new TestingLoader(),
        new TestModule(), new SetModule1(), new SetModule2());
    try {
      graph.validate();
      fail();
    } catch (IllegalStateException expected) {}
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/test/java/dagger/ExtensionWithSetBindingsTest;provideA();;;@Provides(type=SET) @Singleton Integer provideA() { return counter.getAndIncrement(); }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/test/java/dagger/ExtensionWithSetBindingsTest;provideB();;;@Provides(type=SET) @Singleton Integer provideB() { return counter.getAndIncrement(); }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/test/java/dagger/ExtensionWithSetBindingsTest;provideC();;;@Provides(type=SET) @Singleton Integer provideC() { return counter.getAndIncrement(); }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/test/java/dagger/ExtensionWithSetBindingsTest;provideD();;;@Provides(type=SET) @Singleton Integer provideD() { return counter.getAndIncrement(); }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/test/java/dagger/ExtensionWithSetBindingsTest;provideFoo();;;@Provides @Singleton String provideFoo() { return "foo"; }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/test/java/dagger/ExtensionWithSetBindingsTest;provideBar();;;@Provides @Singleton String provideBar() { return "bar"; }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/test/java/dagger/ExtensionWithSetBindingsTest;basicInjectionWithExtension();;;@Test public void basicInjectionWithExtension() {
    ObjectGraph root = ObjectGraph.createWith(new TestingLoader(), new RootModule());
    RealSingleton rs = root.get(RealSingleton.class);
    assertThat(rs.ints).containsOnly(0, 1);

    ObjectGraph extension = root.plus(new ExtensionModule());
    Main main = extension.get(Main.class);
    assertThat(main.ints).containsOnly(0, 1, 2, 3);

    // Second time around.
    ObjectGraph extension2 = root.plus(new ExtensionModule());
    Main main2 = extension2.get(Main.class);
    assertThat(main2.ints).containsOnly(0, 1, 4, 5);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/test/java/dagger/ExtensionWithSetBindingsTest;provide9999();;;@Provides(type=SET) @Singleton Integer provide9999() { return 9999; }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/test/java/dagger/ExtensionWithSetBindingsTest;basicInjectionWithExtensionAndOverrides();;;@Test public void basicInjectionWithExtensionAndOverrides() {
    try {
      ObjectGraph.createWith(new TestingLoader(), new RootModule()).plus(new TestModule());
      fail("Should throw exception.");
    } catch (IllegalArgumentException e) {
      assertEquals("TestModule: Module overrides cannot contribute set bindings.", e.getMessage());
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/test/java/dagger/ExtensionWithSetBindingsTest;duplicateBindingsInSecondaryModule();;;@Test public void duplicateBindingsInSecondaryModule() {
    try {
      ObjectGraph.createWith(new TestingLoader(), new EmptyModule(), new DuplicateModule());
      fail("Should throw exception.");
    } catch (IllegalArgumentException e) {
      assertTrue(e.getMessage().startsWith("DuplicateModule: Duplicate"));
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/test/java/dagger/internal/TestingModuleAdapter;TestingModuleAdapter(Class<M>,Module);;;public TestingModuleAdapter(Class<M> moduleClass, Module annotation) {
    super(
        moduleClass,
        injectableTypesToKeys(annotation.injects()),
        annotation.staticInjections(),
        annotation.overrides(),
        annotation.includes(),
        annotation.complete(),
        annotation.library());
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/test/java/dagger/internal/TestingModuleAdapter;getBindings(BindingsGroup,M);;;@Override public void getBindings(BindingsGroup bindings, M module) {
    for (Class<?> c = moduleClass; !c.equals(Object.class); c = c.getSuperclass()) {
      for (Method method : c.getDeclaredMethods()) {
        Provides provides = method.getAnnotation(Provides.class);
        if (provides != null) {
          Type genericReturnType = method.getGenericReturnType();

          Type typeToCheck = genericReturnType;
          if (genericReturnType instanceof ParameterizedType) {
            typeToCheck = ((ParameterizedType) genericReturnType).getRawType();
          }
          if (Provider.class.equals(typeToCheck)) {
            throw new IllegalStateException("@Provides method must not return Provider directly: "
                + c.getName()
                + "."
                + method.getName());
          }
          if (Lazy.class.equals(typeToCheck)) {
            throw new IllegalStateException("@Provides method must not return Lazy directly: "
                + c.getName()
                + "."
                + method.getName());
          }

          String key = Keys.get(genericReturnType, method.getAnnotations(), method);
          switch (provides.type()) {
            case UNIQUE:
              handleBindings(bindings, module, method, key, library);
              break;
            case SET:
              String setKey = Keys.getSetKey(method.getGenericReturnType(),
                  method.getAnnotations(), method);
              handleSetBindings(bindings, module, method, setKey, key, library);
              break;
            case SET_VALUES:
              handleSetBindings(bindings, module, method, key, key, library);
              break;
            default:
              throw new AssertionError("Unknown @Provides type " + provides.type());
          }
        }
      }
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/test/java/dagger/internal/TestingModuleAdapter;handleBindings(BindingsGroup,M,Method,String,boolean);;;private void handleBindings(BindingsGroup bindings, M module, Method method, String key,
      boolean library) {
    bindings.contributeProvidesBinding(key,
        new ReflectiveProvidesBinding<M>(method, key, moduleClass.getName(), module, library));
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/test/java/dagger/internal/TestingModuleAdapter;handleSetBindings(BindingsGroup,M,Method,String,String,boolean);;;private void handleSetBindings(BindingsGroup bindings, M module, Method method,
      String setKey, String providerKey, boolean library) {
    SetBinding.<M>add(bindings, setKey,
        new ReflectiveProvidesBinding<M>(
            method, providerKey, moduleClass.getName(), module, library));
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/test/java/dagger/internal/TestingModuleAdapter;toString();;;@Override public String toString() {
    return "TestingModuleAdapter[" + this.moduleClass.getName() + "]";
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/test/java/dagger/internal/TestingModuleAdapter;create(Class<M>);;;public static <M> ModuleAdapter<M> create(Class<M> moduleClass) {
    Module annotation = moduleClass.getAnnotation(Module.class);
    if (annotation == null) {
      throw new IllegalArgumentException("No @Module on " + moduleClass.getName());
    }
    if (!moduleClass.getSuperclass().equals(Object.class)) {
      throw new IllegalArgumentException(
          "Modules must not extend from other classes: " + moduleClass.getName());
    }
    return new TestingModuleAdapter<M>(moduleClass, annotation);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/test/java/dagger/internal/TestingModuleAdapter;ReflectiveProvidesBinding(Method,String,String,Object,boolean);;;public ReflectiveProvidesBinding(Method method, String key, String moduleClass,
        Object instance, boolean library) {
      super(key, method.isAnnotationPresent(Singleton.class), moduleClass, method.getName());
      this.method = method;
      this.instance = instance;
      method.setAccessible(true);
      setLibrary(library);
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/test/java/dagger/internal/TestingModuleAdapter;attach(Linker);;;@Override public void attach(Linker linker) {
      Type[] types = method.getGenericParameterTypes();
      Annotation[][] annotations = method.getParameterAnnotations();
      parameters = new Binding[types.length];
      for (int i = 0; i < parameters.length; i++) {
        String key = Keys.get(types[i], annotations[i], method + " parameter " + i);
        parameters[i] = linker.requestBinding(key, method, instance.getClass().getClassLoader());
      }
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/test/java/dagger/internal/TestingModuleAdapter;get();;;@Override public T get() {
      Object[] args = new Object[parameters.length];
      for (int i = 0; i < parameters.length; i++) {
        args[i] = parameters[i].get();
      }
      try {
        return (T) method.invoke(instance, args);
      } catch (InvocationTargetException e) {
        Throwable cause = e.getCause();
        throw cause instanceof RuntimeException
            ? (RuntimeException) cause
            : new RuntimeException(cause);
      } catch (IllegalAccessException e) {
        throw new RuntimeException(e);
      }
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/test/java/dagger/internal/TestingModuleAdapter;getDependencies(Set<Binding<?>>,Set<Binding<?>>);;;@Override public void getDependencies(Set<Binding<?>> get, Set<Binding<?>> injectMembers) {
      for (Binding<?> binding : parameters) {
        get.add(binding);
      }
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/test/java/dagger/internal/TestingModuleAdapter;injectMembers(T);;;@Override public void injectMembers(T t) {
      throw new AssertionError("Provides method bindings are not MembersInjectors");
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/core/src/test/java/dagger/internal/TestingLoader;getModuleAdapter(Class<T>);;;@Override public <T> ModuleAdapter<T> getModuleAdapter(Class<T> type) {
    ModuleAdapter<T> adapter = TestingModuleAdapter.create(type);
    return adapter;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor;process(Set<?extendsTypeElement>,RoundEnvironment);;;
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor;process(Set<?extendsTypeElement>,RoundEnvironment);;;      i.remove();
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor;findProvidesMethods(RoundEnvironment);;;private Set<? extends Element> findProvidesMethods(RoundEnvironment env) {
    Set<Element> result = new LinkedHashSet<Element>();
    result.addAll(env.getElementsAnnotatedWith(Provides.class));
    return result;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor;generateModuleAdapter(Writer,String,TypeElement,Map<String,Object>,List<ExecutableElement>);;;private void generateModuleAdapter(Writer ioWriter, String adapterName, TypeElement type,
      Map<String, Object> module, List<ExecutableElement> providerMethods) throws IOException {
    if (module == null) {
      error(type + " has @Provides methods but no @Module annotation", type);
      return;
    }

    Object[] staticInjections = (Object[]) module.get("staticInjections");
    Object[] injects = (Object[]) module.get("injects");
    Object[] includes = (Object[]) module.get("includes");

    boolean overrides = (Boolean) module.get("overrides");
    boolean complete = (Boolean) module.get("complete");
    boolean library = (Boolean) module.get("library");

    JavaWriter writer = new JavaWriter(ioWriter);

    boolean multibindings = checkForMultibindings(providerMethods);
    boolean providerMethodDependencies = checkForDependencies(providerMethods);

    writer.emitSingleLineComment(AdapterJavadocs.GENERATED_BY_DAGGER);
    writer.emitPackage(getPackage(type).getQualifiedName().toString());
    writer.emitImports(
        findImports(multibindings, !providerMethods.isEmpty(), providerMethodDependencies));

    String typeName = type.getQualifiedName().toString();
    writer.emitEmptyLine();
    writer.emitJavadoc(AdapterJavadocs.MODULE_TYPE);
    writer.beginType(adapterName, "class", EnumSet.of(PUBLIC, FINAL),
        JavaWriter.type(ModuleAdapter.class, typeName));

    StringBuilder injectsField = new StringBuilder().append("{ ");
    for (Object injectableType : injects) {
      TypeMirror typeMirror = (TypeMirror) injectableType;
      String key = isInterface(typeMirror)
          ? GeneratorKeys.get(typeMirror)
          : GeneratorKeys.rawMembersKey(typeMirror);
      injectsField.append(JavaWriter.stringLiteral(key)).append(", ");
    }
    injectsField.append("}");
    writer.emitField("String[]", "INJECTS", EnumSet.of(PRIVATE, STATIC, FINAL),
        injectsField.toString());

    StringBuilder staticInjectionsField = new StringBuilder().append("{ ");
    for (Object staticInjection : staticInjections) {
      TypeMirror typeMirror = (TypeMirror) staticInjection;
      staticInjectionsField.append(typeToString(typeMirror)).append(".class, ");
    }
    staticInjectionsField.append("}");
    writer.emitField("Class<?>[]", "STATIC_INJECTIONS", EnumSet.of(PRIVATE, STATIC, FINAL),
        staticInjectionsField.toString());

    StringBuilder includesField = new StringBuilder().append("{ ");
    for (Object include : includes) {
      if (!(include instanceof TypeMirror)) {
        // TODO(tbroyer): pass annotation information
        processingEnv.getMessager().printMessage(Diagnostic.Kind.WARNING,
            "Unexpected value: " + include + " in includes of " + type, type);
        continue;
      }
      TypeMirror typeMirror = (TypeMirror) include;
      includesField.append(typeToString(typeMirror)).append(".class, ");
    }
    includesField.append("}");
    writer.emitField(
        "Class<?>[]", "INCLUDES", EnumSet.of(PRIVATE, STATIC, FINAL), includesField.toString());

    writer.emitEmptyLine();
    writer.beginMethod(null, adapterName, EnumSet.of(PUBLIC));
    writer.emitStatement("super(%s.class, INJECTS, STATIC_INJECTIONS, %s /*overrides*/, "
        + "INCLUDES, %s /*complete*/, %s /*library*/)", typeName,  overrides, complete, library);
    writer.endMethod();

    ExecutableElement noArgsConstructor = getNoArgsConstructor(type);
    if (noArgsConstructor != null && isCallableConstructor(noArgsConstructor)) {
      writer.emitEmptyLine();
      writer.emitAnnotation(Override.class);
      writer.beginMethod(typeName, "newModule", EnumSet.of(PUBLIC));
      writer.emitStatement("return new %s()", typeName);
      writer.endMethod();
    }
    // caches
    Map<ExecutableElement, String> methodToClassName
        = new LinkedHashMap<ExecutableElement, String>();
    Map<String, AtomicInteger> methodNameToNextId = new LinkedHashMap<String, AtomicInteger>();

    if (!providerMethods.isEmpty()) {
      writer.emitEmptyLine();
      writer.emitJavadoc(AdapterJavadocs.GET_DEPENDENCIES_METHOD);
      writer.emitAnnotation(Override.class);
      writer.beginMethod("void", "getBindings", EnumSet.of(PUBLIC), BINDINGS_MAP, "bindings",
          typeName, "module");

      for (ExecutableElement providerMethod : providerMethods) {
        Provides provides = providerMethod.getAnnotation(Provides.class);
        switch (provides.type()) {
          case UNIQUE: {
            String key = GeneratorKeys.get(providerMethod);
            writer.emitStatement("bindings.contributeProvidesBinding(%s, new %s(module))",
                JavaWriter.stringLiteral(key),
                bindingClassName(providerMethod, methodToClassName, methodNameToNextId));
            break;
          }
          case SET: {
            String key = GeneratorKeys.getSetKey(providerMethod);
            writer.emitStatement("SetBinding.add(bindings, %s, new %s(module))",
                JavaWriter.stringLiteral(key),
                bindingClassName(providerMethod, methodToClassName, methodNameToNextId));
            break;
          }
          case SET_VALUES: {
            String key = GeneratorKeys.get(providerMethod);
            writer.emitStatement("SetBinding.add(bindings, %s, new %s(module))",
                JavaWriter.stringLiteral(key),
                bindingClassName(providerMethod, methodToClassName, methodNameToNextId));
            break;
          }
          default:
            throw new AssertionError("Unknown @Provides type " + provides.type());
        }
      }
      writer.endMethod();
    }

    for (ExecutableElement providerMethod : providerMethods) {
      generateProvidesAdapter(
          writer, providerMethod, methodToClassName, methodNameToNextId, library);
    }

    writer.endType();
    writer.close();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor;findImports(boolean,boolean,boolean);;;private Set<String> findImports(boolean multibindings, boolean providers, boolean dependencies) {
    Set<String> imports = new LinkedHashSet<String>();
    imports.add(ModuleAdapter.class.getCanonicalName());
    if (providers) {
      imports.add(BindingsGroup.class.getCanonicalName());
      imports.add(Provider.class.getCanonicalName());
      imports.add(ProvidesBinding.class.getCanonicalName());
    }
    if (dependencies) {
      imports.add(Linker.class.getCanonicalName());
      imports.add(Set.class.getCanonicalName());
      imports.add(Binding.class.getCanonicalName());
    }
    if (multibindings) {
      imports.add(SetBinding.class.getCanonicalName());
    }
    return imports;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor;generateProvidesAdapter(JavaWriter,ExecutableElement,Map<ExecutableElement,String>,Map<String,AtomicInteger>,boolean);;;private void generateProvidesAdapter(JavaWriter writer, ExecutableElement providerMethod,
      Map<ExecutableElement, String> methodToClassName,
      Map<String, AtomicInteger> methodNameToNextId, boolean library)
      throws IOException {
    String methodName = providerMethod.getSimpleName().toString();
    String moduleType = typeToString(providerMethod.getEnclosingElement().asType());
    String className =
        bindingClassName(providerMethod, methodToClassName, methodNameToNextId);
    String returnType = typeToString(providerMethod.getReturnType());
    List<? extends VariableElement> parameters = providerMethod.getParameters();
    boolean dependent = !parameters.isEmpty();

    writer.emitEmptyLine();
    writer.emitJavadoc(bindingTypeDocs(returnType, false, false, dependent));
    writer.beginType(className, "class", EnumSet.of(PUBLIC, STATIC, FINAL),
        JavaWriter.type(ProvidesBinding.class, returnType),
        JavaWriter.type(Provider.class, returnType));
    writer.emitField(moduleType, "module", EnumSet.of(PRIVATE, FINAL));
    for (Element parameter : parameters) {
      TypeMirror parameterType = parameter.asType();
      writer.emitField(JavaWriter.type(Binding.class, typeToString(parameterType)),
          parameterName(parameter), EnumSet.of(PRIVATE));
    }

    writer.emitEmptyLine();
    writer.beginMethod(null, className, EnumSet.of(PUBLIC), moduleType, "module");
    boolean singleton = providerMethod.getAnnotation(Singleton.class) != null;
    String key = JavaWriter.stringLiteral(GeneratorKeys.get(providerMethod));
    writer.emitStatement("super(%s, %s, %s, %s)",
        key, (singleton ? "IS_SINGLETON" : "NOT_SINGLETON"),
        JavaWriter.stringLiteral(moduleType),
        JavaWriter.stringLiteral(methodName));
    writer.emitStatement("this.module = module");
    writer.emitStatement("setLibrary(%s)", library);
    writer.endMethod();

    if (dependent) {
      writer.emitEmptyLine();
      writer.emitJavadoc(AdapterJavadocs.ATTACH_METHOD);
      writer.emitAnnotation(Override.class);
      writer.emitAnnotation(SuppressWarnings.class, JavaWriter.stringLiteral("unchecked"));
      writer.beginMethod(
          "void", "attach", EnumSet.of(PUBLIC), Linker.class.getCanonicalName(), "linker");
      for (VariableElement parameter : parameters) {
        String parameterKey = GeneratorKeys.get(parameter);
        writer.emitStatement(
            "%s = (%s) linker.requestBinding(%s, %s.class, getClass().getClassLoader())",
            parameterName(parameter),
            writer.compressType(JavaWriter.type(Binding.class, typeToString(parameter.asType()))),
            JavaWriter.stringLiteral(parameterKey),
            writer.compressType(moduleType));
      }
      writer.endMethod();

      writer.emitEmptyLine();
      writer.emitJavadoc(AdapterJavadocs.GET_DEPENDENCIES_METHOD);
      writer.emitAnnotation(Override.class);
      String setOfBindings = JavaWriter.type(Set.class, "Binding<?>");
      writer.beginMethod("void", "getDependencies", EnumSet.of(PUBLIC), setOfBindings,
          "getBindings", setOfBindings, "injectMembersBindings");
      for (Element parameter : parameters) {
        writer.emitStatement("getBindings.add(%s)", parameterName(parameter));
      }
      writer.endMethod();
    }

    writer.emitEmptyLine();
    writer.emitJavadoc(AdapterJavadocs.GET_METHOD, returnType);
    writer.emitAnnotation(Override.class);
    writer.beginMethod(returnType, "get", EnumSet.of(PUBLIC));
    StringBuilder args = new StringBuilder();
    boolean first = true;
    for (Element parameter : parameters) {
      if (!first) args.append(", ");
      else first = false;
      args.append(String.format("%s.get()", parameterName(parameter)));
    }
    writer.emitStatement("return module.%s(%s)", methodName, args.toString());
    writer.endMethod();

    writer.endType();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor;generateInjectionsForClass(InjectedClass);;;private void generateInjectionsForClass(InjectedClass injectedClass) throws IOException {
    if (injectedClass.constructor != null || !injectedClass.fields.isEmpty()) {
      generateInjectAdapter(injectedClass.type, injectedClass.constructor, injectedClass.fields);
    }
    if (!injectedClass.staticFields.isEmpty()) {
      generateStaticInjection(injectedClass.type, injectedClass.staticFields);
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor;findInjectedClassNames(RoundEnvironment);;;private Set<String> findInjectedClassNames(RoundEnvironment env) {
    // First gather the set of classes that have @Inject-annotated members.
    Set<String> injectedTypeNames = new LinkedHashSet<String>();
    for (Element element : env.getElementsAnnotatedWith(Inject.class)) {
      if (!validateInjectable(element)) {
        continue;
      }
      injectedTypeNames.add(rawTypeToString(element.getEnclosingElement().asType(), '.'));
    }
    return injectedTypeNames;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor;createInjectedClass(String);;;private InjectedClass createInjectedClass(String injectedClassName) {
    TypeElement type = processingEnv.getElementUtils().getTypeElement(injectedClassName);
    boolean isAbstract = type.getModifiers().contains(ABSTRACT);
    List<Element> staticFields = new ArrayList<Element>();
    ExecutableElement constructor = null;
    List<Element> fields = new ArrayList<Element>();
    for (Element member : type.getEnclosedElements()) {
      if (member.getAnnotation(Inject.class) == null) {
        continue;
      }

      switch (member.getKind()) {
        case FIELD:
          if (member.getModifiers().contains(STATIC)) {
            staticFields.add(member);
          } else {
            fields.add(member);
          }
          break;
        case CONSTRUCTOR:
          if (constructor != null) {
            // TODO(tbroyer): pass annotation information
            error("Too many injectable constructors on " + type.getQualifiedName(), member);
          } else if (isAbstract) {
            // TODO(tbroyer): pass annotation information
            error("Abstract class " + type.getQualifiedName()
                + " must not have an @Inject-annotated constructor.", member);
          }
          constructor = (ExecutableElement) member;
          break;
        default:
          // TODO(tbroyer): pass annotation information
          error("Cannot inject " + elementToString(member), member);
          break;
      }
    }

    if (constructor == null && !isAbstract) {
      constructor = getNoArgsConstructor(type);
      if (constructor != null && !isCallableConstructor(constructor)) {
        constructor = null;
      }
    }

    return new InjectedClass(type, staticFields, constructor, fields);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor;generateStaticInjection(TypeElement,List<Element>);;;private void generateStaticInjection(TypeElement type, List<Element> fields) throws IOException {
    String typeName = type.getQualifiedName().toString();
    String adapterName = adapterName(type, STATIC_INJECTION_SUFFIX);
    JavaFileObject sourceFile = processingEnv.getFiler()
        .createSourceFile(adapterName, type);
    JavaWriter writer = new JavaWriter(sourceFile.openWriter());

    writer.emitSingleLineComment(AdapterJavadocs.GENERATED_BY_DAGGER);
    writer.emitPackage(getPackage(type).getQualifiedName().toString());
    writer.emitImports(Arrays.asList(
        StaticInjection.class.getName(),
        Binding.class.getName(),
        Linker.class.getName()));
    writer.emitEmptyLine();
    writer.emitJavadoc(AdapterJavadocs.STATIC_INJECTION_TYPE, type.getSimpleName());
    writer.beginType(
        adapterName, "class", EnumSet.of(PUBLIC, FINAL), StaticInjection.class.getSimpleName());
    writeMemberBindingsFields(writer, fields, false);
    writer.emitEmptyLine();
    writeAttachMethod(writer, null, fields, false, typeName, null, true);
    writeStaticInjectMethod(writer, fields, typeName);
    writer.endType();
    writer.close();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor;writeMemberBindingsFields(JavaWriter,List<Element>,boolean);;;private void writeMemberBindingsFields(
      JavaWriter writer, List<Element> fields, boolean disambiguateFields) throws IOException {
    for (Element field : fields) {
      writer.emitField(JavaWriter.type(Binding.class, typeToString(field.asType())),
          fieldName(disambiguateFields, field), EnumSet.of(PRIVATE));
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor;writeParameterBindingsFields(JavaWriter,ExecutableElement,boolean);;;private void writeParameterBindingsFields(
      JavaWriter writer, ExecutableElement constructor, boolean disambiguateFields)
      throws IOException {
    for (VariableElement parameter : constructor.getParameters()) {
      writer.emitField(JavaWriter.type(Binding.class,
          typeToString(parameter.asType())),
          parameterName(disambiguateFields, parameter), EnumSet.of(PRIVATE));
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor;writeInjectAdapterConstructor(JavaWriter,ExecutableElement,TypeElement,String,String);;;private void writeInjectAdapterConstructor(JavaWriter writer, ExecutableElement constructor,
      TypeElement type, String strippedTypeName, String adapterName) throws IOException {
    writer.beginMethod(null, adapterName, EnumSet.of(PUBLIC));
    String key = (constructor != null)
        ? JavaWriter.stringLiteral(GeneratorKeys.get(type.asType()))
        : null;
    String membersKey = JavaWriter.stringLiteral(GeneratorKeys.rawMembersKey(type.asType()));
    boolean singleton = type.getAnnotation(Singleton.class) != null;
    writer.emitStatement("super(%s, %s, %s, %s.class)",
        key, membersKey, (singleton ? "IS_SINGLETON" : "NOT_SINGLETON"), strippedTypeName);
    writer.endMethod();
    writer.emitEmptyLine();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor;writeGetMethod(JavaWriter,ExecutableElement,boolean,boolean,String);;;private void writeGetMethod(JavaWriter writer, ExecutableElement constructor,
      boolean disambiguateFields, boolean injectMembers, String strippedTypeName)
      throws IOException {
    writer.emitJavadoc(AdapterJavadocs.GET_METHOD, strippedTypeName);
    writer.emitAnnotation(Override.class);
    writer.beginMethod(strippedTypeName, "get", EnumSet.of(PUBLIC));
    StringBuilder newInstance = new StringBuilder();
    newInstance.append(strippedTypeName).append(" result = new ");
    newInstance.append(strippedTypeName).append('(');
    boolean first = true;
    for (VariableElement parameter : constructor.getParameters()) {
      if (!first) newInstance.append(", ");
      else first = false;
      newInstance.append(parameterName(disambiguateFields, parameter)).append(".get()");
    }
    newInstance.append(')');
    writer.emitStatement(newInstance.toString());
    if (injectMembers) {
      writer.emitStatement("injectMembers(result)");
    }
    writer.emitStatement("return result");
    writer.endMethod();
    writer.emitEmptyLine();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor;writeStaticInjectMethod(JavaWriter,List<Element>,String);;;private void writeStaticInjectMethod(JavaWriter writer, List<Element> fields, String typeName)
      throws IOException {
    writer.emitEmptyLine();
    writer.emitJavadoc(AdapterJavadocs.STATIC_INJECT_METHOD);
    writer.emitAnnotation(Override.class);
    writer.beginMethod("void", "inject", EnumSet.of(PUBLIC));
    for (Element field : fields) {
      writer.emitStatement("%s.%s = %s.get()",
          writer.compressType(typeName),
          field.getSimpleName().toString(),
          fieldName(false, field));
    }
    writer.endMethod();
    writer.emitEmptyLine();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor;findImports(boolean,boolean,boolean);;;private Set<String> findImports(boolean dependent, boolean injectMembers, boolean isProvider) {
    Set<String> imports = new LinkedHashSet<String>();
    imports.add(Binding.class.getCanonicalName());
    if (dependent) {
      imports.add(Linker.class.getCanonicalName());
      imports.add(Set.class.getCanonicalName());
    }
    if (injectMembers) imports.add(MembersInjector.class.getCanonicalName());
    if (isProvider) imports.add(Provider.class.getCanonicalName());
    return imports;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor;implementedInterfaces(String,boolean,boolean);;;private String[] implementedInterfaces(
      String strippedTypeName, boolean hasFields, boolean isProvider) {
    List<String> interfaces = new ArrayList<String>();
    if (isProvider) {
      interfaces.add(JavaWriter.type(Provider.class, strippedTypeName));
    }
    if (hasFields) {
      interfaces.add(JavaWriter.type(MembersInjector.class, strippedTypeName));
    }
    return interfaces.toArray(new String[interfaces.size()]);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/Util;Util();;;private Util() {
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/Util;getPackage(Element);;;public static PackageElement getPackage(Element type) {
    while (type.getKind() != ElementKind.PACKAGE) {
      type = type.getEnclosingElement();
    }
    return (PackageElement) type;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/Util;getApplicationSupertype(TypeElement);;;public static TypeMirror getApplicationSupertype(TypeElement type) {
    TypeMirror supertype = type.getSuperclass();
    return Keys.isPlatformType(supertype.toString()) ? null : supertype;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/Util;adapterName(TypeElement,String);;;public static String adapterName(TypeElement typeElement, String suffix) {
    StringBuilder builder = new StringBuilder();
    rawTypeToString(builder, typeElement, '$');
    builder.append(suffix);
    return builder.toString();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/Util;typeToString(TypeMirror);;;public static String typeToString(TypeMirror type) {
    StringBuilder result = new StringBuilder();
    typeToString(type, result, '.');
    return result.toString();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/Util;rawTypeToString(TypeMirror,char);;;public static String rawTypeToString(TypeMirror type, char innerClassSeparator) {
    if (!(type instanceof DeclaredType)) {
      throw new IllegalArgumentException("Unexpected type: " + type);
    }
    StringBuilder result = new StringBuilder();
    DeclaredType declaredType = (DeclaredType) type;
    rawTypeToString(result, (TypeElement) declaredType.asElement(), innerClassSeparator);
    return result.toString();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/Util;typeToString(TypeMirror,StringBuilder,char);;;public static void typeToString(final TypeMirror type, final StringBuilder result,
      final char innerClassSeparator) {
    type.accept(new SimpleTypeVisitor6<Void, Void>() {
      @Override public Void visitDeclared(DeclaredType declaredType, Void v) {
        TypeElement typeElement = (TypeElement) declaredType.asElement();
        rawTypeToString(result, typeElement, innerClassSeparator);
        List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();
        if (!typeArguments.isEmpty()) {
          result.append("<");
          for (int i = 0; i < typeArguments.size(); i++) {
            if (i != 0) {
              result.append(", ");
            }
            typeToString(typeArguments.get(i), result, innerClassSeparator);
          }
          result.append(">");
        }
        return null;
      }
      @Override public Void visitPrimitive(PrimitiveType primitiveType, Void v) {
        result.append(box((PrimitiveType) type).getName());
        return null;
      }
      @Override public Void visitArray(ArrayType arrayType, Void v) {
        TypeMirror type = arrayType.getComponentType();
        if (type instanceof PrimitiveType) {
          result.append(type.toString()); // Don't box, since this is an array.
        } else {
          typeToString(arrayType.getComponentType(), result, innerClassSeparator);
        }
        result.append("[]");
        return null;
      }
      @Override public Void visitTypeVariable(TypeVariable typeVariable, Void v) {
        result.append(typeVariable.asElement().getSimpleName());
        return null;
      }
      @Override public Void visitError(ErrorType errorType, Void v) {
        // Error type found, a type may not yet have been generated, but we need the type
        // so we can generate the correct code in anticipation of the type being available
        // to the compiler.

        // Paramterized types which don't exist are returned as an error type whose name is "<any>"
        if ("<any>".equals(errorType.toString())) {
          throw new CodeGenerationIncompleteException(
              "Type reported as <any> is likely a not-yet generated parameterized type.");
        }
        // TODO(cgruber): Figure out a strategy for non-FQCN cases.
        result.append(errorType.toString());
        return null;
      }
      @Override protected Void defaultAction(TypeMirror typeMirror, Void v) {
        throw new UnsupportedOperationException(
            "Unexpected TypeKind " + typeMirror.getKind() + " for "  + typeMirror);
      }
    }, null);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/Util;getAnnotation(Class<?>,Element);;;public static Map<String, Object> getAnnotation(Class<?> annotationType, Element element) {
    for (AnnotationMirror annotation : element.getAnnotationMirrors()) {
      if (!rawTypeToString(annotation.getAnnotationType(), '$')
          .equals(annotationType.getName())) {
        continue;
      }

      Map<String, Object> result = new LinkedHashMap<String, Object>();
      for (Method m : annotationType.getMethods()) {
        result.put(m.getName(), m.getDefaultValue());
      }
      for (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> e
          : annotation.getElementValues().entrySet()) {
        String name = e.getKey().getSimpleName().toString();
        Object value = e.getValue().accept(VALUE_EXTRACTOR, null);
        Object defaultValue = result.get(name);
        if (!lenientIsInstance(defaultValue.getClass(), value)) {
          throw new IllegalStateException(String.format(
              "Value of %s.%s is a %s but expected a %s\n    value: %s",
              annotationType, name, value.getClass().getName(), defaultValue.getClass().getName(),
              value instanceof Object[] ? Arrays.toString((Object[]) value) : value));
        }
        result.put(name, value);
      }
      return result;
    }
    return null; // Annotation not found.
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/Util;lenientIsInstance(Class<?>,Object);;;private static boolean lenientIsInstance(Class<?> expectedClass, Object value) {
    if (expectedClass.isArray()) {
      Class<?> componentType = expectedClass.getComponentType();
      if (!(value instanceof Object[])) {
        return false;
      }
      for (Object element : (Object[]) value) {
        if (!lenientIsInstance(componentType, element)) return false;
      }
      return true;
    } else if (expectedClass == Class.class) {
      return value instanceof TypeMirror;
    } else {
      return expectedClass == value.getClass();
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/Util;elementToString(Element);;;static String elementToString(Element element) {
    switch (element.getKind()) {
      case FIELD:
      // fall through
      case CONSTRUCTOR:
      // fall through
      case METHOD:
        return element.getEnclosingElement() + "." + element;
      default:
        return element.toString();
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/Util;rawTypeToString(StringBuilder,TypeElement,char);;;static void rawTypeToString(StringBuilder result, TypeElement type,
      char innerClassSeparator) {
    String packageName = getPackage(type).getQualifiedName().toString();
    String qualifiedName = type.getQualifiedName().toString();
    if (packageName.isEmpty()) {
        result.append(qualifiedName.replace('.', innerClassSeparator));
    } else {
      result.append(packageName);
      result.append('.');
      result.append(
          qualifiedName.substring(packageName.length() + 1).replace('.', innerClassSeparator));
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/Util;box(PrimitiveType);;;private static Class<?> box(PrimitiveType primitiveType) {
    switch (primitiveType.getKind()) {
      case BYTE:
        return Byte.class;
      case SHORT:
        return Short.class;
      case INT:
        return Integer.class;
      case LONG:
        return Long.class;
      case FLOAT:
        return Float.class;
      case DOUBLE:
        return Double.class;
      case BOOLEAN:
        return Boolean.class;
      case CHAR:
        return Character.class;
      case VOID:
        return Void.class;
      default:
        throw new AssertionError();
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/Util;getNoArgsConstructor(TypeElement);;;public static ExecutableElement getNoArgsConstructor(TypeElement type) {
    for (Element enclosed : type.getEnclosedElements()) {
      if (enclosed.getKind() != ElementKind.CONSTRUCTOR) {
        continue;
      }
      ExecutableElement constructor = (ExecutableElement) enclosed;
      if (constructor.getParameters().isEmpty()) {
        return constructor;
      }
    }
    return null;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/Util;isCallableConstructor(ExecutableElement);;;public static boolean isCallableConstructor(ExecutableElement constructor) {
    if (constructor.getModifiers().contains(Modifier.PRIVATE)) {
      return false;
    }
    TypeElement type = (TypeElement) constructor.getEnclosingElement();
    return type.getEnclosingElement().getKind() == ElementKind.PACKAGE
        || type.getModifiers().contains(Modifier.STATIC);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/Util;className(ExecutableElement);;;public static String className(ExecutableElement method) {
    return ((TypeElement) method.getEnclosingElement()).getQualifiedName().toString();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/Util;isInterface(TypeMirror);;;public static boolean isInterface(TypeMirror typeMirror) {
    return typeMirror instanceof DeclaredType
        && ((DeclaredType) typeMirror).asElement().getKind() == ElementKind.INTERFACE;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/Util;isStatic(Element);;;static boolean isStatic(Element element) {
    for (Modifier modifier : element.getModifiers()) {
      if (modifier.equals(Modifier.STATIC)) {
        return true;
      }
    }
    return false;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/Util;CodeGenerationIncompleteException(String);;;public CodeGenerationIncompleteException(String s) {
      super(s);
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/GraphVisualizer;compare(Binding<?>,Binding<?>);;;@Override
    public int compare(Binding<?> left, Binding<?> right) {
      return getStringForBinding(left).compareTo(getStringForBinding(right));
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/GraphVisualizer;getStringForBinding(Binding<?>);;;private String getStringForBinding(Binding<?> binding) {
      return binding == null ? "" : binding.toString();
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisLoader;getModuleAdapter(Class<T>);;;@Override public <T> ModuleAdapter<T> getModuleAdapter(Class<T> moduleClass) {
    throw new UnsupportedOperationException();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/ValidationProcessor;getSupportedSourceVersion();;;@Override public SourceVersion getSupportedSourceVersion() {
    return SourceVersion.latestSupported();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/ValidationProcessor;process(Set<?extendsTypeElement>,RoundEnvironment);;;@Override public boolean process(Set<? extends TypeElement> types, RoundEnvironment env) {
    List<Element> allElements = new ArrayList<Element>();
    Map<Element, Element> parametersToTheirMethods = new LinkedHashMap<Element, Element>();
    getAllElements(env, allElements, parametersToTheirMethods);
    for (Element element : allElements) {
      try {
        validateProvides(element);
      } catch (CodeGenerationIncompleteException e) {
        continue; // Upstream compiler issue in play. Ignore this element.
      }
      validateScoping(element);
      validateQualifiers(element, parametersToTheirMethods);
    }
    return false;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/ValidationProcessor;validateProvides(Element);;;private void validateProvides(Element element) {
    if (element.getAnnotation(Provides.class) != null
        && Util.getAnnotation(Module.class, element.getEnclosingElement()) == null) {
      error("@Provides methods must be declared in modules: " + elementToString(element), element);
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/ValidationProcessor;validateQualifiers(Element,Map<Element,Element>);;;private void validateQualifiers(Element element, Map<Element, Element> parametersToTheirMethods) {
    boolean suppressWarnings =
        element.getAnnotation(SuppressWarnings.class) != null && Arrays.asList(
            element.getAnnotation(SuppressWarnings.class).value()).contains("qualifiers");
    int numberOfQualifiersOnElement = 0;
    for (AnnotationMirror annotation : element.getAnnotationMirrors()) {
      if (annotation.getAnnotationType().asElement().getAnnotation(Qualifier.class) == null) {
       continue;
      }
      switch (element.getKind()) {
        case FIELD:
          numberOfQualifiersOnElement++;
          if (element.getAnnotation(Inject.class) == null && !suppressWarnings) {
            warning("Dagger will ignore qualifier annotations on fields that are not "
                + "annotated with @Inject: " + elementToString(element), element);
          }
          break;
        case METHOD:
          numberOfQualifiersOnElement++;
          if (!isProvidesMethod(element) && !suppressWarnings) {
            warning("Dagger will ignore qualifier annotations on methods that are not "
                + "@Provides methods: " + elementToString(element), element);
          }
          break;
        case PARAMETER:
          numberOfQualifiersOnElement++;
          if (!isInjectableConstructorParameter(element, parametersToTheirMethods)
              && !isProvidesMethodParameter(element, parametersToTheirMethods)
              && !suppressWarnings) {
            warning("Dagger will ignore qualifier annotations on parameters that are not "
                + "@Inject constructor parameters or @Provides method parameters: "
                + elementToString(element), element);
          }
          break;
        default:
          error("Qualifier annotations are only allowed on fields, methods, and parameters: "
              + elementToString(element), element);
      }
    }
    if (numberOfQualifiersOnElement > 1) {
      error("Only one qualifier annotation is allowed per element: " + elementToString(element),
          element);
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/ValidationProcessor;validateScoping(Element);;;private void validateScoping(Element element) {
    boolean suppressWarnings =
        element.getAnnotation(SuppressWarnings.class) != null && Arrays.asList(
            element.getAnnotation(SuppressWarnings.class).value()).contains("scoping");
    int numberOfScopingAnnotationsOnElement = 0;
    for (AnnotationMirror annotation : element.getAnnotationMirrors()) {
      if (annotation.getAnnotationType().asElement().getAnnotation(Scope.class) == null) {
        continue;
      }
      switch (element.getKind()) {
        case METHOD:
          numberOfScopingAnnotationsOnElement++;
          if (!isProvidesMethod(element) && !suppressWarnings) {
            warning("Dagger will ignore scoping annotations on methods that are not "
                + "@Provides methods: " + elementToString(element), element);
          }
          break;
        case CLASS:
          if (!element.getModifiers().contains(ABSTRACT)) {
            numberOfScopingAnnotationsOnElement++;
            break;
          }
        // fall through if abstract
        default:
          error("Scoping annotations are only allowed on concrete types and @Provides methods: "
              + elementToString(element), element);
      }
    }
    if (numberOfScopingAnnotationsOnElement > 1) {
      error("Only one scoping annotation is allowed per element: " + elementToString(element),
          element);
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/ValidationProcessor;getAllElements(RoundEnvironment,List<Element>,Map<Element,Element>);;;private void getAllElements(
      RoundEnvironment env, List<Element> result, Map<Element, Element> parametersToTheirMethods) {
    for (Element element : env.getRootElements()) {
      addAllEnclosed(element, result, parametersToTheirMethods);
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/ValidationProcessor;addAllEnclosed(Element,List<Element>,Map<Element,Element>);;;private void addAllEnclosed(
      Element element, List<Element> result, Map<Element, Element> parametersToTheirMethods) {
    result.add(element);
    for (Element enclosed : element.getEnclosedElements()) {
      addAllEnclosed(enclosed, result, parametersToTheirMethods);
      if (enclosed.getKind() == METHOD || enclosed.getKind() == CONSTRUCTOR) {
        for (Element parameter : ((ExecutableElement) enclosed).getParameters()) {
          result.add(parameter);
          parametersToTheirMethods.put(parameter, enclosed);
        }
      }
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/ValidationProcessor;isProvidesMethod(Element);;;private boolean isProvidesMethod(Element element) {
    return element.getKind() == METHOD && element.getAnnotation(Provides.class) != null;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/ValidationProcessor;isProvidesMethodParameter(Element,Map<Element,Element>);;;private boolean isProvidesMethodParameter(
      Element parameter, Map<Element, Element> parametersToTheirMethods) {
    return parametersToTheirMethods.get(parameter).getAnnotation(Provides.class) != null;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/ValidationProcessor;isInjectableConstructorParameter(Element,Map<Element,Element>);;;private boolean isInjectableConstructorParameter(
      Element parameter, Map<Element, Element> parametersToTheirMethods) {
    return parametersToTheirMethods.get(parameter).getKind() == CONSTRUCTOR
        && parametersToTheirMethods.get(parameter).getAnnotation(Inject.class) != null;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/ValidationProcessor;error(String,Element);;;private void error(String msg, Element element) {
    processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, msg, element);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/ValidationProcessor;warning(String,Element);;;private void warning(String msg, Element element) {
    processingEnv.getMessager().printMessage(Diagnostic.Kind.WARNING, msg, element);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/GeneratorKeys;getQualifier(List<?extendsAnnotationMirror>);;;private static AnnotationMirror getQualifier(
      List<? extends AnnotationMirror> annotations) {
    AnnotationMirror qualifier = null;
    for (AnnotationMirror annotation : annotations) {
      if (annotation.getAnnotationType().asElement().getAnnotation(Qualifier.class) == null) {
        continue;
      }
      qualifier = annotation;
    }
    return qualifier;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/AdapterJavadocs;bindingTypeDocs(String,boolean,boolean,boolean);;;static String bindingTypeDocs(String type, boolean abstrakt, boolean members, boolean dependent) {
    StringBuffer sb = new StringBuffer();
    sb.append("A {@code Binding<").append(type).append(">} implementation which satisfies\n");
    sb.append("Dagger's infrastructure requirements including:");
    if (dependent) {
      sb.append("\n\n");
      sb.append("Owning the dependency links between {@code " + type + "} and its\n");
      sb.append("dependencies.");
    }
    if (!abstrakt) {
      sb.append("\n\n");
      sb.append("Being a {@code Provider<" + type + ">} and handling creation and\n");
      sb.append("preparation of object instances.");
    }
    if (members) {
      sb.append("\n\n");
      sb.append("Being a {@code MembersInjector<" + type + ">} and handling injection\n");
      sb.append("of annotated fields.");
    }
    return sb.toString();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor;process(Set<?extendsTypeElement>,RoundEnvironment);;;      if (annotation == null) {
        error("Missing @Module annotation.", moduleType);
        continue;
      }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor;processCompleteModule(TypeElement,boolean);;;        Set<String> injectsProvisionKeys = new LinkedHashSet<String>();
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor;processCompleteModule(TypeElement,boolean);;;          String providerKey = GeneratorKeys.get(injectableType);
          injectsProvisionKeys.add(providerKey);
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor;elements();;;private Elements elements() {
    return processingEnv.getElementUtils();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor;toString();;;@Override public String toString() {
      return "ProvidesBinding[key=" + provideKey
          + " method=" + moduleClass + "." + method.getSimpleName() + "()";
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor;ModuleValidationException(String,Element);;;public ModuleValidationException(String message, Element source) {
      super(message);
      this.source = source;
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/testing/it/BuildLogValidator;assertDoesNotHaveText(File,String);;;public void assertDoesNotHaveText(File buildLogfile, String... unexpectedStrings)
      throws Throwable {
    String buildOutput = getBuildOutput(buildLogfile);

    StringBuilder sb = new StringBuilder("Build output contained unexpected text:");
    boolean found = false;

    for (String unexpected : unexpectedStrings) {
      if (buildOutput.contains(unexpected)) {
        found = true;
        sb.append("\n    \"").append(unexpected).append("\"");
      }
    }
    if (found) {
      appendBuildStatus(sb, buildOutput);
      throw new Exception(sb.toString());
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/testing/it/BuildLogValidator;getBuildOutput(File);;;private String getBuildOutput(File buildLogfile) throws Throwable {
    String buildOutput;
    FileInputStream stream = new FileInputStream(buildLogfile);
    try {
      FileChannel fc = stream.getChannel();
      MappedByteBuffer buf = fc.map(FileChannel.MapMode.READ_ONLY, 0, fc.size());
      buildOutput = Charset.defaultCharset().decode(buf).toString();
    } finally {
      stream.close();
    }
    if (buildOutput == null) {
      throw new Exception("Could not read build output");
    }
    return buildOutput;
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/testing/it/BuildLogValidator;appendBuildStatus(StringBuilder,String);;;private void appendBuildStatus(StringBuilder sb, String buildOutput) {
    sb.append("\n\nBuild Output:\n\n");
    boolean containsError = false;
    for(String line : buildOutput.split("\n")) {
      if (line.contains("[ERROR]")) {
        containsError = true;
        sb.append("\n        ").append(line);
      }
    }
    if (!containsError) {
      sb.append("\nTEST BUILD SUCCEEDED.\n");
    }
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/ProcessorTestUtils;daggerProcessors();;;public static Iterable<? extends Processor> daggerProcessors() {
    return Arrays.asList(
        new InjectAdapterProcessor(),
        new ModuleAdapterProcessor(),
        new GraphAnalysisProcessor(),
        new ValidationProcessor());
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest;byteArray();;;@Provides byte[] byteArray() { return new byte[] { Byte.MAX_VALUE }; }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest;provideInt();;;@Provides int[] provideInt() { return new int[] { Integer.MAX_VALUE }; }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest;provideBoolean();;;@Provides boolean[] provideBoolean() { return new boolean[] { true }; }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest;provideLong();;;@Provides long[] provideLong() { return new long[] { Long.MAX_VALUE }; }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest;provideChar();;;@Provides char[] provideChar() { return new char[] { Character.MAX_VALUE }; }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest;provideFloat();;;@Provides float[] provideFloat() { return new float[] { Float.MAX_VALUE }; }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest;provideDouble();;;@Provides double[] provideDouble() { return new double[] { Double.MAX_VALUE }; }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest;primitiveArrayTypesAllInjected();;;@Test public void primitiveArrayTypesAllInjected() {
    ArrayInjectable result = ObjectGraph.create(PrimitiveArrayModule.class)
        .get(ArrayInjectable.class);
    assertThat(result).isNotNull();
    assertThat(result.byteArray).isEqualTo(new byte[] { Byte.MAX_VALUE });
    assertThat(result.integerArray).isEqualTo(new int[] { Integer.MAX_VALUE });
    assertThat(result.booleanArray).isEqualTo(new boolean[] { true });
    assertThat(result.charArray).isEqualTo(new char[] { Character.MAX_VALUE });
    assertThat(result.longArray).isEqualTo(new long[] { Long.MAX_VALUE });
    assertThat(result.floatArray).isEqualTo(new float[] { Float.MAX_VALUE });
    assertThat(result.doubleArray).isEqualTo(new double[] { Double.MAX_VALUE });
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/operation/SimpleInjectionTest;string();;;@Provides String string() { return "blah"; }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/operation/SimpleInjectionTest;string();;;@Provides String string() { return "blah"; }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/operation/SimpleInjectionTest;foo(String);;;@Provides Foo foo(String blah) {
      Foo foo = new Foo();
      foo.blah = blah;
      return foo;
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/operation/SimpleInjectionTest;memberInject_WithoutProvidesMethod();;;@Test public void memberInject_WithoutProvidesMethod() {
    Foo foo = new Foo();
    ObjectGraph.create(FooModule.class).inject(foo);
    ASSERT.that(foo.blah).equals("blah");
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/operation/SimpleInjectionTest;membersInject_WithProvidesMethod();;;@Test public void membersInject_WithProvidesMethod() {
    Foo foo = new Foo();
    ObjectGraph.create(ProvidingFooModule.class).inject(foo);
    ASSERT.that(foo.blah).equals("blah");
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/operation/SimpleInjectionTest;get_WithProvidesMethod();;;@Test public void get_WithProvidesMethod() {
    Foo foo = ObjectGraph.create(ProvidingFooModule.class).get(Foo.class);
    ASSERT.that(foo.blah).equals("blah");
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/operation/SimpleInjectionTest;membersInject_WithNonInjectable();;;@Test public void membersInject_WithNonInjectable() {
    Bar bar = new Bar();
    ObjectGraph.create(BarModule.class).inject(bar);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/operation/SimpleInjectionTest;bar();;;@Provides public Bar bar() { return new Bar(); }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/operation/SimpleInjectionTest;membersInject_WithProvidedNonInjectable();;;@Test public void membersInject_WithProvidedNonInjectable() {
    Bar bar = ObjectGraph.create(ProvidingBarModule.class).get(Bar.class);
    ASSERT.that(bar).isNotNull();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/codegen/InjectAdapterGenerationTest;basicInjectAdapter();;;@Test public void basicInjectAdapter() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Basic", Joiner.on("\n").join(
        "import dagger.Module;",
        "import javax.inject.Inject;",
        "class Basic {",
        "  static class A { @Inject A() { } }",
        "  @Module(injects = A.class)",
        "  static class AModule { }",
        "}"));

    JavaFileObject expectedModuleAdapter =
        JavaFileObjects.forSourceString("Basic$AModule$$ModuleAdapter", Joiner.on("\n").join(
            "import dagger.internal.ModuleAdapter;",
            "public final class Basic$AModule$$ModuleAdapter",
            "    extends ModuleAdapter<Basic.AModule> {",
            "  private static final String[] INJECTS = {\"members/Basic$A\"};",
            "  private static final Class<?>[] STATIC_INJECTIONS = {};",
            "  private static final Class<?>[] INCLUDES = {};",
            "  public Basic$AModule$$ModuleAdapter() {",
            "    super(Basic.AModule.class, INJECTS, STATIC_INJECTIONS, false, INCLUDES,",
            "      true, false);",
            "  }",
            "  @Override public Basic.AModule newModule() {",
            "    return new Basic.AModule();",
            "  }",
            "}"));

    JavaFileObject expectedInjectAdapter =
        JavaFileObjects.forSourceString("Basic$A$$InjectAdapter", Joiner.on("\n").join(
            "import dagger.internal.Binding;",
            "import javax.inject.Provider;",
            "public final class Basic$A$$InjectAdapter",
            "    extends Binding<Basic.A> implements Provider<Basic.A> {",
            "  public Basic$A$$InjectAdapter() {",
            "    super(\"Basic$A\", \"members/Basic$A\", NOT_SINGLETON, Basic.A.class);",
            "  }",
            "  @Override public Basic.A get() {",
            "    Basic.A result = new Basic.A();",
            "    return result;",
            "  }",
            "}"));

    ASSERT.about(javaSource()).that(sourceFile).processedWith(daggerProcessors())
        .compilesWithoutError().and()
        .generatesSources(expectedModuleAdapter, expectedInjectAdapter);

  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/codegen/ModuleAdapterGenerationTest;providerForCtorInjection();;;@Test public void providerForCtorInjection() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Field", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "import javax.inject.Inject;",
        "class Field {",
        "  static class A { final String name; @Inject A(String name) { this.name = name; }}",
        "  @Module(injects = { A.class, String.class })",
        "  static class AModule { @Provides String name() { return \"foo\"; }}",
        "}"));

    JavaFileObject expectedModuleAdapter =
        JavaFileObjects.forSourceString("Field$AModule$$ModuleAdapter", Joiner.on("\n").join(
        "import dagger.internal.BindingsGroup;",
        "import dagger.internal.ModuleAdapter;",
        "import dagger.internal.ProvidesBinding;",
        "import javax.inject.Provider;",
        "public final class Field$AModule$$ModuleAdapter",
        "    extends ModuleAdapter<Field.AModule> {",
        "  private static final String[] INJECTS = ",
        "      {\"members/Field$A\", \"members/java.lang.String\"};",
        "  private static final Class<?>[] STATIC_INJECTIONS = {};",
        "  private static final Class<?>[] INCLUDES = {};",
        "  public Field$AModule$$ModuleAdapter() {",
        "    super(Field.AModule.class, INJECTS, STATIC_INJECTIONS, false, INCLUDES, true, false);",
        "  }",
        "  @Override public Field.AModule newModule() {",
        "    return new Field.AModule();",
        "  }",
        "  @Override public void getBindings(BindingsGroup bindings, Field.AModule module) {",
        "    bindings.contributeProvidesBinding(\"java.lang.String\",",
        "        new NameProvidesAdapter(module));", // eager new!
        "  }",
        "  public static final class NameProvidesAdapter", // corresponds to method name
        "      extends ProvidesBinding<String> implements Provider<String> {",
        "    private final Field.AModule module;",
        "    public NameProvidesAdapter(Field.AModule module) {",
        "      super(\"java.lang.String\", NOT_SINGLETON, \"Field.AModule\", \"name\");",
        "      this.module = module;",
        "      setLibrary(false);",
        "    }",
        "    @Override public String get() {",
        "      return module.name();", // corresponds to @Provides method
        "    }",
        "  }",
        "}"));

    JavaFileObject expectedInjectAdapter =
        JavaFileObjects.forSourceString("Field$A$$InjectAdapter", Joiner.on("\n").join(
            "import dagger.internal.Binding;",
            "import dagger.internal.Linker;",
            "import java.util.Set;",
            "import javax.inject.Provider;",
            "public final class Field$A$$InjectAdapter",
            "    extends Binding<Field.A> implements Provider<Field.A> {",
            "  private Binding<String> name;", // for ctor
            "  public Field$A$$InjectAdapter() {",
            "    super(\"Field$A\", \"members/Field$A\", NOT_SINGLETON, Field.A.class);",
            "  }",
            "  @Override @SuppressWarnings(\"unchecked\")",
            "  public void attach(Linker linker) {",
            "    name = (Binding<String>)linker.requestBinding(", // binding key is not a class
            "      \"java.lang.String\", Field.A.class, getClass().getClassLoader());",
            "  }",
            "  @Override public void getDependencies(",
            "      Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {",
            "    getBindings.add(name);", // name is added to dependencies
            "  }",
            "  @Override public Field.A get() {",
            "    Field.A result = new Field.A(name.get());", // adds ctor param
            "    return result;",
            "  }",
            "}"));

    ASSERT.about(javaSource()).that(sourceFile).processedWith(daggerProcessors())
        .compilesWithoutError()
        .and()
        .generatesSources(expectedModuleAdapter, expectedInjectAdapter);

  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/codegen/ModuleAdapterGenerationTest;injectsMembersInjectedAndProvidedAndConstructedTypes();;;@Test public void injectsMembersInjectedAndProvidedAndConstructedTypes() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Field", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "import javax.inject.Inject;",
        "class Field {",
        "  static class A { final String name; @Inject A(String name) { this.name = name; }}",
        "  static class B { @Inject String name; }",
        "  @Module(injects = { A.class, String.class, B.class })",
        "  static class AModule { @Provides String name() { return \"foo\"; }}",
        "}"));

    JavaFileObject expectedModuleAdapter =
        JavaFileObjects.forSourceString("Field$AModule$$ModuleAdapter", Joiner.on("\n").join(
        "import dagger.internal.BindingsGroup;",
        "import dagger.internal.ModuleAdapter;",
        "import dagger.internal.ProvidesBinding;",
        "import javax.inject.Provider;",
        "public final class Field$AModule$$ModuleAdapter extends ModuleAdapter<Field.AModule> {",
        "  private static final String[] INJECTS = ",
        "      {\"members/Field$A\", \"members/java.lang.String\", \"members/Field$B\"};",
        "  private static final Class<?>[] STATIC_INJECTIONS = {};",
        "  private static final Class<?>[] INCLUDES = {};",
        "  public Field$AModule$$ModuleAdapter() {",
        "    super(Field.AModule.class, INJECTS, STATIC_INJECTIONS, false, INCLUDES, true, false);",
        "  }",
        "  @Override public Field.AModule newModule() {",
        "    return new Field.AModule();",
        "  }",
        "  @Override public void getBindings(BindingsGroup bindings, Field.AModule module) {",
        "    bindings.contributeProvidesBinding(\"java.lang.String\",",
        "        new NameProvidesAdapter(module));", // eager new!
        "  }",
        "  public static final class NameProvidesAdapter", // corresponds to method name
        "      extends ProvidesBinding<String> implements Provider<String> {",
        "    private final Field.AModule module;",
        "    public NameProvidesAdapter(Field.AModule module) {",
        "      super(\"java.lang.String\", NOT_SINGLETON, \"Field.AModule\", \"name\");",
        "      this.module = module;",
        "      setLibrary(false);",
        "    }",
        "    @Override public String get() {",
        "      return module.name();", // corresponds to @Provides method
        "    }",
        "  }",
        "}"));

    JavaFileObject expectedInjectAdapterA =
        JavaFileObjects.forSourceString("Field$A$$InjectAdapter", Joiner.on("\n").join(
            "import dagger.internal.Binding;",
            "import dagger.internal.Linker;",
            "import java.util.Set;",
            "import javax.inject.Provider;",
            "public final class Field$A$$InjectAdapter",
            "    extends Binding<Field.A> implements Provider<Field.A> {",
            "  private Binding<String> name;", // For Constructor.
            "  public Field$A$$InjectAdapter() {",
            "    super(\"Field$A\", \"members/Field$A\", NOT_SINGLETON, Field.A.class);",
            "  }",
            "  @Override @SuppressWarnings(\"unchecked\")",
            "  public void attach(Linker linker) {",
            "    name = (Binding<String>)linker.requestBinding(",
            "      \"java.lang.String\", Field.A.class, getClass().getClassLoader());",
            "  }",
            "  @Override public void getDependencies(",
            "      Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {",
            "    getBindings.add(name);", // Name is added to dependencies.
            "  }",
            "  @Override public Field.A get() {",
            "    Field.A result = new Field.A(name.get());", // Adds constructor parameter.
            "    return result;",
            "  }",
            "}"));

    JavaFileObject expectedInjectAdapterB =
        JavaFileObjects.forSourceString("Field$B$$InjectAdapter", Joiner.on("\n").join(
            "import dagger.MembersInjector;",
            "import dagger.internal.Binding;",
            "import dagger.internal.Linker;",
            "import java.util.Set;",
            "import javax.inject.Provider;",
            "public final class Field$B$$InjectAdapter",
            "    extends Binding<Field.B> implements Provider<Field.B>, MembersInjector<Field.B> {",
            "  private Binding<String> name;", // For field.
            "  public Field$B$$InjectAdapter() {",
            "    super(\"Field$B\", \"members/Field$B\", NOT_SINGLETON, Field.B.class);",
            "  }",
            "  @Override @SuppressWarnings(\"unchecked\")",
            "  public void attach(Linker linker) {",
            "    name = (Binding<String>)linker.requestBinding(",
            "      \"java.lang.String\", Field.B.class, getClass().getClassLoader());",
            "  }",
            "  @Override public void getDependencies(",
            "      Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {",
            "    injectMembersBindings.add(name);", // Name is added to dependencies.
            "  }",
            "  @Override public Field.B get() {",
            "    Field.B result = new Field.B();",
            "    injectMembers(result);",
            "    return result;",
            "  }",
            "  @Override public void injectMembers(Field.B object) {",
            "    object.name = name.get();", // Inject field.
            "  }",
            "}"));
    ASSERT.about(javaSource()).that(sourceFile).processedWith(daggerProcessors())
        .compilesWithoutError()
        .and()
        .generatesSources(expectedModuleAdapter, expectedInjectAdapterA, expectedInjectAdapterB);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/codegen/ModuleAdapterGenerationTest;providesHasParameterNamedModule();;;@Test public void providesHasParameterNamedModule() {
    JavaFileObject a = JavaFileObjects.forSourceString("A", Joiner.on("\n").join(
        "import javax.inject.Inject;",
        "class A { @Inject A(){ }}"));
    JavaFileObject b = JavaFileObjects.forSourceString("B", Joiner.on("\n").join(
        "import javax.inject.Inject;",
        "class B { @Inject B(){ }}"));

    JavaFileObject module = JavaFileObjects.forSourceString("BModule", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "import javax.inject.Inject;",
        "@Module(injects = B.class)",
        "class BModule { @Provides B b(A module) { return new B(); }}"));

    ASSERT.about(javaSources()).that(asList(a, b, module)).processedWith(daggerProcessors())
        .compilesWithoutError();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/CyclicModuleIncludesTest;cyclicModuleSelfIncludes();;;@Test public void cyclicModuleSelfIncludes() {
    ASSERT.about(javaSource()).that(javaFile).processedWith(daggerProcessors()).failsToCompile()
        .withErrorContaining("CyclicModules.SelfReferencingModule includes itself directly")
            .in(javaFile).onLine(4);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/CyclicModuleIncludesTest;cyclicModuleIncludes_full_cycle();;;@Test public void cyclicModuleIncludes_full_cycle() {
    ASSERT.about(javaSource()).that(javaFile).processedWith(daggerProcessors()).failsToCompile()
        .withErrorContaining("0. CyclicModules.Rock included by CyclicModules.Paper")
            .in(javaFile).onLine(6).and()
        .withErrorContaining("1. CyclicModules.Paper included by CyclicModules.Scissors")
            .in(javaFile).onLine(6).and()
        .withErrorContaining("2. CyclicModules.Scissors included by CyclicModules.Lizard")
            .in(javaFile).onLine(6).and()
        .withErrorContaining("3. CyclicModules.Lizard included by CyclicModules.Spock")
            .in(javaFile).onLine(6).and()
        .withErrorContaining("4. CyclicModules.Spock included by CyclicModules.Rock")
            .in(javaFile).onLine(6);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/CyclicModuleIncludesTest;cyclicModuleIncludes_initial_inclusion();;;@Test public void cyclicModuleIncludes_initial_inclusion() {
    ASSERT.about(javaSource()).that(javaFile).processedWith(daggerProcessors()).failsToCompile()
        .withErrorContaining("0. CyclicModules.Rock included by CyclicModules.Paper")
            .in(javaFile).onLine(6).and()
        .withErrorContaining("0. CyclicModules.Paper included by CyclicModules.Scissors")
            .in(javaFile).onLine(8).and()
        .withErrorContaining("0. CyclicModules.Scissors included by CyclicModules.Lizard")
            .in(javaFile).onLine(10).and()
        .withErrorContaining("0. CyclicModules.Lizard included by CyclicModules.Spock")
            .in(javaFile).onLine(12).and()
        .withErrorContaining("0. CyclicModules.Spock included by CyclicModules.Rock")
            .in(javaFile).onLine(14);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/GeneratedTypesNotReadyTest;withstandsMissingTypeReferencedInInjects();;;@Test public void withstandsMissingTypeReferencedInInjects() {
    // TODO(cgruber): remove Foo (interface) from this when injects= analysis is fixed.
    JavaFileObject module = JavaFileObjects.forSourceString("FooModule", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "import myPackage.Foo;",
        "@Module(injects = { Main.class, myPackage.FooImpl.class })",
        "class FooModule {",
        "  @Provides Foo provideFoo(myPackage.FooImpl impl) {",
        "    return impl;",
        "  }",
        "}"));

    ASSERT.about(javaSources()).that(asList(foo, main, module))
        .processedWith(concat(asList(new FooImplGenerator()), daggerProcessors()))
        .compilesWithoutError();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/GeneratedTypesNotReadyTest;withstandsMissingTypeReferencedInsideModule();;;@Test public void withstandsMissingTypeReferencedInsideModule() {
    JavaFileObject module = JavaFileObjects.forSourceString("FooModule", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "import myPackage.Foo;",
        "@Module(injects = { Main.class })",
        "class FooModule {",
        "  @Provides Foo provideFoo(myPackage.FooImpl impl) {",
        "    return impl;",
        "  }",
        "}"));

    ASSERT.about(javaSources()).that(asList(foo, module, main))
        .processedWith(concat(daggerProcessors(), asList(new FooImplGenerator())))
        .compilesWithoutError();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/GeneratedTypesNotReadyTest;withstandsMissingTypeReferencedByProvidesReturnType();;;@Test public void withstandsMissingTypeReferencedByProvidesReturnType() {
    JavaFileObject main = JavaFileObjects.forSourceString("Main", Joiner.on("\n").join(
        "import javax.inject.Inject;",
        "class Main {",
        "  @Inject myPackage.FooImpl f;",
        "}"));
    JavaFileObject module = JavaFileObjects.forSourceString("FooModule", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "@Module(injects = { Main.class })",
        "class FooModule {",
        "  @Provides myPackage.FooImpl provideFoo() {",
        "    return new myPackage.FooImpl();",
        "  }",
        "}"));

    ASSERT.about(javaSources()).that(asList(foo, module, main))
        .processedWith(concat(daggerProcessors(), asList(new FooImplGenerator())))
        .compilesWithoutError();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/GeneratedTypesNotReadyTest;failsWhenMissingGenericTypeReferencedByProvidesReturnType();;;@Test public void failsWhenMissingGenericTypeReferencedByProvidesReturnType() {
    JavaFileObject main = JavaFileObjects.forSourceString("Main", Joiner.on("\n").join(
        "import javax.inject.Inject;",
        "class Main {",
        "  @Inject myPackage.FooImpl2<String> f;",
        "}"));
    JavaFileObject module = JavaFileObjects.forSourceString("FooModule", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "@Module(injects = { Main.class })",
        "class FooModule {",
        "  @Provides myPackage.FooImpl2<String> provideFoo() {",
        "    return new myPackage.FooImpl2<String>();",
        "  }",
        "}"));

    ASSERT.about(javaSources()).that(asList(foo, module, main))
        .processedWith(new FooImplGenerator())
        .compilesWithoutError();
    ASSERT.about(javaSources()).that(asList(foo, module, main))
        .processedWith(concat(daggerProcessors(), asList(new FooImplGenerator())))
        .failsToCompile()
        .withErrorContaining("Could not find types required by provides methods for [FooModule]");
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/GeneratedTypesNotReadyTest;withstandsMissingTypeReferencedInTransitiveJITDependency();;;@Test public void withstandsMissingTypeReferencedInTransitiveJITDependency() {
    JavaFileObject main = JavaFileObjects.forSourceString("Main", Joiner.on("\n").join(
        "import javax.inject.Inject;",
        "import myPackage.FooImpl;",
        "class Main {",
        "  @Inject FooImpl f;",
        "}"));
    JavaFileObject module = JavaFileObjects.forSourceString("FooModule", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "@Module(injects = { Main.class })",
        "class FooModule {",
        "}"));

    ASSERT.about(javaSources()).that(asList(foo, module, main))
        .processedWith(concat(daggerProcessors(), asList(new FooImplGenerator())))
        .compilesWithoutError();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/GeneratedTypesNotReadyTest;verifyFooImplGeneratorIsCompilingWithoutDagger();;;@Test public void verifyFooImplGeneratorIsCompilingWithoutDagger() {
    JavaFileObject module = JavaFileObjects.forSourceString("FooModule", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "import myPackage.Foo;",
        "@Module(injects = { Main.class })",
        "class FooModule {",
        "  @Provides Foo provideFoo(myPackage.FooImpl impl) {",
        "    return impl;",
        "  }",
        "}"));
    ASSERT.about(javaSources()).that(asList(foo, module, main))
        .processedWith(new FooImplGenerator())
        .compilesWithoutError();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/GeneratedTypesNotReadyTest;process(Set<?extendsTypeElement>,RoundEnvironment);;;@Override public boolean process(Set<? extends TypeElement> na1, RoundEnvironment na2) {
      if (!written) {
        try {
          JavaFileObject sourceFile = processingEnv.getFiler().createSourceFile("FooImpl");
          Writer writer = sourceFile.openWriter();
          writer.write(Joiner.on("\n").join(
              "package myPackage;",
              "import javax.inject.Inject;",
              "public final class FooImpl implements Foo {",
              "  @Inject public FooImpl() { }",
              "}"));
          writer.close();
          sourceFile = processingEnv.getFiler().createSourceFile("FooImpl2");
          writer = sourceFile.openWriter();
          writer.write(Joiner.on("\n").join(
              "package myPackage;",
              "import javax.inject.Inject;",
              "public final class FooImpl2<T> implements Foo {",
              "  @Inject public FooImpl2() { }",
              "}"));
          writer.close();
          written = true;
        } catch (IOException e) {
          throw new RuntimeException(e);
        }
      }
      return false;
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/GeneratedTypesNotReadyTest;getSupportedSourceVersion();;;@Override public SourceVersion getSupportedSourceVersion() {
      return SourceVersion.latestSupported();
    }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/LibraryModuleTest;unusedProviderMethodsPassOnLibrary();;;@Test public void unusedProviderMethodsPassOnLibrary() {
    JavaFileObject source = JavaFileObjects.forSourceString("Library", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "import java.lang.Override;",
        "@Module(library = true)",
        "class TestModule {",
        "  @Provides String string() {",
        "    return \"string\";",
        "  }",
        "}"));
    ASSERT.about(javaSource())
        .that(source).processedWith(daggerProcessors()).compilesWithoutError();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/LibraryModuleTest;unusedProviderMethodsFailOnNonLibrary();;;@Test public void unusedProviderMethodsFailOnNonLibrary() {
    JavaFileObject source = JavaFileObjects.forSourceString("Library", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "import java.lang.Override;",
        "@Module(library = false)",
        "class TestModule {",
        "  @Provides String string() {",
        "    return \"string\";",
        "  }",
        "}"));
    ASSERT.about(javaSource()).that(source).processedWith(daggerProcessors()).failsToCompile()
        .withErrorContaining("Graph validation failed:").in(source).onLine(5).and()
        .withErrorContaining("You have these unused @Provider methods:").in(source).onLine(5).and()
        .withErrorContaining("1. TestModule.string()").in(source).onLine(5).and()
        .withErrorContaining("Set library=true in your module").in(source).onLine(5);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/LibraryModuleTest;injectsOfInterfaceMakesProvidesBindingNotAnOrphan();;;@Test public void injectsOfInterfaceMakesProvidesBindingNotAnOrphan() {
    JavaFileObject foo = JavaFileObjects.forSourceString("Foo", "interface Foo {}");
    JavaFileObject module = JavaFileObjects.forSourceString("TestModule", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "import javax.inject.Singleton;",
        "@Module(injects = Foo.class, library = false)",
        "class TestModule {",
        "  @Singleton @Provides Foo provideFoo() {",
        "    return new Foo() {};",
        "  }",
        "}"));
    ASSERT.about(javaSources()).that(Arrays.asList(foo, module))
        .processedWith(daggerProcessors())
        .compilesWithoutError();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/LibraryModuleTest;injectsOfClassMakesProvidesBindingNotAnOrphan();;;@Test public void injectsOfClassMakesProvidesBindingNotAnOrphan() {
    JavaFileObject foo = JavaFileObjects.forSourceString("Foo", "class Foo {}");
    JavaFileObject module = JavaFileObjects.forSourceString("TestModule", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "import javax.inject.Singleton;",
        "@Module(injects = Foo.class, library = false)",
        "class TestModule {",
        "  @Singleton @Provides Foo provideFoo() {",
        "    return new Foo() {};",
        "  }",
        "}"));
    ASSERT.about(javaSources()).that(Arrays.asList(foo, module))
        .processedWith(daggerProcessors())
        .compilesWithoutError();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/ScopeAnnotationUseTest;compileSucceedsScopeOnConcreteType();;;@Test public void compileSucceedsScopeOnConcreteType() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Test", Joiner.on("\n").join(
        "import javax.inject.Inject;",
        "import javax.inject.Singleton;",
        "@Singleton",
        "class Test {",
        "  @Inject public Test() { }",
        "}"));

    // TODO(cgruber): uncomment when http://github.com/google/compile-testing has hasNoWarnings()
    ASSERT.about(javaSource())
        .that(sourceFile).processedWith(daggerProcessors()).compilesWithoutError();
        //.and().hasNoWarnings();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/ScopeAnnotationUseTest;compileSucceedsScopeOnProvidesMethod();;;@Test public void compileSucceedsScopeOnProvidesMethod() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Test", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "import javax.inject.Singleton;",
        "@Module(library = true, injects = String.class)",
        "class Test {",
        "  @Provides @Singleton public String provideString() { return \"\"; }",
        "}"));

    // TODO(cgruber): uncomment when http://github.com/google/compile-testing has hasNoWarnings()
    ASSERT.about(javaSource())
        .that(sourceFile).processedWith(daggerProcessors()).compilesWithoutError();
        //.and().hasNoWarnings();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/ScopeAnnotationUseTest;compileSucceedsWithScopedSuppressedNonProvidesMethod();;;@Test public void compileSucceedsWithScopedSuppressedNonProvidesMethod() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Test", Joiner.on("\n").join(
        "import javax.inject.Singleton;",
        "class Test {",
        "  @SuppressWarnings(\"scoping\")",
        "  @Singleton void method() { }",
        "}"));

    // TODO(cgruber): uncomment when http://github.com/google/compile-testing has hasNoWarnings()
    ASSERT.about(javaSource())
        .that(sourceFile).processedWith(daggerProcessors()).compilesWithoutError();
        //.and().hasNoWarnings();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/ScopeAnnotationUseTest;compileSucceedsWithScopedMultiplySuppressedNonProvidesMethod();;;@Test public void compileSucceedsWithScopedMultiplySuppressedNonProvidesMethod() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Test", Joiner.on("\n").join(
        "import javax.inject.Singleton;",
        "class Test {",
        "  @SuppressWarnings({\"blah\", \"scoping\", \"foo\"})",
        "  @Singleton void method() { }",
        "}"));

    // TODO(cgruber): uncomment when http://github.com/google/compile-testing has hasNoWarnings()
    ASSERT.about(javaSource())
        .that(sourceFile).processedWith(daggerProcessors()).compilesWithoutError();
        //.and().hasNoWarnings();
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/ScopeAnnotationUseTest;compileWarnsWithScopedNonProvidesMethod();;;@Test public void compileWarnsWithScopedNonProvidesMethod() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Test", Joiner.on("\n").join(
        "import javax.inject.Singleton;",
        "class Test {",
        "  @Singleton void method() { }",
        "}"));

    // TODO(cgruber): uncomment when http://github.com/google/compile-testing supports warnings.
    ASSERT.about(javaSource())
        .that(sourceFile).processedWith(daggerProcessors()).compilesWithoutError();
        //.withWarningContaining(MISUSED_SCOPE_TEXT).in(sourceFile).onLine(3).atColumn(49).and()
        //.withWarningContaining("Test.method()").in(sourceFile).onLine(3).atColumn(49);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/ScopeAnnotationUseTest;compileWarnsWithScopedIncorrectlySuppressedNonProvidesMethod();;;@Test public void compileWarnsWithScopedIncorrectlySuppressedNonProvidesMethod() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Test", Joiner.on("\n").join(
        "import javax.inject.Singleton;",
        "class Test {",
        "  @SuppressWarnings(\"some string other than 'scoping'\")",
        "  @Singleton void method() { }",
        "}"));

    // TODO(cgruber): uncomment when http://github.com/google/compile-testing supports warnings.
    ASSERT.about(javaSource())
        .that(sourceFile).processedWith(daggerProcessors()).compilesWithoutError();
        //.withWarningContaining(MISUSED_SCOPE_TEXT).in(sourceFile).onLine(4).atColumn(49).and()
        //.withWarningContaining("Test.method()").in(sourceFile).onLine(4).atColumn(49);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/ScopeAnnotationUseTest;compileFailsWithScopeOnInterface();;;@Test public void compileFailsWithScopeOnInterface() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Test", Joiner.on("\n").join(
        "import dagger.Module;",
        "import javax.inject.Singleton;",
        "class Test {",
        "  @Module(injects = TestType.class) class TestModule { }",
        "  @Singleton interface TestType { }",
        "}"));

    ASSERT.about(javaSource())
        .that(sourceFile).processedWith(daggerProcessors()).failsToCompile()
        .withErrorContaining(ABSTRACTION_SCOPING_TEXT).in(sourceFile).onLine(5).atColumn(14).and()
        .withErrorContaining("Test.TestType").in(sourceFile).onLine(5).atColumn(14);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/ScopeAnnotationUseTest;compileFailsWithScopeOnAbstractClass();;;@Test public void compileFailsWithScopeOnAbstractClass() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Test", Joiner.on("\n").join(
        "import dagger.Module;",
        "import javax.inject.Singleton;",
        "class Test {",
        "  @Module(injects = TestType.class) class TestModule { }",
        "  @Singleton abstract class TestType { }",
        "}"));

    ASSERT.about(javaSource())
        .that(sourceFile).processedWith(daggerProcessors()).failsToCompile()
        .withErrorContaining(ABSTRACTION_SCOPING_TEXT).in(sourceFile).onLine(5).atColumn(23).and()
        .withErrorContaining("Test.TestType").in(sourceFile).onLine(5).atColumn(23);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/ScopeAnnotationUseTest;compileFailsWithScopeOnField();;;@Test public void compileFailsWithScopeOnField() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Test", Joiner.on("\n").join(
        "import dagger.Module;",
        "import javax.inject.Inject;",
        "import javax.inject.Singleton;",
        "class Test {",
        "  @Singleton String field;",
        "  @Inject public Test() { }",
        "  @Module(injects = Test.class) class TestModule { }",
        "}"));

    ASSERT.about(javaSource())
        .that(sourceFile).processedWith(daggerProcessors()).failsToCompile()
        .withErrorContaining(ABSTRACTION_SCOPING_TEXT).in(sourceFile).onLine(5).atColumn(21).and()
        .withErrorContaining("Test.field").in(sourceFile).onLine(5).atColumn(21);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/ScopeAnnotationUseTest;compileFailsWithScopeOnMethodParameter();;;@Test public void compileFailsWithScopeOnMethodParameter() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Test", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "import javax.inject.Singleton;",
        "@Module(library = true, injects = String.class)",
        "class Test {",
        "  @Provides int provideInteger() { return 0; }",
        "  @Provides String provideString(@Singleton int intParam) { return \"\"; }",
        "}"));

    ASSERT.about(javaSource())
        .that(sourceFile).processedWith(daggerProcessors()).failsToCompile()
        .withErrorContaining(ABSTRACTION_SCOPING_TEXT).in(sourceFile).onLine(7).atColumn(49).and()
        .withErrorContaining("intParam").in(sourceFile).onLine(7).atColumn(49);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/ScopeAnnotationUseTest;compileFailsWithMultipleScopeAnnotations();;;@Test public void compileFailsWithMultipleScopeAnnotations() {
    JavaFileObject annotation = JavaFileObjects.forSourceString("MyScope", Joiner.on("\n").join(
        "import java.lang.annotation.Retention;",
        "import javax.inject.Scope;",
        "import static java.lang.annotation.RetentionPolicy.RUNTIME;",
        "@Scope @Retention(RUNTIME) public @interface MyScope { }"));

    JavaFileObject module = JavaFileObjects.forSourceString("MyModule", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "import javax.inject.Singleton;",
        "@Module(library = true, injects = Injectable.class)",
        "class MyModule {",
        "  @Provides @Singleton @MyScope String method() { return \"\"; }",
        "}"));

    JavaFileObject injectable = JavaFileObjects.forSourceString("Test", Joiner.on("\n").join(
        "import javax.inject.Inject;",
        "import javax.inject.Singleton;",
        "@Singleton @MyScope",
        "class Injectable {",
        "  @Inject String string;",
        "}"));

    String error = "Only one scoping annotation is allowed per element: ";

    ASSERT.about(javaSources()).that(asList(annotation, module, injectable))
        .processedWith(daggerProcessors()).failsToCompile()
        .withErrorContaining(error + "MyModule.method()").in(module).onLine(6).atColumn(40).and()
        .withErrorContaining(error + "Injectable").in(injectable).onLine(4).atColumn(1);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/ScopeAnnotationUseTest;compileFailsWithScopeOnConstructor();;;@Test public void compileFailsWithScopeOnConstructor() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("Test", Joiner.on("\n").join(
        "import dagger.Module;",
        "import javax.inject.Inject;",
        "import javax.inject.Singleton;",
        "class Test {",
        "  @Singleton @Inject public Test() { }",
        "  @Module(injects = Test.class) class TestModule { }",
        "}"));

   String singletonErrorText = ""
        + "Singleton annotations have no effect on constructors. "
        + "Did you mean to annotate the class?";

    ASSERT.about(javaSource())
        .that(sourceFile).processedWith(daggerProcessors()).failsToCompile()
        .withErrorContaining(ABSTRACTION_SCOPING_TEXT).in(sourceFile).onLine(5).atColumn(29).and()
        .withErrorContaining("Test.Test()").in(sourceFile).onLine(5).atColumn(29).and()
        .withErrorContaining(singletonErrorText).in(sourceFile).onLine(6).atColumn(33);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/SimpleMissingDependencyTest;missingDependency();;;@Test public void missingDependency() {
    JavaFileObject file = JavaFileObjects.forSourceString("MissingDep", Joiner.on("\n").join(
        "import dagger.Module;",
        "import javax.inject.Inject;",
        "class MissingDep {",
        "  @Inject Dependency dep;",
        "  static interface Dependency {",
        "    void doit();",
        "  }",
        "  @Module(injects = MissingDep.class)",
        "  static class DaModule {",
        "    /* missing */ // @Provides Dependency a() { return new Dependency(); }",
        "  }",
        "}"));

    ASSERT.about(javaSource())
        .that(file).processedWith(daggerProcessors())
        .failsToCompile()
        .withErrorContaining("MissingDep$Dependency could not be bound").in(file).onLine(9).and()
        .withErrorContaining("required by MissingDep for MissingDep.DaModule").in(file).onLine(9);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/CyclicDependencyTest;cyclicDepsWithInjectables();;;@Test public void cyclicDepsWithInjectables() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("CyclicDeps", Joiner.on("\n").join(
        "import dagger.Module;",
        "import javax.inject.Inject;",
        "class CyclicDeps {",
        "  static class Foo {",
        "    @Inject Foo(Bar b) { }",
        "  }",
        "  static class Bar {",
        "    @Inject Bar(Blah b) { }",
        "  }",
        "  static class Blah {",
        "    @Inject Blah(Foo f) { }",
        "  }",
        "  static class EntryPoint {",
        "    @Inject Foo f;",
        "  }",
        "  @Module(injects = EntryPoint.class)",
        "  static class TestModule { }",
        "}"));

    ASSERT.about(javaSource()).that(sourceFile).processedWith(daggerProcessors()).failsToCompile()
        .withErrorContaining("0. CyclicDeps$Foo bound by").in(sourceFile).onLine(17).and()
        .withErrorContaining("1. CyclicDeps$Bar bound by").in(sourceFile).onLine(17).and()
        .withErrorContaining("2. CyclicDeps$Blah bound by").in(sourceFile).onLine(17);
  }
/home/paper219/Desktop/analysis/demonstration//projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e;/compiler/src/test/java/dagger/tests/integration/validation/CyclicDependencyTest;cyclicDepsWithProvidesMethods();;;@Test public void cyclicDepsWithProvidesMethods() {
    JavaFileObject sourceFile = JavaFileObjects.forSourceString("CyclicDeps", Joiner.on("\n").join(
        "import dagger.Module;",
        "import dagger.Provides;",
        "class CyclicDeps {",
        "  static class A { }",
        "  static class B { }",
        "  static class C { }",
        "  static class D { }",
        "  @Module(injects = D.class)",
        "  static class CyclicModule {",
        "    @Provides A a(D d) { return null; }",
        "    @Provides B b(A a) { return null; }",
        "    @Provides C c(B b) { return null; }",
        "    @Provides D d(C c) { return null; }",
        "  }",
        "}"));

    ASSERT.about(javaSource()).that(sourceFile).processedWith(daggerProcessors()).failsToCompile()
        .withErrorContaining("0. CyclicDeps$A bound by Provides").in(sourceFile).onLine(9).and()
        .withErrorContaining("1. CyclicDeps$D bound by Provides").in(sourceFile).onLine(9).and()
        .withErrorContaining("2. CyclicDeps$C bound by Provides").in(sourceFile).onLine(9).and()
        .withErrorContaining("3. CyclicDeps$B bound by Provides").in(sourceFile).onLine(9);
  }
/home/paper219/Desktop/analysis/demonstration//projects/volley/revisions/rev_46741f2_07e780c/rev_46741f2-07e780c;/src/main/java/com/android/volley/toolbox/ImageLoader;get(String,ImageListener,int,int);;;public ImageContainer get(String requestUrl, ImageListener imageListener,
            int maxWidth, int maxHeight) {
        return get(requestUrl, imageListener, maxWidth, maxHeight, ScaleType.CENTER_INSIDE);
    }
/home/paper219/Desktop/analysis/demonstration//projects/volley/revisions/rev_0d6df2e_331e52b/rev_0d6df2e-331e52b;/src/test/java/com/android/volley/toolbox/ImageRequestTest;publicMethods();;;        assertEquals(ImageRequest.DEFAULT_IMAGE_TIMEOUT_MS, 1000);
        assertEquals(ImageRequest.DEFAULT_IMAGE_MAX_RETRIES, 2);
        assertEquals(ImageRequest.DEFAULT_IMAGE_BACKOFF_MULT, 2f);
