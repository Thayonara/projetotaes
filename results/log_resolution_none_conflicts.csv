/home/paper219/Desktop/analysis/demonstration/projects/BottomBar/revisions/rev_9f16fe4_dbbaa12/rev_9f16fe4-dbbaa12/bottom-bar/src/main/java/com/roughike/bottombar/BottomBar.java;<<<<<<< MINE
        mScreenWidth = MiscUtils.getScreenWidth(mContext);
        mTwoDp = MiscUtils.dpToPixel(mContext, 2);
        mTenDp = MiscUtils.dpToPixel(mContext, 10);
        mMaxFixedItemWidth = MiscUtils.dpToPixel(mContext, 168);
=======
        mPrimaryColor = MiscUtils.getColor(getContext(), R.attr.colorPrimary);
        mInActiveColor = ContextCompat.getColor(getContext(), R.color.bb_inActiveBottomBarItemColor);
        mWhiteColor = ContextCompat.getColor(getContext(), R.color.white);

        mTwoDp = MiscUtils.dpToPixel(getContext(), 2);
        mTenDp = MiscUtils.dpToPixel(getContext(), 10);
        mMaxFixedItemWidth = MiscUtils.dpToPixel(getContext(), 168);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/BottomBar/revisions/rev_9f16fe4_dbbaa12/rev_9f16fe4-dbbaa12/bottom-bar/src/main/java/com/roughike/bottombar/BottomBar.java;<<<<<<< MINE

        mRootView = (RelativeLayout) View.inflate(mContext,
                R.layout.bb_bottom_bar_item_container, null);

        mIsTabletMode = mRootView.findViewById(R.id.bb_tablet_right_border) != null;
        mUserContentContainer = (FrameLayout) mRootView.findViewById(R.id.bb_user_content_container);
        mItemContainer = (LinearLayout) mRootView.findViewById(R.id.bb_bottom_bar_item_container);

        addView(mRootView, params);
    }

    protected FrameLayout getUserContainer() {
        return mUserContentContainer;
    }

    /**
     * Bind the BottomBar to your Activity, and inflate your layout here.
     * <p/>
     * Remember to also call {@link #onRestoreInstanceState(Bundle)} inside
     * of your {@link Activity#onSaveInstanceState(Bundle)} to restore the state.
     *
     * @param activity           an Activity to attach to.
     * @param savedInstanceState a Bundle for restoring the state on configuration change.
     * @return a BottomBar at the bottom of the screen.
     */
    public static BottomBar attach(Activity activity, Bundle savedInstanceState) {
        BottomBar bottomBar = new BottomBar(activity);
        bottomBar.onRestoreInstanceState(savedInstanceState);

        ViewGroup contentView = (ViewGroup) activity.findViewById(android.R.id.content);
        View oldLayout = contentView.getChildAt(0);
        contentView.removeView(oldLayout);

        bottomBar.getUserContainer()
                .addView(oldLayout, oldLayout.getLayoutParams());
        contentView.addView(bottomBar, 0);

        return bottomBar;
    }

    /**
     * Bind the BottomBar to the specified View's parent, and inflate
     * your layout there. Useful when the BottomBar overlaps some content
     * that shouldn't be overlapped.
     * <p/>
     * Remember to also call {@link #onRestoreInstanceState(Bundle)} inside
     * of your {@link Activity#onSaveInstanceState(Bundle)} to restore the state.
     *
     * @param view               a View, which parent we're going to attach to.
     * @param savedInstanceState a Bundle for restoring the state on configuration change.
     * @return a BottomBar at the bottom of the screen.
     */
    public static BottomBar attach(View view, Bundle savedInstanceState) {
        BottomBar bottomBar = new BottomBar(view.getContext());
        bottomBar.onRestoreInstanceState(savedInstanceState);

        ViewGroup contentView = (ViewGroup) view.getParent();

        if (contentView != null) {
            View oldLayout = contentView.getChildAt(0);
            contentView.removeView(oldLayout);

            bottomBar.getUserContainer()
                    .addView(oldLayout, oldLayout.getLayoutParams());
            contentView.addView(bottomBar, 0);
        } else {
            bottomBar.getUserContainer()
                    .addView(view, view.getLayoutParams());
        }

        return bottomBar;
=======
        mItemContainer = (LinearLayout) View.inflate(getContext(), R.layout.bb_bottom_bar_item_container, null);
        addView(mItemContainer, params);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/BottomBar/revisions/rev_9f16fe4_dbbaa12/rev_9f16fe4-dbbaa12/bottom-bar/src/main/java/com/roughike/bottombar/BottomBar.java;<<<<<<< MINE
    private void onRestoreInstanceState(Bundle savedInstanceState) {
        if (savedInstanceState != null) {
            mCurrentTabPosition = savedInstanceState.getInt(STATE_CURRENT_SELECTED_TAB, -1);

            if (mCurrentTabPosition == -1) {
                mCurrentTabPosition = 0;
                Log.e("BottomBar", "You must override the Activity's onSave" +
                        "InstanceState(Bundle outState) and call BottomBar.onSaveInstanc" +
                        "eState(outState) there to restore the state properly.");
            }
        }
    }

    private void selectTab(View bottomBarView, boolean animate) {
=======
    private void selectTab(ViewGroup bottomBarView, boolean animate) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/BottomBar/revisions/rev_aa164a0_7f0c347/rev_aa164a0-7f0c347/bottom-bar/src/main/java/com/roughike/bottombar/scrollsweetness/BottomNavigationBehavior.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/BottomBar/revisions/rev_aa164a0_7f0c347/rev_aa164a0-7f0c347/bottom-bar/src/main/java/com/roughike/bottombar/scrollsweetness/BottomNavigationBehavior.java;<<<<<<< MINE
                int targetPadding = (mSnackbarHeight +  mBottomNavHeight - mDefaultOffset);
=======
                if (ViewCompat.getTranslationY(child) != 0) return;
                int targetPadding = (mSnackbarHeight + mBottomNavHeight - mDefaultOffset);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_52d21ee_0cd5aaf/rev_52d21ee-0cd5aaf/modules/swagger-oauth2-auth-server/src/main/scala/com/wordnik/swagger/auth/service/TokenScope.java;<<<<<<< MINE
  public static void setUserId(Long userId) {
    userThreadLocal.set(userId);
=======
  public static void setUsername(String username) {
    userThreadLocal.set(username);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_52d21ee_0cd5aaf/rev_52d21ee-0cd5aaf/modules/swagger-oauth2-auth-server/src/main/scala/com/wordnik/swagger/auth/service/TokenScope.java;<<<<<<< MINE
  public static Long getUsername() {
    return (Long)userThreadLocal.get();
=======
  public static String getUsername() {
    return (String)userThreadLocal.get();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_52d21ee_0cd5aaf/rev_52d21ee-0cd5aaf/modules/swagger-oauth2-auth-server/src/main/scala/com/wordnik/swagger/auth/service/TokenScope.java;<<<<<<< MINE
  public static void unsetUserId() {
=======
  public static void unsetUsername() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7d577f8_a748922/rev_7d577f8-a748922/modules/swagger-oauth2-auth-server/src/main/scala/com/wordnik/swagger/auth/service/TokenScope.java;<<<<<<< MINE
  public static void setUserId(Long userId) {
    userThreadLocal.set(userId);
=======
  public static void setUsername(String username) {
    userThreadLocal.set(username);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7d577f8_a748922/rev_7d577f8-a748922/modules/swagger-oauth2-auth-server/src/main/scala/com/wordnik/swagger/auth/service/TokenScope.java;<<<<<<< MINE
  public static Long getUserId() {
    return (Long)userThreadLocal.get();
=======
  public static String getUsername() {
    return (String)userThreadLocal.get();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_7d577f8_a748922/rev_7d577f8-a748922/modules/swagger-oauth2-auth-server/src/main/scala/com/wordnik/swagger/auth/service/TokenScope.java;<<<<<<< MINE
  public static void unsetUserId() {
=======
  public static void unsetUsername() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiResponse.java;<<<<<<< MINE
  /** Response code to describe */
  int code();

  /** Human-readable message to accompany the response */
  String message();

  /** Optional response class to describe the payload of the message */
  Class<?> response() default Void.class;
=======
    /**
     * The HTTP status code of the response.
     * <p/>
     * The value should be one of the formal <a target="_blank" href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">HTTP Status Code Definitions</a>.
     */
    int code();

    /**
     * Human-readable message to accompany the response.
     */
    String message();

    /**
     * Optional response class to describe the payload of the message.
     * <p/>
     * Corresponds to the `responseModel` field of the response message object.
     */
    Class<?> response() default Void.class;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
 * Describes an operation or typically a HTTP method against a specific path.  Operations
 * with equivalent paths are grouped in an array in the Api Declaration.  See
 * https://github.com/wordnik/swagger-core/wiki/API-Declaration
=======
 * Describes an operation or typically a HTTP method against a specific path.
 * <p/>
 * Operations with equivalent paths are grouped in an array in the Api Declaration.
 * A combination of a HTTP method and a path creates a unique operation.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
  /** Brief description of the operation  */
  String value();

  /** long description of the operation */
  String notes() default "";

  /** default response class from the operation */
  Class<?> response() default Void.class;

  /** if the response class is within a container, specify it here */
  String responseContainer() default "";

  /** currently not implemented in readers, reserved for future use */
  String tags() default "";

  /** the HTTP method, i.e GET, PUT, POST, DELETE, PATCH, OPTIONS */
  String httpMethod() default "";

  /** allow explicit ordering of operations inside the Api Declaration */
  int position() default 0;

  /** the nickname for the operation, to override what is detected by the annotation scanner */
  String nickname() default "";
  
  /** content type produced by this Api */
  String produces() default "";

  /** media type consumed by this Api */
  String consumes() default "";

  /** protocols that this Api requires (i.e. https) */
  String protocols() default "";

  /** authorizations required by this Api */
  //String authorizations() default "";

  /** authorizations required by this Api */
  Authorization[] authorizations() default @Authorization("");

  /**
   * Allows an operation to be marked as hidden
   */
  boolean hidden() default false;
=======
    /**
     * Corresponds to the `summary` field of the operation.
     * <p/>
     * Provides a brief description of this operation. Should be 120 characters or less
     * for proper visibility in Swagger-UI.
     */
    String value();

    /**
     * Corresponds to the 'notes' field of the operation.
     * <p/>
     * A verbose description of the operation.
     */
    String notes() default "";

    /**
     * The response type of the operation.
     * <p/>
     * In JAX-RS applications, the return type of the method would automatically be used, unless it is
     * {@code javax.ws.rs.core.Response}. In that case, the operation return type would default to `void`
     * as the actual response type cannot be known.
     * <p/>
     * Setting this property would override any automatically-derived data type.
     * <p/>
     * If the value used is a class representing a primitive ({@code Integer}, {@code Long}, ...)
     * the corresponding primitive type will be used.
     */
    Class<?> response() default Void.class;

    /**
     * Notes whether the response type is a list of values.
     * <p/>
     * Valid values are "List", "Array" and "Set". "List" and "Array" are regular lists (no
     * difference between them), and "Set" means the list contains unique values only.
     * <p/>
     * Any other value will be ignored.
     */
    String responseContainer() default "";

    /**
     * Currently not implemented in readers, reserved for future use.
     */
    String tags() default "";

    /**
     * Corresponds to the `method` field as the HTTP method used.
     * <p/>
     * If not stated, in JAX-RS applications, the following JAX-RS annotations would be scanned
     * and used: {@code @GET}, {@code @HEAD}, {@code @POST}, {@code @PUT}, {@code @DELETE} and {@code @OPTIONS}.
     * Note that even though not part of the JAX-RS specification, if you create and use the {@code @PATCH} annotation,
     * it will also be parsed and used. If the httpMethod property is set, it will override the JAX-RS annotation.
     * <p/>
     * For Servlets, you must specify the HTTP method manually.
     * <p/>
     * Acceptable values are "GET", "HEAD", "POST", "PUT", "DELETE", "OPTIONS" and "PATCH".
     */
    String httpMethod() default "";

    /**
     * Optional explicit ordering of this API resource in the Resource Listing.
     */
    int position() default 0;

    /**
     * Corresponds to the `nickname` field.
     * <p/>
     * The nickname field is used by third-party tools to uniquely identify this operation. In JAX-RS environemnt, this
     * would default to the method name, but can be overridden.
     * <p/>
     * For Servlets, you must specify this field.
     */
    String nickname() default "";

    /**
     * Corresponds to the `produces` field of the operation.
     * <p/>
     * Takes in comma-separated values of content types.
     * For example, "application/json, application/xml" would suggest this API Resource
     * generates JSON and XML output.
     * <p/>
     * For JAX-RS resources, this would automatically take the value of the {@code @Produces}
     * annotation if such exists. It can also be used to override the {@code @Produces} values
     * for the Swagger documentation.
     */
    String produces() default "";

    /**
     * Corresponds to the `consumes` field of the operation.
     * <p/>
     * Takes in comma-separated values of content types.
     * For example, "application/json, application/xml" would suggest this API Resource
     * accepts JSON and XML input.
     * <p/>
     * For JAX-RS resources, this would automatically take the value of the {@code @Consumes}
     * annotation if such exists. It can also be used to override the {@code @Consumes} values
     * for the Swagger documentation.
     */
    String consumes() default "";

    /**
     * This property is currently not in use.
     */
    String protocols() default "";

    /**
     * Corresponds to the `authorizations` field of the operation.
     * <p/>
     * Takes in a list of the required authorizations for this operation.
     *
     * @see Authorization
     */
    Authorization[] authorizations() default @Authorization("");

    /**
     * Hides the operation from the list of operations.
     */
    boolean hidden() default false;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
  /** Provide a human readable synopsis of this property */
  String value() default "";

  /**
   * If the values that can be set are restricted, they can be set here. In the form of a comma separated list
   * <code>registered, active, closed</code>.
   *
   * @return the allowable values
   */
  String allowableValues() default "";

  /** 
   * specify an optional access value for filtering in a Filter 
   * implementation.  This
   * allows you to hide certain parameters if a user doesn't have access to them
   */
  String access() default "";

  /** long description of the property */
  String notes() default "";

  /**
   * The dataType. See the documentation for the supported datatypes. If the data type is a custom object, set
   * it's name, or nothing. In case of an enum use 'string' and allowableValues for the enum constants.
   */
  String dataType() default "";

  /**
   * Whether or not the property is required, defaults to false.
   * 
   * @return true if required, false otherwise
   */
  boolean required() default false;

  /**
   * allows explicitly ordering the property in the model.  Since reflection has no guarantee on
   * ordering, you should specify property order to keep models consistent across different VM implementations and versions.
   */
  int position() default 0;
  
  /**
   * Allows a model property to be marked as hidden in the swagger model definition
   */
  boolean hidden() default false;
=======
    /**
     * A brief description of this property.
     */
    String value() default "";

    /**
     * Limits the acceptable values for this property.
     * <p/>
     * There are three ways to describe the allowable values:
     * <ol>
     * <li>To set a list of values, provide a comma-separated list surrounded by square brackets.
     * For example: {@code [first, second, third]}.</li>
     * <li>To set a range of values, start the value with "range", and surrounding by square
     * brackets include the minimum and maximum values. For example: {@code range[1, 5]}.</li>
     * <li>To set a minimum/maximum value, use the same format for range but use "infinity"
     * or "-infinity" as the second value. For example, {@code range[1, infinity]} means the
     * minimum allowable value of this parameter is 1.</li>
     * </ol>
     */
    String allowableValues() default "";

    /**
     * Allows for filtering a property from the API documentation.
     *
     * @see com.wordnik.swagger.core.filter.SwaggerSpecFilter
     */
    String access() default "";

    /**
     * Currently not in use.
     */
    String notes() default "";

    /**
     * The data type of the parameter.
     * <p/>
     * This can be the class name or a primitive. The value will override the data type as read from the class
     * property.
     */
    String dataType() default "";

    /**
     * Specifies if the parameter is required or not.
     */
    boolean required() default false;

    /**
     * Allows explicitly ordering the property in the model.
     */
    int position() default 0;

    /**
     * Allows a model property to be hidden in the Swagger model definition.
     */
    boolean hidden() default false;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
 * Represents a single parameter in an Api Operation.  A parameter is an input
 * to the operation.  The difference with the ApiImplicitParam is that they are
 * not bound to a variable, and allow for more manually-defined descriptions.
=======
 * Represents a single parameter in an API Operation.
 * <p/>
 * While {@link com.wordnik.swagger.annotations.ApiParam} is bound to a JAX-RS parameter,
 * method or field, this allows you to manually define a parameter in a fine-tuned manner.
 * This is the only way to define parameters when using Servlets or other non-JAX-RS
 * environments.
 * <p/>
 * This annotation must be used as a value of {@link com.wordnik.swagger.annotations.ApiImplicitParams}
 * in order to be parsed.
 *
 * @see com.wordnik.swagger.annotations.ApiImplicitParams
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
  /** Name of the parameter */
  String name() default "";

  /** Description of the parameter */
  String value() default "";

  /** Default value  - if e.g. no JAX-RS @DefaultValue is given */
  String defaultValue() default "";

  /** Description of values this endpoint accepts */
  String allowableValues() default "";

  /** specifies if the parameter is required or not */
  boolean required() default false;

  /** 
   * specify an optional access value for filtering in a Filter 
   * implementation.  This
   * allows you to hide certain parameters if a user doesn't have access to them
   */
  String access() default "";

  /** specifies whether or not the parameter can have multiple values provided */
  boolean allowMultiple() default false;

  /** manually set the dataType */
  String dataType() default "";

  /** manually set the param type, i.e. query, path, etc. */
  String paramType() default "";
=======
    /**
     * Name of the parameter.
     * <p/>
     * For proper Swagger functionality, follow these rules when naming your parameters based on {@link #paramType()}:
     * <ol>
     * <li>If {@code paramType} is "path", the name should be the associated section in the path.</li>
     * <li>If {@code paramType} is "body", the name should be "body".</li>
     * <li>For all other cases, the name should be the parameter name as your application expects to accept.</li>
     * </ol>
     *
     * @see #paramType()
     */
    String name() default "";

    /**
     * A brief description of the parameter.
     */
    String value() default "";

    /**
     * Describes the default value for the parameter.
     */
    String defaultValue() default "";

    /**
     * Limits the acceptable values for this parameter.
     * <p/>
     * There are three ways to describe the allowable values:
     * <ol>
     * <li>To set a list of values, provide a comma-separated list surrounded by square brackets.
     * For example: {@code [first, second, third]}.</li>
     * <li>To set a range of values, start the value with "range", and surrounding by square
     * brackets include the minimum and maximum values. For example: {@code range[1, 5]}.</li>
     * <li>To set a minimum/maximum value, use the same format for range but use "infinity"
     * or "-infinity" as the second value. For example, {@code range[1, infinity]} means the
     * minimum allowable value of this parameter is 1.</li>
     * </ol>
     */
    String allowableValues() default "";

    /**
     * Specifies if the parameter is required or not.
     * <p/>
     * Path parameters should always be set as required.
     */
    boolean required() default false;

    /**
     * Allows for filtering a parameter from the API documentation.
     *
     * @see com.wordnik.swagger.core.filter.SwaggerSpecFilter
     */
    String access() default "";

    /**
     * Specifies whether the parameter can accept multiple comma-separated values.
     */
    boolean allowMultiple() default false;

    /**
     * The data type of the parameter.
     * <p/>
     * This can be the class name or a primitive.
     */
    String dataType() default "";

    /**
     * The parameter type of the parameter.
     *
     * Valid values are {@code path}, {@code query}, {@code body}, {@code header} or {@code form}.
     */
    String paramType() default "";
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParams.java;<<<<<<< MINE
 * A simple array wrapper to contain multiple ApiImplicitParam objects
=======
 * A wrapper to allow a list of multiple {@link com.wordnik.swagger.annotations.ApiImplicitParam} objects.
 *
 * @see com.wordnik.swagger.annotations.ApiImplicitParam
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java;<<<<<<< MINE
  /** Provide a synopsis of this class */
  String value() default "";
  /** Provide a longer description of the class */
  String description() default "";
  /** Provide a superclass for the model to allow describing inheritence */
  Class<?> parent() default Void.class;
  /** for models with a base class, a discriminator can be provided for polymorphic use cases */
  String discriminator() default "";
  Class<?>[] subTypes() default {};
=======
    /**
     * Provide an alternative name for the model.
     * <p/>
     * By default, the class name is used.
     */
    String value() default "";

    /**
     * Provide a longer description of the class.
     */
    String description() default "";

    /**
     * Provide a superclass for the model to allow describing inheritance.
     */
    Class<?> parent() default Void.class;

    /**
     * Supports model inheritance and polymorphism.
     * <p/>
     * This is the name of the field used as a discriminator. Based on this field,
     * it would be possible to assert which sub type needs to be used.
     */
    String discriminator() default "";

    /**
     * An array of the sub types inheriting from this model.
     */
    Class<?>[] subTypes() default {};
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiResponses.java;<<<<<<< MINE
 * A simple array wrapper to contain multiple ApiResponse objects
=======
 * A wrapper to allow a list of multiple {@link com.wordnik.swagger.annotations.ApiResponse} objects.
 * <p/>
 * If you need to describe a single {@link com.wordnik.swagger.annotations.ApiResponse}, you still
 * must use this annotation and wrap the {@code @ApiResponse} in an array.
 *
 * @see com.wordnik.swagger.annotations.ApiResponse
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
  /** Short description of the Api */
  String value();

  /** General description of this class */
  String description() default "";

  /** The base path that is prepended to all @Path elements. This may be an override for certain scenarios only */
  String basePath() default "";
  
  /** optional explicit ordering of this Api in the Resource Listing */  
  int position() default 0;

  /** content type produced by this Api */
  String produces() default "";

  /** media type consumed by this Api */
  String consumes() default "";

  /** protocols that this Api requires (i.e. https) */
  String protocols() default "";

  /** authorizations required by this Api */
  // String authorizations() default "";
  /** authorizations required by this Api */
  Authorization[] authorizations() default @Authorization("");
=======
    /**
     * The 'path' that is going to be used to host the API Declaration of the
     * resource.
     * <p/>
     * For JAX-RS resources, this would normally have the same value as the {@code @Path}
     * on the resource, but can be any other value as well. It will serve as the path
     * where the documentation is hosted.
     * <p/>
     * For Servlets, this path has to be the path serving the Servlet.
     * <p/>
     * If the value isn't preceded with a slash, one would be added to it.
     */
    String value();

    /**
     * Corresponds to the `description` field of the Resource Listing API operation.
     * <p/>
     * This should be a short description of the resource.
     */
    String description() default "";

    /**
     * Corresponds to the `basePath` field of the API Declaration.
     * <p/>
     * The `basePath` is derived automatically by Swagger. This property allows
     * overriding the default value if needed.
     *
     * @since 1.3.7
     */
    String basePath() default "";

    /**
     * Optional explicit ordering of this API resource in the Resource Listing.
     */
    int position() default 0;

    /**
     * Corresponds to the `produces` field of the API Declaration.
     * <p/>
     * Takes in comma-separated values of content types.
     * For example, "application/json, application/xml" would suggest this API Resource
     * generates JSON and XML output.
     * <p/>
     * For JAX-RS resources, this would automatically take the value of the {@code @Produces}
     * annotation if such exists. It can also be used to override the {@code @Produces} values
     * for the Swagger documentation.
     */
    String produces() default "";

    /**
     * Corresponds to the `consumes` field of the API Declaration.
     * <p/>
     * Takes in comma-separated values of content types.
     * For example, "application/json, application/xml" would suggest this API Resource
     * accepts JSON and XML input.
     * <p/>
     * For JAX-RS resources, this would automatically take the value of the {@code @Consumes}
     * annotation if such exists. It can also be used to override the {@code @Consumes} values
     * for the Swagger documentation.
     */
    String consumes() default "";

    /**
     * This property is currently not in use.
     */
    String protocols() default "";

    /**
     * Corresponds to the `authorizations` field of the API Declaration.
     * <p/>
     * Takes in a list of the required authorizations for this API Resource.
     * This may be overridden by specific operations.
     *
     * @see Authorization
     */
    Authorization[] authorizations() default @Authorization("");

    /**
     * Hides the api.
     *
     * @since 1.3.8
     */
    boolean hidden() default false;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Authorization.java;<<<<<<< MINE
  String value();
  AuthorizationScope[] scopes() default @AuthorizationScope(scope = "", description = "");
=======
    /**
     * The name of the authorization scheme to be used on this resource/operation.
     * <p/>
     * The name must be defined in the Resource Listing's authorization section,
     */
    String value();

    /**
     * The scopes to be used if the authorization scheme is OAuth2.
     *
     * @see com.wordnik.swagger.annotations.AuthorizationScope
     */
    AuthorizationScope[] scopes() default @AuthorizationScope(scope = "", description = "");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiParam.java;<<<<<<< MINE
 * Represents a single parameter in an Api Operation.  A parameter is an input
 * to the operation
=======
 * Adds additional meta-data for operation parameters.
 * <p/>
 * This annotation can be used only in combination of JAX-RS 1.x/2.x annotations.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiParam.java;<<<<<<< MINE
  /** Name of the parameter */
  String name() default "";

  /** Description of the parameter */
  String value() default "";

  /** Default value  - if e.g. no JAX-RS @DefaultValue is given */
  String defaultValue() default "";

  /** Description of values this endpoint accepts */
  String allowableValues() default "";

  /** specifies if the parameter is required or not */
  boolean required() default false;

  /** 
   * specify an optional access value for filtering in a Filter 
   * implementation.  This
   * allows you to hide certain parameters if a user doesn't have access to them
   */
  String access() default "";

  /** specifies whether or not the parameter can have multiple values provided */
  boolean allowMultiple() default false;
=======
    /**
     * The parameter name.
     * <p/>
     * The name of the parameter will be derived from the field/method/parameter name,
     * however you can override it.
     * <p/>
     * Body parameters will always be named "body". Path parameters will always be named
     * as the path section they represent.
     */
    String name() default "";

    /**
     * A brief description of the parameter.
     */
    String value() default "";

    /**
     * Describes the default value for the parameter.
     * <p/>
     * If the parameter is annotated with JAX-RS's {@code @DefaultValue}, that value would
     * be used, but can be overridden by setting this property.
     */
    String defaultValue() default "";

    /**
     * Limits the acceptable values for this parameter.
     * <p/>
     * If the original parameter type is an enum, the values of the enum would be translated to
     * the allowableValues. Those can be overridden by setting this property.
     * <p/>
     * There are three ways to describe the allowable values:
     * <ol>
     * <li>To set a list of values, provide a comma-separated list surrounded by square brackets.
     * For example: {@code [first, second, third]}.</li>
     * <li>To set a range of values, start the value with "range", and surrounding by square
     * brackets include the minimum and maximum values. For example: {@code range[1, 5]}.</li>
     * <li>To set a minimum/maximum value, use the same format for range but use "infinity"
     * or "-infinity" as the second value. For example, {@code range[1, infinity]} means the
     * minimum allowable value of this parameter is 1.</li>
     * </ol>
     */
    String allowableValues() default "";

    /**
     * Specifies if the parameter is required or not.
     * <p/>
     * Path parameters will always be set as required, whether you set this property or not.
     */
    boolean required() default false;

    /**
     * Allows for filtering a parameter from the API documentation.
     *
     * @see com.wordnik.swagger.core.filter.SwaggerSpecFilter
     */
    String access() default "";

    /**
     * Specifies whether the parameter can accept multiple comma-separated values.
     */
    boolean allowMultiple() default false;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/resource/OwnerResource.java;<<<<<<< MINE
@Api(value = "/owner", description = "Operations about the owners", position = 1)
=======
@Api(hidden = true, value = "/owner", description = "Operations about the owners", position = 1)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java;<<<<<<< MINE
 * A bean class used in the REST-api.
 * Suppose you have an interface
 * <code>@PUT @ApiOperation(...) void foo(FooBean fooBean)</code>, there is
 * no direct way to see what fields <code>FooBean</code> would have. This
 * annotation is meant to give a description of <code>FooBean</code> and
 * then have the fields of it be annotated with
 * <code>@ApiModelProperty</code>.
 *
 * @author Heiko W. Rupp
=======
 * Provides additional information about Swagger models.
 * <p/>
 * Classes will be introspected automatically as they are used as types in operations,
 * but you may want to manipulate the structure of the models.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_eb281d3_9fc507c/rev_eb281d3-9fc507c/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
 * describes a top-level api.  Classes with @Api annotations will
 * be included in the Resource Listing: https://github.com/wordnik/swagger-core/wiki/Resource-Listing
 * for details
=======
 * Marks a class as a Swagger resource.
 * <p/>
 * The resource affects both the root document of Swagger, the Resource
 * Listing, and the API Declaration of that specific resource.
 * <p/>
 * Swagger will only include and introspect only classes that are annotated
 * with {@code @Api} and will ignore other resources (JAX-RS endpoints, Servlets and
 * so on).
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * overriding the default value if needed.
=======
   * overriding the default value if needed.  for swagger 2.0 specifications, this
   * value is no longer supported
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_1d2404b_b5961ad/rev_1d2404b-b5961ad/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * <p/>
=======
   * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiResponse.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiResponse.java;<<<<<<< MINE
  /** Response code to describe */
  int code();

  /** Human-readable message to accompany the response */
  String message();

  /** Optional response class to describe the payload of the message */
  Class<?> response() default Void.class;

  ResponseHeader[] responseHeaders() default @ResponseHeader(name = "", response = Void.class);
=======
    /**
     * The HTTP status code of the response.
     * <p/>
     * The value should be one of the formal <a target="_blank" href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">HTTP Status Code Definitions</a>.
     */
    int code();

    /**
     * Human-readable message to accompany the response.
     */
    String message();

    /**
     * Optional response class to describe the payload of the message.
     * <p/>
     * Corresponds to the `responseModel` field of the response message object.
     */
    Class<?> response() default Void.class;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
  /** Brief description of the operation  */
  String value();

  /** long description of the operation */
  String notes() default "";

  /**
   * A list of tags for API documentation control. 
   * Tags can be used for logical grouping of operations by resources or any other qualifier.
   * 
   * @since 1.5.2
   */
  String[] tags() default "";

  /** default response class from the operation */
  Class<?> response() default Void.class;

  /** if the response class is within a container, specify it here */
  String responseContainer() default "";

  /** the HTTP method, i.e GET, PUT, POST, DELETE, PATCH, OPTIONS */
  String httpMethod() default "";

  /** allow explicit ordering of operations inside the Api Declaration */
  int position() default 0;

  /** the nickname for the operation, to override what is detected by the annotation scanner */
  String nickname() default "";
  
  /** content type produced by this Api */
  String produces() default "";

  /** media type consumed by this Api */
  String consumes() default "";

  /** protocols that this Api requires (i.e. https) */
  String protocols() default "";

  /** authorizations required by this Api */
  //String authorizations() default "";

  /** authorizations required by this Api */
  Authorization[] authorizations() default @Authorization(value = "", type = "");

  /**
   * Allows an operation to be marked as hidden
   */
  boolean hidden() default false;

  ResponseHeader[] responseHeaders() default @ResponseHeader(name = "", response = Void.class);
=======
    /**
     * Corresponds to the `summary` field of the operation.
     * <p/>
     * Provides a brief description of this operation. Should be 120 characters or less
     * for proper visibility in Swagger-UI.
     */
    String value();

    /**
     * Corresponds to the 'notes' field of the operation.
     * <p/>
     * A verbose description of the operation.
     */
    String notes() default "";

    /**
     * The response type of the operation.
     * <p/>
     * In JAX-RS applications, the return type of the method would automatically be used, unless it is
     * {@code javax.ws.rs.core.Response}. In that case, the operation return type would default to `void`
     * as the actual response type cannot be known.
     * <p/>
     * Setting this property would override any automatically-derived data type.
     * <p/>
     * If the value used is a class representing a primitive ({@code Integer}, {@code Long}, ...)
     * the corresponding primitive type will be used.
     */
    Class<?> response() default Void.class;

    /**
     * Notes whether the response type is a list of values.
     * <p/>
     * Valid values are "List", "Array" and "Set". "List" and "Array" are regular lists (no
     * difference between them), and "Set" means the list contains unique values only.
     * <p/>
     * Any other value will be ignored.
     */
    String responseContainer() default "";

    /**
     * Currently not implemented in readers, reserved for future use.
     */
    String tags() default "";

    /**
     * Corresponds to the `method` field as the HTTP method used.
     * <p/>
     * If not stated, in JAX-RS applications, the following JAX-RS annotations would be scanned
     * and used: {@code @GET}, {@code @HEAD}, {@code @POST}, {@code @PUT}, {@code @DELETE} and {@code @OPTIONS}.
     * Note that even though not part of the JAX-RS specification, if you create and use the {@code @PATCH} annotation,
     * it will also be parsed and used. If the httpMethod property is set, it will override the JAX-RS annotation.
     * <p/>
     * For Servlets, you must specify the HTTP method manually.
     * <p/>
     * Acceptable values are "GET", "HEAD", "POST", "PUT", "DELETE", "OPTIONS" and "PATCH".
     */
    String httpMethod() default "";

    /**
     * Optional explicit ordering of this API resource in the Resource Listing.
     */
    int position() default 0;

    /**
     * Corresponds to the `nickname` field.
     * <p/>
     * The nickname field is used by third-party tools to uniquely identify this operation. In JAX-RS environemnt, this
     * would default to the method name, but can be overridden.
     * <p/>
     * For Servlets, you must specify this field.
     */
    String nickname() default "";

    /**
     * Corresponds to the `produces` field of the operation.
     * <p/>
     * Takes in comma-separated values of content types.
     * For example, "application/json, application/xml" would suggest this API Resource
     * generates JSON and XML output.
     * <p/>
     * For JAX-RS resources, this would automatically take the value of the {@code @Produces}
     * annotation if such exists. It can also be used to override the {@code @Produces} values
     * for the Swagger documentation.
     */
    String produces() default "";

    /**
     * Corresponds to the `consumes` field of the operation.
     * <p/>
     * Takes in comma-separated values of content types.
     * For example, "application/json, application/xml" would suggest this API Resource
     * accepts JSON and XML input.
     * <p/>
     * For JAX-RS resources, this would automatically take the value of the {@code @Consumes}
     * annotation if such exists. It can also be used to override the {@code @Consumes} values
     * for the Swagger documentation.
     */
    String consumes() default "";

    /**
     * This property is currently not in use.
     */
    String protocols() default "";

    /**
     * Corresponds to the `authorizations` field of the operation.
     * <p/>
     * Takes in a list of the required authorizations for this operation.
     *
     * @see Authorization
     */
    Authorization[] authorizations() default @Authorization("");

    /**
     * Hides the operation from the list of operations.
     */
    boolean hidden() default false;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
  /** Provide a human readable synopsis of this property */
  String value() default "";

  /**
   * Allows overriding the name of the property
   *
   * @return the overridden property name
   */
  String name() default "";

  /**
   * If the values that can be set are restricted, they can be set here. In the form of a comma separated list
   * <code>registered, active, closed</code>.
   *
   * @return the allowable values
   */
  String allowableValues() default "";

  /** 
   * specify an optional access value for filtering in a Filter 
   * implementation.  This
   * allows you to hide certain parameters if a user doesn't have access to them
   */
  String access() default "";

  /** long description of the property */
  String notes() default "";

  /**
   * The dataType. See the documentation for the supported datatypes. If the data type is a custom object, set
   * it's name, or nothing. In case of an enum use 'string' and allowableValues for the enum constants.
   */
  String dataType() default "";

  /**
   * Whether or not the property is required, defaults to false.
   * 
   * @return true if required, false otherwise
   */
  boolean required() default false;

  /**
   * allows explicitly ordering the property in the model.  Since reflection has no guarantee on
   * ordering, you should specify property order to keep models consistent across different VM implementations and versions.
   */
  int position() default 0;
  
  /**
   * Allows a model property to be marked as hidden in the swagger model definition
   */
  boolean hidden() default false;

  /**
   * A sample value for the property
   **/
  String example() default "";

  /**
   * Allows a model property to be designated as read only
   **/
  boolean readOnly() default false;
=======
    /**
     * A brief description of this property.
     */
    String value() default "";

    /**
     * Limits the acceptable values for this property.
     * <p/>
     * There are three ways to describe the allowable values:
     * <ol>
     * <li>To set a list of values, provide a comma-separated list surrounded by square brackets.
     * For example: {@code [first, second, third]}.</li>
     * <li>To set a range of values, start the value with "range", and surrounding by square
     * brackets include the minimum and maximum values. For example: {@code range[1, 5]}.</li>
     * <li>To set a minimum/maximum value, use the same format for range but use "infinity"
     * or "-infinity" as the second value. For example, {@code range[1, infinity]} means the
     * minimum allowable value of this parameter is 1.</li>
     * </ol>
     */
    String allowableValues() default "";

    /**
     * Allows for filtering a property from the API documentation.
     *
     * @see com.wordnik.swagger.core.filter.SwaggerSpecFilter
     */
    String access() default "";

    /**
     * Currently not in use.
     */
    String notes() default "";

    /**
     * The data type of the parameter.
     * <p/>
     * This can be the class name or a primitive. The value will override the data type as read from the class
     * property.
     */
    String dataType() default "";

    /**
     * Specifies if the parameter is required or not.
     */
    boolean required() default false;

    /**
     * Allows explicitly ordering the property in the model.
     */
    int position() default 0;

    /**
     * Allows a model property to be hidden in the Swagger model definition.
     */
    boolean hidden() default false;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
 * Represents a single parameter in an API Operation.
 * <p>
 * While {@link com.wordnik.swagger.annotations.ApiParam} is bound to a JAX-RS parameter,
 * method or field, this allows you to manually define a parameter in a fine-tuned manner.
 * This is the only way to define parameters when using Servlets or other non-JAX-RS
 * environments.
 * <p>
 * This annotation must be used as a value of {@link com.wordnik.swagger.annotations.ApiImplicitParams}
 * in order to be parsed.
 *
 * @see com.wordnik.swagger.annotations.ApiImplicitParams
=======
 * Represents a single parameter in an API Operation.
 * <p/>
 * While {@link com.wordnik.swagger.annotations.ApiParam} is bound to a JAX-RS parameter,
 * method or field, this allows you to manually define a parameter in a fine-tuned manner.
 * This is the only way to define parameters when using Servlets or other non-JAX-RS
 * environments.
 * <p/>
 * This annotation must be used as a value of {@link com.wordnik.swagger.annotations.ApiImplicitParams}
 * in order to be parsed.
 *
 * @see com.wordnik.swagger.annotations.ApiImplicitParams
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
  /**
   * Name of the parameter.
   * <p>
   * For proper Swagger functionality, follow these rules when naming your parameters based on {@link #paramType()}:
   * <ol>
   * <li>If {@code paramType} is "path", the name should be the associated section in the path.</li>
   * <li>If {@code paramType} is "body", the name should be "body".</li>
   * <li>For all other cases, the name should be the parameter name as your application expects to accept.</li>
   * </ol>
   *
   * @see #paramType()
   */
  String name() default "";

  /**
   * A brief description of the parameter.
   */
  String value() default "";

  /**
   * Describes the default value for the parameter.
   */
  String defaultValue() default "";

  /**
   * Limits the acceptable values for this parameter.
   * <p>
   * There are three ways to describe the allowable values:
   * <ol>
   * <li>To set a list of values, provide a comma-separated list surrounded by square brackets.
   * For example: {@code [first, second, third]}.</li>
   * <li>To set a range of values, start the value with "range", and surrounding by square
   * brackets include the minimum and maximum values. For example: {@code range[1, 5]}.</li>
   * <li>To set a minimum/maximum value, use the same format for range but use "infinity"
   * or "-infinity" as the second value. For example, {@code range[1, infinity]} means the
   * minimum allowable value of this parameter is 1.</li>
   * </ol>
   */
  String allowableValues() default "";

  /**
   * Specifies if the parameter is required or not.
   * <p>
   * Path parameters should always be set as required.
   */
  boolean required() default false;

  /**
   * Allows for filtering a parameter from the API documentation.
   */
  String access() default "";

  /**
   * Specifies whether the parameter can accept multiple comma-separated values.
   */
  boolean allowMultiple() default false;

  /**
   * The data type of the parameter.
   * <p>
   * This can be the class name or a primitive.
   */
  String dataType() default "";

  /**
   * The parameter type of the parameter.
   *
   * Valid values are {@code path}, {@code query}, {@code body}, {@code header} or {@code form}.
   */
  String paramType() default "";
=======
    /**
     * Name of the parameter.
     * <p/>
     * For proper Swagger functionality, follow these rules when naming your parameters based on {@link #paramType()}:
     * <ol>
     * <li>If {@code paramType} is "path", the name should be the associated section in the path.</li>
     * <li>If {@code paramType} is "body", the name should be "body".</li>
     * <li>For all other cases, the name should be the parameter name as your application expects to accept.</li>
     * </ol>
     *
     * @see #paramType()
     */
    String name() default "";

    /**
     * A brief description of the parameter.
     */
    String value() default "";

    /**
     * Describes the default value for the parameter.
     */
    String defaultValue() default "";

    /**
     * Limits the acceptable values for this parameter.
     * <p/>
     * There are three ways to describe the allowable values:
     * <ol>
     * <li>To set a list of values, provide a comma-separated list surrounded by square brackets.
     * For example: {@code [first, second, third]}.</li>
     * <li>To set a range of values, start the value with "range", and surrounding by square
     * brackets include the minimum and maximum values. For example: {@code range[1, 5]}.</li>
     * <li>To set a minimum/maximum value, use the same format for range but use "infinity"
     * or "-infinity" as the second value. For example, {@code range[1, infinity]} means the
     * minimum allowable value of this parameter is 1.</li>
     * </ol>
     */
    String allowableValues() default "";

    /**
     * Specifies if the parameter is required or not.
     * <p/>
     * Path parameters should always be set as required.
     */
    boolean required() default false;

    /**
     * Allows for filtering a parameter from the API documentation.
     *
     * @see com.wordnik.swagger.core.filter.SwaggerSpecFilter
     */
    String access() default "";

    /**
     * Specifies whether the parameter can accept multiple comma-separated values.
     */
    boolean allowMultiple() default false;

    /**
     * The data type of the parameter.
     * <p/>
     * This can be the class name or a primitive.
     */
    String dataType() default "";

    /**
     * The parameter type of the parameter.
     *
     * Valid values are {@code path}, {@code query}, {@code body}, {@code header} or {@code form}.
     */
    String paramType() default "";
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParams.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParams.java;<<<<<<< MINE
 * A simple array wrapper to contain multiple ApiImplicitParam objects
=======
 * A wrapper to allow a list of multiple {@link com.wordnik.swagger.annotations.ApiImplicitParam} objects.
 *
 * @see com.wordnik.swagger.annotations.ApiImplicitParam
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java;<<<<<<< MINE
 * Provides additional information about Swagger models.
 * <p>
 * Classes will be introspected automatically as they are used as types in operations,
 * but you may want to manipulate the structure of the models.
=======
 * Provides additional information about Swagger models.
 * <p/>
 * Classes will be introspected automatically as they are used as types in operations,
 * but you may want to manipulate the structure of the models.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java;<<<<<<< MINE
  /**
   * Provide an alternative name for the model.
   * <p>
   * By default, the class name is used.
   */
  String value() default "";

  /**
   * Provide a longer description of the class.
   */
  String description() default "";

  /**
   * Provide a superclass for the model to allow describing inheritance.
   */
  Class<?> parent() default Void.class;

  /**
   * Supports model inheritance and polymorphism.
   * <p>
   * This is the name of the field used as a discriminator. Based on this field,
   * it would be possible to assert which sub type needs to be used.
   */
  String discriminator() default "";

  /**
   * An array of the sub types inheriting from this model.
   */
  Class<?>[] subTypes() default {};
=======
    /**
     * Provide an alternative name for the model.
     * <p/>
     * By default, the class name is used.
     */
    String value() default "";

    /**
     * Provide a longer description of the class.
     */
    String description() default "";

    /**
     * Provide a superclass for the model to allow describing inheritance.
     */
    Class<?> parent() default Void.class;

    /**
     * Supports model inheritance and polymorphism.
     * <p/>
     * This is the name of the field used as a discriminator. Based on this field,
     * it would be possible to assert which sub type needs to be used.
     */
    String discriminator() default "";

    /**
     * An array of the sub types inheriting from this model.
     */
    Class<?>[] subTypes() default {};
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiResponses.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
  /**
   * The 'path' that is going to be used to host the API Declaration of the
   * resource.
   * <p>
   * For JAX-RS resources, this would normally have the same value as the {@code @Path}
   * on the resource, but can be any other value as well. It will serve as the path
   * where the documentation is hosted.
   * <p>
   * For Servlets, this path has to be the path serving the Servlet.
   * <p>
   * If the value isn't preceded with a slash, one would be added to it.
   * 
   * @return the document location value, or empty string if not set
   */
  String value() default "";

  /**
   * A list of tags for API documentation control. 
   * Tags can be used for logical grouping of operations by resources or any other qualifier.
   * 
   * @since 1.5.2
   *
   * @return a string array of tag values
   */
  String[] tags() default "";

  /**
   * Corresponds to the `description` field of the Resource Listing API operation.
   * <p>
   * This should be a short description of the resource.
   *
   * @return a longer description about this API
   */
  String description() default "";

  /**
   * Corresponds to the `basePath` field of the API Declaration.
   * <p>
   * The `basePath` is derived automatically by Swagger. This property allows
   * overriding the default value if needed.  for swagger 2.0 specifications, this
   * value is no longer supported
   *
   * @since 1.3.7
   *
   * @return the basePath for this operation
   */
  @Deprecated
  String basePath() default "";

  /**
   * Optional explicit ordering of this API resource in the Resource Listing.
   * As of swagger-spec 2.0, this value is no longer used
   *
   *
   * @return the position of this API in the resource listing
   */
  @Deprecated
  int position() default 0;

  /**
   * Corresponds to the `produces` field of the API Declaration.
   * <p>
   * Takes in comma-separated values of content types.
   * For example, "application/json, application/xml" would suggest this API Resource
   * generates JSON and XML output.
   * <p>
   * For JAX-RS resources, this would automatically take the value of the {@code @Produces}
   * annotation if such exists. It can also be used to override the {@code @Produces} values
   * for the Swagger documentation.
   *
   * @return the supported media types supported by the server, or an empty string if not set
   */
  String produces() default "";

  /**
   * Corresponds to the `consumes` field of the API Declaration.
   * <p>
   * Takes in comma-separated values of content types.
   * For example, "application/json, application/xml" would suggest this API Resource
   * accepts JSON and XML input.
   * <p>
   * For JAX-RS resources, this would automatically take the value of the {@code @Consumes}
   * annotation if such exists. It can also be used to override the {@code @Consumes} values
   * for the Swagger documentation.
   * 
   * @return the consumes value, or empty string if not set
   */
  String consumes() default "";

  /**
   * This property is currently not in use.
   * 
   * @return the protocols supported by the server
   */
  String protocols() default "";

  /**
   * Corresponds to the `authorizations` field of the API Declaration.
   * <p>
   * Takes in a list of the required authorizations for this API Resource.
   * This may be overridden by specific operations.
   *
   * @see Authorization
   *
   * @return an array of authorizations required by the server, or a single, empty authorization value if not set
   */
  Authorization[] authorizations() default @Authorization(value = "", type = "");

  /**
   * Hides the api.
   *
   * @since 1.3.8
   *
   * @return true if the api should be hidden from the swagger documentation
   */
  boolean hidden() default false;
=======
    /**
     * The 'path' that is going to be used to host the API Declaration of the
     * resource.
     * <p/>
     * For JAX-RS resources, this would normally have the same value as the {@code @Path}
     * on the resource, but can be any other value as well. It will serve as the path
     * where the documentation is hosted.
     * <p/>
     * For Servlets, this path has to be the path serving the Servlet.
     * <p/>
     * If the value isn't preceded with a slash, one would be added to it.
     */
    String value();

    /**
     * Corresponds to the `description` field of the Resource Listing API operation.
     * <p/>
     * This should be a short description of the resource.
     */
    String description() default "";

    /**
     * Corresponds to the `basePath` field of the API Declaration.
     * <p/>
     * The `basePath` is derived automatically by Swagger. This property allows
     * overriding the default value if needed.
     *
     * @since 1.3.7
     */
    String basePath() default "";

    /**
     * Optional explicit ordering of this API resource in the Resource Listing.
     */
    int position() default 0;

    /**
     * Corresponds to the `produces` field of the API Declaration.
     * <p/>
     * Takes in comma-separated values of content types.
     * For example, "application/json, application/xml" would suggest this API Resource
     * generates JSON and XML output.
     * <p/>
     * For JAX-RS resources, this would automatically take the value of the {@code @Produces}
     * annotation if such exists. It can also be used to override the {@code @Produces} values
     * for the Swagger documentation.
     */
    String produces() default "";

    /**
     * Corresponds to the `consumes` field of the API Declaration.
     * <p/>
     * Takes in comma-separated values of content types.
     * For example, "application/json, application/xml" would suggest this API Resource
     * accepts JSON and XML input.
     * <p/>
     * For JAX-RS resources, this would automatically take the value of the {@code @Consumes}
     * annotation if such exists. It can also be used to override the {@code @Consumes} values
     * for the Swagger documentation.
     */
    String consumes() default "";

    /**
     * This property is currently not in use.
     */
    String protocols() default "";

    /**
     * Corresponds to the `authorizations` field of the API Declaration.
     * <p/>
     * Takes in a list of the required authorizations for this API Resource.
     * This may be overridden by specific operations.
     *
     * @see Authorization
     */
    Authorization[] authorizations() default @Authorization("");

    /**
     * Hides the api.
     *
     * @since 1.3.8
     */
    boolean hidden() default false;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Authorization.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Authorization.java;<<<<<<< MINE
  String value();
  String type();
  AuthorizationScope[] scopes() default @AuthorizationScope(scope = "", description = "");
=======
    /**
     * The name of the authorization scheme to be used on this resource/operation.
     * <p/>
     * The name must be defined in the Resource Listing's authorization section,
     */
    String value();

    /**
     * The scopes to be used if the authorization scheme is OAuth2.
     *
     * @see com.wordnik.swagger.annotations.AuthorizationScope
     */
    AuthorizationScope[] scopes() default @AuthorizationScope(scope = "", description = "");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiParam.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/AuthorizationScope.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/Bootstrap.java;<<<<<<< MINE
  @Override
  public void init(ServletConfig config) throws ServletException {
    Info info = new Info()
      .title("Swagger Sample App")
      .description("This is a sample server Petstore server.  You can find out more about Swagger " + 
        "at <a href=\"http://swagger.io\">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, " + 
        "you can use the api key \"special-key\" to test the authorization filters")
      .termsOfService("http://helloreverb.com/terms/")
      .contact(new Contact()
        .email("apiteam@swagger.io"))
      .license(new License()
        .name("Apache 2.0")
        .url("http://www.apache.org/licenses/LICENSE-2.0.html"));

    ServletContext context = config.getServletContext();
    Swagger swagger = new Swagger().info(info);
    swagger.securityDefinition("api_key", new ApiKeyAuthDefinition("api_key", In.HEADER));
    swagger.securityDefinition("petstore_auth", 
      new OAuth2Definition()
        .implicit("http://petstore.swagger.io/api/oauth/dialog")
        .scope("read:pets", "read your pets")
        .scope("write:pets", "modify pets in your account"));
    swagger.tag(new Tag()
      .name("pet")
      .description("Everything about your Pets")
      .externalDocs(new ExternalDocs("Find out more", "http://swagger.io")));
    swagger.tag(new Tag()
      .name("store")
      .description("Access to Petstore orders"));
    swagger.tag(new Tag()
      .name("user")
      .description("Operations about user")
      .externalDocs(new ExternalDocs("Find out more about our store", "http://swagger.io")));
=======
  static {
    // do any additional initialization here, such as set your base path programmatically as such:
    // ConfigFactory.config().setBasePath("http://www.foo.com/");

    ApiInfo info = new ApiInfo(
      "Swagger Sample App",                             /* title */
      "This is a sample server Petstore server.  You can find out more about Swagger " + 
      "at <a href=\"http://swagger.io\">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, " + 
      "you can use the api key \"special-key\" to test the authorization filters", 
      "http://helloreverb.com/terms/",                  /* TOS URL */
      "apiteam@wordnik.com",                            /* Contact */
      "Apache 2.0",                                     /* license */
      "http://www.apache.org/licenses/LICENSE-2.0.html" /* license URL */
    );

    List<AuthorizationScope> scopes = new ArrayList<AuthorizationScope>();
    scopes.add(new AuthorizationScope("email", "Access to your email address"));
    scopes.add(new AuthorizationScope("pets", "Access to your pets"));

    List<GrantType> grantTypes = new ArrayList<GrantType>();

    ImplicitGrant implicitGrant = new ImplicitGrant(
      new LoginEndpoint("http://petstore.swagger.wordnik.com/oauth/dialog"), 
      "access_code");

    grantTypes.add(implicitGrant);

    AuthorizationType oauth = new OAuthBuilder().scopes(scopes).grantTypes(grantTypes).build();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/resource/JavaRestResourceUtil.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/exception/ApiException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/exception/NotFoundException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/exception/BadRequestException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/model/ApiResponse.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/model/Pet.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/model/Order.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/model/User.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/model/Tag.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/model/Category.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/util/ApiOriginFilter.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/data/PetData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/data/UserData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs/src/main/java/com/wordnik/swagger/sample/data/StoreData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/resource/SampleExceptionMapper.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/resource/OwnerResource.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/resource/OwnerResource.java;<<<<<<< MINE
@Api(hidden = true, value = "/owner", description = "Operations about the owners", position = 1)
=======
@Path("/owner")
@Api(hidden = true, value = "/owner", description = "Operations about the owners", position = 1)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/resource/JavaRestResourceUtil.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/exception/ApiException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/exception/NotFoundException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/exception/BadRequestException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/model/Owner.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/model/ApiResponse.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/model/Pet.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/model/Tag.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/model/Category.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/util/ApiOriginFilter.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-subresource/src/main/java/com/wordnik/swagger/sample/data/PetData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/resource/SampleExceptionMapper.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/resource/JavaRestResourceUtil.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/exception/ApiException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/exception/NotFoundException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/exception/BadRequestException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/model/ApiResponse.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/model/Pet.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/model/Order.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/model/User.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/model/Tag.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/model/Category.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/util/ApiOriginFilter.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/data/PetData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/data/UserData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jaxrs-cxf/src/main/java/com/wordnik/swagger/sample/data/StoreData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-dropwizard/src/main/java/com/wordnik/swagger/sample/resource/JavaRestResourceUtil.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-dropwizard/src/main/java/com/wordnik/swagger/sample/exception/ApiException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-dropwizard/src/main/java/com/wordnik/swagger/sample/exception/NotFoundException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-dropwizard/src/main/java/com/wordnik/swagger/sample/exception/BadRequestException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-dropwizard/src/main/java/com/wordnik/swagger/sample/model/Pet.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-dropwizard/src/main/java/com/wordnik/swagger/sample/model/Order.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-dropwizard/src/main/java/com/wordnik/swagger/sample/model/User.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-dropwizard/src/main/java/com/wordnik/swagger/sample/model/Tag.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-dropwizard/src/main/java/com/wordnik/swagger/sample/model/Category.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-dropwizard/src/main/java/com/wordnik/swagger/sample/data/PetData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-dropwizard/src/main/java/com/wordnik/swagger/sample/data/UserData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-dropwizard/src/main/java/com/wordnik/swagger/sample/data/StoreData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/Bootstrap.java;<<<<<<< MINE
  @Override
  public void init(ServletConfig config) throws ServletException {
    Info info = new Info()
      .title("Swagger Sample App")
      .description("This is a sample server Petstore server.  You can find out more about Swagger " + 
        "at <a href=\"http://swagger.io\">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, " + 
        "you can use the api key \"special-key\" to test the authorization filters")
      .termsOfService("http://helloreverb.com/terms/")
      .contact(new Contact()
        .email("apiteam@swagger.io"))
      .license(new License()
        .name("Apache 2.0")
        .url("http://www.apache.org/licenses/LICENSE-2.0.html"));

    ServletContext context = config.getServletContext();
    Swagger swagger = new Swagger().info(info);
    swagger.securityDefinition("api_key", new ApiKeyAuthDefinition("api_key", In.HEADER));
    swagger.securityDefinition("petstore_auth", 
      new OAuth2Definition()
        .implicit("http://petstore.swagger.io/api/oauth/dialog")
        .scope("read:pets", "read your pets")
        .scope("write:pets", "modify pets in your account"));
    context.setAttribute("swagger", swagger);
=======
  static {
    // do any additional initialization here, such as set your base path programmatically as such:
    // ConfigFactory.config().setBasePath("http://www.foo.com/");

    // add a custom filter
    FilterFactory.setFilter(new CustomFilter());

    ApiInfo info = new ApiInfo(
      "Swagger Sample App",                             /* title */
      "This is a sample server Petstore server.  You can find out more about Swagger " + 
      "at <a href=\"http://swagger.io\">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, " + 
      "you can use the api key \"special-key\" to test the authorization filters", 
      "http://helloreverb.com/terms/",                  /* TOS URL */
      "apiteam@wordnik.com",                            /* Contact */
      "Apache 2.0",                                     /* license */
      "http://www.apache.org/licenses/LICENSE-2.0.html" /* license URL */
    );

    List<AuthorizationScope> scopes = new ArrayList<AuthorizationScope>();
    scopes.add(new AuthorizationScope("email", "Access to your email address"));
    scopes.add(new AuthorizationScope("pets", "Access to your pets"));

    List<GrantType> grantTypes = new ArrayList<GrantType>();

    ImplicitGrant implicitGrant = new ImplicitGrant(
      new LoginEndpoint("http://localhost:8002/oauth/dialog"), 
      "access_code");

    grantTypes.add(implicitGrant);

    AuthorizationType oauth = new OAuthBuilder().scopes(scopes).grantTypes(grantTypes).build();

    ConfigFactory.config().addAuthorization(oauth);
    ConfigFactory.config().setApiInfo(info);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/resource/SampleExceptionMapper.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/resource/QueryResultBean.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/resource/JavaRestResourceUtil.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/exception/ApiException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/exception/NotFoundException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/exception/BadRequestException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/model/ApiResponse.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/model/Pet.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/model/Order.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/model/User.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/model/Tag.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/model/Category.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/util/ApiAuthorizationFilterImpl.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/util/ApiOriginFilter.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/data/PetData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/data/UserData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-jersey2/src/main/java/com/wordnik/swagger/sample/data/StoreData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/resource/JavaRestResourceUtil.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/exception/ApiException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/exception/NotFoundException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/exception/BadRequestException.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/model/ApiResponse.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/model/Pet.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/model/Order.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/model/User.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/model/Tag.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/model/Category.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/util/ApiOriginFilter.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/data/PetData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/data/UserData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_279a695_e9ac84a/rev_279a695-e9ac84a/samples/java-grails2/src/java/com/wordnik/swagger/sample/data/StoreData.java;<<<<<<< MINE
 *  Copyright 2015 Reverb Technologies, Inc.
=======
 *  Copyright 2014 Reverb Technologies, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ExternalDocs.java;<<<<<<< MINE
 * @since 1.5.2
=======
 * @since 1.5.2-M1
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ExternalDocs.java;<<<<<<< MINE
  /** A short description of the target documentation. GFM syntax can be used for rich text representation. */
=======
  /**
   * A short description of the target documentation. GFM syntax can be used for rich text representation.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ExternalDocs.java;<<<<<<< MINE
  /** URL for the docs. */
=======
  /**
   * URL for the docs.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiResponse.java;<<<<<<< MINE
  /** Response code to describe */
=======
  /**
   * The HTTP status code of the response.
   * <p/>
   * The value should be one of the formal <a target="_blank" href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">HTTP Status Code Definitions</a>.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiResponse.java;<<<<<<< MINE
  /** Human-readable message to accompany the response */
=======
  /**
   * Human-readable message to accompany the response.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiResponse.java;<<<<<<< MINE
  /** Optional response class to describe the payload of the message */
=======
  /**
   * Optional response class to describe the payload of the message.
   * <p/>
   * Corresponds to the `schema` field of the response message object.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
 * Describes an operation or typically a HTTP method against a specific path.  Operations
 * with equivalent paths are grouped in an array in the Api Declaration.  See
 * https://github.com/wordnik/swagger-core/wiki/API-Declaration
=======
 * Describes an operation or typically a HTTP method against a specific path.
 * <p/>
 * Operations with equivalent paths are grouped in a single Operation Object.
 * A combination of a HTTP method and a path creates a unique operation.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
  /** Brief description of the operation  */
=======
  /**
   * Corresponds to the `summary` field of the operation.
   * <p/>
   * Provides a brief description of this operation. Should be 120 characters or less
   * for proper visibility in Swagger-UI.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
  /** long description of the operation */
=======
  /**
   * Corresponds to the 'notes' field of the operation.
   * <p/>
   * A verbose description of the operation.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
   * A list of tags for API documentation control. 
=======
   * A list of tags for API documentation control.
   * <p/>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
   * @since 1.5.2
=======
   * @since 1.5.2-M1
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
  /** default response class from the operation */
=======
  /**
   * The response type of the operation.
   * <p/>
   * In JAX-RS applications, the return type of the method would automatically be used, unless it is
   * {@code javax.ws.rs.core.Response}. In that case, the operation return type would default to `void`
   * as the actual response type cannot be known.
   * <p/>
   * Setting this property would override any automatically-derived data type.
   * <p/>
   * If the value used is a class representing a primitive ({@code Integer}, {@code Long}, ...)
   * the corresponding primitive type will be used.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
  /** if the response class is within a container, specify it here */
=======
  /**
   * Notes whether the response type is a list of values.
   * <p/>
   * Valid values are "List" or "Map". Any other value will be ignored.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
  /** the HTTP method, i.e GET, PUT, POST, DELETE, PATCH, OPTIONS */
=======
  /**
   * Corresponds to the `method` field as the HTTP method used.
   * <p/>
   * If not stated, in JAX-RS applications, the following JAX-RS annotations would be scanned
   * and used: {@code @GET}, {@code @HEAD}, {@code @POST}, {@code @PUT}, {@code @DELETE} and {@code @OPTIONS}.
   * Note that even though not part of the JAX-RS specification, if you create and use the {@code @PATCH} annotation,
   * it will also be parsed and used. If the httpMethod property is set, it will override the JAX-RS annotation.
   * <p/>
   * For Servlets, you must specify the HTTP method manually.
   * <p/>
   * Acceptable values are "GET", "HEAD", "POST", "PUT", "DELETE", "OPTIONS" and "PATCH".
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
  /** allow explicit ordering of operations inside the Api Declaration */
=======
  /**
   * Not used in 1.5.X, kept for legacy support.
   */
  @Deprecated
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
  /** the nickname for the operation, to override what is detected by the annotation scanner */
=======
  /**
   * Corresponds to the `operationId` field.
   * <p/>
   * The operationId is used by third-party tools to uniquely identify this operation. In Swagger 2.0, this is
   * no longer mandatory and if not provided will remain empty.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
  
  /** content type produced by this Api */
=======

  /**
   * Corresponds to the `produces` field of the operation.
   * <p/>
   * Takes in comma-separated values of content types.
   * For example, "application/json, application/xml" would suggest this operation
   * generates JSON and XML output.
   * <p/>
   * For JAX-RS resources, this would automatically take the value of the {@code @Produces}
   * annotation if such exists. It can also be used to override the {@code @Produces} values
   * for the Swagger documentation.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
  /** media type consumed by this Api */
=======
  /**
   * Corresponds to the `consumes` field of the operation.
   * <p/>
   * Takes in comma-separated values of content types.
   * For example, "application/json, application/xml" would suggest this API Resource
   * accepts JSON and XML input.
   * <p/>
   * For JAX-RS resources, this would automatically take the value of the {@code @Consumes}
   * annotation if such exists. It can also be used to override the {@code @Consumes} values
   * for the Swagger documentation.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
  /** protocols that this Api requires (i.e. https) */
=======
  /**
   * Sets specific protocols (schemes) for this operation.
   * <p/>
   * Comma-separated values of the available protocols. Possible values: http, https, ws, wss.
   *
   * @return the protocols supported by the operations under the resource.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
  /**
   * Corresponds to the `security` field of the Operation Object.
   * <p/>
   * Takes in a list of the authorizations (security requirements) for this operation.
   *
   * @see Authorization
   *
   * @return an array of authorizations required by the server, or a single, empty authorization value if not set.
   */
  Authorization[] authorizations() default @Authorization(value = "");
=======
  /**
   * Corresponds to the `security` field of the Operation Object.
   * <p/>
   * Takes in a list of the authorizations (security requirements) for this operation.
   *
   * @see Authorization
   *
   * @return an array of authorizations required by the server, or a single, empty authorization value if not set.
   */
  Authorization[] authorizations() default @Authorization(value = "", type = "");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiOperation.java;<<<<<<< MINE
   * Allows an operation to be marked as hidden
=======
   * Hides the operation from the list of operations.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
/** 
 * An ApiModelProperty desecribes a property inside a model class.  The annotations can
 * apply to a method, a property, etc., depending on how the model scanner is configured and
 * used.
=======
/**
 * Adds and manipulates data of a model property.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
  /** Provide a human readable synopsis of this property */
=======
  /**
   * A brief description of this property.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
   * Allows overriding the name of the property
=======
   * Allows overriding the name of the property.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
   * If the values that can be set are restricted, they can be set here. In the form of a comma separated list
   * <code>registered, active, closed</code>.
   *
   * @return the allowable values
=======
   * Limits the acceptable values for this property.
   * <p/>
   * There are three ways to describe the allowable values:
   * <ol>
   * <li>To set a list of values, provide a comma-separated list.
   * For example: {@code first, second, third}.</li>
   * <li>To set a range of values, start the value with "range", and surrounding by square
   * brackets include the minimum and maximum values. For example: {@code range[1, 5]}.</li>
   * <li>To set a minimum/maximum value, use the same format for range but use "infinity"
   * or "-infinity" as the second value. For example, {@code range[1, infinity]} means the
   * minimum allowable value of this parameter is 1.</li>
   * </ol>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
  /** 
   * specify an optional access value for filtering in a Filter 
   * implementation.  This
   * allows you to hide certain parameters if a user doesn't have access to them
=======
  /**
   * Allows for filtering a property from the API documentation. See com.wordnik.swagger.core.filter.SwaggerSpecFilter.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
  /** long description of the property */
=======
  /**
   * Currently not in use.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
   * Whether or not the property is required, defaults to false.
   * 
   * @return true if required, false otherwise
=======
   * Specifies if the parameter is required or not.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
   * allows explicitly ordering the property in the model.  Since reflection has no guarantee on
   * ordering, you should specify property order to keep models consistent across different VM implementations and versions.
=======
   * Allows explicitly ordering the property in the model.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
   * Allows a model property to be marked as hidden in the swagger model definition
=======
   * Allows a model property to be hidden in the Swagger model definition.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
   * A sample value for the property
   **/
=======
   * A sample value for the property.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
   * Allows a model property to be designated as read only
   **/
=======
   * Allows a model property to be designated as read only.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
   * <li>To set a list of values, provide a comma-separated list surrounded by square brackets.
   * For example: {@code [first, second, third]}.</li>
=======
   * <li>To set a list of values, provide a comma-separated list.
   * For example: {@code first, second, third}.</li>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
   * Specifies whether the parameter can accept multiple comma-separated values.
=======
   * Specifies whether the parameter can accept multiple values by having multiple occurrences.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java;<<<<<<< MINE
 * <p>
=======
 * <p/>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java;<<<<<<< MINE
   * <p>
=======
   * <p/>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiModel.java;<<<<<<< MINE
   * <p>
=======
   * <p/>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiResponses.java;<<<<<<< MINE
 * A simple array wrapper to contain multiple ApiResponse objects
=======
 * A wrapper to allow a list of multiple {@link com.wordnik.swagger.annotations.ApiResponse} objects.
 * <p/>
 * If you need to describe a single {@link com.wordnik.swagger.annotations.ApiResponse}, you still
 * must use this annotation and wrap the {@code @ApiResponse} in an array.
 *
 * @see com.wordnik.swagger.annotations.ApiResponse
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
 * <p>
 * The resource affects both the root document of Swagger, the Resource
 * Listing, and the API Declaration of that specific resource.
 * <p>
 * Swagger will only include and introspect only classes that are annotated
=======
 * <p/>
 * By default, Swagger-Core will only include and introspect only classes that are annotated
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * The 'path' that is going to be used to host the API Declaration of the
   * resource.
   * <p>
   * For JAX-RS resources, this would normally have the same value as the {@code @Path}
   * on the resource, but can be any other value as well. It will serve as the path
   * where the documentation is hosted.
   * <p>
   * For Servlets, this path has to be the path serving the Servlet.
   * <p>
   * If the value isn't preceded with a slash, one would be added to it.
   * 
   * @return the document location value, or empty string if not set
=======
   * Implicitly sets a tag for the operations, legacy support (read description).
   * <p/>
   * In swagger-core 1.3.X, this was used as the 'path' that is to host the API Declaration of the
   * resource. This is no longer relevant in swagger-core 1.5.X.
   * <p/>
   * If {@link #tags()} is <i>not</i> used, this value will be used to set the tag for the operations described by this
   * resource. Otherwise, the value will be ignored.
   * <p/>
   * The leading / (if exists) will be removed.
   *
   * @return tag name for operations under this resource, unless {@link #tags()} is defined.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * @since 1.5.2
=======
   * @since 1.5.2-M1
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * Corresponds to the `description` field of the Resource Listing API operation.
   * <p>
   * This should be a short description of the resource.
=======
   * Not used in 1.5.X, kept for legacy support.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * @return a longer description about this API
=======
   * @return a longer description about this API, no longer used.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * Corresponds to the `basePath` field of the API Declaration.
   * <p>
   * The `basePath` is derived automatically by Swagger. This property allows
   * overriding the default value if needed.  for swagger 2.0 specifications, this
   * value is no longer supported
=======
   * Not used in 1.5.X, kept for legacy support.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * @since 1.3.7
   *
   * @return the basePath for this operation
=======
   * @return the basePath for this operation, no longer used.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * Optional explicit ordering of this API resource in the Resource Listing.
   * As of swagger-spec 2.0, this value is no longer used
   *
=======
   * Not used in 1.5.X, kept for legacy support.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * @return the position of this API in the resource listing
=======
   * @return the position of this API in the resource listing, no longer used.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * Corresponds to the `produces` field of the API Declaration.
   * <p>
=======
   * Corresponds to the `produces` field of the operations under this resource.
   * <p/>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * For example, "application/json, application/xml" would suggest this API Resource
   * generates JSON and XML output.
   * <p>
=======
   * For example, "application/json, application/xml" would suggest the operations
   * generate JSON and XML output.
   * <p/>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * @return the supported media types supported by the server, or an empty string if not set
=======
   * @return the supported media types supported by the server, or an empty string if not set.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * Corresponds to the `consumes` field of the API Declaration.
   * <p>
=======
   * Corresponds to the `consumes` field of the operations under this resource.
   * <p/>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * For example, "application/json, application/xml" would suggest this API Resource
   * accepts JSON and XML input.
   * <p>
=======
   * For example, "application/json, application/xml" would suggest the operations
   * accept JSON and XML input.
   * <p/>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * This property is currently not in use.
=======
   * Sets specific protocols (schemes) for the operations under this resource.
   * <p/>
   * Comma-separated values of the available protocols. Possible values: http, https, ws, wss.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * @return the protocols supported by the server
=======
   * @return the protocols supported by the operations under the resource.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * Corresponds to the `authorizations` field of the API Declaration.
   * <p>
   * Takes in a list of the required authorizations for this API Resource.
=======
   * Corresponds to the `security` field of the Operation Object.
   * <p/>
   * Takes in a list of the authorizations (security requirements) for the operations under this resource.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * @return an array of authorizations required by the server, or a single, empty authorization value if not set
=======
   * @return an array of authorizations required by the server, or a single, empty authorization value if not set.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Api.java;<<<<<<< MINE
   * Hides the api.
   *
   * @since 1.3.8
=======
   * Hides the operations under this resource.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiParam.java;<<<<<<< MINE
 * Represents a single parameter in an Api Operation.  A parameter is an input
 * to the operation
=======
 * Adds additional meta-data for operation parameters.
 * <p/>
 * This annotation can be used only in combination of JAX-RS 1.x/2.x annotations.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiParam.java;<<<<<<< MINE
  /** Name of the parameter */
=======
  /**
   * The parameter name.
   * <p/>
   * The name of the parameter will be derived from the field/method/parameter name,
   * however you can override it.
   * <p/>
   * Path parameters must always be named as the path section they represent.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiParam.java;<<<<<<< MINE
  /** Description of the parameter */
=======
  /**
   * A brief description of the parameter.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiParam.java;<<<<<<< MINE
  /** Default value  - if e.g. no JAX-RS @DefaultValue is given */
=======
  /**
   * Describes the default value for the parameter.
   * <p/>
   * If the parameter is annotated with JAX-RS's {@code @DefaultValue}, that value would
   * be used, but can be overridden by setting this property.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiParam.java;<<<<<<< MINE
  /** Description of values this endpoint accepts */
=======
  /**
   * Limits the acceptable values for this parameter.
   * <p/>
   * If the original parameter type is an enum, the values of the enum would be translated to
   * the allowableValues. Those can be overridden by setting this property.
   * <p/>
   * There are three ways to describe the allowable values:
   * <ol>
   * <li>To set a list of values, provide a comma-separated list.
   * For example: {@code first, second, third}.</li>
   * <li>To set a range of values, start the value with "range", and surrounding by square
   * brackets include the minimum and maximum values. For example: {@code range[1, 5]}.</li>
   * <li>To set a minimum/maximum value, use the same format for range but use "infinity"
   * or "-infinity" as the second value. For example, {@code range[1, infinity]} means the
   * minimum allowable value of this parameter is 1.</li>
   * </ol>
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiParam.java;<<<<<<< MINE
  /** specifies if the parameter is required or not */
=======
  /**
   * Specifies if the parameter is required or not.
   * <p/>
   * Path parameters will always be set as required, whether you set this property or not.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiParam.java;<<<<<<< MINE
  /** 
   * specify an optional access value for filtering in a Filter 
   * implementation.  This
   * allows you to hide certain parameters if a user doesn't have access to them
=======
  /**
   * Allows for filtering a parameter from the API documentation.
   *<p/>
   * See com.wordnik.swagger.core.filter.SwaggerSpecFilter for further details.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ApiParam.java;<<<<<<< MINE
  /** specifies whether or not the parameter can have multiple values provided */
=======
  /**
   * Specifies whether the parameter can accept multiple values by having multiple occurrences.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ResponseHeader.java;<<<<<<< MINE
   * */
=======
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/ResponseHeader.java;<<<<<<< MINE
   * If the header type is within a container, specify it here.
   * */
=======
   * Notes whether the response type is a list of values.
   * <p/>
   * Valid values are "List" or "Map". Any other value will be ignored.
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_f3b170d_2dcdd25/rev_f3b170d-2dcdd25/modules/swagger-annotations/src/main/java/com/wordnik/swagger/annotations/Authorization.java;<<<<<<< MINE

  /**
   * The scopes to be used if the authorization scheme is OAuth2.
   *
   * @see com.wordnik.swagger.annotations.AuthorizationScope
   */
=======

  /**
   * Not in use!
   */
  String type();

  /**
   * The scopes to be used if the authorization scheme is OAuth2.
   *
   * @see com.wordnik.swagger.annotations.AuthorizationScope
   */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_c497ee8_a4484d4/rev_c497ee8-a4484d4/modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/Reader.java;<<<<<<< MINE

  List<Parameter> getParameters(Class<?> cls, Type type, Annotation[] annotations) {
    // look for path, query
    boolean isArray = ParameterUtils.isMethodArgumentAnArray(cls, type);
    Iterator<SwaggerExtension> chain = SwaggerExtensions.chain();
    List<Parameter> parameters = null;

    LOGGER.debug("getParameters for " + cls);
    Set<Class<?>> classesToSkip = new HashSet<Class<?>>();
    if(chain.hasNext()) {
      SwaggerExtension extension = chain.next();
      LOGGER.debug("trying extension " + extension);
      parameters = extension.extractParameters(annotations, cls, isArray, classesToSkip, chain);
    }
=======
  private List<Parameter> getParameters(Type type, List <Annotation> annotations) {
    final Iterator<SwaggerExtension> chain = SwaggerExtensions.chain();
    if (!chain.hasNext()) {
      return Collections.emptyList();
    }
    LOGGER.debug("getParameters for " + type);
    Set<Type> typesToSkip = new HashSet<Type>();
    final SwaggerExtension extension = chain.next();
    LOGGER.debug("trying extension " + extension);

    final List<Parameter> parameters = extension.extractParameters(annotations, type, typesToSkip, chain);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_4cc76fb_66d9203/rev_4cc76fb-66d9203/modules/swagger-jaxrs/src/main/java/com/wordnik/swagger/jaxrs/ParameterProcessor.java;<<<<<<< MINE
      final String defaultValue = param.getDefaultValue();
      if (param.isAllowMultiple() || isArray) {
=======
      final String defaultValue = param.defaultValue();
      if (p.getItems() != null || param.allowMultiple()) {
        if (p.getItems() == null) {
          // Convert to array
          final Map<PropertyBuilder.PropertyId, Object> args = new EnumMap<PropertyBuilder.PropertyId, Object>(PropertyBuilder.PropertyId.class);
          args.put(PropertyBuilder.PropertyId.DEFAULT, p.getDefaultValue());
          p.setDefaultValue(null);
          args.put(PropertyBuilder.PropertyId.ENUM, p.getEnum());
          p.setEnum(null);
          args.put(PropertyBuilder.PropertyId.MINIMUM, p.getMinimum());
          p.setMinimum(null);
          args.put(PropertyBuilder.PropertyId.EXCLUSIVE_MINIMUM, p.isExclusiveMinimum());
          p.setExclusiveMinimum(null);
          args.put(PropertyBuilder.PropertyId.MAXIMUM, p.getMaximum());
          p.setMaximum(null);
          args.put(PropertyBuilder.PropertyId.EXCLUSIVE_MAXIMUM, p.isExclusiveMaximum());
          p.setExclusiveMaximum(null);
          Property items = PropertyBuilder.build(p.getType(), p.getFormat(), args);
          p.type(ArrayProperty.TYPE).format(null).items(items);
        }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_e199bff_cc4e4f4/rev_e199bff-cc4e4f4/modules/swagger-models/src/main/java/io/swagger/models/properties/PropertyBuilder.java;<<<<<<< MINE
        FORMAT("format"),
        VENDOR_EXTENSIONS("vendorExtensions");
=======
        FORMAT("format"),
        READ_ONLY("readOnly");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java;<<<<<<< MINE
                        operation = parseMethod(method, globalParameters);
=======
                        operation = parseMethod(cls, method, globalParameters);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java;<<<<<<< MINE
        return parseMethod(method, Collections.<Parameter>emptyList());
=======
        return parseMethod(method.getDeclaringClass(), method, Collections.<Parameter>emptyList());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java;<<<<<<< MINE
    private Operation parseMethod(Method method, List<Parameter> globalParameters) {
=======
    private Operation parseMethod(Class<?> cls, Method method, List<Parameter> globalParameters) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/config/ReaderListener.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/config/ReaderListener.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/config/ReaderListener.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/utils/ReaderUtils.java;<<<<<<< MINE
        for (Field field : cls.getDeclaredFields()) {
=======
        for (Field field : ReflectionUtils.getDeclaredFields(cls)) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/json/JacksonJsonProvider.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/json/JacksonJsonProvider.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/json/JacksonJsonProvider.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/ParameterProcessor.java;<<<<<<< MINE
                for (Map.Entry<String, Model> entry : ModelConverters.getInstance().readAll(javaType).entrySet()) {
=======
                for (Map.Entry<String, Model> entry : ModelConverters.getInstance().readAll(type).entrySet()) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/test/java/io/swagger/ReaderTest.java;<<<<<<< MINE
    @org.junit.Test//(description = "scan class level and field level annotations")
=======
    @Test(description = "scan class level and field level annotations")
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-jaxrs/src/test/java/io/swagger/ResourceTest1343.java;<<<<<<< MINE
    @org.junit.Test///(description = "scan resource 1343")
=======
    @Test(description = "scan resource 1343")
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-core/src/main/java/io/swagger/util/PropertyDeserializer.java;<<<<<<< MINE
                if (child instanceof TextNode) {
=======
                if (child instanceof TextNode ||
                    child instanceof NumericNode ||
                    child instanceof IntNode ||
                    child instanceof LongNode ||
                    child instanceof DoubleNode || 
                    child instanceof FloatNode) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-core/src/main/java/io/swagger/util/PropertyDeserializer.java;<<<<<<< MINE
                return new ArrayProperty().items(subProperty).description(description);
=======
                ArrayProperty arrayProperty = new ArrayProperty().items(subProperty).description(description);
                arrayProperty.setVendorExtensionMap(getVendorExtensions(node));
                return arrayProperty;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-core/src/test/java/io/swagger/ObjectPropertyTest.java;<<<<<<< MINE
    @org.junit.Test //(description = "convert a model with object properties")
=======
    @Test (description = "convert a model with object properties")
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ExternalDocs.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ExternalDocs.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ExternalDocs.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Contact.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Contact.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Contact.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiResponse.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiResponse.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiResponse.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiResponse.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiResponse.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiResponse.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiResponse.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiResponse.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiResponse.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiModelProperty.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParam.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParams.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParams.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParams.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiModel.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiModel.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiModel.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiModel.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiModel.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiModel.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiResponses.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiResponses.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiResponses.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiResponses.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ExtensionProperty.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ExtensionProperty.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ExtensionProperty.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Api.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Api.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Api.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Api.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Api.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Api.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Api.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Api.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Api.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Api.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Api.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Api.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Api.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Api.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Authorization.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Authorization.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Authorization.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Authorization.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Authorization.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Authorization.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/License.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/License.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/License.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiParam.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiParam.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiParam.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiParam.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiParam.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiParam.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiParam.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiParam.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiParam.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiParam.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/SwaggerDefinition.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/SwaggerDefinition.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/SwaggerDefinition.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/SwaggerDefinition.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/SwaggerDefinition.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/SwaggerDefinition.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/SwaggerDefinition.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/SwaggerDefinition.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Info.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Info.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Info.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Extension.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Extension.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Extension.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Tag.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Tag.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/Tag.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ResponseHeader.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ResponseHeader.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ResponseHeader.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/ResponseHeader.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/AuthorizationScope.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/AuthorizationScope.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/AuthorizationScope.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/AuthorizationScope.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/AuthorizationScope.java;<<<<<<< MINE
 * <p/>
=======
 * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_72b588a_0567e01/rev_72b588a-0567e01/modules/swagger-annotations/src/main/java/io/swagger/annotations/AuthorizationScope.java;<<<<<<< MINE
     * <p/>
=======
     * <p>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_8378133_798bf6a/rev_8378133-798bf6a/modules/swagger-jaxrs/src/main/java/io/swagger/jaxrs/Reader.java;<<<<<<< MINE
                    if(apiOperation != null || config.isScanAllResources() || httpMethod != null || methodPath != null) { 
=======
                    if(apiOperation != null || config.isScanAllResources() || httpMethod != null || methodPath != null) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_4698800_8db0f6a/rev_4698800-8db0f6a/modules/swagger-core/src/main/java/io/swagger/jackson/ModelResolver.java;<<<<<<< MINE
                if(mp != null && mp.readOnly()) {
                  isReadOnly = mp.readOnly();
=======
                if (mp != null && mp.readOnly()) {
                    isReadOnly = mp.readOnly();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_07ebc65_40c19ae/rev_07ebc65-40c19ae/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiImplicitParams.java;<<<<<<< MINE
@Target({ElementType.METHOD,ElementType.ANNOTATION_TYPE})
=======
@Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE})
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_e661e1a_9a6cf32/rev_e661e1a-9a6cf32/modules/swagger-core/src/main/java/io/swagger/util/ReflectionUtils.java;<<<<<<< MINE
        if (overriddenmethod != null) {
            Annotation[][] overriddenAnnotations = overriddenmethod
                    .getParameterAnnotations();

            for (int i = 0; i < methodAnnotations.length; i++) {
                List<Type> types = new ArrayList<Type>();
                for (int j = 0; j < methodAnnotations[i].length; j++) {
                    types.add(methodAnnotations[i][j].annotationType());
                }
                for (int j = 0; j < overriddenAnnotations[i].length; j++) {
                    if (!types.contains(overriddenAnnotations[i][j]
                            .annotationType())) {
                        methodAnnotations[i] = ArrayUtils.add(
                                methodAnnotations[i],
                                overriddenAnnotations[i][j]);
                    }
                }

            }
        }
        return methodAnnotations;
=======
            }
        }
        return methodAnnotations;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Swagger-core/revisions/rev_e661e1a_9a6cf32/rev_e661e1a-9a6cf32/modules/swagger-core/src/main/java/io/swagger/util/ReflectionUtils.java;<<<<<<< MINE
        Annotation[][] methodAnnotations = method.getParameterAnnotations();
        Method overriddenmethod = getOverriddenMethod(method);
=======
        Annotation[][] methodAnnotations = method.getParameterAnnotations();
        Method overriddenmethod = getOverriddenMethod(method);

        if (overriddenmethod != null) {
            Annotation[][] overriddenAnnotations = overriddenmethod
                    .getParameterAnnotations();

            for (int i = 0; i < methodAnnotations.length; i++) {
                List<Type> types = new ArrayList<Type>();
                for (int j = 0; j < methodAnnotations[i].length; j++) {
                    types.add(methodAnnotations[i][j].annotationType());
                }
                for (int j = 0; j < overriddenAnnotations[i].length; j++) {
                    if (!types.contains(overriddenAnnotations[i][j]
                            .annotationType())) {
                        methodAnnotations[i] = ArrayUtils.add(
                                methodAnnotations[i],
                                overriddenAnnotations[i][j]);
                    }
                }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/bitcoinj/revisions/rev_29d996b_e990bcd/rev_29d996b-e990bcd/src/com/google/bitcoin/core/Peer.java;<<<<<<< MINE
            throw new  RuntimeException("Peer does not have block chain");
=======
            throw new RuntimeException("Peer does not have block chain");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/bitcoinj/revisions/rev_29d996b_e990bcd/rev_29d996b-e990bcd/src/com/google/bitcoin/core/Peer.java;<<<<<<< MINE
        return blocksToGet;
=======
        if (blocksToGet < 0) {
            // This peer has fewer blocks than we do. It isn't usable.
            // TODO: We can't do the right thing here until Mirons patch lands. For now just return a zero latch.
            return new CountDownLatch(0);
        }
        chainCompletionLatch = new CountDownLatch(blocksToGet);
        if (blocksToGet > 0) {
            // When we just want as many blocks as possible, we can set the target hash to zero.
            blockChainDownload(Sha256Hash.ZERO_HASH);
        }
        return chainCompletionLatch;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_4f20749_ae32b4c/rev_4f20749-ae32b4c/src/main/java/org/junit/contrib/truth/subjects/CollectionSubject.java;<<<<<<< MINE
  public And<CollectionSubject<T>> contains(T item) {
=======
  /**
   * Attests that a Collection contains the provided object or fails.
   */
  public CollectionSubject<T> contains(T item) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_4f20749_ae32b4c/rev_4f20749-ae32b4c/src/main/java/org/junit/contrib/truth/subjects/Subject.java;<<<<<<< MINE
  /**
   * A method which wraps the current Subject concrete
   * subtype in a chaining "And" object.
   */
  protected final And<S> nextChain() {
    return chain;
  }
  
  public And<S> is(T other) {
    if (!(getSubject() == other)) {
      fail("is", other);
=======
  public Subject<T> is(Object other) {

    if (getSubject() == null) { 
      if(other != null) {
        fail("is", other);
      }
    } else {
      if (!getSubject().equals(other)) {
        fail("is", other);
      }
    }
    return this;
  }

  public Subject<T> isNull() {
    if (getSubject() != null) {
      failWithoutSubject("is null");
    }
    return this;
  }
  
  public Subject<T> isNotNull() {
    if (getSubject() == null) {
      failWithoutSubject("is not null");
    }
    return this;
  }

  public Subject<T> isEqualTo(Object other) {
    if (getSubject() == null) { 
      if(other != null) {
        fail("is equal to", other);
      }
    } else {
      if (!getSubject().equals(other)) {
        fail("is equal to", other);
      }
    }
    return this;
  }

  public Subject<T> isNotEqualTo(Object other) {
    if (getSubject() == null) { 
      if(other == null) {
        fail("is not equal to", other);
      }
    } else {
      if (getSubject().equals(other)) {
        fail("is not equal to", other);
      }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_4f20749_ae32b4c/rev_4f20749-ae32b4c/src/test/java/org/junit/contrib/truth/IntegerTest.java;<<<<<<< MINE
  @Test public void addition() {
    ASSERT.that(2 + 2).is(4).and().isBetween(3, 5);
=======
  @Test public void simpleEquality() {
    ASSERT.that(2 + 2).isEqualTo(4);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_05a141c_0767b54/rev_05a141c-0767b54/src/main/java/org/junit/contrib/truth/subjects/IntegerSubject.java;<<<<<<< MINE
  public And<IntegerSubject> isInclusivelyInRange(int lower, int upper) {
    if (lower > upper) {
      throw new IllegalArgumentException(String.format(
          RANGE_BOUNDS_OUT_OF_ORDER_MSG, lower, upper));
    }
=======
  public Subject<Long> isInclusivelyInRange(long lower, long upper) {
    ensureOrderedBoundaries(lower, upper);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_05a141c_0767b54/rev_05a141c-0767b54/src/main/java/org/junit/contrib/truth/subjects/IntegerSubject.java;<<<<<<< MINE
  public And<IntegerSubject> isBetween(int lower, int upper) {
=======
  public Subject<Long> isBetween(long lower, long upper) {
    ensureOrderedBoundaries(lower, upper);
    if (!(lower < getSubject() && getSubject() < upper)) {
      fail("is in between", lower, upper);
    }
    return this;
  }

  /**
   * Guards against inverted lower/upper boundaries, and throws if 
   * they are so inverted.
   */
  private void ensureOrderedBoundaries(long lower, long upper) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_fc7c719_f23a28a/rev_fc7c719-f23a28a/servo-core/src/main/java/com/netflix/servo/annotations/DataSourceType.java;<<<<<<< MINE
    /**
     * A gauge is for numeric values that can be sampled without modification.
     * Examples of metrics that should be gauges are things like current
     * temperature, number of open connections, disk usage, etc.
     */
=======
    /**
     * GAUGE does not save the rate of change. The value measured at a point
     * in time is stored. Examples are: CPU, memory, and disk usage
     */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_fc7c719_f23a28a/rev_fc7c719-f23a28a/servo-core/src/main/java/com/netflix/servo/annotations/DataSourceType.java;<<<<<<< MINE

    /**
     * A counter is for numeric values that get incremented when some event
     * occurs. Counters will be sampled and converted into a rate of change
     * per second. Counter values should be monotonically increasing, i.e.,
     * the value should not decrease.
     */
=======

    /**
     * COUNTER will save the rate of change of the value over a step period.
     * This assumes that the value is always increasing (the difference between
     * the current and the previous value is greater than 0).
     */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_fc7c719_f23a28a/rev_fc7c719-f23a28a/servo-core/src/main/java/com/netflix/servo/annotations/DataSourceType.java;<<<<<<< MINE

    /**
     * An informational attribute is for values that might be useful for
     * debugging, but will not be collected as metrics for monitoring purposes.
     * These values are made available in JMX.
     */
=======

    /**
     * Not part of RRD DST, but useful for debugging. This will not be monitoring
     * by the NOC.
     */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_46f8c84_59b6817/rev_46f8c84-59b6817/src/test/java/org/junit/contrib/truth/AllTests.java;<<<<<<< MINE
    SubjectTest.class,
    ExtensionTest.class,
    DelegationTest.class
=======
    SubjectTest.class,
    ExtensionTest.class
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_d7a2ff6_db7ed46/rev_d7a2ff6-db7ed46/src/main/java/org/junit/contrib/truth/subjects/CollectionSubject.java;<<<<<<< MINE
  CollectionSubject(FailureStrategy failureStrategy, C list) {
=======
  // TODO: Arguably this should even be package private
  protected CollectionSubject(FailureStrategy failureStrategy, C list) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_d7a2ff6_db7ed46/rev_d7a2ff6-db7ed46/src/main/java/org/junit/contrib/truth/subjects/ListSubject.java;<<<<<<< MINE
@GwtCompatible
=======
import org.junit.contrib.truth.FailureStrategy;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_ce59b53_1084df7/rev_ce59b53-1084df7/servo-core/src/main/java/com/netflix/servo/examples/JvmMetricExample.java;<<<<<<< MINE
        scheduler.addPoller(task, 10, TimeUnit.SECONDS);
=======
        scheduler.addPoller(task, samplingInterval, samplingUnit);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_ce59b53_1084df7/rev_ce59b53-1084df7/servo-core/src/main/java/com/netflix/servo/examples/JvmMetricExample.java;<<<<<<< MINE
            Thread.sleep(1000);
=======
            Thread.sleep(samplingUnit.toMillis(samplingInterval));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_ce59b53_1084df7/rev_ce59b53-1084df7/servo-core/src/main/java/com/netflix/servo/annotations/AnnotatedObject.java;<<<<<<< MINE
        attrs = AnnotationUtils.getMonitoredAttributes(obj);
=======
        List<AnnotatedAttribute> attributes =
            AnnotationUtils.getMonitoredAttributes(obj);
        ImmutableList.Builder<AnnotatedAttribute> builder =
            ImmutableList.builder();
        for (AnnotatedAttribute attr : attributes) {
            builder.add(attr.copy(tags));
        }
        attrs = builder.build();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692/servo-core/src/main/java/com/netflix/servo/examples/JvmMetricExample.java;<<<<<<< MINE
 * Example of collecting arbitrary JMX metrics.
=======
 * Example of collecting arbitrary JMX metrics, in this case the standard
 * metrics exposed under java.lang by the JVM.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692/servo-core/src/main/java/com/netflix/servo/annotations/AnnotationUtils.java;<<<<<<< MINE
        // TODO: check Monitor annotations
=======
        List<AnnotatedAttribute> attrs = getMonitoredAttributes(obj);
        if (attrs.isEmpty()) {
            throw new IllegalArgumentException(
                "no Monitor annotations on object " + obj);
        }
        String ctype = obj.getClass().getCanonicalName();
        for (AnnotatedAttribute attr : attrs) {
            Monitor m = attr.getAnnotation();
            Object value = null;
            try {
                value = attr.getValue();
            } catch (Exception e) {
                throw new IllegalArgumentException(
                    "failed to get value for " + m + " on " + ctype, e);
            }

            if (m.type() != DataSourceType.INFORMATIONAL) {
                String vtype = (value == null)
                    ? null
                    : value.getClass().getCanonicalName();
                Number n = asNumber(value);
                if (n == null) {
                    throw new IllegalArgumentException(
                        "expected java.lang.Number, but received " + vtype +
                        " for " + m + " on " + ctype);
                }
            }
        }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692/servo-core/src/main/java/com/netflix/servo/annotations/AnnotatedObject.java;<<<<<<< MINE
        tags = AnnotationUtils.getMonitorTags(obj);
=======

        List<Tag> commonTags = Lists.newArrayList();
        commonTags.add(new BasicTag(CLASS_NAME.getKeyName(), className));
        if (id != null) {
            commonTags.add(new BasicTag(MONITOR_ID.getKeyName(), id));
        }
        tags = BasicTagList.concat(
            AnnotationUtils.getMonitorTags(obj),
            new BasicTagList(commonTags));

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692/servo-core/src/main/java/com/netflix/servo/util/Counters.java;<<<<<<< MINE
    public static void increment(String name, int delta) {
=======
    public static void increment(String name, long delta) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692/servo-core/src/main/java/com/netflix/servo/util/Counters.java;<<<<<<< MINE
    public static void increment(String name, TagList tags, int delta) {
=======
    public static void increment(String name, TagList tags, long delta) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692/servo-core/src/main/java/com/netflix/servo/util/Counters.java;<<<<<<< MINE
    public static void increment(MetricConfig config, int delta) {
=======
    public static void increment(MetricConfig config, long delta) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692/servo-core/src/main/java/com/netflix/servo/tag/StandardTagKeys.java;<<<<<<< MINE
    /** Hostname for the system reporting the metric. */
    HOST("Host");
=======
    /** Monitor id if one is provided via the annotation. */
    MONITOR_ID("MonitorId");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_bfaf34a_bab4692/rev_bfaf34a-bab4692/servo-core/src/test/java/com/netflix/servo/publish/MonitorRegistryMetricPollerTest.java;<<<<<<< MINE
        assertEquals(metric.getConfig(), new MetricConfig("Count"));
=======
        TagList tags = BasicTagList.copyOf(
            new BasicTag("MonitorId", "foo"),
            new BasicTag("ClassName", "com.netflix.servo.util.BasicCounter"),
            DataSourceType.COUNTER);
        assertEquals(metric.getConfig(), new MetricConfig("Count", tags));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_311da4a_e8fe23c/rev_311da4a-e8fe23c/src/main/java/org/junit/contrib/truth/subjects/CollectionSubject.java;<<<<<<< MINE
  @SuppressWarnings("unchecked")
=======
  @SuppressWarnings({ "unchecked", "rawtypes" })
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_311da4a_e8fe23c/rev_311da4a-e8fe23c/src/main/java/org/junit/contrib/truth/subjects/ListSubject.java;<<<<<<< MINE
  @SuppressWarnings("unchecked")
=======
  @SuppressWarnings({ "unchecked", "rawtypes" })
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_311da4a_e8fe23c/rev_311da4a-e8fe23c/src/main/java/org/junit/contrib/truth/subjects/ListSubject.java;<<<<<<< MINE
   * 
=======
   *
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_311da4a_e8fe23c/rev_311da4a-e8fe23c/src/main/java/org/junit/contrib/truth/subjects/ListSubject.java;<<<<<<< MINE
   * 
=======
   *
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_311da4a_e8fe23c/rev_311da4a-e8fe23c/src/main/java/org/junit/contrib/truth/subjects/ListSubject.java;<<<<<<< MINE
   * 
=======
   *
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_311da4a_e8fe23c/rev_311da4a-e8fe23c/src/main/java/org/junit/contrib/truth/subjects/ListSubject.java;<<<<<<< MINE
   * 
=======
   *
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_311da4a_e8fe23c/rev_311da4a-e8fe23c/src/main/java/org/junit/contrib/truth/subjects/IterableSubject.java;<<<<<<< MINE
  @SuppressWarnings("unchecked")
=======
  @SuppressWarnings({ "unchecked", "rawtypes" })
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_acbea65_e8fe23c/rev_acbea65-e8fe23c/src/main/java/org/junit/contrib/truth/subjects/IterableSubject.java;<<<<<<< MINE
  @SuppressWarnings("unchecked")
=======
  @SuppressWarnings({ "unchecked", "rawtypes" })
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_2bb82ca_2bd108d/rev_2bb82ca-2bd108d/src/main/java/org/junit/contrib/truth/subjects/IterableSubject.java;<<<<<<< MINE
  /**
   * Attests that the subject contains one or more objects, or fails
   */
  public And<S> isNotEmpty() {
    if (!getSubject().iterator().hasNext()) {
      fail("isEmpty");
    }
    return nextChain();
  }

  public And<S> hasContentsInOrder(Object... expected) {
    // TODO(kevinb): prettier error message
    List<Object> target = new ArrayList<Object>();
    for (Object t : getSubject()) {
      target.add(t);
=======
  /**
   * Asserts that the items are supplied in the order given by the iterable. For
   * Collections and other things which contain items but may not have guaranteed
   * iteration order, this method should be overridden.
   */
  public And<S> iteratesOverSequence(Object... expectedItems) {
    Iterator<T> actualItems = getSubject().iterator();
    for (Object expected : expectedItems) {
      if (!actualItems.hasNext()) {
        fail("iterates through", Arrays.asList(expectedItems));
      } else {
        Object actual = actualItems.next();
        if (actual == expected || actual != null && actual.equals(expected)) {
          continue;
        } else {
          fail("iterates through", Arrays.asList(expectedItems));
        }
      }
    }
    if (actualItems.hasNext()) {
      fail("iterates through", Arrays.asList(expectedItems));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_8b6bb73_2bd108d/rev_8b6bb73-2bd108d/src/main/java/org/junit/contrib/truth/subjects/Subject.java;<<<<<<< MINE
 * 
=======
 *
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_8b6bb73_2bd108d/rev_8b6bb73-2bd108d/src/main/java/org/junit/contrib/truth/subjects/Subject.java;<<<<<<< MINE
 * 
=======
 *
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_8b6bb73_2bd108d/rev_8b6bb73-2bd108d/src/main/java/org/junit/contrib/truth/subjects/Subject.java;<<<<<<< MINE
      @SuppressWarnings("unchecked") 
=======
      @SuppressWarnings("unchecked")
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_8b6bb73_2bd108d/rev_8b6bb73-2bd108d/src/main/java/org/junit/contrib/truth/subjects/Subject.java;<<<<<<< MINE
    if (getSubject() == null) { 
=======
    if (getSubject() == null) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_8b6bb73_2bd108d/rev_8b6bb73-2bd108d/src/main/java/org/junit/contrib/truth/subjects/Subject.java;<<<<<<< MINE
    if (getSubject() == null) { 
=======
    if (getSubject() == null) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_8b6bb73_2bd108d/rev_8b6bb73-2bd108d/src/main/java/org/junit/contrib/truth/subjects/Subject.java;<<<<<<< MINE
    if (getSubject() == null) { 
=======
    if (getSubject() == null) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_8b6bb73_2bd108d/rev_8b6bb73-2bd108d/src/main/java/org/junit/contrib/truth/subjects/Subject.java;<<<<<<< MINE
   * style, such that subjects can make propositions in series.  
=======
   * style, such that subjects can make propositions in series.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_8b6bb73_2bd108d/rev_8b6bb73-2bd108d/src/main/java/org/junit/contrib/truth/subjects/Subject.java;<<<<<<< MINE
  }  
=======
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_9d94784_8f1681d/rev_9d94784-8f1681d/src/main/java/graphql/execution/ExecutionContext.java;<<<<<<< MINE
    public ExecutionContext(GraphQLSchema graphQLSchema, ExecutionId executionId, ExecutionStrategy executionStrategy, Map<String, FragmentDefinition> fragmentsByName, OperationDefinition operationDefinition, Map<String, Object> variables, Object root) {
=======
    public ExecutionContext(GraphQLSchema graphQLSchema, ExecutionStrategy queryStrategy, ExecutionStrategy mutationStrategy, Map<String, FragmentDefinition> fragmentsByName, OperationDefinition operationDefinition, Map<String, Object> variables, Object root) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_9d94784_8f1681d/rev_9d94784-8f1681d/src/main/java/graphql/execution/ExecutionContext.java;<<<<<<< MINE
        this.executionId = executionId;
        this.executionStrategy = executionStrategy;
=======
        this.queryStrategy = queryStrategy;
        this.mutationStrategy = mutationStrategy;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_9d94784_8f1681d/rev_9d94784-8f1681d/src/main/java/graphql/execution/ExecutionContextBuilder.java;<<<<<<< MINE
    public ExecutionContextBuilder executionId(ExecutionId executionId) {
        this.executionId = executionId;
        return this;
    }

    public ExecutionContext build(GraphQLSchema graphQLSchema, ExecutionStrategy executionStrategy, Object root, Document document, String operationName, Map<String, Object> args) {
        // preconditions
        assertNotNull(executionId,"You must provide a query identifier");

=======
    public ExecutionContext build(GraphQLSchema graphQLSchema, ExecutionStrategy queryStrategy, ExecutionStrategy mutationStrategy, Object root, Document document, String operationName, Map<String, Object> args) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_9d94784_8f1681d/rev_9d94784-8f1681d/src/main/java/graphql/execution/ExecutionContextBuilder.java;<<<<<<< MINE
                executionId,
                executionStrategy,
=======
                queryStrategy,
                mutationStrategy,
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_9d94784_8f1681d/rev_9d94784-8f1681d/src/main/java/graphql/execution/Execution.java;<<<<<<< MINE
    public Execution(ExecutionStrategy executionStrategy) {
        this.strategy = executionStrategy == null ? new SimpleExecutionStrategy() : executionStrategy;
=======
    public Execution(ExecutionStrategy queryStrategy, ExecutionStrategy mutationStrategy) {
        this.queryStrategy = queryStrategy != null ? queryStrategy : new SimpleExecutionStrategy();
        this.mutationStrategy = mutationStrategy != null ? mutationStrategy : new SimpleExecutionStrategy();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_d4097e9_a339c65/rev_d4097e9-a339c65/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
    /**
     * A GraphQL object ready to execute queries
     *
     * @param graphQLSchema     the schema to use
     * @param executionStrategy the execution strategy to use
     *
     * @deprecated use the {@link #newObject(GraphQLSchema)} builder instead.  This will be removed in a future version.
     */
    @SuppressWarnings("DeprecatedIsStillUsed")
    public GraphQL(GraphQLSchema graphQLSchema, ExecutionStrategy executionStrategy) {
=======
    public GraphQL(GraphQLSchema graphQLSchema, ExecutionStrategy queryStrategy) {
        this(graphQLSchema, queryStrategy, null);
    }

    public GraphQL(GraphQLSchema graphQLSchema, ExecutionStrategy queryStrategy, ExecutionStrategy mutationStrategy) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_73068e7_8da4a30/rev_73068e7-8da4a30/servo-core/src/main/java/com/netflix/servo/publish/FileMetricObserver.java;<<<<<<< MINE
            LOGGER.debug("writing %d metrics to file %s", metrics.size(), file);
=======
            LOGGER.debug("writing {} metrics to file {}", metrics.size(), file);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_56eb2a7_b20ae0a/rev_56eb2a7-b20ae0a/src/main/java/graphql/execution/ExecutionContextBuilder.java;<<<<<<< MINE
    public ExecutionContextBuilder(ValuesResolver valuesResolver, Instrumentation instrumentation) {
=======
    private ExecutionId executionId;

    public ExecutionContextBuilder(ValuesResolver valuesResolver) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_56eb2a7_b20ae0a/rev_56eb2a7-b20ae0a/src/main/java/graphql/execution/ExecutionContextBuilder.java;<<<<<<< MINE

    public ExecutionContext build(GraphQLSchema graphQLSchema, ExecutionStrategy executionStrategy, Object root, Document document, String operationName, Map<String, Object> args) {
=======
    public ExecutionContextBuilder executionId(ExecutionId executionId) {
        this.executionId = executionId;
        return this;
    }

    public ExecutionContext build(GraphQLSchema graphQLSchema, ExecutionStrategy queryStrategy, ExecutionStrategy mutationStrategy, Object root, Document document, String operationName, Map<String, Object> args) {
        // preconditions
        assertNotNull(executionId,"You must provide a query identifier");

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_56eb2a7_b20ae0a/rev_56eb2a7-b20ae0a/src/main/java/graphql/execution/ExecutionContextBuilder.java;<<<<<<< MINE
        ExecutionContext executionContext = new ExecutionContext(instrumentation);
        executionContext.setGraphQLSchema(graphQLSchema);
        executionContext.setExecutionStrategy(executionStrategy);
        executionContext.setOperationDefinition(operation);
        executionContext.setRoot(root);
        executionContext.setFragmentsByName(fragmentsByName);
        Map<String, Object> variableValues = valuesResolver.getVariableValues(graphQLSchema, operation.getVariableDefinitions(), args);
        executionContext.setVariables(variableValues);
        return executionContext;
=======
        return new ExecutionContext(
                executionId,
                graphQLSchema,
                queryStrategy,
                mutationStrategy,
                fragmentsByName,
                operation,
                variableValues,
                root);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_56eb2a7_b20ae0a/rev_56eb2a7-b20ae0a/src/main/java/graphql/execution/Execution.java;<<<<<<< MINE
    public ExecutionResult execute(GraphQLSchema graphQLSchema, Object root, Document document, String operationName, Map<String, Object> args) {
        ExecutionContextBuilder executionContextBuilder = new ExecutionContextBuilder(new ValuesResolver(),instrumentation);
        ExecutionContext executionContext = executionContextBuilder.build(graphQLSchema, strategy, root, document, operationName, args);
=======
    public ExecutionResult execute(ExecutionId executionId, GraphQLSchema graphQLSchema, Object root, Document document, String operationName, Map<String, Object> args) {
        ExecutionContextBuilder executionContextBuilder = new ExecutionContextBuilder(new ValuesResolver());
        ExecutionContext executionContext = executionContextBuilder
                .executionId(executionId)
                .build(graphQLSchema, queryStrategy, mutationStrategy, root, document, operationName, args);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_56eb2a7_b20ae0a/rev_56eb2a7-b20ae0a/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
    public GraphQL(GraphQLSchema graphQLSchema, ExecutionStrategy executionStrategy) {
        this(graphQLSchema, executionStrategy, NoOpInstrumentation.INSTANCE);
    }

    public GraphQL(GraphQLSchema graphQLSchema, ExecutionStrategy executionStrategy, Instrumentation instrumentation) {
=======
    public GraphQL(GraphQLSchema graphQLSchema, ExecutionStrategy queryStrategy) {
        this(graphQLSchema, queryStrategy, null);
    }

    public GraphQL(GraphQLSchema graphQLSchema, ExecutionStrategy queryStrategy, ExecutionStrategy mutationStrategy) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_56eb2a7_b20ae0a/rev_56eb2a7-b20ae0a/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
        this.executionStrategy = executionStrategy;
        this.instrumentation = instrumentation;
=======
        this.queryStrategy = queryStrategy;
        this.mutationStrategy = mutationStrategy;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_56eb2a7_b20ae0a/rev_56eb2a7-b20ae0a/src/main/java/graphql/execution/Execution.java;<<<<<<< MINE
    private final FieldCollector fieldCollector = new FieldCollector();
    private final ExecutionStrategy strategy;
    private final Instrumentation instrumentation;

    public Execution(ExecutionStrategy strategy, Instrumentation instrumentation) {
        this.strategy = strategy == null ? new SimpleExecutionStrategy() : strategy;
        this.instrumentation = instrumentation;
=======
    private FieldCollector fieldCollector = new FieldCollector();
    private ExecutionStrategy queryStrategy;
    private ExecutionStrategy mutationStrategy;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_c9212bb_b20ae0a/rev_c9212bb-b20ae0a/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
            return new ExecutionResultImpl(Arrays.asList(invalidSyntaxError));
=======
            return new ExecutionResultImpl(Collections.singletonList(invalidSyntaxError));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_c9212bb_b20ae0a/rev_c9212bb-b20ae0a/src/main/java/graphql/Assert.java;<<<<<<< MINE
    public static void assertNotNull(Object object, String errorMessage) {
        if (object != null) return;
=======
    public static <T> T assertNotNull(T object, String errorMessage) {
        if (object != null) return object;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_c9212bb_b20ae0a/rev_c9212bb-b20ae0a/src/main/java/graphql/Assert.java;<<<<<<< MINE
    public static void assertNotEmpty(Collection<?> c, String errorMessage) {
=======
    public static <T> Collection<T> assertNotEmpty(Collection<T> c, String errorMessage) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_c9212bb_b20ae0a/rev_c9212bb-b20ae0a/src/main/java/graphql/Assert.java;<<<<<<< MINE
        return;
=======
        return c;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_a48f27d_5e9f899/rev_a48f27d-5e9f899/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
    private final GraphQLSchema graphQLSchema;
    private final ExecutionStrategy queryStrategy;
    private final ExecutionStrategy mutationStrategy;
    private final Instrumentation instrumentation;

    //
    // later PR changes will allow api consumers to provide their own id provider
    //
    // see https://github.com/graphql-java/graphql-java/pull/276 for the builder pattern
    // needed to make this sustainable.  But for now we will use a hard coded approach.
    //
    private final ExecutionIdProvider idProvider = new ExecutionIdProvider() {
=======
    private static final ExecutionIdProvider DEFAULT_EXECUTION_ID_PROVIDER = new ExecutionIdProvider() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_a48f27d_5e9f899/rev_a48f27d-5e9f899/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
        this(graphQLSchema,queryStrategy,mutationStrategy,NoOpInstrumentation.INSTANCE);
    }

    private GraphQL(GraphQLSchema graphQLSchema, ExecutionStrategy queryStrategy, ExecutionStrategy mutationStrategy, Instrumentation instrumentation) {
        this.graphQLSchema = graphQLSchema;
        this.queryStrategy = queryStrategy;
=======
        this(graphQLSchema,queryStrategy,mutationStrategy, DEFAULT_EXECUTION_ID_PROVIDER);
    }

    private GraphQL(GraphQLSchema graphQLSchema, ExecutionStrategy queryStrategy, ExecutionStrategy mutationStrategy, ExecutionIdProvider idProvider) {
        this.graphQLSchema = assertNotNull(graphQLSchema,"queryStrategy must be non null");
        this.queryStrategy = assertNotNull(queryStrategy, "queryStrategy must be non null");
        this.idProvider = assertNotNull(idProvider, "idProvider must be non null");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_e4004d3_f7c259f/rev_e4004d3-f7c259f/src/main/java/graphql/Scalars.java;<<<<<<< MINE
    private static boolean isWholeNumber(Object input) {
        return input instanceof Long
                || input instanceof Integer
                || input instanceof Short
                || input instanceof Byte;
    }

    // true if its a number or string that we will attempt to convert to a number via toNumber()
    private static boolean isNumberIsh(Object input) {
        return input instanceof Number || input instanceof String;
    }

    private static Number toNumber(Object input) {
        if (input instanceof Number) {
            return (Number) input;
        }
        if (input instanceof String) {
            // we go to double and then let each scalar type decide what precision they want from it.  This
            // will allow lenient behavior in string input as well as Number input... eg "42.3" as a string to a Long
            // scalar is the same as new Double(42.3) to a Long scalar.
            //
            // each type will use Java Narrow casting to turn this into the desired type (Long, Integer, Short etc...)
            //
            // See http://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html#jls-5.1.3
            //
            return Double.parseDouble((String) input);
        }
        // we never expect this and if we do, the code is wired wrong
        throw new AssertException("Unexpected case - this call should be protected by a previous call to isNumberIsh()");
    }


    public static GraphQLScalarType GraphQLInt = new GraphQLScalarType("Int", "Built-in Int", new Coercing<Integer>() {
=======
    public static GraphQLScalarType GraphQLInt = new GraphQLScalarType("Int", "Built-in Int", new Coercing<Integer, Integer>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_e4004d3_f7c259f/rev_e4004d3-f7c259f/src/main/java/graphql/Scalars.java;<<<<<<< MINE
    public static GraphQLScalarType GraphQLLong = new GraphQLScalarType("Long", "Long type", new Coercing<Long>() {
=======

    public static GraphQLScalarType GraphQLLong = new GraphQLScalarType("Long", "Long type", new Coercing<Long, Long>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_e4004d3_f7c259f/rev_e4004d3-f7c259f/src/main/java/graphql/Scalars.java;<<<<<<< MINE
    public static GraphQLScalarType GraphQLShort = new GraphQLScalarType("Short", "Built-in Short as Int", new Coercing<Short>() {
=======
    public static GraphQLScalarType GraphQLFloat = new GraphQLScalarType("Float", "Built-in Float", new Coercing<Double, Double>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_e4004d3_f7c259f/rev_e4004d3-f7c259f/src/main/java/graphql/Scalars.java;<<<<<<< MINE
    public static GraphQLScalarType GraphQLByte = new GraphQLScalarType("Byte", "Built-in Byte as Int", new Coercing<Byte>() {
=======
    public static GraphQLScalarType GraphQLString = new GraphQLScalarType("String", "Built-in String", new Coercing<String, String>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_e4004d3_f7c259f/rev_e4004d3-f7c259f/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Byte serialize(Object input) {
            if (input instanceof Byte) {
                return (Byte) input;
            } else if (isNumberIsh(input)) {
                return toNumber(input).byteValue();
=======
        public String serialize(Object input) {
            return input == null ? null : input.toString();
        }

        @Override
        public String parseValue(Object input) {
            return serialize(input);
        }

        @Override
        public String parseLiteral(Object input) {
            if (!(input instanceof StringValue)) return null;
            return ((StringValue) input).getValue();
        }
    });


    public static GraphQLScalarType GraphQLBoolean = new GraphQLScalarType("Boolean", "Built-in Boolean", new Coercing<Boolean, Boolean>() {
        @Override
        public Boolean serialize(Object input) {
            if (input instanceof Boolean) {
                return (Boolean) input;
            } else if (input instanceof Integer) {
                return (Integer) input > 0;
            } else if (input instanceof String) {
                return Boolean.parseBoolean((String) input);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_e4004d3_f7c259f/rev_e4004d3-f7c259f/src/main/java/graphql/Scalars.java;<<<<<<< MINE
    public static GraphQLScalarType GraphQLFloat = new GraphQLScalarType("Float", "Built-in Float", new Coercing<Double>() {
=======
    public static GraphQLScalarType GraphQLID = new GraphQLScalarType("ID", "Built-in ID", new Coercing<Object, Object>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_e4004d3_f7c259f/rev_e4004d3-f7c259f/src/main/java/graphql/Scalars.java;<<<<<<< MINE

    public static GraphQLScalarType GraphQLString = new GraphQLScalarType("String", "Built-in String", new Coercing<String>() {
        @Override
        public String serialize(Object input) {
            return input == null ? null : input.toString();
        }

        @Override
        public String parseValue(Object input) {
            return serialize(input);
        }

        @Override
        public String parseLiteral(Object input) {
            if (!(input instanceof StringValue)) return null;
            return ((StringValue) input).getValue();
        }
    });


    public static GraphQLScalarType GraphQLBoolean = new GraphQLScalarType("Boolean", "Built-in Boolean", new Coercing<Boolean>() {
=======
    public static GraphQLScalarType GraphQLByte = new GraphQLScalarType("Byte", "Built-in Byte as Int", new Coercing<Byte, Byte>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_e4004d3_f7c259f/rev_e4004d3-f7c259f/src/main/java/graphql/Scalars.java;<<<<<<< MINE

    public static GraphQLScalarType GraphQLID = new GraphQLScalarType("ID", "Built-in ID", new Coercing<Object>() {
=======
    public static GraphQLScalarType GraphQLShort = new GraphQLScalarType("Short", "Built-in Short as Int", new Coercing<Short, Short>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_e4004d3_f7c259f/rev_e4004d3-f7c259f/src/main/java/graphql/Scalars.java;<<<<<<< MINE

    public static GraphQLScalarType GraphQLChar = new GraphQLScalarType("Char", "Built-in Char as Character", new Coercing<Character>() {
=======
    public static GraphQLScalarType GraphQLChar = new GraphQLScalarType("Char", "Built-in Char as Character", new Coercing<Character, Character>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
    private final GraphQLSchema graphQLSchema;
    private final ExecutionStrategy queryStrategy;
    private final ExecutionStrategy mutationStrategy;
    //
    // later PR changes will allow api consumers to provide their own id provider
    //
    // see https://github.com/graphql-java/graphql-java/pull/276 for the builder pattern
    // needed to make this sustainable.  But for now we will use a hard coded approach.
    //
    private final ExecutionIdProvider idProvider = new ExecutionIdProvider() {
=======
    private static final ExecutionIdProvider DEFAULT_EXECUTION_ID_PROVIDER = new ExecutionIdProvider() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
        this.graphQLSchema = graphQLSchema;
        this.queryStrategy = queryStrategy;
=======
        this(graphQLSchema,queryStrategy,mutationStrategy, DEFAULT_EXECUTION_ID_PROVIDER);
    }

    private GraphQL(GraphQLSchema graphQLSchema, ExecutionStrategy queryStrategy, ExecutionStrategy mutationStrategy, ExecutionIdProvider idProvider) {
        this.graphQLSchema = assertNotNull(graphQLSchema,"queryStrategy must be non null");
        this.queryStrategy = assertNotNull(queryStrategy, "queryStrategy must be non null");
        this.idProvider = assertNotNull(idProvider, "idProvider must be non null");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/GraphQL.java;<<<<<<< MINE
            //noinspection deprecation
            return new GraphQL(graphQLSchema, queryExecutionStrategy, mutationExecutionStrategy);
=======
            return new GraphQL(graphQLSchema, queryExecutionStrategy, mutationExecutionStrategy, idProvider);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(GraphQLString)))
=======
                    .type(nonNull(GraphQLString)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(new GraphQLTypeReference("__Type"))))
=======
                    .type(nonNull(new GraphQLTypeReference("__Type"))))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(GraphQLString)))
=======
                    .type(nonNull(GraphQLString)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__InputValue))))
=======
                    .type(nonNull(list(nonNull(__InputValue))))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(new GraphQLTypeReference("__Type"))))
=======
                    .type(nonNull(new GraphQLTypeReference("__Type"))))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(GraphQLBoolean))
=======
                    .type(nonNull(GraphQLBoolean))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(GraphQLString)))
=======
                    .type(nonNull(GraphQLString)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(GraphQLBoolean))
=======
                    .type(nonNull(GraphQLBoolean))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(__TypeKind))
=======
                    .type(nonNull(__TypeKind))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLList(new GraphQLNonNull(__Field)))
=======
                    .type(list(nonNull(__Field)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLList(new GraphQLNonNull(new GraphQLTypeReference("__Type"))))
=======
                    .type(list(nonNull(new GraphQLTypeReference("__Type"))))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLList(new GraphQLNonNull(new GraphQLTypeReference("__Type"))))
=======
                    .type(list(nonNull(new GraphQLTypeReference("__Type"))))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLList(new GraphQLNonNull(__EnumValue)))
=======
                    .type(list(nonNull(__EnumValue)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLList(new GraphQLNonNull(__InputValue)))
=======
                    .type(list(nonNull(__InputValue)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLList(new GraphQLNonNull(__DirectiveLocation)))
=======
                    .type(list(nonNull(__DirectiveLocation)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__InputValue))))
=======
                    .type(nonNull(list(nonNull(__InputValue))))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                                    && directive.validLocations().contains(DirectiveLocation.FRAGMENT_SPREAD));
=======
                                            && directive.validLocations().contains(DirectiveLocation.FRAGMENT_SPREAD));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__Type))))
=======
                    .type(nonNull(list(nonNull(__Type))))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(__Type))
=======
                    .type(nonNull(__Type))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__Directive))))
=======
                    .type(nonNull(list(nonNull(__Directive))))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
            .type(new GraphQLNonNull(__Schema))
=======
            .type(nonNull(__Schema))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(GraphQLString)))
=======
                    .type(nonNull(GraphQLString)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/introspection/Introspection.java;<<<<<<< MINE
            .type(new GraphQLNonNull(GraphQLString))
=======
            .type(nonNull(GraphQLString))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
    public static GraphQLScalarType GraphQLInt = new GraphQLScalarType("Int", "Built-in Int", new Coercing<Integer>() {
=======
    private static boolean isWholeNumber(Object input) {
        return input instanceof Long
                || input instanceof Integer
                || input instanceof Short
                || input instanceof Byte;
    }

    // true if its a number or string that we will attempt to convert to a number via toNumber()
    private static boolean isNumberIsh(Object input) {
        return input instanceof Number || input instanceof String;
    }

    private static Number toNumber(Object input) {
        if (input instanceof Number) {
            return (Number) input;
        }
        if (input instanceof String) {
            // we go to double and then let each scalar type decide what precision they want from it.  This
            // will allow lenient behavior in string input as well as Number input... eg "42.3" as a string to a Long
            // scalar is the same as new Double(42.3) to a Long scalar.
            //
            // each type will use Java Narrow casting to turn this into the desired type (Long, Integer, Short etc...)
            //
            // See http://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html#jls-5.1.3
            //
            return Double.parseDouble((String) input);
        }
        // we never expect this and if we do, the code is wired wrong
        throw new AssertException("Unexpected case - this call should be protected by a previous call to isNumberIsh()");
    }


    public static GraphQLScalarType GraphQLInt = new GraphQLScalarType("Int", "Built-in Int", new Coercing<Integer, Integer>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
            if (input instanceof String) {
                return Integer.parseInt((String) input);
            } else if (input instanceof Integer) {
=======
            if (input instanceof Integer) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE

    public static GraphQLScalarType GraphQLLong = new GraphQLScalarType("Long", "Long type", new Coercing<Long>() {
=======
    public static GraphQLScalarType GraphQLLong = new GraphQLScalarType("Long", "Long type", new Coercing<Long, Long>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
            if (input instanceof String) {
                return Long.parseLong((String) input);
            } else if (input instanceof Long) {
=======
            if (input instanceof Long) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
            } else if (input instanceof Integer) {
                return ((Integer) input).longValue();
=======
            } else if (isNumberIsh(input)) {
                return toNumber(input).longValue();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
    public static GraphQLScalarType GraphQLFloat = new GraphQLScalarType("Float", "Built-in Float", new Coercing<Double>() {
=======
    public static GraphQLScalarType GraphQLShort = new GraphQLScalarType("Short", "Built-in Short as Int", new Coercing<Short, Short>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Double serialize(Object input) {
            if (input instanceof String) {
                return Double.parseDouble((String) input);
            } else if (input instanceof Double) {
                return (Double) input;
            } else if (input instanceof Float) {
                return (double) (Float) input;
            } else if (input instanceof Integer) {
                return (double) (Integer) input;
=======
        public Short serialize(Object input) {
            if (input instanceof Short) {
                return (Short) input;
            } else if (isNumberIsh(input)) {
                return toNumber(input).shortValue();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Double parseValue(Object input) {
=======
        public Short parseValue(Object input) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Double parseLiteral(Object input) {
            if (input instanceof IntValue) {
                return ((IntValue) input).getValue().doubleValue();
            } else if (input instanceof FloatValue) {
                return ((FloatValue) input).getValue().doubleValue();
            } else {
                return null;
=======
        public Short parseLiteral(Object input) {
            if (!(input instanceof IntValue)) return null;
            BigInteger value = ((IntValue) input).getValue();
            if (value.compareTo(SHORT_MIN) < 0 || value.compareTo(SHORT_MAX) > 0) {
                throw new GraphQLException("Int literal is too big or too small for a short, would cause overflow");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
    public static GraphQLScalarType GraphQLString = new GraphQLScalarType("String", "Built-in String", new Coercing<String>() {
=======
    public static GraphQLScalarType GraphQLByte = new GraphQLScalarType("Byte", "Built-in Byte as Int", new Coercing<Byte, Byte>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public String serialize(Object input) {
            return input == null ? null : input.toString();
        }

        @Override
        public String parseValue(Object input) {
            return serialize(input);
        }

        @Override
        public String parseLiteral(Object input) {
            if (!(input instanceof StringValue)) return null;
            return ((StringValue) input).getValue();
        }
    });


    public static GraphQLScalarType GraphQLBoolean = new GraphQLScalarType("Boolean", "Built-in Boolean", new Coercing<Boolean>() {
        @Override
        public Boolean serialize(Object input) {
            if (input instanceof Boolean) {
                return (Boolean) input;
            } else if (input instanceof Integer) {
                return (Integer) input > 0;
            } else if (input instanceof String) {
                return Boolean.parseBoolean((String) input);
=======
        public Byte serialize(Object input) {
            if (input instanceof Byte) {
                return (Byte) input;
            } else if (isNumberIsh(input)) {
                return toNumber(input).byteValue();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Boolean parseValue(Object input) {
=======
        public Byte parseValue(Object input) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Boolean parseLiteral(Object input) {
            if (!(input instanceof BooleanValue)) return null;
            return ((BooleanValue) input).isValue();
=======
        public Byte parseLiteral(Object input) {
            if (!(input instanceof IntValue)) return null;
            BigInteger value = ((IntValue) input).getValue();
            if (value.compareTo(BYTE_MIN) < 0 || value.compareTo(BYTE_MAX) > 0) {
                throw new GraphQLException("Int literal is too big or too small for a byte, would cause overflow");
            }
            return value.byteValue();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
    public static GraphQLScalarType GraphQLID = new GraphQLScalarType("ID", "Built-in ID", new Coercing<Object>() {
=======
    public static GraphQLScalarType GraphQLFloat = new GraphQLScalarType("Float", "Built-in Float", new Coercing<Double, Double>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Object serialize(Object input) {
            if (input instanceof String) {
                return input;
            }
            if (input instanceof Integer) {
                return String.valueOf(input);
=======
        public Double serialize(Object input) {
            if (input instanceof Double) {
                return (Double) input;
            } else if (isNumberIsh(input)) {
                return toNumber(input).doubleValue();
            } else {
                return null;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Object parseValue(Object input) {
=======
        public Double parseValue(Object input) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Object parseLiteral(Object input) {
            if (input instanceof StringValue) {
                return ((StringValue) input).getValue();
            }
=======
        public Double parseLiteral(Object input) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
                return ((IntValue) input).getValue().toString();
=======
                return ((IntValue) input).getValue().doubleValue();
            } else if (input instanceof FloatValue) {
                return ((FloatValue) input).getValue().doubleValue();
            } else {
                return null;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
    public static GraphQLScalarType GraphQLBigInteger = new GraphQLScalarType("BigInteger", "Built-in java.math.BigInteger", new Coercing<BigInteger>() {
=======
    public static GraphQLScalarType GraphQLBigInteger = new GraphQLScalarType("BigInteger", "Built-in java.math.BigInteger", new Coercing<BigInteger, BigInteger>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
            } else if (input instanceof Integer) {
                return BigInteger.valueOf((Integer) input);
            } else if (input instanceof Long) {
                return BigInteger.valueOf((Long) input);
=======
            } else if (isNumberIsh(input)) {
                return BigInteger.valueOf(toNumber(input).longValue());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
    public static GraphQLScalarType GraphQLBigDecimal = new GraphQLScalarType("BigDecimal", "Built-in java.math.BigDecimal", new Coercing<BigDecimal>() {
=======
    public static GraphQLScalarType GraphQLBigDecimal = new GraphQLScalarType("BigDecimal", "Built-in java.math.BigDecimal", new Coercing<BigDecimal, BigDecimal>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
            } else if (input instanceof Float) {
                return BigDecimal.valueOf((Float) input);
            } else if (input instanceof Double) {
                return BigDecimal.valueOf((Double) input);
            } else if (input instanceof Integer) {
                return BigDecimal.valueOf((Integer) input);
            } else if (input instanceof Long) {
                return BigDecimal.valueOf((Long) input);
=======
            } else if (isWholeNumber(input)) {
                return BigDecimal.valueOf(toNumber(input).longValue());
            } else if (input instanceof Number) {
                return BigDecimal.valueOf(toNumber(input).doubleValue());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
    public static GraphQLScalarType GraphQLByte = new GraphQLScalarType("Byte", "Built-in Byte as Int", new Coercing<Byte>() {
=======

    public static GraphQLScalarType GraphQLString = new GraphQLScalarType("String", "Built-in String", new Coercing<String,String>() {
        @Override
        public String serialize(Object input) {
            return input == null ? null : input.toString();
        }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Byte serialize(Object input) {
            if (input instanceof String) {
                return Byte.parseByte((String) input);
            } else if (input instanceof Byte) {
                return (Byte) input;
=======
        public String parseValue(Object input) {
            return serialize(input);
        }

        @Override
        public String parseLiteral(Object input) {
            if (!(input instanceof StringValue)) return null;
            return ((StringValue) input).getValue();
        }
    });


    public static GraphQLScalarType GraphQLBoolean = new GraphQLScalarType("Boolean", "Built-in Boolean", new Coercing<Boolean,Boolean>() {
        @Override
        public Boolean serialize(Object input) {
            if (input instanceof Boolean) {
                return (Boolean) input;
            } else if (input instanceof Integer) {
                return (Integer) input > 0;
            } else if (input instanceof String) {
                return Boolean.parseBoolean((String) input);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Byte parseValue(Object input) {
=======
        public Boolean parseValue(Object input) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Byte parseLiteral(Object input) {
            if (!(input instanceof IntValue)) return null;
            BigInteger value = ((IntValue) input).getValue();
            if (value.compareTo(BYTE_MIN) < 0 || value.compareTo(BYTE_MAX) > 0) {
                throw new GraphQLException("Int literal is too big or too small for a byte, would cause overflow");
            }
            return value.byteValue();
=======
        public Boolean parseLiteral(Object input) {
            if (!(input instanceof BooleanValue)) return null;
            return ((BooleanValue) input).isValue();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
    public static GraphQLScalarType GraphQLShort = new GraphQLScalarType("Short", "Built-in Short as Int", new Coercing<Short>() {
=======

    public static GraphQLScalarType GraphQLID = new GraphQLScalarType("ID", "Built-in ID", new Coercing<Object,Object>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Short serialize(Object input) {
=======
        public Object serialize(Object input) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
                return Short.parseShort((String) input);
            } else if (input instanceof Short) {
                return (Short) input;
            } else {
                return null;
=======
                return input;
            }
            if (input instanceof Integer) {
                return String.valueOf(input);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Short parseValue(Object input) {
=======
        public Object parseValue(Object input) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
        public Short parseLiteral(Object input) {
            if (!(input instanceof IntValue)) return null;
            BigInteger value = ((IntValue) input).getValue();
            if (value.compareTo(SHORT_MIN) < 0 || value.compareTo(SHORT_MAX) > 0) {
                throw new GraphQLException("Int literal is too big or too small for a short, would cause overflow");
=======
        public Object parseLiteral(Object input) {
            if (input instanceof StringValue) {
                return ((StringValue) input).getValue();
            }
            if (input instanceof IntValue) {
                return ((IntValue) input).getValue().toString();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
            return value.shortValue();
=======
            return null;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/Scalars.java;<<<<<<< MINE
    public static GraphQLScalarType GraphQLChar = new GraphQLScalarType("Char", "Built-in Char as Character", new Coercing<Character>() {
=======

    public static GraphQLScalarType GraphQLChar = new GraphQLScalarType("Char", "Built-in Char as Character", new Coercing<Character,Character>() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/relay/SimpleListConnection.java;<<<<<<< MINE
            edges.add(new Edge(object, new ConnectionCursor(createCursor(ix++))));
=======
            edges.add(new DefaultEdge(object, new DefaultConnectionCursor(createCursor(ix++))));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/relay/SimpleListConnection.java;<<<<<<< MINE
        Connection connection = new Connection();
        connection.setPageInfo(new PageInfo());
=======
        DefaultConnection connection = new DefaultConnection();
        connection.setPageInfo(new DefaultPageInfo());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/main/java/graphql/relay/SimpleListConnection.java;<<<<<<< MINE
        return new ConnectionCursor(cursor);
=======
        return new DefaultConnectionCursor(cursor);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/test/groovy/readme/ReadmeExamples.java;<<<<<<< MINE
        new GraphQLList(GraphQLString); // a list of Strings
=======
        GraphQLList.list(GraphQLString); // a list of Strings
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/test/groovy/readme/ReadmeExamples.java;<<<<<<< MINE
        new GraphQLNonNull(GraphQLString); // a non null String
=======
        GraphQLNonNull.nonNull(GraphQLString); // a non null String

        // with static imports its even shorter
        newArgument()
                .name("example")
                .type(nonNull(list(GraphQLString)));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/test/groovy/graphql/StarWarsSchema.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(GraphQLString)))
=======
                    .type(nonNull(GraphQLString)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/test/groovy/graphql/StarWarsSchema.java;<<<<<<< MINE
                    .type(new GraphQLList(new GraphQLTypeReference("Character"))))
=======
                    .type(list(new GraphQLTypeReference("Character"))))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/test/groovy/graphql/StarWarsSchema.java;<<<<<<< MINE
                    .type(new GraphQLList(episodeEnum)))
=======
                    .type(list(episodeEnum)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/test/groovy/graphql/StarWarsSchema.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(GraphQLString)))
=======
                    .type(nonNull(GraphQLString)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/test/groovy/graphql/StarWarsSchema.java;<<<<<<< MINE
                    .type(new GraphQLList(characterInterface))
=======
                    .type(list(characterInterface))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/test/groovy/graphql/StarWarsSchema.java;<<<<<<< MINE
                    .type(new GraphQLList(episodeEnum)))
=======
                    .type(list(episodeEnum)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/test/groovy/graphql/StarWarsSchema.java;<<<<<<< MINE
                    .type(new GraphQLNonNull(GraphQLString)))
=======
                    .type(nonNull(GraphQLString)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/test/groovy/graphql/StarWarsSchema.java;<<<<<<< MINE
                    .type(new GraphQLList(characterInterface))
=======
                    .type(list(characterInterface))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/test/groovy/graphql/StarWarsSchema.java;<<<<<<< MINE
                    .type(new GraphQLList(episodeEnum)))
=======
                    .type(list(episodeEnum)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/test/groovy/graphql/StarWarsSchema.java;<<<<<<< MINE
                            .type(new GraphQLNonNull(GraphQLString)))
=======
                            .type(nonNull(GraphQLString)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_43abaef_62ab848/rev_43abaef-62ab848/src/test/groovy/graphql/StarWarsSchema.java;<<<<<<< MINE
                            .type(new GraphQLNonNull(GraphQLString)))
=======
                            .type(nonNull(GraphQLString)))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/main/java/com/netflix/servo/monitor/BasicStopwatch.java;<<<<<<< MINE
        startTime = new AtomicLong(0L);
        endTime = new AtomicLong(0L);
=======
        startTime.set(0L);
        endTime.set(0L);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/main/java/com/netflix/servo/jmx/JmxMonitorRegistry.java;<<<<<<< MINE
        monitors = (new MapMaker()).<MonitorConfig, Monitor<?>>makeMap();
=======
        monitors = (new MapMaker()).makeMap();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/main/java/com/netflix/servo/tag/BasicTagList.java;<<<<<<< MINE
            builder.add(BasicTag.parseTag(tag));
=======
            builder.add(Tags.parseTag(tag));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/monitor/AbstractMonitorTest.java;<<<<<<< MINE
        assertTrue(newInstance("1234567890").toString().indexOf("1234567890") != -1);
        assertTrue(newInstance("47").toString().indexOf("47") != -1);
=======
        assertTrue(newInstance("1234567890").toString().contains("1234567890"));
        assertTrue(newInstance("47").toString().contains("47"));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/monitor/MonitorConfigTest.java;<<<<<<< MINE
        assertFalse(m1.equals(null));
        assertFalse(m1.equals(m2.toString()));
=======
        assertNotNull(m1);
        assertFalse(m1.toString().equals(m2.toString()));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/publish/MonitorRegistryMetricPollerTest.java;<<<<<<< MINE
        for (int i = 0; i < pollers.length; ++i) {
            pollers[i].shutdown();
=======
        for (MonitorRegistryMetricPoller poller : pollers) {
            poller.shutdown();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/publish/MonitorRegistryMetricPollerTest.java;<<<<<<< MINE
        for (int i = 0; i < infos.length; ++i) {
            if (infos[i] != null && infos[i].getThreadName().startsWith(prefix)) {
=======
        for (ThreadInfo info : infos) {
            if (info != null && info.getThreadName().startsWith(prefix)) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/MetricTest.java;<<<<<<< MINE
        assertFalse(m1.equals(null));
        assertFalse(m1.equals(m2.toString()));
=======
        assertNotNull(m1);
        assertFalse(m1.toString().equals(m2.toString()));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/tag/BasicTagTest.java;<<<<<<< MINE
        BasicTag.parseTag(badString);
=======
        Tags.parseTag(badString);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/tag/BasicTagTest.java;<<<<<<< MINE
        BasicTag.parseTag(badString);
=======
        Tags.parseTag(badString);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/tag/BasicTagTest.java;<<<<<<< MINE
        BasicTag.parseTag(badString);
=======
        Tags.parseTag(badString);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/tag/BasicTagListTest.java;<<<<<<< MINE
        assertFalse(t1.equals(null));
        assertFalse(t1.equals(t2.toString()));
=======
        assertNotNull(t1);
        assertFalse(t1.toString().equals(t2.toString()));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/tag/SortedTagListTest.java;<<<<<<< MINE
        for(Iterator<Tag> t = testListFromStrings.iterator(); t.hasNext();){
            assertTrue(t.next().equals(tagArray[i]));
=======
        for (Tag testListFromString : testListFromStrings) {
            assertEquals(testListFromString, tagArray[i]);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/tag/SortedTagListTest.java;<<<<<<< MINE
        for(Iterator<Tag> t = testListFromTags.iterator(); t.hasNext();){
            assertTrue(t.next().equals(tagArray[i]));
=======
        for (Tag testListFromTag : testListFromTags) {
            assertEquals(testListFromTag, tagArray[i]);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/tag/SortedTagListTest.java;<<<<<<< MINE
        for(Iterator<Tag> t = testListFromCollection.iterator(); t.hasNext();){
            assertTrue(t.next().equals(tagArray[i]));
=======
        for (Tag aTestListFromCollection : testListFromCollection) {
            assertEquals(aTestListFromCollection, tagArray[i]);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/tag/SortedTagListTest.java;<<<<<<< MINE
        for(String s : stringMap.keySet()){
            s.equals(tagArray[i].getKey());
=======
        for (String s : stringMap.keySet()){
            assertEquals(s, tagArray[i].getKey());
            i++;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_e4ff63b_ce61863/rev_e4ff63b-ce61863/servo-core/src/test/java/com/netflix/servo/tag/SortedTagListTest.java;<<<<<<< MINE
        for(String s : stringMap.values()){
            s.equals(tagArray[i].getValue());
=======
        for (String s : stringMap.values()){
            assertEquals(s, tagArray[i].getValue());
            i++;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/truth/revisions/rev_849169c_9f894b9/rev_849169c-9f894b9/core/src/main/java/com/google/common/truth/IterableSubject.java;<<<<<<< MINE
          // If the previous branch doesn't throw, then the subject was empty, so return false
          return false;
=======
          // If the previous branch doesn't throw, then the subject was empty, so return true
          return true;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_fe24dfe_0fdbf32/rev_fe24dfe-0fdbf32/src/main/java/graphql/execution/preparsed/PreparsedDocumentProvider.java;<<<<<<< MINE
 * Interface that allows clients to hook in Document caching and/or whitelisting of queries
=======
 * Interface that allows clients to hook in Document caching and/or the whitelisting of queries
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_fe24dfe_0fdbf32/rev_fe24dfe-0fdbf32/src/main/java/graphql/execution/preparsed/PreparsedDocumentProvider.java;<<<<<<< MINE
     * Get existing instance of a preparsed query
=======
     * This is called to get a "cached" pre-parsed query and if its not present, then the computeFunction
     * can be called to parse the query
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/graphql-java/revisions/rev_fe24dfe_0fdbf32/rev_fe24dfe-0fdbf32/src/main/java/graphql/execution/preparsed/PreparsedDocumentProvider.java;<<<<<<< MINE
     * @param query The graphql query
     * @return Null of missing or an instance of {@link PreparsedDocumentEntry}
=======
     * @param query           The graphql query
     * @param computeFunction If the query has not be pre-parsed, this function can be called to parse it
     *
     * @return an instance of {@link PreparsedDocumentEntry}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_76a9a85_f82768d/rev_76a9a85-f82768d/servo-aws/src/main/java/com/netflix/servo/aws/AwsPropertyKeys.java;<<<<<<< MINE
 * Constant key values for setting aws related properties.
=======
 * Enum key values for setting aws related properties.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_76a9a85_f82768d/rev_76a9a85-f82768d/servo-aws/src/main/java/com/netflix/servo/aws/AwsServiceClients.java;<<<<<<< MINE
    client.setEndpoint( System.getProperty( AwsPropertyKeys.awsCloudWatchEndpoint, "monitoring.amazonaws.com" ) );
=======
    client.setEndpoint( System.getProperty( AwsPropertyKeys.AWS_CLOUD_WATCH_END_POINT.getBundle(), "monitoring.amazonaws.com" ) );
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/servo/revisions/rev_76a9a85_f82768d/rev_76a9a85-f82768d/servo-aws/src/main/java/com/netflix/servo/aws/AwsServiceClients.java;<<<<<<< MINE
    client.setEndpoint( System.getProperty( AwsPropertyKeys.awsAutoScalingEndpoint, "autoscaling.amazonaws.com" ) );
=======
    client.setEndpoint( System.getProperty( AwsPropertyKeys.AWS_AUTO_SCALING_END_POINT.getBundle(), "autoscaling.amazonaws.com" ) );
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/xodus/revisions/rev_a9019b9_0ac52d6/rev_a9019b9-0ac52d6/environment/src/main/java/jetbrains/exodus/env/management/EnvironmentConfig.java;<<<<<<< MINE
    public boolean getGcUseExclusiveTransaction() {
        return config.getGcUseExclusiveTransaction();
    }

    @Override
    public void setGcUseExclusiveTransaction(boolean useExclusiveTransaction) {
        config.setGcUseExclusiveTransaction(useExclusiveTransaction);
    }

    @Override
=======
    public int getGcFilesDeletionDelay() {
        return config.getGcFilesDeletionDelay();
    }

    @Override
    public void setGcFilesDeletionDelay(int delay) {
        config.setGcFilesDeletionDelay(delay);
    }

    @Override
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/main/java/com/squareup/injector/internal/AtInjectBinding.java;<<<<<<< MINE
      Constructor<T> constructor, Field[] fields) {
=======
      Constructor<T> constructor, Field[] fields, Class<?> supertype) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/main/java/com/squareup/injector/internal/AtInjectBinding.java;<<<<<<< MINE
        injectedFields.toArray(new Field[injectedFields.size()]));
=======
        injectedFields.toArray(new Field[injectedFields.size()]), type.getSuperclass());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/main/java/com/squareup/codegen/InjectProcessor.java;<<<<<<< MINE
      writer.field(CodeGen.parameterizedType(Binding.class, CodeGen.typeToString(supertype)),
          "supertype", PRIVATE);
=======
      writer.field(CodeGen.parameterizedType(Binding.class,
          CodeGen.rawTypeToString(supertype, '.')), "supertype", PRIVATE);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/main/java/com/squareup/codegen/InjectProcessor.java;<<<<<<< MINE
        ? JavaWriter.stringLiteral(GeneratorKeys.get(type))
=======
        ? JavaWriter.stringLiteral(GeneratorKeys.get(type.asType()))
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/main/java/com/squareup/codegen/InjectProcessor.java;<<<<<<< MINE
          CodeGen.parameterizedType(Binding.class, CodeGen.typeToString(supertype)),
          JavaWriter.stringLiteral(GeneratorKeys.getMembersKey(supertype)),
=======
          CodeGen.parameterizedType(Binding.class, CodeGen.rawTypeToString(supertype, '.')),
          JavaWriter.stringLiteral(GeneratorKeys.rawMembersKey(supertype)),
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/main/java/com/squareup/codegen/CodeGen.java;<<<<<<< MINE
    String supertypeName = supertype.toString();
    if (supertypeName.startsWith("android.")
        || supertypeName.startsWith("java.")
        || supertypeName.startsWith("javax.")) {
      return null;
    } else {
      return supertype;
    }
=======
    return Keys.isPlatformType(supertype.toString()) ? null : supertype;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/main/java/com/squareup/codegen/CodeGen.java;<<<<<<< MINE
  private static void rawTypeToString(StringBuilder result, TypeElement type,
=======
  static void rawTypeToString(StringBuilder result, TypeElement type,
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/main/java/com/squareup/codegen/GeneratorKeys.java;<<<<<<< MINE
  public static String get(TypeElement type) {
    return get(type.asType());
  }


  public static String getMembersKey(TypeMirror type) {
    return "members/" + get(type);
=======
  /**
   * Returns the members injector key for the raw type of {@code type}.
   * Parameterized types are not currently supported for members injection in
   * generated code.
   */
  public static String rawMembersKey(TypeMirror type) {
    return "members/" + CodeGen.rawTypeToString(type, '$');
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/test/java/com/squareup/injector/InjectionTest.java;<<<<<<< MINE
  @Test public void noJitBindingsForAbstractClasses() {
=======
  @Test public void noProvideBindingsForAbstractClasses() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_c3b97b6_f554e50/rev_c3b97b6-f554e50/src/main/java/com/squareup/injector/internal/AtInjectBinding.java;<<<<<<< MINE
  // TODO: delegate to supertype members injector (which may be generated)
=======
  private Binding<? super T> supertypeBinding;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/xodus/revisions/rev_c717e96_c0d7fbd/rev_c717e96-c0d7fbd/environment/src/main/java/jetbrains/exodus/env/StoreImpl.java;<<<<<<< MINE
    public ITree openImmutableTree(@NotNull final MetaTree metaTree) {
=======
    ITree openImmutableTree(@NotNull final MetaTree metaTree) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/MetricsTest.java;<<<<<<< MINE
		Observable.sumInteger(rc.getObservable()).toBlockingObservable().forEach(new Action1<Integer>(){
=======
		MathObservable.sumInteger(rc.getObservable()).toBlockingObservable().forEach(new Action1<Integer>(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/MetricsTest.java;<<<<<<< MINE
		Observable.sumInteger(oc).toBlockingObservable().forEach(new Action1<Integer>(){
=======
		MathObservable.sumInteger(oc).toBlockingObservable().forEach(new Action1<Integer>(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/MetricsTest.java;<<<<<<< MINE
		Observable.sumInteger(ro1.getObservable()).toBlockingObservable().forEach(new Action1<Integer>(){
=======
		MathObservable.sumInteger(ro1.getObservable()).toBlockingObservable().forEach(new Action1<Integer>(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/MetricsTest.java;<<<<<<< MINE
		Observable.sumInteger(ro2.getObservable()).toBlockingObservable().forEach(new Action1<Integer>(){
=======
		MathObservable.sumInteger(ro2.getObservable()).toBlockingObservable().forEach(new Action1<Integer>(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/MetricsTest.java;<<<<<<< MINE
			Observable.sumInteger(ro1.getObservable()).toBlockingObservable().forEach(new Action1<Integer>(){
=======
			MathObservable.sumInteger(ro1.getObservable()).toBlockingObservable().forEach(new Action1<Integer>(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/MetricsTest.java;<<<<<<< MINE
			Observable.sumInteger(ro2.getObservable()).toBlockingObservable().forEach(new Action1<Integer>(){
=======
			MathObservable.sumInteger(ro2.getObservable()).toBlockingObservable().forEach(new Action1<Integer>(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/MetricsTest.java;<<<<<<< MINE
			Observable.sumInteger(rc.getObservable()).toBlockingObservable().forEach(new Action1<Integer>(){
=======
			MathObservable.sumInteger(rc.getObservable()).toBlockingObservable().forEach(new Action1<Integer>(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/RemoteObservableTest.java;<<<<<<< MINE
		Observable.sumInteger(oc).toBlockingObservable().forEach(new Action1<Integer>(){
=======
		MathObservable.sumInteger(oc).toBlockingObservable().forEach(new Action1<Integer>(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/RemoteObservableTest.java;<<<<<<< MINE
		Observable.sumInteger(oc).toBlockingObservable().forEach(new Action1<Integer>(){
=======
        MathObservable.sumInteger(oc).toBlockingObservable().forEach(new Action1<Integer>(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/RemoteObservableTest.java;<<<<<<< MINE
		Observable.sumInteger(oc).toBlockingObservable().forEach(new Action1<Integer>(){
=======
        MathObservable.sumInteger(oc).toBlockingObservable().forEach(new Action1<Integer>(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/RemoteObservableTest.java;<<<<<<< MINE
			public void run(){
=======
			@Override
            public void run(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/RemoteObservableTest.java;<<<<<<< MINE
		Observable.sumInteger(merged).toBlockingObservable().forEach(new Action1<Integer>(){
=======
		MathObservable.sumInteger(merged).toBlockingObservable().forEach(new Action1<Integer>(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/RemoteObservableTest.java;<<<<<<< MINE
		Observable.sumInteger(oc2).toBlockingObservable().forEach(new Action1<Integer>(){
=======
		MathObservable.sumInteger(oc2).toBlockingObservable().forEach(new Action1<Integer>(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/RemoteObservableTest.java;<<<<<<< MINE
		Observable.sumInteger(oc).toBlockingObservable().forEach(new Action1<Integer>(){
=======
		MathObservable.sumInteger(oc).toBlockingObservable().forEach(new Action1<Integer>(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/RemoteObservableTest.java;<<<<<<< MINE
		
		Assert.assertEquals(false, sub.isUnsubscribed());
=======

        assertFalse(sub.isUnsubscribed());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/RemoteObservableTest.java;<<<<<<< MINE
		Assert.assertEquals(true, sub.isUnsubscribed());
=======
        assertTrue(sub.isUnsubscribed());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/RemoteObservableTest.java;<<<<<<< MINE
		Assert.assertEquals(false, subscription.isUnsubscribed());
=======
        assertFalse(subscription.isUnsubscribed());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/RemoteObservableTest.java;<<<<<<< MINE
		Assert.assertEquals(true, subscription.isUnsubscribed());
=======
        assertTrue(subscription.isUnsubscribed());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_fccb0d6_bbd39e3/rev_fccb0d6-bbd39e3/rx-netty-remote-observable/src/test/java/io/reactivex/netty/RemoteObservableTest.java;<<<<<<< MINE
		Observable.sumInteger(oc).toBlockingObservable().forEach(new Action1<Integer>(){
=======
		MathObservable.sumInteger(oc).toBlockingObservable().forEach(new Action1<Integer>(){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_76e4e41_ff9381b/rev_76e4e41-ff9381b/rx-netty/src/main/java/io/reactivex/netty/channel/DefaultChannelWriter.java;<<<<<<< MINE
        return unflushedWritesListener.listenForNextCompletion().take(1).flatMap(new Func1<ChannelFuture, Observable<Void>>() {
            @Override
            public Observable<Void> call(ChannelFuture future) {
                return Observable.empty();
            }
        });
=======
        return unflushedWritesListener.listenForNextCompletion().take(1).flatMap(
                new Func1<ChannelFuture, Observable<Void>>() {
                    @Override
                    public Observable<Void> call(ChannelFuture future) {
                        return Observable.empty();
                    }
                });
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_52f2378_825850e/rev_52f2378-825850e/rx-netty/src/main/java/io/reactivex/netty/protocol/http/server/HttpServerResponse.java;<<<<<<< MINE
    public Observable<Void> close() {
=======
    @Override
    public Observable<Void> _close() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_52f2378_825850e/rev_52f2378-825850e/rx-netty/src/main/java/io/reactivex/netty/channel/ObservableConnection.java;<<<<<<< MINE
     * @return Observable signifying the close on the connection. Returns {@link Observable#error(Throwable)} if the
=======
     * @return Observable signifying the close on the connection. Returns {@link rx.Observable#error(Throwable)} if the
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_52f2378_825850e/rev_52f2378-825850e/rx-netty/src/main/java/io/reactivex/netty/channel/ObservableConnection.java;<<<<<<< MINE
        if (closeIssued.compareAndSet(false, true)) {
            PublishSubject<I> thisSubject = inputSubject;
            cleanupConnection();
            Observable<Void> toReturn = _closeChannel();
            thisSubject.onCompleted(); // This is just to make sure we make the subject as completed after we finish
                                       // closing the channel, results in more deterministic behavior for clients.
            return toReturn;
        } else {
            return CONNECTION_ALREADY_CLOSED;
        }
=======
        return super.close();
    }

    @Override
    protected Observable<Void> _close() {
        PublishSubject<I> thisSubject = inputSubject;
        cleanupConnection();
        Observable<Void> toReturn = _closeChannel();
        thisSubject.onCompleted(); // This is just to make sure we make the subject as completed after we finish
        // closing the channel, results in more deterministic behavior for clients.
        return toReturn;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_52f2378_825850e/rev_52f2378-825850e/rx-netty/src/test/java/io/reactivex/netty/protocol/http/server/UnexpectedErrorsTest.java;<<<<<<< MINE
    private static void blockTillConnected(int serverPort) throws InterruptedException, ExecutionException {
=======
    private static void blockTillConnected(int serverPort) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_52f2378_825850e/rev_52f2378-825850e/rx-netty/src/test/java/io/reactivex/netty/protocol/http/server/UnexpectedErrorsTest.java;<<<<<<< MINE
                }).toBlocking().toFuture().get();
=======
                }).toBlocking().singleOrDefault(null);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_08cfb63_7918160/rev_08cfb63-7918160/rx-netty/src/main/java/io/reactivex/netty/protocol/http/client/HttpClientRequest.java;<<<<<<< MINE
    public HttpClientRequest<T> withRawContent(T content, ContentTransformer<T> transformer) {
        return withRawContentSource(new SingletonRawSource<T>(content, transformer));
=======
    public <S> HttpClientRequest<T> withRawContent(S content, ContentTransformer<S> transformer) {
        return withRawContentSource(new SingletonRawSource<S>(content, transformer));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_d9d306a_4f8a41d/rev_d9d306a-4f8a41d/rxnetty/src/main/java/io/reactivex/netty/protocol/http/UnicastContentSubject.java;<<<<<<< MINE
 * Copyright 2014 Netflix, Inc.
=======
 * Copyright 2015 Netflix, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
     * @param handler Handler instance to add.
=======
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
     * @param handler  the handler to append
=======
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
                                                                       ChannelHandler handler);
=======
                                                                       Func0<ChannelHandler> handlerFactory);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
     * @param handler Handler instance to add.
=======
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
     * @param handler  the handler to append
=======
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
                                                                      ChannelHandler handler);
=======
                                                                      Func0<ChannelHandler> handlerFactory);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
     * @param handler Handler instance to add.
=======
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
                                                                        ChannelHandler handler);
=======
                                                                        Func0<ChannelHandler> handlerFactory);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
     * @param handler  the handler to append
=======
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
                                                                        String name, ChannelHandler handler);
=======
                                                                        String name, Func0<ChannelHandler> handlerFactory);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
     * @param handler Handler instance to add.
=======
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
                                                                               ChannelHandler handler);
=======
                                                                        Func0<ChannelHandler> handlerFactory);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
     * @param group   the {@link EventExecutorGroup} which will be used to execute the {@link ChannelHandler}
=======
     * @param group   the {@link io.netty.util.concurrent.EventExecutorGroup} which will be used to execute the {@link io.netty.channel.ChannelHandler}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
     * @param handler  the handler to append
=======
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
                                                                       String name, ChannelHandler handler);

    /**
     * Removes the {@link ChannelHandler} with the passed {@code name} from the {@link ChannelPipeline} for all
     * connections created by this client.
     *
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be more
     * convenient.</em>
     *
     * @param name Name of the handler.
     *
     * @return A new {@link HttpClient} instance.
     */
    public abstract <II, OO> HttpClient<II, OO> removeHandler(String name);
=======
                                                                       String name, Func0<ChannelHandler> handlerFactory);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
     * @param poolIdleCleanupScheduler Scheduled to schedule idle connections cleanup.
=======
     * @param idleConnectionCleanupTimer Timer to trigger idle connections cleanup.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClient.java;<<<<<<< MINE
     * @param wireLogginLevel Logging level at which the wire logs will be logged. The wire logging will only be done if
=======
     * @param wireLoggingLevel Logging level at which the wire logs will be logged. The wire logging will only be done if
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
 * The request is executed every time {@link HttpClientRequest#subscribe()} is called and is the only way of executing
 * the request.
=======
 * The request is executed every time {@link HttpClientRequest}, or {@link Observable} returned by
 * {@code write*Content} is subscribed and is the only way of executing the request.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
 * @param <I>
 * @param <O>
=======
 * @param <I> The type of objects read from the request content.
 * @param <O> The type of objects read from the response content.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Uses the passed {@link Observable} as the content source for the newly created and returned
     * {@link HttpClientRequest}.
=======
     * Uses the passed {@link Observable} as the source of content for this request.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return An new instance of {@link Observable} which can be subscribed to execute the request.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Uses the passed {@code content} as the content for the newly created and returned
     * {@link HttpClientRequest}. This is equivalent to calling
     * {@code
     *      setContentSource(Observable.just(content));
     * }
=======
     * Uses the passed {@link Observable} as the source of content for this request. Every item is written and flushed
     * immediately.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @param content Content for the request.
=======
     * @param contentSource Content source for the request.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return An new instance of {@link Observable} which can be subscribed to execute the request.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Uses the passed {@code content} as the content for the newly created and returned
     * {@link HttpClientRequest}. This is equivalent to calling
     * {@code
     *      setContent(content.getBytes(Charset.defaultCharset()));
     * }
=======
     * Uses the passed {@link Observable} as the source of content for this request.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @param content Content for the request.
=======
     * @param contentSource Content source for the request.
     * @param flushSelector A {@link Func1} which is invoked for every item emitted from {@code msgs}. All pending
     * writes are flushed, iff this function returns, {@code true}.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return An new instance of {@link Observable} which can be subscribed to execute the request.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Uses the passed {@code content} as the content for the newly created and returned
     * {@link HttpClientRequest}. This is equivalent to calling
     * {@code
     *      setRawContentSource(Observable.just(content), ByteTransformer.DEFAULT_INSTANCE);
     * }
=======
     * Uses the passed {@link Observable} as the source of content for this request. This method provides a way to
     * write trailing headers.
     *
     * A new instance of {@link TrailingHeaders} will be created using the passed {@code trailerFactory} and the passed
     * {@code trailerMutator} will be invoked for every item emitted from the content source, giving a chance to modify
     * the trailing headers instance.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @param content Content for the request.
=======
     * @param contentSource Content source for the request.
     * @param trailerFactory A factory function to create a new {@link TrailingHeaders} per subscription of the content.
     * @param trailerMutator A function to mutate the trailing header on each item emitted from the content source.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return An new instance of {@link Observable} which can be subscribed to execute the request.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Adds the passed header as a date value to this request. The date is formatted using netty's
     * {@link HttpHeaders#addDateHeader(HttpMessage, CharSequence, Date)} which formats the date as per the
     * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a> into the format:
     *
     <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
=======
     * Adds the passed header as a date value to this request. The date is formatted using netty's {@link
     * HttpHeaders#addDateHeader(HttpMessage, CharSequence, Date)} which formats the date as per the <a
     * href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a> into the format:
     * <p/>
     * <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * {@link HttpHeaders#addDateHeader(HttpMessage, CharSequence, Date)} which formats the date as per the
     * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a> into the format:
     *
     <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
=======
     * {@link HttpHeaders#addDateHeader(HttpMessage, CharSequence, Date)} which formats the date as per the <a
     * href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a> into the format:
     * <p/>
     * <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Overwrites the current value, if any, of the passed header to the passed date value for this request.
     * The date is formatted using netty's {@link HttpHeaders#addDateHeader(HttpMessage, CharSequence, Date)} which
     * formats the date as per the
     * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a> into the format:
     *
     <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
=======
     * Overwrites the current value, if any, of the passed header to the passed date value for this request. The date is
     * formatted using netty's {@link HttpHeaders#addDateHeader(HttpMessage, CharSequence, Date)} which formats the date
     * as per the <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a> into
     * the format:
     * <p/>
     * <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Overwrites the current value, if any, of the passed header to the passed date values for this request.
     * The date is formatted using netty's {@link HttpHeaders#addDateHeader(HttpMessage, CharSequence, Date)} which
     * formats the date as per the
     * <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a> into the format:
     *
     <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
=======
     * Overwrites the current value, if any, of the passed header to the passed date values for this request. The date
     * is formatted using netty's {@link HttpHeaders#addDateHeader(HttpMessage, CharSequence, Date)} which formats the
     * date as per the <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP specifications</a>
     * into the format:
     * <p/>
     * <PRE>"E, dd MMM yyyy HH:mm:ss z"</PRE>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Sets HTTP Connection header to the appropriate value for HTTP keep-alive.
     * This delegates to {@link HttpHeaders#setKeepAlive(HttpMessage, boolean)}
=======
     * Removes the passed header from this request.
     *
     * @param name Name of the header.
     *
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
     */
    public abstract HttpClientRequest<I, O> removeHeader(CharSequence name);

    /**
     * Sets HTTP Connection header to the appropriate value for HTTP keep-alive. This delegates to {@link
     * HttpHeaders#setKeepAlive(HttpMessage, boolean)}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Sets the HTTP transfer encoding to chunked for this request.
     * This delegates to {@link HttpHeaders#setTransferEncodingChunked(HttpMessage)}
=======
     * Sets the HTTP transfer encoding to chunked for this request. This delegates to {@link
     * HttpHeaders#setTransferEncodingChunked(HttpMessage)}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request. Use {@link
     * #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused intermediary
     * {@link HttpClientRequest} objects.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for the connection used by this request. The specified
     * handler is added at the first position of the pipeline as specified by
     * {@link ChannelPipeline#addFirst(String, ChannelHandler)}
=======
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this request. The
     * specified handler is added at the first position of the pipeline as specified by {@link
     * ChannelPipeline#addFirst(String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @param handler Handler instance to add.
=======
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new {@link HttpClient} instance.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for the connection used by this request. The specified
     * handler is added at the first position of the pipeline as specified by
     * {@link ChannelPipeline#addFirst(EventExecutorGroup, String, ChannelHandler)}
=======
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this request. The
     * specified handler is added at the first position of the pipeline as specified by {@link
     * ChannelPipeline#addFirst(EventExecutorGroup, String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @param group   the {@link EventExecutorGroup} which will be used to execute the {@link ChannelHandler}
     *                 methods
     * @param name     the name of the handler to append
     * @param handler  the handler to append
=======
     * @param group the {@link EventExecutorGroup} which will be used to execute the {@link ChannelHandler} methods
     * @param name the name of the handler to append
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new {@link HttpClientRequest} instance.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
                                                                              ChannelHandler handler);
=======
                                                                              Func0<ChannelHandler> handlerFactory);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for the connection used by this request. The specified
     * handler is added at the last position of the pipeline as specified by
     * {@link ChannelPipeline#addLast(String, ChannelHandler)}
=======
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this request. The
     * specified handler is added at the last position of the pipeline as specified by {@link
     * ChannelPipeline#addLast(String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @param handler Handler instance to add.
=======
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new {@link HttpClientRequest} instance.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for the connection used by this request. The specified
     * handler is added at the last position of the pipeline as specified by
     * {@link ChannelPipeline#addLast(EventExecutorGroup, String, ChannelHandler)}
=======
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this request. The
     * specified handler is added at the last position of the pipeline as specified by {@link
     * ChannelPipeline#addLast(EventExecutorGroup, String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @param group   the {@link EventExecutorGroup} which will be used to execute the {@link ChannelHandler}
     *                 methods
     * @param name     the name of the handler to append
     * @param handler  the handler to append
=======
     * @param group the {@link EventExecutorGroup} which will be used to execute the {@link ChannelHandler} methods
     * @param name the name of the handler to append
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new {@link HttpClientRequest} instance.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
                                                                             ChannelHandler handler);
=======
                                                                             Func0<ChannelHandler> handlerFactory);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for the connection used by this request. The specified
     * handler is added before an existing handler with the passed {@code baseName} in the pipeline as specified by
     * {@link ChannelPipeline#addBefore(String, String, ChannelHandler)}
=======
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this request. The
     * specified handler is added before an existing handler with the passed {@code baseName} in the pipeline as
     * specified by {@link ChannelPipeline#addBefore(String, String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @param baseName  the name of the existing handler
=======
     * @param baseName the name of the existing handler
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @param handler Handler instance to add.
=======
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new {@link HttpClientRequest} instance.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
                                                                               ChannelHandler handler);
=======
                                                                               Func0<ChannelHandler> handlerFactory);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for the connection used by this request. The specified
     * handler is added before an existing handler with the passed {@code baseName} in the pipeline as specified by
     * {@link ChannelPipeline#addBefore(EventExecutorGroup, String, String, ChannelHandler)}
=======
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this request. The
     * specified handler is added before an existing handler with the passed {@code baseName} in the pipeline as
     * specified by {@link ChannelPipeline#addBefore(EventExecutorGroup, String, String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @param group   the {@link EventExecutorGroup} which will be used to execute the {@link ChannelHandler}
     *                 methods
     * @param baseName  the name of the existing handler
     * @param name     the name of the handler to append
     * @param handler  the handler to append
=======
     * @param group the {@link EventExecutorGroup} which will be used to execute the {@link ChannelHandler} methods
     * @param baseName the name of the existing handler
     * @param name the name of the handler to append
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new {@link HttpClientRequest} instance.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for the connection used by this request. The specified
     * handler is added after an existing handler with the passed {@code baseName} in the pipeline as specified by
     * {@link ChannelPipeline#addAfter(String, String, ChannelHandler)}
=======
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this request. The
     * specified handler is added after an existing handler with the passed {@code baseName} in the pipeline as
     * specified by {@link ChannelPipeline#addAfter(String, String, ChannelHandler)}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @param baseName  the name of the existing handler
=======
     * @param baseName the name of the existing handler
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @param handler Handler instance to add.
=======
     * @param handlerFactory Factory to create handler instance to add.
     *
     * @return A new {@link HttpClientRequest} instance.
     */
    public abstract <II, OO> HttpClientRequest<II, OO> addChannelHandlerAfter(String baseName, String name,
                                                                              Func0<ChannelHandler> handlerFactory);

    /**
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for all connections created by this request. The
     * specified handler is added after an existing handler with the passed {@code baseName} in the pipeline as
     * specified by {@link ChannelPipeline#addAfter(EventExecutorGroup, String, String, ChannelHandler)}
     * <p/>
     * <em>For better flexibility of pipeline modification, the method {@link #pipelineConfigurator(Action1)} will be
     * more convenient.</em>
     *
     * @param group the {@link io.netty.util.concurrent.EventExecutorGroup} which will be used to execute the {@link
     * io.netty.channel.ChannelHandler} methods
     * @param baseName the name of the existing handler
     * @param name the name of the handler to append
     * @param handlerFactory Factory to create handler instance to add.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new {@link HttpClientRequest} instance.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Adds a {@link ChannelHandler} to {@link ChannelPipeline} for the connection used by this request. The specified
     * handler is added after an existing handler with the passed {@code baseName} in the pipeline as specified by
     * {@link ChannelPipeline#addAfter(EventExecutorGroup, String, String, ChannelHandler)}
=======
     * Creates a new request instance, inheriting all configurations from this request and using the passed action to
     * configure all the connections created by the newly created request instance.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @param group   the {@link EventExecutorGroup} which will be used to execute the {@link ChannelHandler}
     *                 methods
     * @param baseName  the name of the existing handler
     * @param name     the name of the handler to append
     * @param handler  the handler to append
=======
     * @param configurator Action to configure {@link ChannelPipeline}.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new {@link HttpClientRequest} instance.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Configures an action to configure the {@link ChannelPipeline} for the connection used by this request.
=======
     * Creates a new client instances, inheriting all configurations from this client and enabling wire logging at the
     * passed level for the newly created client instance.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @param configurator Action that will be used to configure the pipeline.
=======
     * @param wireLoggingLevel Logging level at which the wire logs will be logged. The wire logging will only be done if
     *                        logging is enabled at this level for {@link io.netty.handler.logging.LoggingHandler}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * @return A new instance of the {@link HttpClientRequest} sharing all existing state from this request.
     * Use {@link #newUpdater()} if you intend to do multiple mutations to this request, to avoid creating unused
     * intermediary {@link HttpClientRequest} objects.
=======
     * @return A new {@link HttpClient} instance.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * for performing multiple mutations to this request. Using {@link HttpClientRequestUpdater} avoids creating multiple
     * intermediate and unused {@link HttpClientRequest} objects for each mutation.
=======
     * for performing multiple mutations to this request. Using {@link HttpClientRequestUpdater} avoids creating
     * multiple intermediate and unused {@link HttpClientRequest} objects for each mutation.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/http/clientNew/HttpClientRequest.java;<<<<<<< MINE
     * Returns the URI for this request.
     * The returned URI does <em>not</em> contain the scheme, host and port portion of the URI. In case, it is required,
     * {@link #getAbsoluteUri()} must be used.
=======
     * Returns the URI for this request. The returned URI does <em>not</em> contain the scheme, host and port portion of
     * the URI.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/PooledClientConnectionFactoryImpl.java;<<<<<<< MINE
        this(clientState, new FIFOIdleConnectionsHolder<W, R>(clientState.getEventsSubject()),
=======
        this(clientState, new FIFOIdleConnectionsHolder<W, R>(),
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/PooledClientConnectionFactoryImpl.java;<<<<<<< MINE
    public PooledClientConnectionFactoryImpl(ClientState<W, R> clientState,
=======
    protected PooledClientConnectionFactoryImpl(ClientState<W, R> clientState,
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/PooledClientConnectionFactoryImpl.java;<<<<<<< MINE
                                           return new PooledConnection<R, W>(PooledClientConnectionFactoryImpl.this,
                                                                             poolConfig, connection);
=======
                                           metricsEventSubject.onEvent(ClientMetricsEvent.POOL_ACQUIRE_SUCCESS,
                                                                       Clock.onEndMillis(startTimeMillis));
                                           return PooledConnection.create(PooledClientConnectionFactoryImpl.this,
                                                                          poolConfig, connection);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/PooledClientConnectionFactoryImpl.java;<<<<<<< MINE
                metricsEventSubject.onEvent(ClientMetricsEvent.POOL_RELEASE_START);
=======
                metricsEventSubject.onEvent(POOL_RELEASE_START);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/PooledClientConnectionFactoryImpl.java;<<<<<<< MINE
                    metricsEventSubject.onEvent(ClientMetricsEvent.POOL_RELEASE_SUCCESS,
                                                Clock.onEndMillis(releaseStartTime));
=======
                    metricsEventSubject.onEvent(POOL_RELEASE_SUCCESS, Clock.onEndMillis(releaseStartTime));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/PooledClientConnectionFactoryImpl.java;<<<<<<< MINE
                    metricsEventSubject.onEvent(ClientMetricsEvent.POOL_RELEASE_SUCCESS,
                                                Clock.onEndMillis(releaseStartTime));
=======
                    metricsEventSubject.onEvent(POOL_RELEASE_SUCCESS, Clock.onEndMillis(releaseStartTime));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/PooledClientConnectionFactoryImpl.java;<<<<<<< MINE
                metricsEventSubject.onEvent(ClientMetricsEvent.POOL_RELEASE_FAILED,
                                            Clock.onEndMillis(releaseStartTime));
=======
                metricsEventSubject.onEvent(POOL_RELEASE_FAILED, Clock.onEndMillis(releaseStartTime));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/PooledClientConnectionFactoryImpl.java;<<<<<<< MINE
                        metricsEventSubject.onEvent(ClientMetricsEvent.POOL_ACQUIRE_SUCCESS,
                                                    Clock.onEndMillis(startTimeMillis));
                        if (!subscriber.isUnsubscribed()) {
                            subscriber.onCompleted();
                        }
                    } else {
                        connectDelegate.connect()
                                       .map(new Func1<Connection<R, W>, PooledConnection<R, W>>() {
                                           @Override
                                           public PooledConnection<R, W> call(Connection<R, W> connection) {
                                               return new PooledConnection<R, W>(PooledClientConnectionFactoryImpl.this,
                                                                                 poolConfig, connection);
                                           }
                                       })
                                       .unsafeSubscribe(subscriber);
=======
                        metricsEventSubject.onEvent(POOL_ACQUIRE_SUCCESS, Clock.onEndMillis(startTimeMillis));
                    }

                    if (!subscriber.isUnsubscribed()) {
                        subscriber.onCompleted();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/PooledClientConnectionFactoryImpl.java;<<<<<<< MINE
                    metricsEventSubject.onEvent(ClientMetricsEvent.POOL_ACQUIRE_FAILED,
                                                Clock.onEndMillis(startTimeMillis), e);
=======
                    metricsEventSubject.onEvent(POOL_ACQUIRE_FAILED, Clock.onEndMillis(startTimeMillis), e);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/PooledClientConnectionFactoryImpl.java;<<<<<<< MINE
                        metricsEventSubject.onEvent(ClientMetricsEvent.POOLED_CONNECTION_REUSE,
                                                    Clock.onEndMillis(startTimeMillis));
=======
                        metricsEventSubject.onEvent(POOLED_CONNECTION_REUSE, Clock.onEndMillis(startTimeMillis));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/ClientConnectionFactory.java;<<<<<<< MINE
        final long startTimeMillis = Clock.newStartTimeMillis();
        final MetricEventsSubject<ClientMetricsEvent<?>> eventsSubject = clientState.getEventsSubject();
        eventsSubject.onEvent(ClientMetricsEvent.CONNECT_START);

        return clientState.getBootstrap().connect(clientState.getRemoteAddress())
                          .addListener(new ChannelFutureListener() {
                              @Override
                              public void operationComplete(ChannelFuture future) throws Exception {
                                  if (!future.isSuccess()) {
                                      clientState.getEventsSubject().onEvent(ClientMetricsEvent.CONNECT_FAILED,
                                                                             Clock.onEndMillis(startTimeMillis),
                                                                             future.cause());
                                  } else {
                                      clientState.getEventsSubject().onEvent(ClientMetricsEvent.CONNECT_SUCCESS,
                                                                             Clock.onEndMillis(startTimeMillis));
                                  }
                              }
                          });
=======
        return clientState.getBootstrap().connect(clientState.getRemoteAddress());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/IdleConnectionsHolder.java;<<<<<<< MINE
        final IdleConnectionsHolder<WW, RR> copy = doCopy(newState);
        copy.metricEventsSubject = newState.getEventsSubject();
        return copy;
=======
        return doCopy(newState);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
        flushObservable = FlushObservable.create(eventsSubject, metricEventProvider, nettyChannel);

        /**
         * Errors get connected to the write only as the _writeAndFlush() semantics are to give error only for the write
         * done along with the write*AndFlush() call.
         */
        flushWithWriteObservable = flushObservable.onErrorResumeNext(Observable.<Void>empty());

        flushAndCloseObservable = flushObservable
                // Since concat does not subscribe to the other Observable on error, this makes sure that the close is
                // closed in the case of error too.
                .onErrorResumeNext(new Func1<Throwable, Observable<Void>>() {
                    @Override
                    public Observable<Void> call(Throwable throwable) {
                        // Since, flush has failed, the result should always be an error but close must be invoked.
                        return closeObservable.concatWith(Observable.<Void>error(throwable));
                    }
                })
                .concatWith(closeObservable); // For success paths.
    }

    @Override
    public Observable<Void> write(W msg) {
        return _write(msg);
=======
        flushAndCloseObservable = closeObservable.doOnSubscribe(new Action0() {
            @Override
            public void call() {
                nettyChannel.flush();
            }
        });
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
    public Observable<Void> writeBytes(ByteBuf msg) {
        return _write(msg);
=======
    public Observable<Void> write(Observable<W> msgs, final Func1<W, Boolean> flushSelector) {
        return _write(msgs, flushSelector);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
    public Observable<Void> writeBytes(byte[] msg) {
        return _write(msg);
=======
    public Observable<Void> writeAndFlushOnEach(Observable<W> msgs) {
        return _write(msgs, flushOnEachSelector);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
    public Observable<Void> writeString(String msg) {
        return _write(msg);
=======
    public Observable<Void> writeString(Observable<String> msgs) {
        return _write(msgs);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
    public Observable<Void> writeFileRegion(FileRegion region) {
        return _write(region);
=======
    public Observable<Void> writeString(Observable<String> msgs, Func1<String, Boolean> flushSelector) {
        return _write(msgs, flushSelector);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
    public Observable<Void> flush() {
        return flushObservable;
=======
    public Observable<Void> writeStringAndFlushOnEach(Observable<String> msgs) {
        return writeString(msgs, FLUSH_ON_EACH_STRING);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
    public Observable<Void> writeAndFlush(W msg) {
        return _writeAndFlush(msg);
=======
    public Observable<Void> writeBytes(Observable<byte[]> msgs) {
        return _write(msgs);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
    public Observable<Void> writeAndFlush(final Observable<W> msgs) {
        return _writeAndFlushStream(msgs);
=======
    public Observable<Void> writeBytes(Observable<byte[]> msgs, Func1<byte[], Boolean> flushSelector) {
        return _write(msgs, flushSelector);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
    public Observable<Void> writeAndFlush(Observable<W> msgs, final Func1<W, Boolean> flushSelector) {
        /**
         * This is trading correctness of the flush of pending messages just when the first time flushSelector returns
         * true with simplicity of just being able to do a channel.flush() instead of flatmap of FlushObservable on
         * every flush.
         */
        return flushObservable.concatWith(_write(msgs.lift(new Operator<W, W>() {
            @Override
            public Subscriber<? super W> call(final Subscriber<? super W> subscriber) {
                return new Subscriber<W>(subscriber) {
                    @Override
                    public void onCompleted() {
                        subscriber.onCompleted();
                    }

                    @Override
                    public void onError(Throwable e) {
                        subscriber.onError(e);
                    }

                    @Override
                    public void onNext(W w) {
                        subscriber.onNext(w);
                        if (flushSelector.call(w)) {
                            /**
                             * Since, the return is only going to be the result of all writes, there is no need to track
                             * the result of each flush here. Hence, this just does a channel flush instead of using a
                             * FlushObservable.
                             */
                            nettyChannel.flush();
                        }
                    }
                };
            }
        })));
=======
    public Observable<Void> writeBytesAndFlushOnEach(Observable<byte[]> msgs) {
        return _write(msgs, FLUSH_ON_EACH_BYTES);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
    public Observable<Void> writeAndFlushOnEach(Observable<W> msgs) {
        return writeAndFlush(msgs, flushOnEachSelector);
    }

    @Override
    public Observable<Void> writeBytesAndFlush(ByteBuf msg) {
        return _writeAndFlush(msg);
    }

    @Override
    public Observable<Void> writeBytesAndFlush(byte[] msg) {
        return _writeAndFlush(msg);
=======
    public Observable<Void> writeFileRegion(Observable<FileRegion> msgs) {
        return _write(msgs);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
    public Observable<Void> writeStringAndFlush(String msg) {
        return _writeAndFlush(msg);
=======
    public Observable<Void> writeFileRegion(Observable<FileRegion> msgs, Func1<FileRegion, Boolean> flushSelector) {
        return _write(msgs, flushSelector);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
    public Observable<Void> writeFileRegionAndFlush(FileRegion fileRegion) {
        return _writeAndFlush(fileRegion);
=======
    public Observable<Void> writeFileRegionAndFlushOnEach(Observable<FileRegion> msgs) {
        return writeFileRegion(msgs, FLUSH_ON_EACH_FILE_REGION);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
    public void cancelPendingWrites(boolean mayInterruptIfRunning) {
        flushObservable.cancelPendingFutures(mayInterruptIfRunning);
    }

    @Override
    public ByteBufAllocator getAllocator() {
        return nettyChannel.alloc();
=======
    public void flush() {
        nettyChannel.flush();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
        return flushAndCloseObservable;
=======
        return flush ? flushAndCloseObservable : closeObservable;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
    private Observable<Void> _write(final Object msg) {
=======
    private <X> Observable<Void> _write(final Observable<X> msgs, Func1<X, Boolean> flushSelector) {
        return _write(msgs.lift(new FlushSelectorOperator<X>(flushSelector, nettyChannel)));
    }

    private Observable<Void> _write(final Observable<?> msgs) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * On subscription of the returned {@link Observable}, writes the passed message on the underneath channel.
     *
     * <h2>Flush.</h2>
     *
     * This method does not flush the write and requires an explicit {@link #flush()} call later.
     *
     * @param msg Message to write.
     *
     * @return {@link Observable} representing the result of this write. Every subscription to this {@link Observable}
     * will replay the write on the channel. This {@link Observable} will <b>NOT</b> complete unless {@link #flush()}
     * is called.
=======
     * Flush selector that always returns true.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * This method does not flush the write and requires an explicit {@link #flush()} call later.
=======
     * All writes will be flushed on completion of the passed {@code Observable}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * will replay the write on the channel. This {@link Observable} will <b>NOT</b> complete unless {@link #flush()}
     * is called.
=======
     * will replay the write on the channel.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * On subscription of the returned {@link Observable}, writes the passed message on the underneath channel.
=======
     * On subscription of the returned {@link Observable}, writes the passed message stream on the underneath channel
     * and flushes the channel, everytime, {@code flushSelector} returns {@code true} . Any writes issued before
     * subscribing, will also be flushed. However, the returned {@link Observable} will not capture the result of those
     * writes, i.e. if the other writes, fail and this write does not, the returned {@link Observable} will not fail.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * <h2>Flush.</h2>
=======
     * @param msgs Message stream to write.
     * @param flushSelector A {@link Func1} which is invoked for every item emitted from {@code msgs}. Channel is
     * flushed, iff this function returns, {@code true}.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * This method does not flush the write and requires an explicit {@link #flush()} call later.
     *
     * @param msg Message to write.
     *
     * @return {@link Observable} representing the result of this write. Every subscription to this {@link Observable}
     * will replay the write on the channel. This {@link Observable} will <b>NOT</b> complete unless {@link #flush()}
     * is called.
=======
     * @return An {@link Observable} representing the result of this write. Every
     * subscription to this {@link Observable} will write the passed messages and flush all pending writes, when the
     * {@code flushSelector} returns {@code true}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * On subscription of the returned {@link Observable}, writes the passed message on the underneath channel.
     * This is equivalent to calling:
=======
     * On subscription of the returned {@link Observable}, writes the passed message stream on the underneath channel
     * and flushes the channel, on every write. Any writes issued before subscribing, will also be flushed. However, the
     * returned {@link Observable} will not capture the result of those writes, i.e. if the other writes, fail and this
     * write does not, the returned {@link Observable} will not fail.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * <PRE>
     *  writeBytes(getAllocator().buffer(msg.length).writeBytes(msg));
     * </PRE>
=======
     * @param msgs Message stream to write.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * <h2>Flush.</h2>
     *
     * This method does not flush the write and requires an explicit {@link #flush()} call later.
     *
     * @param msg Message to write.
     *
     * @return {@link Observable} representing the result of this write. Every subscription to this {@link Observable}
     * will replay the write on the channel. This {@link Observable} will <b>NOT</b> complete unless {@link #flush()}
     * is called.
=======
     * @return An {@link Observable} representing the result of this write. Every
     * subscription to this {@link Observable} will write the passed messages and flush all pending writes, on every
     * write.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * On subscription of the returned {@link Observable}, writes the passed message on the underneath channel.
     * This is equivalent to calling:
     *
     * <PRE>
     *  writeBytes(getAllocator().buffer(msg.length).writeBytes(msg.getBytes()));
     * </PRE>
=======
     * On subscription of the returned {@link Observable}, writes the passed message stream on the underneath channel.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * This method does not flush the write and requires an explicit {@link #flush()} call later.
=======
     * All writes will be flushed on completion of the passed {@code Observable}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * @param msg Message to write.
=======
     * @param msgs Stream of messages to write.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * will replay the write on the channel. This {@link Observable} will <b>NOT</b> complete unless {@link #flush()}
     * is called.
=======
     * will replay the write on the channel.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * On subscription of the returned {@link Observable}, writes the passed {@link FileRegion} on the underneath
     * channel.
=======
     * On subscription of the returned {@link Observable}, writes the passed message stream on the underneath channel
     * and flushes the channel, everytime, {@code flushSelector} returns {@code true} . Any writes issued before
     * subscribing, will also be flushed. However, the returned {@link Observable} will not capture the result of those
     * writes, i.e. if the other writes, fail and this write does not, the returned {@link Observable} will not fail.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * <h2>Flush.</h2>
=======
     * @param msgs Message stream to write.
     * @param flushSelector A {@link Func1} which is invoked for every item emitted from {@code msgs}. Channel is
     * flushed, iff this function returns, {@code true}.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * This method does not flush the write and requires an explicit {@link #flush()} call later.
     *
     * @param region File region to write.
     *
     * @return {@link Observable} representing the result of this write. Every subscription to this {@link Observable}
     * will replay the write on the channel. This {@link Observable} will <b>NOT</b> complete unless {@link #flush()}
     * is called.
=======
     * @return An {@link Observable} representing the result of this write. Every
     * subscription to this {@link Observable} will write the passed messages and flush all pending writes, when the
     * {@code flushSelector} returns {@code true}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * On subscription of the returned {@link Observable}, flushes any writes performed on the channel before the
     * subscription.
=======
     * On subscription of the returned {@link Observable}, writes the passed message stream on the underneath channel
     * and flushes the channel, on every write. Any writes issued before subscribing, will also be flushed. However, the
     * returned {@link Observable} will not capture the result of those writes, i.e. if the other writes, fail and this
     * write does not, the returned {@link Observable} will not fail.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * @return An {@link Observable} representing the result of all writes happened prior to the flush. Every
     * subscription to this {@link Observable} will flush all pending writes.
=======
     * @param msgs Message stream to write.
     *
     * @return An {@link Observable} representing the result of this write. Every
     * subscription to this {@link Observable} will write the passed messages and flush all pending writes, on every
     * write.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * On subscription of the returned {@link Observable}, writes the passed message on the underneath channel and
     * flushes the channel. Any writes issued before subscribing, will also be flushed. However, the returned
     * {@link Observable} will not capture the result of those writes, i.e. if the other writes, fail and this write
     * does not, the returned {@link Observable} will not fail.
=======
     * On subscription of the returned {@link Observable}, writes the passed message stream on the underneath channel.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * @param msg Message to write.
=======
     * <h2>Flush.</h2>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * @return An {@link Observable} representing the result of this and all writes done prior to the flush. Every
     * subscription to this {@link Observable} will write the passed message and flush all pending writes.
     */
    Observable<Void> writeAndFlush(W msg);

    /**
     * On subscription of the returned {@link Observable}, writes the passed message stream on the underneath channel
     * and flushes the channel. Any writes issued before subscribing, will also be flushed. However, the returned
     * {@link Observable} will not capture the result of those writes, i.e. if the other writes, fail and this write
     * does not, the returned {@link Observable} will not fail.
=======
     * All writes will be flushed on completion of the passed {@code Observable}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * @param msgs Message stream to write.
=======
     * @param msgs Stream of messages to write.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * @return An {@link Observable} representing the result of this and all writes done prior to the flush. Every
     * subscription to this {@link Observable} will write the passed message and flush all pending writes.
=======
     * @return {@link Observable} representing the result of this write. Every subscription to this {@link Observable}
     * will replay the write on the channel.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * @return An {@link Observable} representing the result of this and all writes done prior to the flush. Every
=======
     * @return An {@link Observable} representing the result of this write. Every
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * @return An {@link Observable} representing the result of this and all writes done prior to the flush. Every
=======
     * @return An {@link Observable} representing the result of this write. Every
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * On subscription of the returned {@link Observable}, writes the passed message on the underneath channel and
     * flushes the channel. Any writes issued before subscribing, will also be flushed. However, the returned
     * {@link Observable} will not capture the result of those writes, i.e. if the other writes, fail and this write
     * does not, the returned {@link Observable} will not fail.
=======
     * On subscription of the returned {@link Observable}, writes the passed message stream on the underneath channel.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * @param msg Message to write.
=======
     * <h2>Flush.</h2>
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * @return An {@link Observable} representing the result of this and all writes done prior to the flush. Every
     * subscription to this {@link Observable} will write the passed message and flush all pending writes.
     */
    Observable<Void> writeBytesAndFlush(ByteBuf msg);

    /**
     * On subscription of the returned {@link Observable}, writes the passed message on the underneath channel and
     * flushes the channel. Any writes issued before subscribing, will also be flushed. However, the returned
     * {@link Observable} will not capture the result of those writes, i.e. if the other writes, fail and this write
     * does not, the returned {@link Observable} will not fail. This is equivalent to calling:
=======
     * All writes will be flushed on completion of the passed {@code Observable}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * <PRE>
     *  writeBytesAndFlush(getAllocator().buffer(msg.length).writeBytes(msg));
     * </PRE>
=======
     * @param msgs Stream of messages to write.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * @param msg Message to write.
     *
     * @return An {@link Observable} representing the result of this and all writes done prior to the flush. Every
     * subscription to this {@link Observable} will write the passed message and flush all pending writes.
=======
     * @return {@link Observable} representing the result of this write. Every subscription to this {@link Observable}
     * will replay the write on the channel.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * On subscription of the returned {@link Observable}, writes the passed message on the underneath channel and
     * flushes the channel. Any writes issued before subscribing, will also be flushed. However, the returned
     * {@link Observable} will not capture the result of those writes, i.e. if the other writes, fail and this write
     * does not, the returned {@link Observable} will not fail. This is equivalent to calling:
=======
     * On subscription of the returned {@link Observable}, writes the passed message stream on the underneath channel
     * and flushes the channel, everytime, {@code flushSelector} returns {@code true} . Any writes issued before
     * subscribing, will also be flushed. However, the returned {@link Observable} will not capture the result of those
     * writes, i.e. if the other writes, fail and this write does not, the returned {@link Observable} will not fail.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * <PRE>
     *  writeBytesAndFlush(getAllocator().buffer(msg.length).writeBytes(msg.getBytes()));
     * </PRE>
=======
     * @param msgs Message stream to write.
     * @param flushSelector A {@link Func1} which is invoked for every item emitted from {@code msgs}. Channel is
     * flushed, iff this function returns, {@code true}.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * @param msg Message to write.
     *
     * @return An {@link Observable} representing the result of this and all writes done prior to the flush. Every
     * subscription to this {@link Observable} will write the passed message and flush all pending writes.
=======
     * @return An {@link Observable} representing the result of this write. Every
     * subscription to this {@link Observable} will write the passed messages and flush all pending writes, when the
     * {@code flushSelector} returns {@code true}
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * On subscription of the returned {@link Observable}, writes the passed file region on the underneath channel and
     * flushes the channel. Any writes issued before subscribing, will also be flushed. However, the returned
     * {@link Observable} will not capture the result of those writes, i.e. if the other writes, fail and this write
     * does not, the returned {@link Observable} will not fail.
=======
     * On subscription of the returned {@link Observable}, writes the passed message stream on the underneath channel
     * and flushes the channel, on every write. Any writes issued before subscribing, will also be flushed. However, the
     * returned {@link Observable} will not capture the result of those writes, i.e. if the other writes, fail and this
     * write does not, the returned {@link Observable} will not fail.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * @param fileRegion File region to write.
=======
     * @param msgs Message stream to write.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * @return An {@link Observable} representing the result of this and all writes done prior to the flush. Every
     * subscription to this {@link Observable} will write the passed region and flush all pending writes.
=======
     * @return An {@link Observable} representing the result of this write. Every
     * subscription to this {@link Observable} will write the passed messages and flush all pending writes, on every
     * write.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/ChannelOperations.java;<<<<<<< MINE
     * Cancels all writes which have not been flushed till now.
     *
     * @param mayInterruptIfRunning If the thread has to be interrupted upon cancelling.
     */
    void cancelPendingWrites(boolean mayInterruptIfRunning);

    /**
     * Returns {@link ByteBufAllocator} to be used for creating {@link ByteBuf}
     *
     * @return {@link ByteBufAllocator}
=======
     * Flushes any pending writes on this connection by calling {@link Channel#flush()}. This can be used for
     * implementing any custom flusing strategies that otherwise can not be implemented by methods like
     * {@link #write(Observable, Func1)}.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/Connection.java;<<<<<<< MINE

    protected Connection(final Channel nettyChannel) {
=======
    @SuppressWarnings("rawtypes")
    private final MetricEventsSubject eventsSubject;
    private final ChannelMetricEventProvider metricEventProvider;

    protected Connection(final Channel nettyChannel, MetricEventsSubject<?> eventsSubject,
                         ChannelMetricEventProvider metricEventProvider) {
        this.eventsSubject = eventsSubject;
        this.metricEventProvider = metricEventProvider;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/Connection.java;<<<<<<< MINE
        this.nettyChannel.closeFuture().addListener(new ChannelFutureListener() {
            @Override
            public void operationComplete(ChannelFuture future) throws Exception {
                close(false); // Close this connection when the channel is closed.
            }
        });
=======
    }

    protected Connection(Connection<R, W> toCopy) {
        eventsSubject = toCopy.eventsSubject;
        metricEventProvider = toCopy.metricEventProvider;
        nettyChannel = toCopy.nettyChannel;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty-examples/src/test/java/io/reactivex/netty/examples/http/helloworld/HelloWorldTest.java;<<<<<<< MINE
 * Copyright 2014 Netflix, Inc.
=======
 * Copyright 2015 Netflix, Inc.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty-examples/src/test/java/io/reactivex/netty/examples/http/helloworld/HelloWorldTest.java;<<<<<<< MINE
        server = new HelloWorldServer(0).createServer();
        server.start();
=======
        server = new HelloWorldServer(0).startServer();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_8530e8d_549e21f/rev_8530e8d-549e21f/rxnetty/src/main/java/io/reactivex/netty/channel/DefaultChannelOperations.java;<<<<<<< MINE
                final ChannelFuture writeFuture = nettyChannel.write(msg);
=======
                final ChannelFuture writeFuture = nettyChannel.write(msgs.doOnCompleted(new Action0() {
                    @Override
                    public void call() {
                        nettyChannel.flush();
                    }
                }));
                subscriber.add(Subscriptions.create(new Action0() {
                    @Override
                    public void call() {
                        writeFuture.cancel(false); // cancel write on unsubscribe.
                    }
                }));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_f7e49e7_153d71b/rev_f7e49e7-153d71b/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/ConnectionProvider.java;<<<<<<< MINE
     * Starts this connection provider. Implementations can override this to do any initialization tasks. This method
     * would at most be called once per {@link ConnectionProvider} instance.
=======
     * This method can be overridden to implement any provider specific initialization. The method gets called exactly
     * once, irrespective of how many times {@link #start()} is called.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_f7e49e7_153d71b/rev_f7e49e7-153d71b/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/ConnectionProvider.java;<<<<<<< MINE
     * @return {@code Observable} which completes when the factory is successfully started.
=======
     * @return An {@code Observable} representing the status of the start.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_f7e49e7_153d71b/rev_f7e49e7-153d71b/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/ConnectionProvider.java;<<<<<<< MINE
    public Observable<Void> start() {
=======
    protected Observable<Void> doStart() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_f7e49e7_153d71b/rev_f7e49e7-153d71b/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/ConnectionProvider.java;<<<<<<< MINE
     * Shutdown this factory.
     */
    public void shutdown() {
        shutdown = true;
        shutdownHook.onCompleted();
    }

    /**
     * A hook to listen for shutdown of this factory.
=======
     * This method can be overridden to implement any provider specific initialization. The method gets called exactly
     * once, irrespective of how many times {@link #start()} is called.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_f7e49e7_153d71b/rev_f7e49e7-153d71b/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/ConnectionProvider.java;<<<<<<< MINE
     * @return {@code Observable} which completes when this factory shutsdown.
=======
     * @return An {@code Observable} representing the status of the start.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_f7e49e7_153d71b/rev_f7e49e7-153d71b/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/ConnectionProvider.java;<<<<<<< MINE
    public final Observable<Void> shutdownHook() {
        return shutdownHook;
=======
    protected Observable<Void> doShutdown() {
        return Observable.empty();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/RxNetty/revisions/rev_f7e49e7_153d71b/rev_f7e49e7-153d71b/rxnetty/src/main/java/io/reactivex/netty/protocol/tcp/client/ConnectionProvider.java;<<<<<<< MINE
        public Observable<Void> start() {
=======
        protected Observable<Void> doStart() {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092/core/src/main/java/dagger/internal/Loader.java;<<<<<<< MINE
   * Returns a binding that uses {@code @Inject} annotations.
=======
   * Returns a binding that uses {@code @Inject} annotations, or null if no valid binding can
   * be found or created.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE
    RuntimeAggregatingLoader plugin = new RuntimeAggregatingLoader(
            new GeneratedAdapterLoader(), new ReflectiveLoader());
    return DaggerObjectGraph.makeGraph(null, plugin, modules);
=======
    return DaggerObjectGraph.makeGraph(null, new FailoverLoader(), modules);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_66e14ce_cb95092/rev_66e14ce-cb95092/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
      writer.beginMethod(typeName, "newModule", PROTECTED);
=======
      writer.beginMethod(typeName, "newModule", PUBLIC);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/AndroidModule.java;<<<<<<< MINE
   * {@link ForApplication @Annotation} to explicitly differentiate it from an activity context.
=======
   * {@link ForApplication @ForApplication} to explicitly differentiate it from an activity context.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/ActivityModule.java;<<<<<<< MINE
    complete = false,
=======
    addsTo = AndroidModule.class,
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
  public void installBindings(Map<String, ? extends Binding<?>> toInstall) {
=======
  public void installBindings(BindingsGroup toInstall) {
    if (linkedBindings != null) {
      throw new IllegalStateException("Cannot install further bindings after calling linkAll().");
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
   * Links requested bindings and installed bindings, plus all of their
   * transitive dependencies. This creates JIT bindings as necessary to fill in
   * the gaps.
=======
   * Links all known bindings (whether requested or installed), plus all of their
   * transitive dependencies. This loads injectable types' bindings as necessary to fill in
   * the gaps.  If this method has returned successfully at least once, all further
   * work is short-circuited.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
   * @return all bindings known by this linker, which will all be linked.
=======
   * @throws AssertionError if this method is not called within a synchronized block which
   *     holds this {@link Linker} as the lock object.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
    linkRequested();
    return bindings;
=======
    linkRequested(); // This method throws if bindings are not resolvable/linkable.
    linkedBindings = Collections.unmodifiableMap(bindings);
    return linkedBindings;
  }

  /**
   * Returns the map of all bindings available to this {@link Linker}, if and only if
   * {@link #linkAll()} has successfully returned at least once, otherwise it returns null;
   */
  public Map<String, Binding<?>> fullyLinkedBindings() {
    return linkedBindings;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
          Binding<?> jitBinding =
              createJitBinding(key, binding.requiredBy, deferred.classLoader, mustHaveInjections);
          jitBinding.setLibrary(binding.library());
          jitBinding.setDependedOn(binding.dependedOn());
=======
          Binding<?> resolvedBinding =
              createBinding(key, binding.requiredBy, deferred.classLoader, mustHaveInjections);
          resolvedBinding.setLibrary(binding.library());
          resolvedBinding.setDependedOn(binding.dependedOn());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
          if (!key.equals(jitBinding.provideKey) && !key.equals(jitBinding.membersKey)) {
=======
          if (!key.equals(resolvedBinding.provideKey) && !key.equals(resolvedBinding.membersKey)) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
          Binding<?> scopedJitBinding = scope(jitBinding);
          toLink.add(scopedJitBinding);
          putBinding(scopedJitBinding);
=======
          Binding<?> scopedBinding = scope(resolvedBinding);
          toLink.add(scopedBinding);
          putBinding(scopedBinding);
        } catch (InvalidBindingException e) {
          addError(e.type + " " + e.getMessage() + " required by " + binding.requiredBy);
          bindings.put(key, Binding.UNRESOLVED);
        } catch (UnsupportedOperationException e) {
          addError("Unsupported: " + e.getMessage() + " required by " + binding.requiredBy);
          bindings.put(key, Binding.UNRESOLVED);
        } catch (IllegalArgumentException e) {
          addError(e.getMessage() + " required by " + binding.requiredBy);
          bindings.put(key, Binding.UNRESOLVED);
        } catch (RuntimeException e) {
          throw e;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
          if (e.getMessage() != null) {
            addError(e.getMessage() + " required by " + binding.requiredBy);
            bindings.put(key, Binding.UNRESOLVED);
          } else if (e instanceof RuntimeException) {
            throw (RuntimeException) e;
          } else {
            throw new RuntimeException(e);
          }
=======
          throw new RuntimeException(e);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
   * Creates a just-in-time binding for the key in {@code deferred}. The type of binding
=======
   * Returns a binding for the key in {@code deferred}. The type of binding
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
   *   <li>Injections of other types will use the injectable constructors of those classes.
=======
   *   <li>Injections of raw types will use the injectable constructors of those classes.
   *   <li>Any other injection types require @Provides bindings and will error out.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
  private Binding<?> createJitBinding(String key, Object requiredBy, ClassLoader classLoader,
=======
  private Binding<?> createBinding(String key, Object requiredBy, ClassLoader classLoader,
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
    if (className != null && !Keys.isAnnotated(key)) {
      Binding<?> binding =
          plugin.getAtInjectBinding(key, className, classLoader, mustHaveInjections);
      if (binding != null) {
        return binding;
      }
=======
    if (className == null || Keys.isAnnotated(key)) {
      // Cannot jit-bind annotated keys or generic types.
      throw new IllegalArgumentException(key);
    }
    Binding<?> binding =
        plugin.getAtInjectBinding(key, className, classLoader, mustHaveInjections);
    if (binding != null) {
      return binding;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE

    throw new IllegalArgumentException("No binding for " + key);
=======
    throw new InvalidBindingException(className, "could not be bound with key " + key);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Linker.java;<<<<<<< MINE
    if (!binding.isSingleton()) {
      return binding;
=======
    if (!binding.isSingleton() || binding instanceof SingletonBinding) {
      return binding; // Default scoped binding or already a scoped binding.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Keys.java;<<<<<<< MINE
 * Bindings from {@code @Provides} methods are of the first two types. Bindings
=======
 * Bindings from {@code @Provides} methods are of the first two types. BindingsGroup
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Keys.java;<<<<<<< MINE
    return "members/" + get(key);
=======
    // for classes key.getName() is equivalent to get(key)
    return "members/".concat(key.getName());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Keys.java;<<<<<<< MINE
  public static String get(Type type, Annotation annotation) {
=======
  private static String get(Type type, Annotation annotation) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Keys.java;<<<<<<< MINE
          throw new UnsupportedOperationException("Uninjectable type " + type);
=======
          throw new UnsupportedOperationException("Uninjectable type " + c.getName());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Binding.java;<<<<<<< MINE
      throw new IllegalArgumentException();
=======
      throw new InvalidBindingException(Keys.getClassName(membersKey),
          "is exclusively members injected and therefore cannot be scoped");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/SetBinding.java;<<<<<<< MINE
  public static <T> void add(Map<String, Binding<?>> bindings, String setKey, Binding<?> binding) {
=======
  private static <T> SetBinding<T> prepareSetBinding(
      BindingsGroup bindings, String setKey, Binding<?> binding) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/SetBinding.java;<<<<<<< MINE
      setBinding = (SetBinding) previous;
=======
      setBinding = (SetBinding<T>) previous;
      setBinding.setLibrary(setBinding.library() && binding.library());
      return setBinding;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/SetBinding.java;<<<<<<< MINE
      bindings.put(setKey, setBinding);
=======
      setBinding.setLibrary(binding.library());
      bindings.contributeSetBinding(setKey, setBinding);
      return (SetBinding<T>) bindings.get(setKey); // BindingMap.put() copies SetBindings.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/SetBinding.java;<<<<<<< MINE
    Set<T> result = new LinkedHashSet<T>(contributors.size());
    for (Binding<?> contributor : contributors) {
      Object contribution = contributor.get(); // Let runtime exceptions through.
      if (contributor.provideKey.equals(provideKey)) {
        result.addAll((Set<T>) contribution);
      } else {
        result.add((T) contribution);
=======
    List<T> result = new ArrayList<T>();
    for (SetBinding<T> setBinding = this; setBinding != null; setBinding = setBinding.parent) {
      for (int i = 0, size = setBinding.contributors.size(); i < size; i++) {
        Binding<?> contributor = setBinding.contributors.get(i);
        Object contribution = contributor.get(); // Let runtime exceptions through.
        if (contributor.provideKey.equals(provideKey)) {
          result.addAll((Set<T>) contribution);
        } else {
          result.add((T) contribution);
        }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/SetBinding.java;<<<<<<< MINE
    return Collections.unmodifiableSet(result);
=======
    return Collections.unmodifiableSet(new LinkedHashSet<T>(result));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/SetBinding.java;<<<<<<< MINE
    getBindings.addAll(contributors);
=======
    for (SetBinding<T> binding = this; binding != null; binding = binding.parent) {
      getBindings.addAll(binding.contributors);
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/SetBinding.java;<<<<<<< MINE
    throw new UnsupportedOperationException("Cannot inject into a Set binding");
=======
    throw new UnsupportedOperationException("Cannot inject members on a contributed Set<T>.");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/SetBinding.java;<<<<<<< MINE
    return "SetBinding" + contributors;
=======
    boolean first = true;
    StringBuilder builder = new StringBuilder("SetBinding[");
    for (SetBinding<T> setBinding = this; setBinding != null; setBinding = setBinding.parent) {
      for (int i = 0, size = setBinding.contributors.size(); i < size; i++) {
        if (!first) {
          builder.append(",");
        }
        builder.append(setBinding.contributors.get(i));
        first = false;
      }
    }
    builder.append("]");
    return builder.toString();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Loader.java;<<<<<<< MINE

  private final LruCache<ClassLoader, LruCache<String, Class<?>>> caches =
      new LruCache<ClassLoader, LruCache<String, Class<?>>>(Integer.MAX_VALUE) {
    @Override protected LruCache<String, Class<?>> create(final ClassLoader classLoader) {
      return new LruCache<String, Class<?>>(Integer.MAX_VALUE) {
        @Override protected Class<?> create(String className) {
          try {
            return classLoader.loadClass(className);
          } catch (ClassNotFoundException e) {
            return Void.class; // Cache the failure (negative case).
          }
=======
  private final Memoizer<ClassLoader, Memoizer<String, Class<?>>> caches =
      new Memoizer<ClassLoader, Memoizer<String, Class<?>>>() {
        @Override protected Memoizer<String, Class<?>> create(final ClassLoader classLoader) {
          return new Memoizer<String, Class<?>>() {
            @Override protected Class<?> create(String className) {
              try {
                return classLoader.loadClass(className);
              } catch (ClassNotFoundException e) {
                return Void.class; // Cache the failure (negative case).
              }
            }
          };
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Loader.java;<<<<<<< MINE
   * Returns a module adapter for {@code module} or throws a {@code TypeNotPresentException} if
=======
   * Returns a module adapter for {@code moduleClass} or throws a {@code TypeNotPresentException} if
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Loader.java;<<<<<<< MINE
      Constructor<?> constructor = generatedClass.getDeclaredConstructor();
      constructor.setAccessible(true);
      return (T) constructor.newInstance();
    } catch (NoSuchMethodException e) {
      throw new RuntimeException("No default constructor found on " + name, e);
=======
      @SuppressWarnings("unchecked")
      T instance = (T) generatedClass.newInstance();
      return instance;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/FailoverLoader.java;<<<<<<< MINE
  @Override public <T> ModuleAdapter<T> getModuleAdapter(Class<? extends T> type, T instance) {
    ModuleAdapter<T> result =
        instantiate(type.getName() + MODULE_ADAPTER_SUFFIX, type.getClassLoader());
    if (result == null) {
      throw new IllegalStateException("Module adapter for " + type + " could not be loaded. "
          + "Please ensure that code generation was run for this module.");
    }
    result.module = (instance != null) ? instance : result.newModule();
    return result;
=======
  @SuppressWarnings("unchecked") // cache ensures types match
  @Override public <T> ModuleAdapter<T> getModuleAdapter(Class<T> type) {
    return (ModuleAdapter<T>) loadedAdapters.get(type);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/FailoverLoader.java;<<<<<<< MINE
          injectedClass.getName() + STATIC_INJECTION_SUFFIX, injectedClass.getClassLoader());
=======
          injectedClass.getName().concat(STATIC_INJECTION_SUFFIX), injectedClass.getClassLoader());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/loaders/ReflectiveAtInjectBinding.java;<<<<<<< MINE
        throw new IllegalArgumentException("Too many injectable constructors on " + type.getName());
=======
        throw new InvalidBindingException(type.getName(), "has too many injectable constructors");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/loaders/ReflectiveAtInjectBinding.java;<<<<<<< MINE
        throw new IllegalArgumentException("No injectable members on " + type.getName()
            + ". Do you want to add an injectable constructor?");
=======
        throw new InvalidBindingException(type.getName(),
            "has no injectable members. Do you want to add an injectable constructor?");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Modules.java;<<<<<<< MINE
  public static Map<Class<?>, ModuleAdapter<?>> getAllModuleAdapters(Loader plugin,
      Object[] seedModules) {
    // Create a module adapter for each seed module.
    ModuleAdapter<?>[] seedAdapters = new ModuleAdapter<?>[seedModules.length];
    int s = 0;
    for (Object module : seedModules) {
      if (module instanceof Class) {
        seedAdapters[s++] = plugin.getModuleAdapter((Class<?>) module, null); // Loader constructs.
=======
  public static Map<ModuleAdapter<?>, Object> loadModules(Loader loader,
      Object[] seedModulesOrClasses) {
    Map<ModuleAdapter<?>, Object> seedAdapters =
        new LinkedHashMap<ModuleAdapter<?>, Object>(seedModulesOrClasses.length);
    for (int i = 0; i < seedModulesOrClasses.length; i++) {
      if (seedModulesOrClasses[i] instanceof Class<?>) {
        ModuleAdapter<?> adapter = loader.getModuleAdapter((Class<?>) seedModulesOrClasses[i]);
        seedAdapters.put(adapter, adapter.newModule());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Modules.java;<<<<<<< MINE
        seedAdapters[s++] = plugin.getModuleAdapter(module.getClass(), module);
=======
        ModuleAdapter<?> adapter = loader.getModuleAdapter(seedModulesOrClasses[i].getClass());
        seedAdapters.put(adapter, seedModulesOrClasses[i]);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Modules.java;<<<<<<< MINE
    for (ModuleAdapter<?> adapter : seedAdapters) {
      adaptersByModuleType.put(adapter.getModule().getClass(), adapter);
=======
    Map<ModuleAdapter<?>, Object> result =
        new LinkedHashMap<ModuleAdapter<?>, Object>(seedAdapters);

    // Next collect included modules
    Map<Class<?>, ModuleAdapter<?>> transitiveInclusions =
        new LinkedHashMap<Class<?>, ModuleAdapter<?>>();
    for (ModuleAdapter<?> adapter : seedAdapters.keySet()) {
      collectIncludedModulesRecursively(loader, adapter, transitiveInclusions);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Modules.java;<<<<<<< MINE

    // Next add adapters for the modules that we need to construct. This creates
    // instances of modules as necessary.
    for (ModuleAdapter<?> adapter : seedAdapters) {
      collectIncludedModulesRecursively(plugin, adapter, adaptersByModuleType);
=======
    // and create them if necessary
    for (ModuleAdapter<?> dependency : transitiveInclusions.values()) {
      if (!result.containsKey(dependency)) {
        result.put(dependency, dependency.newModule());
      }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/Modules.java;<<<<<<< MINE

    return adaptersByModuleType;
=======
    return result;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/ModuleAdapter.java;<<<<<<< MINE
  protected ModuleAdapter(String[] injectableTypes, Class<?>[] staticInjections, boolean overrides,
      Class<?>[] includes, boolean complete, boolean library) {
=======
  protected ModuleAdapter(Class<T> moduleClass, String[] injectableTypes,
      Class<?>[] staticInjections, boolean overrides, Class<?>[] includes, boolean complete,
      boolean library) {
    this.moduleClass = moduleClass;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/ModuleAdapter.java;<<<<<<< MINE
  public void getBindings(@SuppressWarnings("unused") Map<String, Binding<?>> map) {
=======
  @SuppressWarnings("unused")
  public void getBindings(BindingsGroup map, T module) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/internal/ModuleAdapter.java;<<<<<<< MINE
  public T getModule() {
    return module;
=======
  @Override
  public final boolean equals(Object obj) {
    if (obj == this) {
      return true;
    } else if (obj instanceof ModuleAdapter<?>) {
      ModuleAdapter<?> that = (ModuleAdapter<?>) obj;
      return this.moduleClass.equals(that.moduleClass);
    } else {
      return false;
    }
  }

  @Override
  public final int hashCode() {
    return moduleClass.hashCode();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE
        Map<String, Class<?>> injectableTypes) {
      if (linker == null) throw new NullPointerException("linker");
      if (plugin == null) throw new NullPointerException("plugin");
      if (staticInjections == null) throw new NullPointerException("staticInjections");
      if (injectableTypes == null) throw new NullPointerException("injectableTypes");
=======
        Map<String, Class<?>> injectableTypes,
        List<SetBinding<?>> setBindings) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE
      this.linker = linker;
      this.plugin = plugin;
      this.staticInjections = staticInjections;
      this.injectableTypes = injectableTypes;
=======
      this.linker = checkNotNull(linker, "linker");
      this.plugin = checkNotNull(plugin, "plugin");
      this.staticInjections = checkNotNull(staticInjections, "staticInjections");
      this.injectableTypes = checkNotNull(injectableTypes, "injectableTypes");
      this.setBindings = checkNotNull(setBindings, "setBindings");
    }

    private static <T> T checkNotNull(T object, String label) {
      if (object == null) throw new NullPointerException(label);
      return object;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE

      // Extract bindings in the 'base' and 'overrides' set. Within each set no
      // duplicates are permitted.
      Map<String, Binding<?>> baseBindings = new UniqueMap<String, Binding<?>>();
      Map<String, Binding<?>> overrideBindings = new UniqueMap<String, Binding<?>>();
      for (ModuleAdapter<?> moduleAdapter : getAllModuleAdapters(plugin, modules).values()) {
        for (String key : moduleAdapter.injectableTypes) {
          injectableTypes.put(key, moduleAdapter.getModule().getClass());
=======
      StandardBindings baseBindings =
          (base == null) ? new StandardBindings() : new StandardBindings(base.setBindings);
      BindingsGroup overrideBindings = new OverridesBindings();

      Map<ModuleAdapter<?>, Object> loadedModules = Modules.loadModules(plugin, modules);
      for (Entry<ModuleAdapter<?>, Object> loadedModule : loadedModules.entrySet()) {
        ModuleAdapter<Object> moduleAdapter = (ModuleAdapter<Object>) loadedModule.getKey();
        for (int i = 0; i < moduleAdapter.injectableTypes.length; i++) {
          injectableTypes.put(moduleAdapter.injectableTypes[i], moduleAdapter.moduleClass);
        }
        for (int i = 0; i < moduleAdapter.staticInjections.length; i++) {
          staticInjections.put(moduleAdapter.staticInjections[i], null);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE
        for (Class<?> c : moduleAdapter.staticInjections) {
          staticInjections.put(c, null);
=======
        try {
          BindingsGroup addTo = moduleAdapter.overrides ? overrideBindings : baseBindings;
          moduleAdapter.getBindings(addTo, loadedModule.getValue());
        } catch (IllegalArgumentException e) {
          throw new IllegalArgumentException(
              moduleAdapter.moduleClass.getSimpleName() + ": " + e.getMessage(), e);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE
      return new DaggerObjectGraph(base, linker, plugin, staticInjections, injectableTypes);
=======
      return new DaggerObjectGraph(
          base, linker, plugin, staticInjections, injectableTypes, baseBindings.setBindings);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/main/java/dagger/ObjectGraph.java;<<<<<<< MINE
        return linker.linkAll();
=======
        return linker.linkAll(); // Linker.linkAll() implicitly does Linker.linkRequested().
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/internal/TestingModuleAdapter.java;<<<<<<< MINE
  final Class<?> moduleClass;

  public TestingModuleAdapter(Class<?> moduleClass, Module annotation) {
=======
  public TestingModuleAdapter(Class<M> moduleClass, Module annotation) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/internal/TestingModuleAdapter.java;<<<<<<< MINE
  @Override public void getBindings(Map<String, Binding<?>> bindings) {
=======
  @Override public void getBindings(BindingsGroup bindings, M module) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/internal/TestingModuleAdapter.java;<<<<<<< MINE
              handleBindings(bindings, method, key, library);
=======
              handleBindings(bindings, module, method, key, library);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/internal/TestingModuleAdapter.java;<<<<<<< MINE
              handleSetBindings(bindings, method, setKey, key, library);
=======
              handleSetBindings(bindings, module, method, setKey, key, library);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/internal/TestingModuleAdapter.java;<<<<<<< MINE
              handleSetBindings(bindings, method, key, key, library);
=======
              handleSetBindings(bindings, module, method, key, key, library);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/internal/TestingModuleAdapter.java;<<<<<<< MINE
  private void handleBindings(Map<String, Binding<?>> bindings, Method method, String key,
=======
  private void handleBindings(BindingsGroup bindings, M module, Method method, String key,
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/internal/TestingModuleAdapter.java;<<<<<<< MINE
    bindings.put(key, new ProviderMethodBinding<M>(method, key, module, library));
=======
    bindings.contributeProvidesBinding(key,
        new ReflectiveProvidesBinding<M>(method, key, moduleClass.getName(), module, library));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/internal/TestingModuleAdapter.java;<<<<<<< MINE
  private void handleSetBindings(Map<String, Binding<?>> bindings, Method method, String setKey,
      String providerKey, boolean library) {
    SetBinding.<M>add(bindings, setKey, new ProviderMethodBinding<M>(method, providerKey, module, library));
=======
  private void handleSetBindings(BindingsGroup bindings, M module, Method method,
      String setKey, String providerKey, boolean library) {
    SetBinding.<M>add(bindings, setKey,
        new ReflectiveProvidesBinding<M>(
            method, providerKey, moduleClass.getName(), module, library));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/internal/TestingModuleAdapter.java;<<<<<<< MINE
  public static <M> ModuleAdapter<M> create(Class<? extends M> moduleClass) {
=======
  public static <M> ModuleAdapter<M> create(Class<M> moduleClass) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/internal/TestingModuleAdapter.java;<<<<<<< MINE
    public ProviderMethodBinding(Method method, String key, Object instance, boolean library) {
      super(key, null, method.isAnnotationPresent(Singleton.class),
          moduleClass.getName() + "." + method.getName() + "()");
=======
    public ReflectiveProvidesBinding(Method method, String key, String moduleClass,
        Object instance, boolean library) {
      super(key, method.isAnnotationPresent(Singleton.class), moduleClass, method.getName());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/internal/TestingLoader.java;<<<<<<< MINE
  @Override public <T> ModuleAdapter<T> getModuleAdapter(Class<? extends T> type, T instance) {
=======
  @Override public <T> ModuleAdapter<T> getModuleAdapter(Class<T> type) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/InjectionTest.java;<<<<<<< MINE
  @Module(complete=false, injects =C.class)
=======
  @Module(complete = false, injects = C.class)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/core/src/test/java/dagger/InjectionTest.java;<<<<<<< MINE
  @Module(addsTo=RootModule.class, injects =SingletonLinkedFromExtension.class)
=======
  @Module(addsTo = RootModule.class, injects = SingletonLinkedFromExtension.class)
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
        // IllegalStateException.
=======
        // CodeGenerationIncompleteException.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
        try {
          writeModuleAdapter(type, parsedAnnotation, providesTypes);
        } catch (IOException e) {
          error("Code gen failed: " + e, type);
        }
        i.remove();
      } catch (IllegalStateException e) {
        // a dependent type was not defined, we'll catch it on another pass
=======

        //TODO(cgruber): Figure out an initial sizing of the StringWriter.
        StringWriter stringWriter = new StringWriter();
        String adapterName = adapterName(type, MODULE_ADAPTER_SUFFIX);
        generateModuleAdapter(stringWriter, adapterName, type, parsedAnnotation, providesTypes);
        JavaFileObject sourceFile = processingEnv.getFiler().createSourceFile(adapterName, type);
        Writer sourceWriter = sourceFile.openWriter();
        sourceWriter.append(stringWriter.getBuffer());
        sourceWriter.close();
      } catch (CodeGenerationIncompleteException e) {
        continue; // A dependent type was not defined, we'll try to catch it on another pass.
      } catch (IOException e) {
        error("Code gen failed: " + e, type);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
    for (Element providerMethod : providesMethods(env)) {
=======

    provides:
    for (Element providerMethod : findProvidesMethods(env)) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
          error("Unexpected @Provides on " + providerMethod, providerMethod);
=======
          error("Unexpected @Provides on " + elementToString(providerMethod), providerMethod);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
      if (typeModifiers.contains(Modifier.PRIVATE)
          || typeModifiers.contains(Modifier.ABSTRACT)) {
=======
      if (typeModifiers.contains(PRIVATE)
          || typeModifiers.contains(ABSTRACT)) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
      if (methodModifiers.contains(Modifier.PRIVATE)
          || methodModifiers.contains(Modifier.ABSTRACT)
          || methodModifiers.contains(Modifier.STATIC)) {
=======
      if (methodModifiers.contains(PRIVATE)
          || methodModifiers.contains(ABSTRACT)
          || methodModifiers.contains(STATIC)) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
      for (String invalidTypeName : Arrays.asList("javax.inject.Provider", "dagger.Lazy")) {
        TypeElement invalidTypeElement = elementUtils.getTypeElement(invalidTypeName);
        if (invalidTypeElement != null) {
          if (types.isSameType(returnType, types.erasure(invalidTypeElement.asType()))) {
=======
      if (!returnType.getKind().equals(TypeKind.ERROR)) {
        // Validate if we have a type to validate (a type yet to be generated by other
        // processors is not "invalid" in this way, so ignore).
        for (String invalidTypeName : INVALID_RETURN_TYPES) {
          TypeElement invalidTypeElement = elementUtils.getTypeElement(invalidTypeName);
          if (invalidTypeElement != null && types.isSameType(returnType,
              types.erasure(invalidTypeElement.asType()))) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
            continue; // skip to next provides method.
=======
            continue provides; // Skip to next provides method.
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
        error("Modules must be classes: " + module, module);
=======
        error("Modules must be classes: " + elementToString(module), module);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
        error("Modules must not extend from other classes: " + module, module);
=======
        error("Modules must not extend from other classes: " + elementToString(module), module);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
  private Set<? extends Element> providesMethods(RoundEnvironment env) {
=======
  private Set<? extends Element> findProvidesMethods(RoundEnvironment env) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
  private void writeModuleAdapter(TypeElement type, Map<String, Object> module,
      List<ExecutableElement> providerMethods) throws IOException {
=======
  private void generateModuleAdapter(Writer ioWriter, String adapterName, TypeElement type,
      Map<String, Object> module, List<ExecutableElement> providerMethods) throws IOException {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
        getImports(multibindings, !providerMethods.isEmpty(), providerMethodDependencies));
=======
        findImports(multibindings, !providerMethods.isEmpty(), providerMethodDependencies));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
    writer.beginType(adapterName, "class", PUBLIC | FINAL,
=======
    writer.beginType(adapterName, "class", EnumSet.of(PUBLIC, FINAL),
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
    writer.emitField("String[]", "INJECTS", PRIVATE | STATIC | FINAL,
=======
    writer.emitField("String[]", "INJECTS", EnumSet.of(PRIVATE, STATIC, FINAL),
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
    writer.emitField("Class<?>[]", "STATIC_INJECTIONS", PRIVATE | STATIC | FINAL,
=======
    writer.emitField("Class<?>[]", "STATIC_INJECTIONS", EnumSet.of(PRIVATE, STATIC, FINAL),
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
    writer.emitField("Class<?>[]", "INCLUDES", PRIVATE | STATIC | FINAL, includesField.toString());
=======
    writer.emitField(
        "Class<?>[]", "INCLUDES", EnumSet.of(PRIVATE, STATIC, FINAL), includesField.toString());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
    writer.beginMethod(null, adapterName, PUBLIC);
    writer.emitStatement("super(INJECTS, STATIC_INJECTIONS, %s /*overrides*/, "
        + "INCLUDES, %s /*complete*/, %s /*library*/)", overrides, complete, library);
=======
    writer.beginMethod(null, adapterName, EnumSet.of(PUBLIC));
    writer.emitStatement("super(%s.class, INJECTS, STATIC_INJECTIONS, %s /*overrides*/, "
        + "INCLUDES, %s /*complete*/, %s /*library*/)", typeName,  overrides, complete, library);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
      writer.beginMethod(typeName, "newModule", PUBLIC);
=======
      writer.beginMethod(typeName, "newModule", EnumSet.of(PUBLIC));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
      writer.beginMethod("void", "getBindings", PUBLIC, BINDINGS_MAP, "map");
=======
      writer.beginMethod("void", "getBindings", EnumSet.of(PUBLIC), BINDINGS_MAP, "bindings",
          typeName, "module");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
            writer.emitStatement("map.put(%s, new %s(module))", JavaWriter.stringLiteral(key),
=======
            writer.emitStatement("bindings.contributeProvidesBinding(%s, new %s(module))",
                JavaWriter.stringLiteral(key),
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
            writer.emitStatement("SetBinding.add(map, %s, new %s(module))",
=======
            writer.emitStatement("SetBinding.add(bindings, %s, new %s(module))",
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
            writer.emitStatement("SetBinding.add(map, %s, new %s(module))",
=======
            writer.emitStatement("SetBinding.add(bindings, %s, new %s(module))",
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
      writeProvidesAdapter(writer, providerMethod, methodToClassName, methodNameToNextId,
          library);
=======
      generateProvidesAdapter(
          writer, providerMethod, methodToClassName, methodNameToNextId, library);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
  private Set<String> getImports(boolean multibindings, boolean providers, boolean dependencies) {
=======
  private Set<String> findImports(boolean multibindings, boolean providers, boolean dependencies) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
      imports.add(Binding.class.getCanonicalName());
      imports.add(Map.class.getCanonicalName());
=======
      imports.add(BindingsGroup.class.getCanonicalName());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
  private void writeProvidesAdapter(JavaWriter writer, ExecutableElement providerMethod,
=======
  private void generateProvidesAdapter(JavaWriter writer, ExecutableElement providerMethod,
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
    writer.emitJavadoc(binderTypeDocs(returnType, false, false, dependent));
    writer.beginType(className, "class", PUBLIC | FINAL | STATIC,
        JavaWriter.type(Binding.class, returnType),
=======
    writer.emitJavadoc(bindingTypeDocs(returnType, false, false, dependent));
    writer.beginType(className, "class", EnumSet.of(PUBLIC, STATIC, FINAL),
        JavaWriter.type(ProvidesBinding.class, returnType),
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
    writer.emitField(moduleType, "module", PRIVATE | FINAL);
=======
    writer.emitField(moduleType, "module", EnumSet.of(PRIVATE, FINAL));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
          parameterName(parameter), PRIVATE);
=======
          parameterName(parameter), EnumSet.of(PRIVATE));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
    writer.beginMethod(null, className, PUBLIC, moduleType, "module");
=======
    writer.beginMethod(null, className, EnumSet.of(PUBLIC), moduleType, "module");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
        key, membersKey, (singleton ? "IS_SINGLETON" : "NOT_SINGLETON"),
        JavaWriter.stringLiteral(moduleType + "." + methodName + "()"));
=======
        key, (singleton ? "IS_SINGLETON" : "NOT_SINGLETON"),
        JavaWriter.stringLiteral(moduleType),
        JavaWriter.stringLiteral(methodName));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
      writer.beginMethod("void", "attach", PUBLIC, Linker.class.getCanonicalName(), "linker");
=======
      writer.beginMethod(
          "void", "attach", EnumSet.of(PUBLIC), Linker.class.getCanonicalName(), "linker");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
      writer.beginMethod("void", "getDependencies", PUBLIC, setOfBindings, "getBindings",
          setOfBindings, "injectMembersBindings");
=======
      writer.beginMethod("void", "getDependencies", EnumSet.of(PUBLIC), setOfBindings,
          "getBindings", setOfBindings, "injectMembersBindings");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
        writer.emitStatement("getBindings.add(%s)", parameter.getSimpleName().toString());
=======
        writer.emitStatement("getBindings.add(%s)", parameterName(parameter));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
    writer.beginMethod(returnType, "get", PUBLIC);
=======
    writer.beginMethod(returnType, "get", EnumSet.of(PUBLIC));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java;<<<<<<< MINE
      args.append(String.format("%s.get()", parameter.getSimpleName().toString()));
=======
      args.append(String.format("%s.get()", parameterName(parameter)));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
    remainingTypeNames.addAll(getInjectedClassNames(env));
=======
    remainingTypeNames.addAll(findInjectedClassNames(env));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
          writeInjectionsForClass(injectedClass);
=======
          generateInjectionsForClass(injectedClass);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
    return true;
=======
    return false;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
  private void writeInjectionsForClass(InjectedClass injectedClass) throws IOException {
=======
  private void generateInjectionsForClass(InjectedClass injectedClass) throws IOException {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
      writeInjectAdapter(injectedClass.type, injectedClass.constructor, injectedClass.fields);
=======
      generateInjectAdapter(injectedClass.type, injectedClass.constructor, injectedClass.fields);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
      writeStaticInjection(injectedClass.type, injectedClass.staticFields);
=======
      generateStaticInjection(injectedClass.type, injectedClass.staticFields);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
  private Set<String> getInjectedClassNames(RoundEnvironment env) {
=======
  private Set<String> findInjectedClassNames(RoundEnvironment env) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
      error("@Inject is not valid on a class: " + injectable, injectable);
=======
      error("@Inject is not valid on a class: " + elementToString(injectable), injectable);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
      error("Method injection is not supported: " + elementToString(injectable), injectable);
=======
      error("Method injection is not supported: " + elementToString(injectable), injectable);
      return false;
    }

    if (injectable.getKind() == ElementKind.FIELD
        && injectable.getModifiers().contains(FINAL)) {
      error("Can't inject a final field: " + elementToString(injectable), injectable);
      return false;
    }

    if (injectable.getKind() == ElementKind.FIELD
        && injectable.getModifiers().contains(PRIVATE)) {
      error("Can't inject a private field: " + elementToString(injectable), injectable);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE

    if (injectable.getKind() == ElementKind.FIELD
        && injectable.getModifiers().contains(FINAL)) {
      error("Can't inject a final field: " + elementToString(injectable), injectable);
      return false;
    }

    if (injectable.getKind() == ElementKind.FIELD
        && injectable.getModifiers().contains(PRIVATE)) {
      error("Can't inject a private field: " + elementToString(injectable), injectable);
      return false;
    }

    if (injectable.getKind() == ElementKind.CONSTRUCTOR
        && injectable.getModifiers().contains(PRIVATE)) {
      error("Can't inject a private constructor: " + elementToString(injectable), injectable);
=======

    if (injectable.getKind() == ElementKind.CONSTRUCTOR
        && injectable.getModifiers().contains(PRIVATE)) {
      error("Can't inject a private constructor: " + elementToString(injectable), injectable);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
      error("Can't inject a non-static inner class: " + injectableType, injectableType);
=======
      error("Can't inject a non-static inner class: " + elementToString(injectable),
          injectableType);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
  private InjectedClass getInjectedClass(String injectedClassName) {
=======
  private InjectedClass createInjectedClass(String injectedClassName) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
          if (member.getModifiers().contains(Modifier.STATIC)) {
=======
          if (member.getModifiers().contains(STATIC)) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
          error("Cannot inject " + member, member);
=======
          error("Cannot inject " + elementToString(member), member);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
  private void writeInjectAdapter(TypeElement type, ExecutableElement constructor,
=======
  private void generateInjectAdapter(TypeElement type, ExecutableElement constructor,
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
    writer.emitImports(getImports(dependent, injectMembers, constructor != null));

    writer.emitEmptyLine();
    writer.emitJavadoc(binderTypeDocs(strippedTypeName, isAbstract, injectMembers, dependent));
    writer.beginType(adapterName, "class", PUBLIC | FINAL,
=======
    writer.emitJavadoc(bindingTypeDocs(strippedTypeName, isAbstract, injectMembers, dependent));
    writer.beginType(adapterName, "class", EnumSet.of(PUBLIC, FINAL),
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
        interfaces(strippedTypeName, injectMembers, constructor != null));

=======
        implementedInterfaces(strippedTypeName, injectMembers, constructor != null));
    writeMemberBindingsFields(writer, fields, disambiguateFields);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
      for (VariableElement parameter : constructor.getParameters()) {
        writer.emitField(JavaWriter.type(Binding.class,
            typeToString(parameter.asType())),
            parameterName(disambiguateFields, parameter), PRIVATE);
      }
    }
    for (Element field : fields) {
      writer.emitField(JavaWriter.type(Binding.class,
          typeToString(field.asType())),
          fieldName(disambiguateFields, field), PRIVATE);
    }
=======
      writeParameterBindingsFields(writer, constructor, disambiguateFields);
     }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
      writeSupertypeInjectorField(writer, type, supertype);
=======
      writeSupertypeInjectorField(writer, supertype);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
    writer.beginMethod(null, adapterName, PUBLIC);
    String key = (constructor != null)
        ? JavaWriter.stringLiteral(GeneratorKeys.get(type.asType()))
        : null;
    String membersKey = JavaWriter.stringLiteral(GeneratorKeys.rawMembersKey(type.asType()));
    boolean singleton = type.getAnnotation(Singleton.class) != null;
    writer.emitStatement("super(%s, %s, %s, %s.class)",
        key, membersKey, (singleton ? "IS_SINGLETON" : "NOT_SINGLETON"), strippedTypeName);
    writer.endMethod();
=======
    writeInjectAdapterConstructor(writer, constructor, type, strippedTypeName, adapterName);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
      writer.emitEmptyLine();
      writer.emitJavadoc(AdapterJavadocs.ATTACH_METHOD);
      writer.emitAnnotation(Override.class);
      writer.emitAnnotation(SuppressWarnings.class, JavaWriter.stringLiteral("unchecked"));
      writer.beginMethod("void", "attach", PUBLIC, Linker.class.getCanonicalName(), "linker");
      if (constructor != null) {
        for (VariableElement parameter : constructor.getParameters()) {
          writer.emitStatement(
              "%s = (%s) linker.requestBinding(%s, %s.class, getClass().getClassLoader())",
              parameterName(disambiguateFields, parameter),
              writer.compressType(JavaWriter.type(Binding.class, typeToString(parameter.asType()))),
              JavaWriter.stringLiteral(GeneratorKeys.get(parameter)),
              strippedTypeName);
        }
      }
      for (Element field : fields) {
        writer.emitStatement(
            "%s = (%s) linker.requestBinding(%s, %s.class, getClass().getClassLoader())",
            fieldName(disambiguateFields, field),
            writer.compressType(JavaWriter.type(Binding.class, typeToString(field.asType()))),
            JavaWriter.stringLiteral(GeneratorKeys.get((VariableElement) field)),
            strippedTypeName);
      }
      if (supertype != null) {
        writer.emitStatement(
            "%s = (%s) linker.requestBinding(%s, %s.class, getClass().getClassLoader()"
                + ", false, true)", // Yep.  This is a dumb line-length violation otherwise.
            "supertype",
            writer.compressType(JavaWriter.type(Binding.class, rawTypeToString(supertype, '.'))),
            JavaWriter.stringLiteral(GeneratorKeys.rawMembersKey(supertype)),
            strippedTypeName);
      }
      writer.endMethod();

      writer.emitEmptyLine();
      writer.emitJavadoc(AdapterJavadocs.GET_DEPENDENCIES_METHOD);
      writer.emitAnnotation(Override.class);
      String setOfBindings = JavaWriter.type(Set.class, "Binding<?>");
      writer.beginMethod("void", "getDependencies", PUBLIC, setOfBindings, "getBindings",
          setOfBindings, "injectMembersBindings");
      if (constructor != null) {
        for (Element parameter : constructor.getParameters()) {
          writer.emitStatement("getBindings.add(%s)", parameterName(disambiguateFields, parameter));
        }
      }
      for (Element field : fields) {
        writer.emitStatement("injectMembersBindings.add(%s)", fieldName(disambiguateFields, field));
      }
      if (supertype != null) {
        writer.emitStatement("injectMembersBindings.add(%s)", "supertype");
      }
      writer.endMethod();
=======
      writeAttachMethod(writer, constructor, fields, disambiguateFields, strippedTypeName,
          supertype, true);
      writeGetDependenciesMethod(writer, constructor, fields, disambiguateFields, supertype, true);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
      writer.emitEmptyLine();
      writer.emitJavadoc(AdapterJavadocs.GET_METHOD, strippedTypeName);
      writer.emitAnnotation(Override.class);
      writer.beginMethod(strippedTypeName, "get", PUBLIC);
      StringBuilder newInstance = new StringBuilder();
      newInstance.append(strippedTypeName).append(" result = new ");
      newInstance.append(strippedTypeName).append('(');
      boolean first = true;
      for (VariableElement parameter : constructor.getParameters()) {
        if (!first) newInstance.append(", ");
        else first = false;
        newInstance.append(parameterName(disambiguateFields, parameter)).append(".get()");
      }
      newInstance.append(')');
      writer.emitStatement(newInstance.toString());
      if (injectMembers) {
        writer.emitStatement("injectMembers(result)");
      }
      writer.emitStatement("return result");
      writer.endMethod();
=======
      writeGetMethod(writer, constructor, disambiguateFields, injectMembers, strippedTypeName);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
      writer.emitEmptyLine();
      writer.emitJavadoc(AdapterJavadocs.MEMBERS_INJECT_METHOD, strippedTypeName);
      writer.emitAnnotation(Override.class);
      writer.beginMethod("void", "injectMembers", PUBLIC, strippedTypeName, "object");
      for (Element field : fields) {
        writer.emitStatement("object.%s = %s.get()", field.getSimpleName(),
            fieldName(disambiguateFields, field));
      }
      if (supertype != null) {
        writer.emitStatement("supertype.injectMembers(object)");
      }
      writer.endMethod();
=======
      writeMembersInjectMethod(writer, fields, disambiguateFields, strippedTypeName, supertype);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
  private void writeStaticInjection(TypeElement type, List<Element> fields) throws IOException {
=======
  private void generateStaticInjection(TypeElement type, List<Element> fields) throws IOException {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
    writer.beginType(adapterName, "class", PUBLIC | FINAL, StaticInjection.class.getSimpleName());
=======
    writer.beginType(
        adapterName, "class", EnumSet.of(PUBLIC, FINAL), StaticInjection.class.getSimpleName());
    writeMemberBindingsFields(writer, fields, false);
    writer.emitEmptyLine();
    writeAttachMethod(writer, null, fields, false, typeName, null, true);
    writeStaticInjectMethod(writer, fields, typeName);
    writer.endType();
    writer.close();
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
          fieldName(disambiguateFields, field), EnumSet.of(PRIVATE));
    }
  }

  private void writeParameterBindingsFields(
      JavaWriter writer, ExecutableElement constructor, boolean disambiguateFields)
      throws IOException {
    for (VariableElement parameter : constructor.getParameters()) {
      writer.emitField(JavaWriter.type(Binding.class,
          typeToString(parameter.asType())),
          parameterName(disambiguateFields, parameter), EnumSet.of(PRIVATE));
=======
          fieldName(disambiguateFields, field), EnumSet.of(PRIVATE));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
  }

  private void writeSupertypeInjectorField(
      JavaWriter writer, TypeElement type, TypeMirror nextAncestor) throws IOException {
    TypeElement supertypeElement =
        ((TypeElement) processingEnv.getTypeUtils().asElement(nextAncestor));
    String adapterName = parentAdapterName(type, supertypeElement);
    writer.emitField(
        adapterName, "nextInjectableAncestor", EnumSet.of(PRIVATE), "new " + adapterName + "()");
  }
=======
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
  private void writeInjectAdapterConstructor(JavaWriter writer, ExecutableElement constructor,
      TypeElement type, String strippedTypeName, String adapterName) throws IOException {
    writer.beginMethod(null, adapterName, EnumSet.of(PUBLIC));
    String key = (constructor != null)
        ? JavaWriter.stringLiteral(GeneratorKeys.get(type.asType()))
        : null;
    String membersKey = JavaWriter.stringLiteral(GeneratorKeys.rawMembersKey(type.asType()));
    boolean singleton = type.getAnnotation(Singleton.class) != null;
    writer.emitStatement("super(%s, %s, %s, %s.class)",
        key, membersKey, (singleton ? "IS_SINGLETON" : "NOT_SINGLETON"), strippedTypeName);
    writer.endMethod();
=======
  private void writeParameterBindingsFields(
      JavaWriter writer, ExecutableElement constructor, boolean disambiguateFields)
      throws IOException {
    for (VariableElement parameter : constructor.getParameters()) {
      writer.emitField(JavaWriter.type(Binding.class,
          typeToString(parameter.asType())),
          parameterName(disambiguateFields, parameter), EnumSet.of(PRIVATE));
    }
  }

  private void writeSupertypeInjectorField(JavaWriter writer, TypeMirror supertype)
      throws IOException {
    writer.emitField(JavaWriter.type(Binding.class, rawTypeToString(supertype, '.')), "supertype",
        EnumSet.of(PRIVATE));
  }

  private void writeInjectAdapterConstructor(JavaWriter writer, ExecutableElement constructor,
      TypeElement type, String strippedTypeName, String adapterName) throws IOException {
    writer.beginMethod(null, adapterName, EnumSet.of(PUBLIC));
    String key = (constructor != null)
        ? JavaWriter.stringLiteral(GeneratorKeys.get(type.asType()))
        : null;
    String membersKey = JavaWriter.stringLiteral(GeneratorKeys.rawMembersKey(type.asType()));
    boolean singleton = type.getAnnotation(Singleton.class) != null;
    writer.emitStatement("super(%s, %s, %s, %s.class)",
        key, membersKey, (singleton ? "IS_SINGLETON" : "NOT_SINGLETON"), strippedTypeName);
    writer.endMethod();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
  }

  /**
   * Writes the {@code attach()} method for the generated adapters. The {@code supertype} provided
   * is the next injectable ancestor.
   */
  private void writeAttachMethod(JavaWriter writer, ExecutableElement constructor,
      List<Element> fields, boolean disambiguateFields, String typeName, TypeMirror supertype,
      boolean extendsBinding) throws IOException {
=======
  }

  private void writeAttachMethod(JavaWriter writer, ExecutableElement constructor,
      List<Element> fields, boolean disambiguateFields, String typeName, TypeMirror supertype,
      boolean extendsBinding) throws IOException {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
    if (extendsBinding) {
      writer.emitAnnotation(Override.class);
    }
    writer.emitAnnotation(SuppressWarnings.class, JavaWriter.stringLiteral("unchecked"));
    writer.beginMethod(
        "void", "attach", EnumSet.of(PUBLIC), Linker.class.getCanonicalName(), "linker");
    if (supertype != null) {
      writer.emitStatement("nextInjectableAncestor.attach(linker)");
    }
    if (constructor != null) {
      for (VariableElement parameter : constructor.getParameters()) {
        writer.emitStatement(
            "%s = (%s) linker.requestBinding(%s, %s.class, getClass().getClassLoader())",
            parameterName(disambiguateFields, parameter),
            writer.compressType(JavaWriter.type(Binding.class, typeToString(parameter.asType()))),
            JavaWriter.stringLiteral(GeneratorKeys.get(parameter)), typeName);
      }
    }
=======
    if (extendsBinding) {
      writer.emitAnnotation(Override.class);
    }
    writer.emitAnnotation(SuppressWarnings.class, JavaWriter.stringLiteral("unchecked"));
    writer.beginMethod(
        "void", "attach", EnumSet.of(PUBLIC), Linker.class.getCanonicalName(), "linker");
    if (constructor != null) {
      for (VariableElement parameter : constructor.getParameters()) {
        writer.emitStatement(
            "%s = (%s) linker.requestBinding(%s, %s.class, getClass().getClassLoader())",
            parameterName(disambiguateFields, parameter),
            writer.compressType(JavaWriter.type(Binding.class, typeToString(parameter.asType()))),
            JavaWriter.stringLiteral(GeneratorKeys.get(parameter)), typeName);
      }
    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
          fieldName(false, field),
=======
          fieldName(disambiguateFields, field),
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
          JavaWriter.stringLiteral(GeneratorKeys.get((VariableElement) field)), typeName);
    }
    writer.endMethod();
    writer.emitEmptyLine();
  }

  /**
   * Writes the {@code getDependencies()} method for the generated adapters. The {@code supertype}
   * provided is the next injectable ancestor.
   */
  private void writeGetDependenciesMethod(JavaWriter writer, ExecutableElement constructor,
      List<Element> fields, boolean disambiguateFields, TypeMirror supertype,
      boolean extendsBinding) throws IOException {
    writer.emitJavadoc(AdapterJavadocs.GET_DEPENDENCIES_METHOD);
    if (extendsBinding) {
      writer.emitAnnotation(Override.class);
    }
    String setOfBindings = JavaWriter.type(Set.class, "Binding<?>");
    writer.beginMethod("void", "getDependencies", EnumSet.of(PUBLIC), setOfBindings, "getBindings",
        setOfBindings, "injectMembersBindings");
    if (constructor != null) {
      for (Element parameter : constructor.getParameters()) {
        writer.emitStatement("getBindings.add(%s)", parameterName(disambiguateFields, parameter));
      }
    }
    for (Element field : fields) {
      writer.emitStatement("injectMembersBindings.add(%s)", fieldName(disambiguateFields, field));
    }
    if (supertype != null) {
      writer.emitStatement("nextInjectableAncestor.getDependencies(null, injectMembersBindings)");
=======
          JavaWriter.stringLiteral(GeneratorKeys.get((VariableElement) field)), typeName);
    }
    if (supertype != null) {
      writer.emitStatement(
          "%s = (%s) linker.requestBinding(%s, %s.class, getClass().getClassLoader()"
              + ", false, true)",
          "supertype",
          writer.compressType(JavaWriter.type(Binding.class, rawTypeToString(supertype, '.'))),
          JavaWriter.stringLiteral(GeneratorKeys.rawMembersKey(supertype)), typeName);
    }
    writer.endMethod();
    writer.emitEmptyLine();
  }

  private void writeGetDependenciesMethod(JavaWriter writer, ExecutableElement constructor,
      List<Element> fields, boolean disambiguateFields, TypeMirror supertype,
      boolean extendsBinding) throws IOException {
    writer.emitJavadoc(AdapterJavadocs.GET_DEPENDENCIES_METHOD);
    if (extendsBinding) {
      writer.emitAnnotation(Override.class);
    }
    String setOfBindings = JavaWriter.type(Set.class, "Binding<?>");
    writer.beginMethod("void", "getDependencies", EnumSet.of(PUBLIC), setOfBindings, "getBindings",
        setOfBindings, "injectMembersBindings");
    if (constructor != null) {
      for (Element parameter : constructor.getParameters()) {
        writer.emitStatement("getBindings.add(%s)", parameterName(disambiguateFields, parameter));
      }
    }
    for (Element field : fields) {
      writer.emitStatement("injectMembersBindings.add(%s)", fieldName(disambiguateFields, field));
    }
    if (supertype != null) {
      writer.emitStatement("injectMembersBindings.add(%s)", "supertype");
    }
    writer.endMethod();
    writer.emitEmptyLine();
  }

  private void writeGetMethod(JavaWriter writer, ExecutableElement constructor,
      boolean disambiguateFields, boolean injectMembers, String strippedTypeName)
      throws IOException {
    writer.emitJavadoc(AdapterJavadocs.GET_METHOD, strippedTypeName);
    writer.emitAnnotation(Override.class);
    writer.beginMethod(strippedTypeName, "get", EnumSet.of(PUBLIC));
    StringBuilder newInstance = new StringBuilder();
    newInstance.append(strippedTypeName).append(" result = new ");
    newInstance.append(strippedTypeName).append('(');
    boolean first = true;
    for (VariableElement parameter : constructor.getParameters()) {
      if (!first) newInstance.append(", ");
      else first = false;
      newInstance.append(parameterName(disambiguateFields, parameter)).append(".get()");
    }
    newInstance.append(')');
    writer.emitStatement(newInstance.toString());
    if (injectMembers) {
      writer.emitStatement("injectMembers(result)");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
  private void writeGetMethod(JavaWriter writer, ExecutableElement constructor,
      boolean disambiguateFields, boolean injectMembers, String strippedTypeName)
      throws IOException {
    writer.emitJavadoc(AdapterJavadocs.GET_METHOD, strippedTypeName);
    writer.emitAnnotation(Override.class);
    writer.beginMethod(strippedTypeName, "get", EnumSet.of(PUBLIC));
    StringBuilder newInstance = new StringBuilder();
    newInstance.append(strippedTypeName).append(" result = new ");
    newInstance.append(strippedTypeName).append('(');
    boolean first = true;
    for (VariableElement parameter : constructor.getParameters()) {
      if (!first) newInstance.append(", ");
      else first = false;
      newInstance.append(parameterName(disambiguateFields, parameter)).append(".get()");
    }
    newInstance.append(')');
    writer.emitStatement(newInstance.toString());
    if (injectMembers) {
      writer.emitStatement("injectMembers(result)");
    }
    writer.emitStatement("return result");
    writer.endMethod();
    writer.emitEmptyLine();
  }

  /**
   * Writes the {@code injectMembers()} method for the generated adapters. The {@code supertype}
   * provided is the next injectable ancestor.
   */
  private void writeMembersInjectMethod(JavaWriter writer, List<Element> fields,
      boolean disambiguateFields, String strippedTypeName, TypeMirror supertype)
      throws IOException {
    writer.emitJavadoc(AdapterJavadocs.MEMBERS_INJECT_METHOD, strippedTypeName);
    writer.emitAnnotation(Override.class);
    writer.beginMethod("void", "injectMembers", EnumSet.of(PUBLIC), strippedTypeName, "object");
    for (Element field : fields) {
      writer.emitStatement("object.%s = %s.get()",
          field.getSimpleName(),
          fieldName(disambiguateFields, field));
    }
    if (supertype != null) {
      writer.emitStatement("nextInjectableAncestor.injectMembers(object)");
    }
    writer.endMethod();
    writer.emitEmptyLine();
  }

  private void writeStaticInjectMethod(JavaWriter writer, List<Element> fields, String typeName)
      throws IOException {
=======
  private void writeMembersInjectMethod(JavaWriter writer, List<Element> fields,
      boolean disambiguateFields, String strippedTypeName, TypeMirror supertype)
      throws IOException {
    writer.emitJavadoc(AdapterJavadocs.MEMBERS_INJECT_METHOD, strippedTypeName);
    writer.emitAnnotation(Override.class);
    writer.beginMethod("void", "injectMembers", EnumSet.of(PUBLIC), strippedTypeName, "object");
    for (Element field : fields) {
      writer.emitStatement("object.%s = %s.get()",
          field.getSimpleName(),
          fieldName(disambiguateFields, field));
    }
    if (supertype != null) {
      writer.emitStatement("supertype.injectMembers(object)");
    }
    writer.endMethod();
    writer.emitEmptyLine();
  }

  private void writeStaticInjectMethod(JavaWriter writer, List<Element> fields, String typeName)
      throws IOException {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
    writer.beginMethod("void", "inject", PUBLIC);
=======
    writer.beginMethod("void", "inject", EnumSet.of(PUBLIC));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
    writer.emitEmptyLine();
  }

  private Set<String> findImports(boolean dependent, boolean injectMembers, boolean isProvider) {
    Set<String> imports = new LinkedHashSet<String>();
    imports.add(Binding.class.getCanonicalName());
    if (dependent) {
      imports.add(Linker.class.getCanonicalName());
      imports.add(Set.class.getCanonicalName());
    }
    if (injectMembers) imports.add(MembersInjector.class.getCanonicalName());
    if (isProvider) imports.add(Provider.class.getCanonicalName());
    return imports;
  }

  private String[] implementedInterfaces(
      String strippedTypeName, boolean hasFields, boolean isProvider) {
    List<String> interfaces = new ArrayList<String>();
    if (isProvider) {
      interfaces.add(JavaWriter.type(Provider.class, strippedTypeName));
    }
    if (hasFields) {
      interfaces.add(JavaWriter.type(MembersInjector.class, strippedTypeName));
    }
    return interfaces.toArray(new String[interfaces.size()]);
  }
=======
    writer.emitEmptyLine();
  }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/InjectAdapterProcessor.java;<<<<<<< MINE
  private String strippedTypeName(String type, String packageName) {
    return type.substring(packageName.isEmpty() ? 0 : packageName.length() + 1);
=======
  private Set<String> findImports(boolean dependent, boolean injectMembers, boolean isProvider) {
    Set<String> imports = new LinkedHashSet<String>();
    imports.add(Binding.class.getCanonicalName());
    if (dependent) {
      imports.add(Linker.class.getCanonicalName());
      imports.add(Set.class.getCanonicalName());
    }
    if (injectMembers) imports.add(MembersInjector.class.getCanonicalName());
    if (isProvider) imports.add(Provider.class.getCanonicalName());
    return imports;
  }

  private String[] implementedInterfaces(
      String strippedTypeName, boolean hasFields, boolean isProvider) {
    List<String> interfaces = new ArrayList<String>();
    if (isProvider) {
      interfaces.add(JavaWriter.type(Provider.class, strippedTypeName));
    }
    if (hasFields) {
      interfaces.add(JavaWriter.type(MembersInjector.class, strippedTypeName));
    }
    return interfaces.toArray(new String[interfaces.size()]);
  }

  private String strippedTypeName(String type, String packageName) {
    return type.substring(packageName.isEmpty() ? 0 : packageName.length() + 1);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisLoader.java;<<<<<<< MINE
  @Override public <T> ModuleAdapter<T> getModuleAdapter(Class<? extends T> moduleClass, T module) {
=======
  @Override public <T> ModuleAdapter<T> getModuleAdapter(Class<T> moduleClass) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GeneratorKeys.java;<<<<<<< MINE
      List<? extends AnnotationMirror> annotations, Object member) {
=======
      List<? extends AnnotationMirror> annotations) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/AdapterJavadocs.java;<<<<<<< MINE
  static String binderTypeDocs(String type, boolean abstrakt, boolean members, boolean dependent) {
=======
  static String bindingTypeDocs(String type, boolean abstrakt, boolean members, boolean dependent) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/AdapterJavadocs.java;<<<<<<< MINE
    sb.append("A {@code Binder<").append(type).append(">} implementation which satisfies\n");
=======
    sb.append("A {@code Binding<").append(type).append(">} implementation which satisfies\n");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
      return true;
=======
      return false;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
      modules.add(processingEnv.getElementUtils().getTypeElement(moduleName));
=======
      modules.add(elements().getTypeElement(moduleName));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
        } catch (IllegalStateException e) {
          error("Graph validation failed: " + e.getMessage(), moduleType);
=======
        } catch (InvalidBindingException e) {
          error("Graph validation failed: " + e.getMessage(), elements().getTypeElement(e.type));
          continue;
        } catch (RuntimeException e) {
          if (ERROR_NAMES_TO_PROPAGATE.contains(e.getClass().getName())) {
            throw e;
          }
          error("Unknown error " + e.getClass().getName() + " thrown by javac in graph validation: "
              + e.getMessage(), moduleType);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
    return true;
=======
    return false;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
              ? GeneratorKeys.get(injectableType)
=======
              ? providerKey
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
              addTo.put(key, binding);
=======
              if (injectsProvisionKeys.contains(binding.provideKey)) {
                binding.setDependedOn(true);
              }
              try {
                addTo.contributeProvidesBinding(key, binding);
              } catch (IllegalStateException ise) {
                throw new ModuleValidationException(ise.getMessage(), providerMethod);
              }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
  private String shortMethodName(ExecutableElement method) {
    return method.getEnclosingElement().getSimpleName().toString()
        + "." + method.getSimpleName() + "()";
=======
  private Elements elements() {
    return processingEnv.getElementUtils();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
      super(provideKey, null, method.getAnnotation(Singleton.class) != null, methodName(method));
=======
      super(provideKey, method.getAnnotation(Singleton.class) != null,
          className(method), method.getSimpleName().toString());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
    public ModuleValidationException(String message, TypeElement source) {
=======
    public ModuleValidationException(String message, Element source) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/test/java/dagger/testing/it/BuildLogValidator.java;<<<<<<< MINE
    StringBuilder sb = new StringBuilder("Build output did not contain expected error text:");
    boolean missing = false;

    for (String expected : expectedStrings) {
      if (!buildOutput.contains(expected)) {
        missing = true;
        sb.append("\n    \"").append(expected).append("\"");
=======
  private void appendBuildStatus(StringBuilder sb, String buildOutput) {
    sb.append("\n\nBuild Output:\n\n");
    boolean containsError = false;
    for(String line : buildOutput.split("\n")) {
      if (line.contains("[ERROR]")) {
        containsError = true;
        sb.append("\n        ").append(line);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/test/java/dagger/testing/it/BuildLogValidator.java;<<<<<<< MINE
    if (missing) {
      sb.append("\n\nBuild Output:\n\n");
      boolean containsError = false;
      for(String line : buildOutput.split("\n")) {
        if (line.contains("[ERROR]")) {
          containsError = true;
          sb.append("\n        ").append(line);
        }
      }
      if (!containsError) {
        sb.append("\nTEST BUILD SUCCEEDED.\n");
      }
      throw new Exception(sb.toString());
=======
    if (!containsError) {
      sb.append("\nTEST BUILD SUCCEEDED.\n");
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/dagger/revisions/rev_1bc7c83_8f2e49e/rev_1bc7c83-8f2e49e/compiler/src/main/java/dagger/internal/codegen/GraphAnalysisProcessor.java;<<<<<<< MINE
      Map<String, Object> annotation = getAnnotation(Module.class, element);
=======
      Map<String, Object> annotation = null;
      try {
        annotation = getAnnotation(Module.class, element);
      } catch (CodeGenerationIncompleteException e) {
        continue; // skip this element. An up-stream compiler error is in play.
      }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/volley/revisions/rev_46741f2_07e780c/rev_46741f2-07e780c/src/main/java/com/android/volley/toolbox/ImageLoader.java;<<<<<<< MINE
        return get(requestUrl, listener, 0, 0, ScaleType.CENTER_INSIDE);
=======
        return get(requestUrl, listener, 0, 0);
    }

    /**
     * Equivalent to calling {@link #get(String, ImageListener, int, int, ScaleType)} with
     * {@code Scaletype == ScaleType.CENTER_INSIDE}.
     */
    public ImageContainer get(String requestUrl, ImageListener imageListener,
            int maxWidth, int maxHeight) {
        return get(requestUrl, imageListener, maxWidth, maxHeight, ScaleType.CENTER_INSIDE);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/volley/revisions/rev_0d6df2e_331e52b/rev_0d6df2e-331e52b/src/main/java/com/android/volley/toolbox/ImageRequest.java;<<<<<<< MINE
        super(Method.GET, url, errorListener); 
        setRetryPolicy(
                new DefaultRetryPolicy(IMAGE_TIMEOUT_MS, IMAGE_MAX_RETRIES, IMAGE_BACKOFF_MULT));
=======
        super(Method.GET, url, errorListener);
        setRetryPolicy(new DefaultRetryPolicy(DEFAULT_IMAGE_TIMEOUT_MS, DEFAULT_IMAGE_MAX_RETRIES,
                DEFAULT_IMAGE_BACKOFF_MULT));
>>>>>>> YOURS
